(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["vendor"],{

/***/ "../node_modules/@vue/devtools/build/backend.js":
/***/ (function(module, exports, __webpack_require__) {

/******/
(function (modules) {
  // webpackBootstrap

  /******/
  // The module cache

  /******/
  var installedModules = {};
  /******/

  /******/
  // The require function

  /******/

  function __webpack_require__(moduleId) {
    /******/

    /******/
    // Check if module is in cache

    /******/
    if (installedModules[moduleId]) {
      /******/
      return installedModules[moduleId].exports;
      /******/
    }
    /******/
    // Create a new module (and put it into the cache)

    /******/


    var module = installedModules[moduleId] = {
      /******/
      i: moduleId,

      /******/
      l: false,

      /******/
      exports: {}
      /******/

    };
    /******/

    /******/
    // Execute the module function

    /******/

    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/

    /******/
    // Flag the module as loaded

    /******/

    module.l = true;
    /******/

    /******/
    // Return the exports of the module

    /******/

    return module.exports;
    /******/
  }
  /******/

  /******/

  /******/
  // expose the modules object (__webpack_modules__)

  /******/


  __webpack_require__.m = modules;
  /******/

  /******/
  // expose the module cache

  /******/

  __webpack_require__.c = installedModules;
  /******/

  /******/
  // define getter function for harmony exports

  /******/

  __webpack_require__.d = function (exports, name, getter) {
    /******/
    if (!__webpack_require__.o(exports, name)) {
      /******/
      Object.defineProperty(exports, name, {
        enumerable: true,
        get: getter
      });
      /******/
    }
    /******/

  };
  /******/

  /******/
  // define __esModule on exports

  /******/


  __webpack_require__.r = function (exports) {
    /******/
    if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
      /******/
      Object.defineProperty(exports, Symbol.toStringTag, {
        value: 'Module'
      });
      /******/
    }
    /******/


    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    /******/
  };
  /******/

  /******/
  // create a fake namespace object

  /******/
  // mode & 1: value is a module id, require it

  /******/
  // mode & 2: merge all properties of value into the ns

  /******/
  // mode & 4: return value when already ns object

  /******/
  // mode & 8|1: behave like require

  /******/


  __webpack_require__.t = function (value, mode) {
    /******/
    if (mode & 1) value = __webpack_require__(value);
    /******/

    if (mode & 8) return value;
    /******/

    if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;
    /******/

    var ns = Object.create(null);
    /******/

    __webpack_require__.r(ns);
    /******/


    Object.defineProperty(ns, 'default', {
      enumerable: true,
      value: value
    });
    /******/

    if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {
      return value[key];
    }.bind(null, key));
    /******/

    return ns;
    /******/
  };
  /******/

  /******/
  // getDefaultExport function for compatibility with non-harmony modules

  /******/


  __webpack_require__.n = function (module) {
    /******/
    var getter = module && module.__esModule ?
    /******/
    function getDefault() {
      return module['default'];
    } :
    /******/
    function getModuleExports() {
      return module;
    };
    /******/

    __webpack_require__.d(getter, 'a', getter);
    /******/


    return getter;
    /******/
  };
  /******/

  /******/
  // Object.prototype.hasOwnProperty.call

  /******/


  __webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/

  /******/
  // __webpack_public_path__

  /******/


  __webpack_require__.p = "/build/";
  /******/

  /******/

  /******/
  // Load entry module and return exports

  /******/

  return __webpack_require__(__webpack_require__.s = "./src/backend.js");
  /******/
})(
/************************************************************************/

/******/
{
  /***/
  "../../node_modules/vue/dist/vue.runtime.esm.js":
  /*!**********************************************************************************!*\
    !*** /home/akryum/Projets/vue-devtools/node_modules/vue/dist/vue.runtime.esm.js ***!
    \**********************************************************************************/

  /*! exports provided: default */

  /***/
  function node_modulesVueDistVueRuntimeEsmJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* WEBPACK VAR INJECTION */


    (function (global, setImmediate) {
      /*!
      * Vue.js v2.5.17
      * (c) 2014-2018 Evan You
      * Released under the MIT License.
      */

      /*  */
      var emptyObject = Object.freeze({}); // these helpers produces better vm code in JS engines due to their
      // explicitness and function inlining

      function isUndef(v) {
        return v === undefined || v === null;
      }

      function isDef(v) {
        return v !== undefined && v !== null;
      }

      function isTrue(v) {
        return v === true;
      }

      function isFalse(v) {
        return v === false;
      }
      /**
       * Check if value is primitive
       */


      function isPrimitive(value) {
        return typeof value === 'string' || typeof value === 'number' || // $flow-disable-line
        typeof value === 'symbol' || typeof value === 'boolean';
      }
      /**
       * Quick object check - this is primarily used to tell
       * Objects from primitive values when we know the value
       * is a JSON-compliant type.
       */


      function isObject(obj) {
        return obj !== null && typeof obj === 'object';
      }
      /**
       * Get the raw type string of a value e.g. [object Object]
       */


      var _toString = Object.prototype.toString;

      function toRawType(value) {
        return _toString.call(value).slice(8, -1);
      }
      /**
       * Strict object type check. Only returns true
       * for plain JavaScript objects.
       */


      function isPlainObject(obj) {
        return _toString.call(obj) === '[object Object]';
      }

      function isRegExp(v) {
        return _toString.call(v) === '[object RegExp]';
      }
      /**
       * Check if val is a valid array index.
       */


      function isValidArrayIndex(val) {
        var n = parseFloat(String(val));
        return n >= 0 && Math.floor(n) === n && isFinite(val);
      }
      /**
       * Convert a value to a string that is actually rendered.
       */


      function toString(val) {
        return val == null ? '' : typeof val === 'object' ? JSON.stringify(val, null, 2) : String(val);
      }
      /**
       * Convert a input value to a number for persistence.
       * If the conversion fails, return original string.
       */


      function toNumber(val) {
        var n = parseFloat(val);
        return isNaN(n) ? val : n;
      }
      /**
       * Make a map and return a function for checking if a key
       * is in that map.
       */


      function makeMap(str, expectsLowerCase) {
        var map = Object.create(null);
        var list = str.split(',');

        for (var i = 0; i < list.length; i++) {
          map[list[i]] = true;
        }

        return expectsLowerCase ? function (val) {
          return map[val.toLowerCase()];
        } : function (val) {
          return map[val];
        };
      }
      /**
       * Check if a tag is a built-in tag.
       */


      var isBuiltInTag = makeMap('slot,component', true);
      /**
       * Check if a attribute is a reserved attribute.
       */

      var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');
      /**
       * Remove an item from an array
       */

      function remove(arr, item) {
        if (arr.length) {
          var index = arr.indexOf(item);

          if (index > -1) {
            return arr.splice(index, 1);
          }
        }
      }
      /**
       * Check whether the object has the property.
       */


      var hasOwnProperty = Object.prototype.hasOwnProperty;

      function hasOwn(obj, key) {
        return hasOwnProperty.call(obj, key);
      }
      /**
       * Create a cached version of a pure function.
       */


      function cached(fn) {
        var cache = Object.create(null);
        return function cachedFn(str) {
          var hit = cache[str];
          return hit || (cache[str] = fn(str));
        };
      }
      /**
       * Camelize a hyphen-delimited string.
       */


      var camelizeRE = /-(\w)/g;
      var camelize = cached(function (str) {
        return str.replace(camelizeRE, function (_, c) {
          return c ? c.toUpperCase() : '';
        });
      });
      /**
       * Capitalize a string.
       */

      var capitalize = cached(function (str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
      });
      /**
       * Hyphenate a camelCase string.
       */

      var hyphenateRE = /\B([A-Z])/g;
      var hyphenate = cached(function (str) {
        return str.replace(hyphenateRE, '-$1').toLowerCase();
      });
      /**
       * Simple bind polyfill for environments that do not support it... e.g.
       * PhantomJS 1.x. Technically we don't need this anymore since native bind is
       * now more performant in most browsers, but removing it would be breaking for
       * code that was able to run in PhantomJS 1.x, so this must be kept for
       * backwards compatibility.
       */

      /* istanbul ignore next */

      function polyfillBind(fn, ctx) {
        function boundFn(a) {
          var l = arguments.length;
          return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
        }

        boundFn._length = fn.length;
        return boundFn;
      }

      function nativeBind(fn, ctx) {
        return fn.bind(ctx);
      }

      var bind = Function.prototype.bind ? nativeBind : polyfillBind;
      /**
       * Convert an Array-like object to a real Array.
       */

      function toArray(list, start) {
        start = start || 0;
        var i = list.length - start;
        var ret = new Array(i);

        while (i--) {
          ret[i] = list[i + start];
        }

        return ret;
      }
      /**
       * Mix properties into target object.
       */


      function extend(to, _from) {
        for (var key in _from) {
          to[key] = _from[key];
        }

        return to;
      }
      /**
       * Merge an Array of Objects into a single Object.
       */


      function toObject(arr) {
        var res = {};

        for (var i = 0; i < arr.length; i++) {
          if (arr[i]) {
            extend(res, arr[i]);
          }
        }

        return res;
      }
      /**
       * Perform no operation.
       * Stubbing args to make Flow happy without leaving useless transpiled code
       * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)
       */


      function noop(a, b, c) {}
      /**
       * Always return false.
       */


      var no = function no(a, b, c) {
        return false;
      };
      /**
       * Return same value
       */


      var identity = function identity(_) {
        return _;
      };
      /**
       * Generate a static keys string from compiler modules.
       */

      /**
       * Check if two values are loosely equal - that is,
       * if they are plain objects, do they have the same shape?
       */


      function looseEqual(a, b) {
        if (a === b) {
          return true;
        }

        var isObjectA = isObject(a);
        var isObjectB = isObject(b);

        if (isObjectA && isObjectB) {
          try {
            var isArrayA = Array.isArray(a);
            var isArrayB = Array.isArray(b);

            if (isArrayA && isArrayB) {
              return a.length === b.length && a.every(function (e, i) {
                return looseEqual(e, b[i]);
              });
            } else if (!isArrayA && !isArrayB) {
              var keysA = Object.keys(a);
              var keysB = Object.keys(b);
              return keysA.length === keysB.length && keysA.every(function (key) {
                return looseEqual(a[key], b[key]);
              });
            } else {
              /* istanbul ignore next */
              return false;
            }
          } catch (e) {
            /* istanbul ignore next */
            return false;
          }
        } else if (!isObjectA && !isObjectB) {
          return String(a) === String(b);
        } else {
          return false;
        }
      }

      function looseIndexOf(arr, val) {
        for (var i = 0; i < arr.length; i++) {
          if (looseEqual(arr[i], val)) {
            return i;
          }
        }

        return -1;
      }
      /**
       * Ensure a function is called only once.
       */


      function once(fn) {
        var called = false;
        return function () {
          if (!called) {
            called = true;
            fn.apply(this, arguments);
          }
        };
      }

      var SSR_ATTR = 'data-server-rendered';
      var ASSET_TYPES = ['component', 'directive', 'filter'];
      var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated', 'errorCaptured'];
      /*  */

      var config = {
        /**
         * Option merge strategies (used in core/util/options)
         */
        // $flow-disable-line
        optionMergeStrategies: Object.create(null),

        /**
         * Whether to suppress warnings.
         */
        silent: false,

        /**
         * Show production mode tip message on boot?
         */
        productionTip: "development" !== 'production',

        /**
         * Whether to enable devtools
         */
        devtools: "development" !== 'production',

        /**
         * Whether to record perf
         */
        performance: false,

        /**
         * Error handler for watcher errors
         */
        errorHandler: null,

        /**
         * Warn handler for watcher warns
         */
        warnHandler: null,

        /**
         * Ignore certain custom elements
         */
        ignoredElements: [],

        /**
         * Custom user key aliases for v-on
         */
        // $flow-disable-line
        keyCodes: Object.create(null),

        /**
         * Check if a tag is reserved so that it cannot be registered as a
         * component. This is platform-dependent and may be overwritten.
         */
        isReservedTag: no,

        /**
         * Check if an attribute is reserved so that it cannot be used as a component
         * prop. This is platform-dependent and may be overwritten.
         */
        isReservedAttr: no,

        /**
         * Check if a tag is an unknown element.
         * Platform-dependent.
         */
        isUnknownElement: no,

        /**
         * Get the namespace of an element
         */
        getTagNamespace: noop,

        /**
         * Parse the real tag name for the specific platform.
         */
        parsePlatformTagName: identity,

        /**
         * Check if an attribute must be bound using property, e.g. value
         * Platform-dependent.
         */
        mustUseProp: no,

        /**
         * Exposed for legacy reasons
         */
        _lifecycleHooks: LIFECYCLE_HOOKS
      };
      /*  */

      /**
       * Check if a string starts with $ or _
       */

      function isReserved(str) {
        var c = (str + '').charCodeAt(0);
        return c === 0x24 || c === 0x5F;
      }
      /**
       * Define a property.
       */


      function def(obj, key, val, enumerable) {
        Object.defineProperty(obj, key, {
          value: val,
          enumerable: !!enumerable,
          writable: true,
          configurable: true
        });
      }
      /**
       * Parse simple path.
       */


      var bailRE = /[^\w.$]/;

      function parsePath(path) {
        if (bailRE.test(path)) {
          return;
        }

        var segments = path.split('.');
        return function (obj) {
          for (var i = 0; i < segments.length; i++) {
            if (!obj) {
              return;
            }

            obj = obj[segments[i]];
          }

          return obj;
        };
      }
      /*  */
      // can we use __proto__?


      var hasProto = '__proto__' in {}; // Browser environment sniffing

      var inBrowser = typeof window !== 'undefined';
      var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
      var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
      var UA = inBrowser && window.navigator.userAgent.toLowerCase();
      var isIE = UA && /msie|trident/.test(UA);
      var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
      var isEdge = UA && UA.indexOf('edge/') > 0;
      var isAndroid = UA && UA.indexOf('android') > 0 || weexPlatform === 'android';
      var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === 'ios';
      var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge; // Firefox has a "watch" function on Object.prototype...

      var nativeWatch = {}.watch;
      var supportsPassive = false;

      if (inBrowser) {
        try {
          var opts = {};
          Object.defineProperty(opts, 'passive', {
            get: function get() {
              /* istanbul ignore next */
              supportsPassive = true;
            }
          }); // https://github.com/facebook/flow/issues/285

          window.addEventListener('test-passive', null, opts);
        } catch (e) {}
      } // this needs to be lazy-evaled because vue may be required before
      // vue-server-renderer can set VUE_ENV


      var _isServer;

      var isServerRendering = function isServerRendering() {
        if (_isServer === undefined) {
          /* istanbul ignore if */
          if (!inBrowser && !inWeex && typeof global !== 'undefined') {
            // detect presence of vue-server-renderer and avoid
            // Webpack shimming the process
            _isServer = global['process'].env.VUE_ENV === 'server';
          } else {
            _isServer = false;
          }
        }

        return _isServer;
      }; // detect devtools


      var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
      /* istanbul ignore next */

      function isNative(Ctor) {
        return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
      }

      var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

      var _Set;
      /* istanbul ignore if */
      // $flow-disable-line


      if (typeof Set !== 'undefined' && isNative(Set)) {
        // use native Set when available.
        _Set = Set;
      } else {
        // a non-standard Set polyfill that only works with primitive keys.
        _Set = function () {
          function Set() {
            this.set = Object.create(null);
          }

          Set.prototype.has = function has(key) {
            return this.set[key] === true;
          };

          Set.prototype.add = function add(key) {
            this.set[key] = true;
          };

          Set.prototype.clear = function clear() {
            this.set = Object.create(null);
          };

          return Set;
        }();
      }
      /*  */


      var warn = noop;
      var tip = noop;
      var generateComponentTrace = noop; // work around flow check

      var formatComponentName = noop;

      if (true) {
        var hasConsole = typeof console !== 'undefined';
        var classifyRE = /(?:^|[-_])(\w)/g;

        var classify = function classify(str) {
          return str.replace(classifyRE, function (c) {
            return c.toUpperCase();
          }).replace(/[-_]/g, '');
        };

        warn = function warn(msg, vm) {
          var trace = vm ? generateComponentTrace(vm) : '';

          if (config.warnHandler) {
            config.warnHandler.call(null, msg, vm, trace);
          } else if (hasConsole && !config.silent) {
            console.error("[Vue warn]: " + msg + trace);
          }
        };

        tip = function tip(msg, vm) {
          if (hasConsole && !config.silent) {
            console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
          }
        };

        formatComponentName = function formatComponentName(vm, includeFile) {
          if (vm.$root === vm) {
            return '<Root>';
          }

          var options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm || {};
          var name = options.name || options._componentTag;
          var file = options.__file;

          if (!name && file) {
            var match = file.match(/([^/\\]+)\.vue$/);
            name = match && match[1];
          }

          return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
        };

        var repeat = function repeat(str, n) {
          var res = '';

          while (n) {
            if (n % 2 === 1) {
              res += str;
            }

            if (n > 1) {
              str += str;
            }

            n >>= 1;
          }

          return res;
        };

        generateComponentTrace = function generateComponentTrace(vm) {
          if (vm._isVue && vm.$parent) {
            var tree = [];
            var currentRecursiveSequence = 0;

            while (vm) {
              if (tree.length > 0) {
                var last = tree[tree.length - 1];

                if (last.constructor === vm.constructor) {
                  currentRecursiveSequence++;
                  vm = vm.$parent;
                  continue;
                } else if (currentRecursiveSequence > 0) {
                  tree[tree.length - 1] = [last, currentRecursiveSequence];
                  currentRecursiveSequence = 0;
                }
              }

              tree.push(vm);
              vm = vm.$parent;
            }

            return '\n\nfound in\n\n' + tree.map(function (vm, i) {
              return "" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
            }).join('\n');
          } else {
            return "\n\n(found in " + formatComponentName(vm) + ")";
          }
        };
      }
      /*  */


      var uid = 0;
      /**
       * A dep is an observable that can have multiple
       * directives subscribing to it.
       */

      var Dep = function Dep() {
        this.id = uid++;
        this.subs = [];
      };

      Dep.prototype.addSub = function addSub(sub) {
        this.subs.push(sub);
      };

      Dep.prototype.removeSub = function removeSub(sub) {
        remove(this.subs, sub);
      };

      Dep.prototype.depend = function depend() {
        if (Dep.target) {
          Dep.target.addDep(this);
        }
      };

      Dep.prototype.notify = function notify() {
        // stabilize the subscriber list first
        var subs = this.subs.slice();

        for (var i = 0, l = subs.length; i < l; i++) {
          subs[i].update();
        }
      }; // the current target watcher being evaluated.
      // this is globally unique because there could be only one
      // watcher being evaluated at any time.


      Dep.target = null;
      var targetStack = [];

      function pushTarget(_target) {
        if (Dep.target) {
          targetStack.push(Dep.target);
        }

        Dep.target = _target;
      }

      function popTarget() {
        Dep.target = targetStack.pop();
      }
      /*  */


      var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
        this.tag = tag;
        this.data = data;
        this.children = children;
        this.text = text;
        this.elm = elm;
        this.ns = undefined;
        this.context = context;
        this.fnContext = undefined;
        this.fnOptions = undefined;
        this.fnScopeId = undefined;
        this.key = data && data.key;
        this.componentOptions = componentOptions;
        this.componentInstance = undefined;
        this.parent = undefined;
        this.raw = false;
        this.isStatic = false;
        this.isRootInsert = true;
        this.isComment = false;
        this.isCloned = false;
        this.isOnce = false;
        this.asyncFactory = asyncFactory;
        this.asyncMeta = undefined;
        this.isAsyncPlaceholder = false;
      };

      var prototypeAccessors = {
        child: {
          configurable: true
        }
      }; // DEPRECATED: alias for componentInstance for backwards compat.

      /* istanbul ignore next */

      prototypeAccessors.child.get = function () {
        return this.componentInstance;
      };

      Object.defineProperties(VNode.prototype, prototypeAccessors);

      var createEmptyVNode = function createEmptyVNode(text) {
        if (text === void 0) text = '';
        var node = new VNode();
        node.text = text;
        node.isComment = true;
        return node;
      };

      function createTextVNode(val) {
        return new VNode(undefined, undefined, undefined, String(val));
      } // optimized shallow clone
      // used for static nodes and slot nodes because they may be reused across
      // multiple renders, cloning them avoids errors when DOM manipulations rely
      // on their elm reference.


      function cloneVNode(vnode) {
        var cloned = new VNode(vnode.tag, vnode.data, vnode.children, vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
        cloned.ns = vnode.ns;
        cloned.isStatic = vnode.isStatic;
        cloned.key = vnode.key;
        cloned.isComment = vnode.isComment;
        cloned.fnContext = vnode.fnContext;
        cloned.fnOptions = vnode.fnOptions;
        cloned.fnScopeId = vnode.fnScopeId;
        cloned.isCloned = true;
        return cloned;
      }
      /*
       * not type checking this file because flow doesn't play well with
       * dynamically accessing methods on Array prototype
       */


      var arrayProto = Array.prototype;
      var arrayMethods = Object.create(arrayProto);
      var methodsToPatch = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];
      /**
       * Intercept mutating methods and emit events
       */

      methodsToPatch.forEach(function (method) {
        // cache original method
        var original = arrayProto[method];
        def(arrayMethods, method, function mutator() {
          var args = [],
              len = arguments.length;

          while (len--) args[len] = arguments[len];

          var result = original.apply(this, args);
          var ob = this.__ob__;
          var inserted;

          switch (method) {
            case 'push':
            case 'unshift':
              inserted = args;
              break;

            case 'splice':
              inserted = args.slice(2);
              break;
          }

          if (inserted) {
            ob.observeArray(inserted);
          } // notify change


          ob.dep.notify();
          return result;
        });
      });
      /*  */

      var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
      /**
       * In some cases we may want to disable observation inside a component's
       * update computation.
       */

      var shouldObserve = true;

      function toggleObserving(value) {
        shouldObserve = value;
      }
      /**
       * Observer class that is attached to each observed
       * object. Once attached, the observer converts the target
       * object's property keys into getter/setters that
       * collect dependencies and dispatch updates.
       */


      var Observer = function Observer(value) {
        this.value = value;
        this.dep = new Dep();
        this.vmCount = 0;
        def(value, '__ob__', this);

        if (Array.isArray(value)) {
          var augment = hasProto ? protoAugment : copyAugment;
          augment(value, arrayMethods, arrayKeys);
          this.observeArray(value);
        } else {
          this.walk(value);
        }
      };
      /**
       * Walk through each property and convert them into
       * getter/setters. This method should only be called when
       * value type is Object.
       */


      Observer.prototype.walk = function walk(obj) {
        var keys = Object.keys(obj);

        for (var i = 0; i < keys.length; i++) {
          defineReactive(obj, keys[i]);
        }
      };
      /**
       * Observe a list of Array items.
       */


      Observer.prototype.observeArray = function observeArray(items) {
        for (var i = 0, l = items.length; i < l; i++) {
          observe(items[i]);
        }
      }; // helpers

      /**
       * Augment an target Object or Array by intercepting
       * the prototype chain using __proto__
       */


      function protoAugment(target, src, keys) {
        /* eslint-disable no-proto */
        target.__proto__ = src;
        /* eslint-enable no-proto */
      }
      /**
       * Augment an target Object or Array by defining
       * hidden properties.
       */

      /* istanbul ignore next */


      function copyAugment(target, src, keys) {
        for (var i = 0, l = keys.length; i < l; i++) {
          var key = keys[i];
          def(target, key, src[key]);
        }
      }
      /**
       * Attempt to create an observer instance for a value,
       * returns the new observer if successfully observed,
       * or the existing observer if the value already has one.
       */


      function observe(value, asRootData) {
        if (!isObject(value) || value instanceof VNode) {
          return;
        }

        var ob;

        if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
          ob = value.__ob__;
        } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
          ob = new Observer(value);
        }

        if (asRootData && ob) {
          ob.vmCount++;
        }

        return ob;
      }
      /**
       * Define a reactive property on an Object.
       */


      function defineReactive(obj, key, val, customSetter, shallow) {
        var dep = new Dep();
        var property = Object.getOwnPropertyDescriptor(obj, key);

        if (property && property.configurable === false) {
          return;
        } // cater for pre-defined getter/setters


        var getter = property && property.get;

        if (!getter && arguments.length === 2) {
          val = obj[key];
        }

        var setter = property && property.set;
        var childOb = !shallow && observe(val);
        Object.defineProperty(obj, key, {
          enumerable: true,
          configurable: true,
          get: function reactiveGetter() {
            var value = getter ? getter.call(obj) : val;

            if (Dep.target) {
              dep.depend();

              if (childOb) {
                childOb.dep.depend();

                if (Array.isArray(value)) {
                  dependArray(value);
                }
              }
            }

            return value;
          },
          set: function reactiveSetter(newVal) {
            var value = getter ? getter.call(obj) : val;
            /* eslint-disable no-self-compare */

            if (newVal === value || newVal !== newVal && value !== value) {
              return;
            }
            /* eslint-enable no-self-compare */


            if ( true && customSetter) {
              customSetter();
            }

            if (setter) {
              setter.call(obj, newVal);
            } else {
              val = newVal;
            }

            childOb = !shallow && observe(newVal);
            dep.notify();
          }
        });
      }
      /**
       * Set a property on an object. Adds the new property and
       * triggers change notification if the property doesn't
       * already exist.
       */


      function set(target, key, val) {
        if ( true && (isUndef(target) || isPrimitive(target))) {
          warn("Cannot set reactive property on undefined, null, or primitive value: " + target);
        }

        if (Array.isArray(target) && isValidArrayIndex(key)) {
          target.length = Math.max(target.length, key);
          target.splice(key, 1, val);
          return val;
        }

        if (key in target && !(key in Object.prototype)) {
          target[key] = val;
          return val;
        }

        var ob = target.__ob__;

        if (target._isVue || ob && ob.vmCount) {
           true && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
          return val;
        }

        if (!ob) {
          target[key] = val;
          return val;
        }

        defineReactive(ob.value, key, val);
        ob.dep.notify();
        return val;
      }
      /**
       * Delete a property and trigger change if necessary.
       */


      function del(target, key) {
        if ( true && (isUndef(target) || isPrimitive(target))) {
          warn("Cannot delete reactive property on undefined, null, or primitive value: " + target);
        }

        if (Array.isArray(target) && isValidArrayIndex(key)) {
          target.splice(key, 1);
          return;
        }

        var ob = target.__ob__;

        if (target._isVue || ob && ob.vmCount) {
           true && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
          return;
        }

        if (!hasOwn(target, key)) {
          return;
        }

        delete target[key];

        if (!ob) {
          return;
        }

        ob.dep.notify();
      }
      /**
       * Collect dependencies on array elements when the array is touched, since
       * we cannot intercept array element access like property getters.
       */


      function dependArray(value) {
        for (var e = void 0, i = 0, l = value.length; i < l; i++) {
          e = value[i];
          e && e.__ob__ && e.__ob__.dep.depend();

          if (Array.isArray(e)) {
            dependArray(e);
          }
        }
      }
      /*  */

      /**
       * Option overwriting strategies are functions that handle
       * how to merge a parent option value and a child option
       * value into the final value.
       */


      var strats = config.optionMergeStrategies;
      /**
       * Options with restrictions
       */

      if (true) {
        strats.el = strats.propsData = function (parent, child, vm, key) {
          if (!vm) {
            warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
          }

          return defaultStrat(parent, child);
        };
      }
      /**
       * Helper that recursively merges two data objects together.
       */


      function mergeData(to, from) {
        if (!from) {
          return to;
        }

        var key, toVal, fromVal;
        var keys = Object.keys(from);

        for (var i = 0; i < keys.length; i++) {
          key = keys[i];
          toVal = to[key];
          fromVal = from[key];

          if (!hasOwn(to, key)) {
            set(to, key, fromVal);
          } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {
            mergeData(toVal, fromVal);
          }
        }

        return to;
      }
      /**
       * Data
       */


      function mergeDataOrFn(parentVal, childVal, vm) {
        if (!vm) {
          // in a Vue.extend merge, both should be functions
          if (!childVal) {
            return parentVal;
          }

          if (!parentVal) {
            return childVal;
          } // when parentVal & childVal are both present,
          // we need to return a function that returns the
          // merged result of both functions... no need to
          // check if parentVal is a function here because
          // it has to be a function to pass previous merges.


          return function mergedDataFn() {
            return mergeData(typeof childVal === 'function' ? childVal.call(this, this) : childVal, typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal);
          };
        } else {
          return function mergedInstanceDataFn() {
            // instance merge
            var instanceData = typeof childVal === 'function' ? childVal.call(vm, vm) : childVal;
            var defaultData = typeof parentVal === 'function' ? parentVal.call(vm, vm) : parentVal;

            if (instanceData) {
              return mergeData(instanceData, defaultData);
            } else {
              return defaultData;
            }
          };
        }
      }

      strats.data = function (parentVal, childVal, vm) {
        if (!vm) {
          if (childVal && typeof childVal !== 'function') {
             true && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
            return parentVal;
          }

          return mergeDataOrFn(parentVal, childVal);
        }

        return mergeDataOrFn(parentVal, childVal, vm);
      };
      /**
       * Hooks and props are merged as arrays.
       */


      function mergeHook(parentVal, childVal) {
        return childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
      }

      LIFECYCLE_HOOKS.forEach(function (hook) {
        strats[hook] = mergeHook;
      });
      /**
       * Assets
       *
       * When a vm is present (instance creation), we need to do
       * a three-way merge between constructor options, instance
       * options and parent options.
       */

      function mergeAssets(parentVal, childVal, vm, key) {
        var res = Object.create(parentVal || null);

        if (childVal) {
           true && assertObjectType(key, childVal, vm);
          return extend(res, childVal);
        } else {
          return res;
        }
      }

      ASSET_TYPES.forEach(function (type) {
        strats[type + 's'] = mergeAssets;
      });
      /**
       * Watchers.
       *
       * Watchers hashes should not overwrite one
       * another, so we merge them as arrays.
       */

      strats.watch = function (parentVal, childVal, vm, key) {
        // work around Firefox's Object.prototype.watch...
        if (parentVal === nativeWatch) {
          parentVal = undefined;
        }

        if (childVal === nativeWatch) {
          childVal = undefined;
        }
        /* istanbul ignore if */


        if (!childVal) {
          return Object.create(parentVal || null);
        }

        if (true) {
          assertObjectType(key, childVal, vm);
        }

        if (!parentVal) {
          return childVal;
        }

        var ret = {};
        extend(ret, parentVal);

        for (var key$1 in childVal) {
          var parent = ret[key$1];
          var child = childVal[key$1];

          if (parent && !Array.isArray(parent)) {
            parent = [parent];
          }

          ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
        }

        return ret;
      };
      /**
       * Other object hashes.
       */


      strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal, vm, key) {
        if (childVal && "development" !== 'production') {
          assertObjectType(key, childVal, vm);
        }

        if (!parentVal) {
          return childVal;
        }

        var ret = Object.create(null);
        extend(ret, parentVal);

        if (childVal) {
          extend(ret, childVal);
        }

        return ret;
      };

      strats.provide = mergeDataOrFn;
      /**
       * Default strategy.
       */

      var defaultStrat = function defaultStrat(parentVal, childVal) {
        return childVal === undefined ? parentVal : childVal;
      };
      /**
       * Validate component names
       */


      function checkComponents(options) {
        for (var key in options.components) {
          validateComponentName(key);
        }
      }

      function validateComponentName(name) {
        if (!/^[a-zA-Z][\w-]*$/.test(name)) {
          warn('Invalid component name: "' + name + '". Component names ' + 'can only contain alphanumeric characters and the hyphen, ' + 'and must start with a letter.');
        }

        if (isBuiltInTag(name) || config.isReservedTag(name)) {
          warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + name);
        }
      }
      /**
       * Ensure all props option syntax are normalized into the
       * Object-based format.
       */


      function normalizeProps(options, vm) {
        var props = options.props;

        if (!props) {
          return;
        }

        var res = {};
        var i, val, name;

        if (Array.isArray(props)) {
          i = props.length;

          while (i--) {
            val = props[i];

            if (typeof val === 'string') {
              name = camelize(val);
              res[name] = {
                type: null
              };
            } else if (true) {
              warn('props must be strings when using array syntax.');
            }
          }
        } else if (isPlainObject(props)) {
          for (var key in props) {
            val = props[key];
            name = camelize(key);
            res[name] = isPlainObject(val) ? val : {
              type: val
            };
          }
        } else if (true) {
          warn("Invalid value for option \"props\": expected an Array or an Object, " + "but got " + toRawType(props) + ".", vm);
        }

        options.props = res;
      }
      /**
       * Normalize all injections into Object-based format
       */


      function normalizeInject(options, vm) {
        var inject = options.inject;

        if (!inject) {
          return;
        }

        var normalized = options.inject = {};

        if (Array.isArray(inject)) {
          for (var i = 0; i < inject.length; i++) {
            normalized[inject[i]] = {
              from: inject[i]
            };
          }
        } else if (isPlainObject(inject)) {
          for (var key in inject) {
            var val = inject[key];
            normalized[key] = isPlainObject(val) ? extend({
              from: key
            }, val) : {
              from: val
            };
          }
        } else if (true) {
          warn("Invalid value for option \"inject\": expected an Array or an Object, " + "but got " + toRawType(inject) + ".", vm);
        }
      }
      /**
       * Normalize raw function directives into object format.
       */


      function normalizeDirectives(options) {
        var dirs = options.directives;

        if (dirs) {
          for (var key in dirs) {
            var def = dirs[key];

            if (typeof def === 'function') {
              dirs[key] = {
                bind: def,
                update: def
              };
            }
          }
        }
      }

      function assertObjectType(name, value, vm) {
        if (!isPlainObject(value)) {
          warn("Invalid value for option \"" + name + "\": expected an Object, " + "but got " + toRawType(value) + ".", vm);
        }
      }
      /**
       * Merge two option objects into a new one.
       * Core utility used in both instantiation and inheritance.
       */


      function mergeOptions(parent, child, vm) {
        if (true) {
          checkComponents(child);
        }

        if (typeof child === 'function') {
          child = child.options;
        }

        normalizeProps(child, vm);
        normalizeInject(child, vm);
        normalizeDirectives(child);
        var extendsFrom = child.extends;

        if (extendsFrom) {
          parent = mergeOptions(parent, extendsFrom, vm);
        }

        if (child.mixins) {
          for (var i = 0, l = child.mixins.length; i < l; i++) {
            parent = mergeOptions(parent, child.mixins[i], vm);
          }
        }

        var options = {};
        var key;

        for (key in parent) {
          mergeField(key);
        }

        for (key in child) {
          if (!hasOwn(parent, key)) {
            mergeField(key);
          }
        }

        function mergeField(key) {
          var strat = strats[key] || defaultStrat;
          options[key] = strat(parent[key], child[key], vm, key);
        }

        return options;
      }
      /**
       * Resolve an asset.
       * This function is used because child instances need access
       * to assets defined in its ancestor chain.
       */


      function resolveAsset(options, type, id, warnMissing) {
        /* istanbul ignore if */
        if (typeof id !== 'string') {
          return;
        }

        var assets = options[type]; // check local registration variations first

        if (hasOwn(assets, id)) {
          return assets[id];
        }

        var camelizedId = camelize(id);

        if (hasOwn(assets, camelizedId)) {
          return assets[camelizedId];
        }

        var PascalCaseId = capitalize(camelizedId);

        if (hasOwn(assets, PascalCaseId)) {
          return assets[PascalCaseId];
        } // fallback to prototype chain


        var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];

        if ( true && warnMissing && !res) {
          warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
        }

        return res;
      }
      /*  */


      function validateProp(key, propOptions, propsData, vm) {
        var prop = propOptions[key];
        var absent = !hasOwn(propsData, key);
        var value = propsData[key]; // boolean casting

        var booleanIndex = getTypeIndex(Boolean, prop.type);

        if (booleanIndex > -1) {
          if (absent && !hasOwn(prop, 'default')) {
            value = false;
          } else if (value === '' || value === hyphenate(key)) {
            // only cast empty string / same name to boolean if
            // boolean has higher priority
            var stringIndex = getTypeIndex(String, prop.type);

            if (stringIndex < 0 || booleanIndex < stringIndex) {
              value = true;
            }
          }
        } // check default value


        if (value === undefined) {
          value = getPropDefaultValue(vm, prop, key); // since the default value is a fresh copy,
          // make sure to observe it.

          var prevShouldObserve = shouldObserve;
          toggleObserving(true);
          observe(value);
          toggleObserving(prevShouldObserve);
        }

        if (true) {
          assertProp(prop, key, value, vm, absent);
        }

        return value;
      }
      /**
       * Get the default value of a prop.
       */


      function getPropDefaultValue(vm, prop, key) {
        // no default, return undefined
        if (!hasOwn(prop, 'default')) {
          return undefined;
        }

        var def = prop.default; // warn against non-factory defaults for Object & Array

        if ( true && isObject(def)) {
          warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
        } // the raw prop value was also undefined from previous render,
        // return previous default value to avoid unnecessary watcher trigger


        if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
          return vm._props[key];
        } // call factory function for non-Function types
        // a value is Function if its prototype is function even across different execution context


        return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
      }
      /**
       * Assert whether a prop is valid.
       */


      function assertProp(prop, name, value, vm, absent) {
        if (prop.required && absent) {
          warn('Missing required prop: "' + name + '"', vm);
          return;
        }

        if (value == null && !prop.required) {
          return;
        }

        var type = prop.type;
        var valid = !type || type === true;
        var expectedTypes = [];

        if (type) {
          if (!Array.isArray(type)) {
            type = [type];
          }

          for (var i = 0; i < type.length && !valid; i++) {
            var assertedType = assertType(value, type[i]);
            expectedTypes.push(assertedType.expectedType || '');
            valid = assertedType.valid;
          }
        }

        if (!valid) {
          warn("Invalid prop: type check failed for prop \"" + name + "\"." + " Expected " + expectedTypes.map(capitalize).join(', ') + ", got " + toRawType(value) + ".", vm);
          return;
        }

        var validator = prop.validator;

        if (validator) {
          if (!validator(value)) {
            warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
          }
        }
      }

      var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

      function assertType(value, type) {
        var valid;
        var expectedType = getType(type);

        if (simpleCheckRE.test(expectedType)) {
          var t = typeof value;
          valid = t === expectedType.toLowerCase(); // for primitive wrapper objects

          if (!valid && t === 'object') {
            valid = value instanceof type;
          }
        } else if (expectedType === 'Object') {
          valid = isPlainObject(value);
        } else if (expectedType === 'Array') {
          valid = Array.isArray(value);
        } else {
          valid = value instanceof type;
        }

        return {
          valid: valid,
          expectedType: expectedType
        };
      }
      /**
       * Use function string name to check built-in types,
       * because a simple equality check will fail when running
       * across different vms / iframes.
       */


      function getType(fn) {
        var match = fn && fn.toString().match(/^\s*function (\w+)/);
        return match ? match[1] : '';
      }

      function isSameType(a, b) {
        return getType(a) === getType(b);
      }

      function getTypeIndex(type, expectedTypes) {
        if (!Array.isArray(expectedTypes)) {
          return isSameType(expectedTypes, type) ? 0 : -1;
        }

        for (var i = 0, len = expectedTypes.length; i < len; i++) {
          if (isSameType(expectedTypes[i], type)) {
            return i;
          }
        }

        return -1;
      }
      /*  */


      function handleError(err, vm, info) {
        if (vm) {
          var cur = vm;

          while (cur = cur.$parent) {
            var hooks = cur.$options.errorCaptured;

            if (hooks) {
              for (var i = 0; i < hooks.length; i++) {
                try {
                  var capture = hooks[i].call(cur, err, vm, info) === false;

                  if (capture) {
                    return;
                  }
                } catch (e) {
                  globalHandleError(e, cur, 'errorCaptured hook');
                }
              }
            }
          }
        }

        globalHandleError(err, vm, info);
      }

      function globalHandleError(err, vm, info) {
        if (config.errorHandler) {
          try {
            return config.errorHandler.call(null, err, vm, info);
          } catch (e) {
            logError(e, null, 'config.errorHandler');
          }
        }

        logError(err, vm, info);
      }

      function logError(err, vm, info) {
        if (true) {
          warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
        }
        /* istanbul ignore else */


        if ((inBrowser || inWeex) && typeof console !== 'undefined') {
          console.error(err);
        } else {
          throw err;
        }
      }
      /*  */

      /* globals MessageChannel */


      var callbacks = [];
      var pending = false;

      function flushCallbacks() {
        pending = false;
        var copies = callbacks.slice(0);
        callbacks.length = 0;

        for (var i = 0; i < copies.length; i++) {
          copies[i]();
        }
      } // Here we have async deferring wrappers using both microtasks and (macro) tasks.
      // In < 2.4 we used microtasks everywhere, but there are some scenarios where
      // microtasks have too high a priority and fire in between supposedly
      // sequential events (e.g. #4521, #6690) or even between bubbling of the same
      // event (#6566). However, using (macro) tasks everywhere also has subtle problems
      // when state is changed right before repaint (e.g. #6813, out-in transitions).
      // Here we use microtask by default, but expose a way to force (macro) task when
      // needed (e.g. in event handlers attached by v-on).


      var microTimerFunc;
      var macroTimerFunc;
      var useMacroTask = false; // Determine (macro) task defer implementation.
      // Technically setImmediate should be the ideal choice, but it's only available
      // in IE. The only polyfill that consistently queues the callback after all DOM
      // events triggered in the same loop is by using MessageChannel.

      /* istanbul ignore if */

      if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
        macroTimerFunc = function macroTimerFunc() {
          setImmediate(flushCallbacks);
        };
      } else if (typeof MessageChannel !== 'undefined' && (isNative(MessageChannel) || // PhantomJS
      MessageChannel.toString() === '[object MessageChannelConstructor]')) {
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = flushCallbacks;

        macroTimerFunc = function macroTimerFunc() {
          port.postMessage(1);
        };
      } else {
        /* istanbul ignore next */
        macroTimerFunc = function macroTimerFunc() {
          setTimeout(flushCallbacks, 0);
        };
      } // Determine microtask defer implementation.

      /* istanbul ignore next, $flow-disable-line */


      if (typeof Promise !== 'undefined' && isNative(Promise)) {
        var p = Promise.resolve();

        microTimerFunc = function microTimerFunc() {
          p.then(flushCallbacks); // in problematic UIWebViews, Promise.then doesn't completely break, but
          // it can get stuck in a weird state where callbacks are pushed into the
          // microtask queue but the queue isn't being flushed, until the browser
          // needs to do some other work, e.g. handle a timer. Therefore we can
          // "force" the microtask queue to be flushed by adding an empty timer.

          if (isIOS) {
            setTimeout(noop);
          }
        };
      } else {
        // fallback to macro
        microTimerFunc = macroTimerFunc;
      }
      /**
       * Wrap a function so that if any code inside triggers state change,
       * the changes are queued using a (macro) task instead of a microtask.
       */


      function withMacroTask(fn) {
        return fn._withTask || (fn._withTask = function () {
          useMacroTask = true;
          var res = fn.apply(null, arguments);
          useMacroTask = false;
          return res;
        });
      }

      function nextTick(cb, ctx) {
        var _resolve;

        callbacks.push(function () {
          if (cb) {
            try {
              cb.call(ctx);
            } catch (e) {
              handleError(e, ctx, 'nextTick');
            }
          } else if (_resolve) {
            _resolve(ctx);
          }
        });

        if (!pending) {
          pending = true;

          if (useMacroTask) {
            macroTimerFunc();
          } else {
            microTimerFunc();
          }
        } // $flow-disable-line


        if (!cb && typeof Promise !== 'undefined') {
          return new Promise(function (resolve) {
            _resolve = resolve;
          });
        }
      }
      /*  */

      /* not type checking this file because flow doesn't play well with Proxy */


      var initProxy;

      if (true) {
        var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify
        );

        var warnNonPresent = function warnNonPresent(target, key) {
          warn("Property or method \"" + key + "\" is not defined on the instance but " + 'referenced during render. Make sure that this property is reactive, ' + 'either in the data option, or for class-based components, by ' + 'initializing the property. ' + 'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target);
        };

        var hasProxy = typeof Proxy !== 'undefined' && isNative(Proxy);

        if (hasProxy) {
          var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
          config.keyCodes = new Proxy(config.keyCodes, {
            set: function set(target, key, value) {
              if (isBuiltInModifier(key)) {
                warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
                return false;
              } else {
                target[key] = value;
                return true;
              }
            }
          });
        }

        var hasHandler = {
          has: function has(target, key) {
            var has = key in target;
            var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';

            if (!has && !isAllowed) {
              warnNonPresent(target, key);
            }

            return has || !isAllowed;
          }
        };
        var getHandler = {
          get: function get(target, key) {
            if (typeof key === 'string' && !(key in target)) {
              warnNonPresent(target, key);
            }

            return target[key];
          }
        };

        initProxy = function initProxy(vm) {
          if (hasProxy) {
            // determine which proxy handler to use
            var options = vm.$options;
            var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
            vm._renderProxy = new Proxy(vm, handlers);
          } else {
            vm._renderProxy = vm;
          }
        };
      }
      /*  */


      var seenObjects = new _Set();
      /**
       * Recursively traverse an object to evoke all converted
       * getters, so that every nested property inside the object
       * is collected as a "deep" dependency.
       */

      function traverse(val) {
        _traverse(val, seenObjects);

        seenObjects.clear();
      }

      function _traverse(val, seen) {
        var i, keys;
        var isA = Array.isArray(val);

        if (!isA && !isObject(val) || Object.isFrozen(val) || val instanceof VNode) {
          return;
        }

        if (val.__ob__) {
          var depId = val.__ob__.dep.id;

          if (seen.has(depId)) {
            return;
          }

          seen.add(depId);
        }

        if (isA) {
          i = val.length;

          while (i--) {
            _traverse(val[i], seen);
          }
        } else {
          keys = Object.keys(val);
          i = keys.length;

          while (i--) {
            _traverse(val[keys[i]], seen);
          }
        }
      }

      var mark;
      var measure;

      if (true) {
        var perf = inBrowser && window.performance;
        /* istanbul ignore if */

        if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
          mark = function mark(tag) {
            return perf.mark(tag);
          };

          measure = function measure(name, startTag, endTag) {
            perf.measure(name, startTag, endTag);
            perf.clearMarks(startTag);
            perf.clearMarks(endTag);
            perf.clearMeasures(name);
          };
        }
      }
      /*  */


      var normalizeEvent = cached(function (name) {
        var passive = name.charAt(0) === '&';
        name = passive ? name.slice(1) : name;
        var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first

        name = once$$1 ? name.slice(1) : name;
        var capture = name.charAt(0) === '!';
        name = capture ? name.slice(1) : name;
        return {
          name: name,
          once: once$$1,
          capture: capture,
          passive: passive
        };
      });

      function createFnInvoker(fns) {
        function invoker() {
          var arguments$1 = arguments;
          var fns = invoker.fns;

          if (Array.isArray(fns)) {
            var cloned = fns.slice();

            for (var i = 0; i < cloned.length; i++) {
              cloned[i].apply(null, arguments$1);
            }
          } else {
            // return handler return value for single handlers
            return fns.apply(null, arguments);
          }
        }

        invoker.fns = fns;
        return invoker;
      }

      function updateListeners(on, oldOn, add, remove$$1, vm) {
        var name, def, cur, old, event;

        for (name in on) {
          def = cur = on[name];
          old = oldOn[name];
          event = normalizeEvent(name);
          /* istanbul ignore if */

          if (isUndef(cur)) {
             true && warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
          } else if (isUndef(old)) {
            if (isUndef(cur.fns)) {
              cur = on[name] = createFnInvoker(cur);
            }

            add(event.name, cur, event.once, event.capture, event.passive, event.params);
          } else if (cur !== old) {
            old.fns = cur;
            on[name] = old;
          }
        }

        for (name in oldOn) {
          if (isUndef(on[name])) {
            event = normalizeEvent(name);
            remove$$1(event.name, oldOn[name], event.capture);
          }
        }
      }
      /*  */


      function mergeVNodeHook(def, hookKey, hook) {
        if (def instanceof VNode) {
          def = def.data.hook || (def.data.hook = {});
        }

        var invoker;
        var oldHook = def[hookKey];

        function wrappedHook() {
          hook.apply(this, arguments); // important: remove merged hook to ensure it's called only once
          // and prevent memory leak

          remove(invoker.fns, wrappedHook);
        }

        if (isUndef(oldHook)) {
          // no existing hook
          invoker = createFnInvoker([wrappedHook]);
        } else {
          /* istanbul ignore if */
          if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
            // already a merged invoker
            invoker = oldHook;
            invoker.fns.push(wrappedHook);
          } else {
            // existing plain hook
            invoker = createFnInvoker([oldHook, wrappedHook]);
          }
        }

        invoker.merged = true;
        def[hookKey] = invoker;
      }
      /*  */


      function extractPropsFromVNodeData(data, Ctor, tag) {
        // we are only extracting raw values here.
        // validation and default values are handled in the child
        // component itself.
        var propOptions = Ctor.options.props;

        if (isUndef(propOptions)) {
          return;
        }

        var res = {};
        var attrs = data.attrs;
        var props = data.props;

        if (isDef(attrs) || isDef(props)) {
          for (var key in propOptions) {
            var altKey = hyphenate(key);

            if (true) {
              var keyInLowerCase = key.toLowerCase();

              if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {
                tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
              }
            }

            checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
          }
        }

        return res;
      }

      function checkProp(res, hash, key, altKey, preserve) {
        if (isDef(hash)) {
          if (hasOwn(hash, key)) {
            res[key] = hash[key];

            if (!preserve) {
              delete hash[key];
            }

            return true;
          } else if (hasOwn(hash, altKey)) {
            res[key] = hash[altKey];

            if (!preserve) {
              delete hash[altKey];
            }

            return true;
          }
        }

        return false;
      }
      /*  */
      // The template compiler attempts to minimize the need for normalization by
      // statically analyzing the template at compile time.
      //
      // For plain HTML markup, normalization can be completely skipped because the
      // generated render function is guaranteed to return Array<VNode>. There are
      // two cases where extra normalization is needed:
      // 1. When the children contains components - because a functional component
      // may return an Array instead of a single root. In this case, just a simple
      // normalization is needed - if any child is an Array, we flatten the whole
      // thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
      // because functional components already normalize their own children.


      function simpleNormalizeChildren(children) {
        for (var i = 0; i < children.length; i++) {
          if (Array.isArray(children[i])) {
            return Array.prototype.concat.apply([], children);
          }
        }

        return children;
      } // 2. When the children contains constructs that always generated nested Arrays,
      // e.g. <template>, <slot>, v-for, or when the children is provided by user
      // with hand-written render functions / JSX. In such cases a full normalization
      // is needed to cater to all possible types of children values.


      function normalizeChildren(children) {
        return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
      }

      function isTextNode(node) {
        return isDef(node) && isDef(node.text) && isFalse(node.isComment);
      }

      function normalizeArrayChildren(children, nestedIndex) {
        var res = [];
        var i, c, lastIndex, last;

        for (i = 0; i < children.length; i++) {
          c = children[i];

          if (isUndef(c) || typeof c === 'boolean') {
            continue;
          }

          lastIndex = res.length - 1;
          last = res[lastIndex]; //  nested

          if (Array.isArray(c)) {
            if (c.length > 0) {
              c = normalizeArrayChildren(c, (nestedIndex || '') + "_" + i); // merge adjacent text nodes

              if (isTextNode(c[0]) && isTextNode(last)) {
                res[lastIndex] = createTextVNode(last.text + c[0].text);
                c.shift();
              }

              res.push.apply(res, c);
            }
          } else if (isPrimitive(c)) {
            if (isTextNode(last)) {
              // merge adjacent text nodes
              // this is necessary for SSR hydration because text nodes are
              // essentially merged when rendered to HTML strings
              res[lastIndex] = createTextVNode(last.text + c);
            } else if (c !== '') {
              // convert primitive to vnode
              res.push(createTextVNode(c));
            }
          } else {
            if (isTextNode(c) && isTextNode(last)) {
              // merge adjacent text nodes
              res[lastIndex] = createTextVNode(last.text + c.text);
            } else {
              // default key for nested array children (likely generated by v-for)
              if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
                c.key = "__vlist" + nestedIndex + "_" + i + "__";
              }

              res.push(c);
            }
          }
        }

        return res;
      }
      /*  */


      function ensureCtor(comp, base) {
        if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === 'Module') {
          comp = comp.default;
        }

        return isObject(comp) ? base.extend(comp) : comp;
      }

      function createAsyncPlaceholder(factory, data, context, children, tag) {
        var node = createEmptyVNode();
        node.asyncFactory = factory;
        node.asyncMeta = {
          data: data,
          context: context,
          children: children,
          tag: tag
        };
        return node;
      }

      function resolveAsyncComponent(factory, baseCtor, context) {
        if (isTrue(factory.error) && isDef(factory.errorComp)) {
          return factory.errorComp;
        }

        if (isDef(factory.resolved)) {
          return factory.resolved;
        }

        if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
          return factory.loadingComp;
        }

        if (isDef(factory.contexts)) {
          // already pending
          factory.contexts.push(context);
        } else {
          var contexts = factory.contexts = [context];
          var sync = true;

          var forceRender = function forceRender() {
            for (var i = 0, l = contexts.length; i < l; i++) {
              contexts[i].$forceUpdate();
            }
          };

          var resolve = once(function (res) {
            // cache resolved
            factory.resolved = ensureCtor(res, baseCtor); // invoke callbacks only if this is not a synchronous resolve
            // (async resolves are shimmed as synchronous during SSR)

            if (!sync) {
              forceRender();
            }
          });
          var reject = once(function (reason) {
             true && warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));

            if (isDef(factory.errorComp)) {
              factory.error = true;
              forceRender();
            }
          });
          var res = factory(resolve, reject);

          if (isObject(res)) {
            if (typeof res.then === 'function') {
              // () => Promise
              if (isUndef(factory.resolved)) {
                res.then(resolve, reject);
              }
            } else if (isDef(res.component) && typeof res.component.then === 'function') {
              res.component.then(resolve, reject);

              if (isDef(res.error)) {
                factory.errorComp = ensureCtor(res.error, baseCtor);
              }

              if (isDef(res.loading)) {
                factory.loadingComp = ensureCtor(res.loading, baseCtor);

                if (res.delay === 0) {
                  factory.loading = true;
                } else {
                  setTimeout(function () {
                    if (isUndef(factory.resolved) && isUndef(factory.error)) {
                      factory.loading = true;
                      forceRender();
                    }
                  }, res.delay || 200);
                }
              }

              if (isDef(res.timeout)) {
                setTimeout(function () {
                  if (isUndef(factory.resolved)) {
                    reject(true ? "timeout (" + res.timeout + "ms)" : undefined);
                  }
                }, res.timeout);
              }
            }
          }

          sync = false; // return in case resolved synchronously

          return factory.loading ? factory.loadingComp : factory.resolved;
        }
      }
      /*  */


      function isAsyncPlaceholder(node) {
        return node.isComment && node.asyncFactory;
      }
      /*  */


      function getFirstComponentChild(children) {
        if (Array.isArray(children)) {
          for (var i = 0; i < children.length; i++) {
            var c = children[i];

            if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
              return c;
            }
          }
        }
      }
      /*  */

      /*  */


      function initEvents(vm) {
        vm._events = Object.create(null);
        vm._hasHookEvent = false; // init parent attached events

        var listeners = vm.$options._parentListeners;

        if (listeners) {
          updateComponentListeners(vm, listeners);
        }
      }

      var target;

      function add(event, fn, once) {
        if (once) {
          target.$once(event, fn);
        } else {
          target.$on(event, fn);
        }
      }

      function remove$1(event, fn) {
        target.$off(event, fn);
      }

      function updateComponentListeners(vm, listeners, oldListeners) {
        target = vm;
        updateListeners(listeners, oldListeners || {}, add, remove$1, vm);
        target = undefined;
      }

      function eventsMixin(Vue) {
        var hookRE = /^hook:/;

        Vue.prototype.$on = function (event, fn) {
          var this$1 = this;
          var vm = this;

          if (Array.isArray(event)) {
            for (var i = 0, l = event.length; i < l; i++) {
              this$1.$on(event[i], fn);
            }
          } else {
            (vm._events[event] || (vm._events[event] = [])).push(fn); // optimize hook:event cost by using a boolean flag marked at registration
            // instead of a hash lookup

            if (hookRE.test(event)) {
              vm._hasHookEvent = true;
            }
          }

          return vm;
        };

        Vue.prototype.$once = function (event, fn) {
          var vm = this;

          function on() {
            vm.$off(event, on);
            fn.apply(vm, arguments);
          }

          on.fn = fn;
          vm.$on(event, on);
          return vm;
        };

        Vue.prototype.$off = function (event, fn) {
          var this$1 = this;
          var vm = this; // all

          if (!arguments.length) {
            vm._events = Object.create(null);
            return vm;
          } // array of events


          if (Array.isArray(event)) {
            for (var i = 0, l = event.length; i < l; i++) {
              this$1.$off(event[i], fn);
            }

            return vm;
          } // specific event


          var cbs = vm._events[event];

          if (!cbs) {
            return vm;
          }

          if (!fn) {
            vm._events[event] = null;
            return vm;
          }

          if (fn) {
            // specific handler
            var cb;
            var i$1 = cbs.length;

            while (i$1--) {
              cb = cbs[i$1];

              if (cb === fn || cb.fn === fn) {
                cbs.splice(i$1, 1);
                break;
              }
            }
          }

          return vm;
        };

        Vue.prototype.$emit = function (event) {
          var vm = this;

          if (true) {
            var lowerCaseEvent = event.toLowerCase();

            if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
              tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
            }
          }

          var cbs = vm._events[event];

          if (cbs) {
            cbs = cbs.length > 1 ? toArray(cbs) : cbs;
            var args = toArray(arguments, 1);

            for (var i = 0, l = cbs.length; i < l; i++) {
              try {
                cbs[i].apply(vm, args);
              } catch (e) {
                handleError(e, vm, "event handler for \"" + event + "\"");
              }
            }
          }

          return vm;
        };
      }
      /*  */

      /**
       * Runtime helper for resolving raw children VNodes into a slot object.
       */


      function resolveSlots(children, context) {
        var slots = {};

        if (!children) {
          return slots;
        }

        for (var i = 0, l = children.length; i < l; i++) {
          var child = children[i];
          var data = child.data; // remove slot attribute if the node is resolved as a Vue slot node

          if (data && data.attrs && data.attrs.slot) {
            delete data.attrs.slot;
          } // named slots should only be respected if the vnode was rendered in the
          // same context.


          if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
            var name = data.slot;
            var slot = slots[name] || (slots[name] = []);

            if (child.tag === 'template') {
              slot.push.apply(slot, child.children || []);
            } else {
              slot.push(child);
            }
          } else {
            (slots.default || (slots.default = [])).push(child);
          }
        } // ignore slots that contains only whitespace


        for (var name$1 in slots) {
          if (slots[name$1].every(isWhitespace)) {
            delete slots[name$1];
          }
        }

        return slots;
      }

      function isWhitespace(node) {
        return node.isComment && !node.asyncFactory || node.text === ' ';
      }

      function resolveScopedSlots(fns, // see flow/vnode
      res) {
        res = res || {};

        for (var i = 0; i < fns.length; i++) {
          if (Array.isArray(fns[i])) {
            resolveScopedSlots(fns[i], res);
          } else {
            res[fns[i].key] = fns[i].fn;
          }
        }

        return res;
      }
      /*  */


      var activeInstance = null;
      var isUpdatingChildComponent = false;

      function initLifecycle(vm) {
        var options = vm.$options; // locate first non-abstract parent

        var parent = options.parent;

        if (parent && !options.abstract) {
          while (parent.$options.abstract && parent.$parent) {
            parent = parent.$parent;
          }

          parent.$children.push(vm);
        }

        vm.$parent = parent;
        vm.$root = parent ? parent.$root : vm;
        vm.$children = [];
        vm.$refs = {};
        vm._watcher = null;
        vm._inactive = null;
        vm._directInactive = false;
        vm._isMounted = false;
        vm._isDestroyed = false;
        vm._isBeingDestroyed = false;
      }

      function lifecycleMixin(Vue) {
        Vue.prototype._update = function (vnode, hydrating) {
          var vm = this;

          if (vm._isMounted) {
            callHook(vm, 'beforeUpdate');
          }

          var prevEl = vm.$el;
          var prevVnode = vm._vnode;
          var prevActiveInstance = activeInstance;
          activeInstance = vm;
          vm._vnode = vnode; // Vue.prototype.__patch__ is injected in entry points
          // based on the rendering backend used.

          if (!prevVnode) {
            // initial render
            vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false
            /* removeOnly */
            , vm.$options._parentElm, vm.$options._refElm); // no need for the ref nodes after initial patch
            // this prevents keeping a detached DOM tree in memory (#5851)

            vm.$options._parentElm = vm.$options._refElm = null;
          } else {
            // updates
            vm.$el = vm.__patch__(prevVnode, vnode);
          }

          activeInstance = prevActiveInstance; // update __vue__ reference

          if (prevEl) {
            prevEl.__vue__ = null;
          }

          if (vm.$el) {
            vm.$el.__vue__ = vm;
          } // if parent is an HOC, update its $el as well


          if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
            vm.$parent.$el = vm.$el;
          } // updated hook is called by the scheduler to ensure that children are
          // updated in a parent's updated hook.

        };

        Vue.prototype.$forceUpdate = function () {
          var vm = this;

          if (vm._watcher) {
            vm._watcher.update();
          }
        };

        Vue.prototype.$destroy = function () {
          var vm = this;

          if (vm._isBeingDestroyed) {
            return;
          }

          callHook(vm, 'beforeDestroy');
          vm._isBeingDestroyed = true; // remove self from parent

          var parent = vm.$parent;

          if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
            remove(parent.$children, vm);
          } // teardown watchers


          if (vm._watcher) {
            vm._watcher.teardown();
          }

          var i = vm._watchers.length;

          while (i--) {
            vm._watchers[i].teardown();
          } // remove reference from data ob
          // frozen object may not have observer.


          if (vm._data.__ob__) {
            vm._data.__ob__.vmCount--;
          } // call the last hook...


          vm._isDestroyed = true; // invoke destroy hooks on current rendered tree

          vm.__patch__(vm._vnode, null); // fire destroyed hook


          callHook(vm, 'destroyed'); // turn off all instance listeners.

          vm.$off(); // remove __vue__ reference

          if (vm.$el) {
            vm.$el.__vue__ = null;
          } // release circular reference (#6759)


          if (vm.$vnode) {
            vm.$vnode.parent = null;
          }
        };
      }

      function mountComponent(vm, el, hydrating) {
        vm.$el = el;

        if (!vm.$options.render) {
          vm.$options.render = createEmptyVNode;

          if (true) {
            /* istanbul ignore if */
            if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
              warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
            } else {
              warn('Failed to mount component: template or render function not defined.', vm);
            }
          }
        }

        callHook(vm, 'beforeMount');
        var updateComponent;
        /* istanbul ignore if */

        if ( true && config.performance && mark) {
          updateComponent = function updateComponent() {
            var name = vm._name;
            var id = vm._uid;
            var startTag = "vue-perf-start:" + id;
            var endTag = "vue-perf-end:" + id;
            mark(startTag);

            var vnode = vm._render();

            mark(endTag);
            measure("vue " + name + " render", startTag, endTag);
            mark(startTag);

            vm._update(vnode, hydrating);

            mark(endTag);
            measure("vue " + name + " patch", startTag, endTag);
          };
        } else {
          updateComponent = function updateComponent() {
            vm._update(vm._render(), hydrating);
          };
        } // we set this to vm._watcher inside the watcher's constructor
        // since the watcher's initial patch may call $forceUpdate (e.g. inside child
        // component's mounted hook), which relies on vm._watcher being already defined


        new Watcher(vm, updateComponent, noop, null, true
        /* isRenderWatcher */
        );
        hydrating = false; // manually mounted instance, call mounted on self
        // mounted is called for render-created child components in its inserted hook

        if (vm.$vnode == null) {
          vm._isMounted = true;
          callHook(vm, 'mounted');
        }

        return vm;
      }

      function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
        if (true) {
          isUpdatingChildComponent = true;
        } // determine whether component has slot children
        // we need to do this before overwriting $options._renderChildren


        var hasChildren = !!(renderChildren || // has new static slots
        vm.$options._renderChildren || // has old static slots
        parentVnode.data.scopedSlots || // has new scoped slots
        vm.$scopedSlots !== emptyObject // has old scoped slots
        );
        vm.$options._parentVnode = parentVnode;
        vm.$vnode = parentVnode; // update vm's placeholder node without re-render

        if (vm._vnode) {
          // update child tree's parent
          vm._vnode.parent = parentVnode;
        }

        vm.$options._renderChildren = renderChildren; // update $attrs and $listeners hash
        // these are also reactive so they may trigger child update if the child
        // used them during render

        vm.$attrs = parentVnode.data.attrs || emptyObject;
        vm.$listeners = listeners || emptyObject; // update props

        if (propsData && vm.$options.props) {
          toggleObserving(false);
          var props = vm._props;
          var propKeys = vm.$options._propKeys || [];

          for (var i = 0; i < propKeys.length; i++) {
            var key = propKeys[i];
            var propOptions = vm.$options.props; // wtf flow?

            props[key] = validateProp(key, propOptions, propsData, vm);
          }

          toggleObserving(true); // keep a copy of raw propsData

          vm.$options.propsData = propsData;
        } // update listeners


        listeners = listeners || emptyObject;
        var oldListeners = vm.$options._parentListeners;
        vm.$options._parentListeners = listeners;
        updateComponentListeners(vm, listeners, oldListeners); // resolve slots + force update if has children

        if (hasChildren) {
          vm.$slots = resolveSlots(renderChildren, parentVnode.context);
          vm.$forceUpdate();
        }

        if (true) {
          isUpdatingChildComponent = false;
        }
      }

      function isInInactiveTree(vm) {
        while (vm && (vm = vm.$parent)) {
          if (vm._inactive) {
            return true;
          }
        }

        return false;
      }

      function activateChildComponent(vm, direct) {
        if (direct) {
          vm._directInactive = false;

          if (isInInactiveTree(vm)) {
            return;
          }
        } else if (vm._directInactive) {
          return;
        }

        if (vm._inactive || vm._inactive === null) {
          vm._inactive = false;

          for (var i = 0; i < vm.$children.length; i++) {
            activateChildComponent(vm.$children[i]);
          }

          callHook(vm, 'activated');
        }
      }

      function deactivateChildComponent(vm, direct) {
        if (direct) {
          vm._directInactive = true;

          if (isInInactiveTree(vm)) {
            return;
          }
        }

        if (!vm._inactive) {
          vm._inactive = true;

          for (var i = 0; i < vm.$children.length; i++) {
            deactivateChildComponent(vm.$children[i]);
          }

          callHook(vm, 'deactivated');
        }
      }

      function callHook(vm, hook) {
        // #7573 disable dep collection when invoking lifecycle hooks
        pushTarget();
        var handlers = vm.$options[hook];

        if (handlers) {
          for (var i = 0, j = handlers.length; i < j; i++) {
            try {
              handlers[i].call(vm);
            } catch (e) {
              handleError(e, vm, hook + " hook");
            }
          }
        }

        if (vm._hasHookEvent) {
          vm.$emit('hook:' + hook);
        }

        popTarget();
      }
      /*  */


      var MAX_UPDATE_COUNT = 100;
      var queue = [];
      var activatedChildren = [];
      var has = {};
      var circular = {};
      var waiting = false;
      var flushing = false;
      var index = 0;
      /**
       * Reset the scheduler's state.
       */

      function resetSchedulerState() {
        index = queue.length = activatedChildren.length = 0;
        has = {};

        if (true) {
          circular = {};
        }

        waiting = flushing = false;
      }
      /**
       * Flush both queues and run the watchers.
       */


      function flushSchedulerQueue() {
        flushing = true;
        var watcher, id; // Sort queue before flush.
        // This ensures that:
        // 1. Components are updated from parent to child. (because parent is always
        //    created before the child)
        // 2. A component's user watchers are run before its render watcher (because
        //    user watchers are created before the render watcher)
        // 3. If a component is destroyed during a parent component's watcher run,
        //    its watchers can be skipped.

        queue.sort(function (a, b) {
          return a.id - b.id;
        }); // do not cache length because more watchers might be pushed
        // as we run existing watchers

        for (index = 0; index < queue.length; index++) {
          watcher = queue[index];
          id = watcher.id;
          has[id] = null;
          watcher.run(); // in dev build, check and stop circular updates.

          if ( true && has[id] != null) {
            circular[id] = (circular[id] || 0) + 1;

            if (circular[id] > MAX_UPDATE_COUNT) {
              warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
              break;
            }
          }
        } // keep copies of post queues before resetting state


        var activatedQueue = activatedChildren.slice();
        var updatedQueue = queue.slice();
        resetSchedulerState(); // call component updated and activated hooks

        callActivatedHooks(activatedQueue);
        callUpdatedHooks(updatedQueue); // devtool hook

        /* istanbul ignore if */

        if (devtools && config.devtools) {
          devtools.emit('flush');
        }
      }

      function callUpdatedHooks(queue) {
        var i = queue.length;

        while (i--) {
          var watcher = queue[i];
          var vm = watcher.vm;

          if (vm._watcher === watcher && vm._isMounted) {
            callHook(vm, 'updated');
          }
        }
      }
      /**
       * Queue a kept-alive component that was activated during patch.
       * The queue will be processed after the entire tree has been patched.
       */


      function queueActivatedComponent(vm) {
        // setting _inactive to false here so that a render function can
        // rely on checking whether it's in an inactive tree (e.g. router-view)
        vm._inactive = false;
        activatedChildren.push(vm);
      }

      function callActivatedHooks(queue) {
        for (var i = 0; i < queue.length; i++) {
          queue[i]._inactive = true;
          activateChildComponent(queue[i], true
          /* true */
          );
        }
      }
      /**
       * Push a watcher into the watcher queue.
       * Jobs with duplicate IDs will be skipped unless it's
       * pushed when the queue is being flushed.
       */


      function queueWatcher(watcher) {
        var id = watcher.id;

        if (has[id] == null) {
          has[id] = true;

          if (!flushing) {
            queue.push(watcher);
          } else {
            // if already flushing, splice the watcher based on its id
            // if already past its id, it will be run next immediately.
            var i = queue.length - 1;

            while (i > index && queue[i].id > watcher.id) {
              i--;
            }

            queue.splice(i + 1, 0, watcher);
          } // queue the flush


          if (!waiting) {
            waiting = true;
            nextTick(flushSchedulerQueue);
          }
        }
      }
      /*  */


      var uid$1 = 0;
      /**
       * A watcher parses an expression, collects dependencies,
       * and fires callback when the expression value changes.
       * This is used for both the $watch() api and directives.
       */

      var Watcher = function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {
        this.vm = vm;

        if (isRenderWatcher) {
          vm._watcher = this;
        }

        vm._watchers.push(this); // options


        if (options) {
          this.deep = !!options.deep;
          this.user = !!options.user;
          this.lazy = !!options.lazy;
          this.sync = !!options.sync;
        } else {
          this.deep = this.user = this.lazy = this.sync = false;
        }

        this.cb = cb;
        this.id = ++uid$1; // uid for batching

        this.active = true;
        this.dirty = this.lazy; // for lazy watchers

        this.deps = [];
        this.newDeps = [];
        this.depIds = new _Set();
        this.newDepIds = new _Set();
        this.expression = true ? expOrFn.toString() : undefined; // parse expression for getter

        if (typeof expOrFn === 'function') {
          this.getter = expOrFn;
        } else {
          this.getter = parsePath(expOrFn);

          if (!this.getter) {
            this.getter = function () {};

             true && warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
          }
        }

        this.value = this.lazy ? undefined : this.get();
      };
      /**
       * Evaluate the getter, and re-collect dependencies.
       */


      Watcher.prototype.get = function get() {
        pushTarget(this);
        var value;
        var vm = this.vm;

        try {
          value = this.getter.call(vm, vm);
        } catch (e) {
          if (this.user) {
            handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
          } else {
            throw e;
          }
        } finally {
          // "touch" every property so they are all tracked as
          // dependencies for deep watching
          if (this.deep) {
            traverse(value);
          }

          popTarget();
          this.cleanupDeps();
        }

        return value;
      };
      /**
       * Add a dependency to this directive.
       */


      Watcher.prototype.addDep = function addDep(dep) {
        var id = dep.id;

        if (!this.newDepIds.has(id)) {
          this.newDepIds.add(id);
          this.newDeps.push(dep);

          if (!this.depIds.has(id)) {
            dep.addSub(this);
          }
        }
      };
      /**
       * Clean up for dependency collection.
       */


      Watcher.prototype.cleanupDeps = function cleanupDeps() {
        var this$1 = this;
        var i = this.deps.length;

        while (i--) {
          var dep = this$1.deps[i];

          if (!this$1.newDepIds.has(dep.id)) {
            dep.removeSub(this$1);
          }
        }

        var tmp = this.depIds;
        this.depIds = this.newDepIds;
        this.newDepIds = tmp;
        this.newDepIds.clear();
        tmp = this.deps;
        this.deps = this.newDeps;
        this.newDeps = tmp;
        this.newDeps.length = 0;
      };
      /**
       * Subscriber interface.
       * Will be called when a dependency changes.
       */


      Watcher.prototype.update = function update() {
        /* istanbul ignore else */
        if (this.lazy) {
          this.dirty = true;
        } else if (this.sync) {
          this.run();
        } else {
          queueWatcher(this);
        }
      };
      /**
       * Scheduler job interface.
       * Will be called by the scheduler.
       */


      Watcher.prototype.run = function run() {
        if (this.active) {
          var value = this.get();

          if (value !== this.value || // Deep watchers and watchers on Object/Arrays should fire even
          // when the value is the same, because the value may
          // have mutated.
          isObject(value) || this.deep) {
            // set new value
            var oldValue = this.value;
            this.value = value;

            if (this.user) {
              try {
                this.cb.call(this.vm, value, oldValue);
              } catch (e) {
                handleError(e, this.vm, "callback for watcher \"" + this.expression + "\"");
              }
            } else {
              this.cb.call(this.vm, value, oldValue);
            }
          }
        }
      };
      /**
       * Evaluate the value of the watcher.
       * This only gets called for lazy watchers.
       */


      Watcher.prototype.evaluate = function evaluate() {
        this.value = this.get();
        this.dirty = false;
      };
      /**
       * Depend on all deps collected by this watcher.
       */


      Watcher.prototype.depend = function depend() {
        var this$1 = this;
        var i = this.deps.length;

        while (i--) {
          this$1.deps[i].depend();
        }
      };
      /**
       * Remove self from all dependencies' subscriber list.
       */


      Watcher.prototype.teardown = function teardown() {
        var this$1 = this;

        if (this.active) {
          // remove self from vm's watcher list
          // this is a somewhat expensive operation so we skip it
          // if the vm is being destroyed.
          if (!this.vm._isBeingDestroyed) {
            remove(this.vm._watchers, this);
          }

          var i = this.deps.length;

          while (i--) {
            this$1.deps[i].removeSub(this$1);
          }

          this.active = false;
        }
      };
      /*  */


      var sharedPropertyDefinition = {
        enumerable: true,
        configurable: true,
        get: noop,
        set: noop
      };

      function proxy(target, sourceKey, key) {
        sharedPropertyDefinition.get = function proxyGetter() {
          return this[sourceKey][key];
        };

        sharedPropertyDefinition.set = function proxySetter(val) {
          this[sourceKey][key] = val;
        };

        Object.defineProperty(target, key, sharedPropertyDefinition);
      }

      function initState(vm) {
        vm._watchers = [];
        var opts = vm.$options;

        if (opts.props) {
          initProps(vm, opts.props);
        }

        if (opts.methods) {
          initMethods(vm, opts.methods);
        }

        if (opts.data) {
          initData(vm);
        } else {
          observe(vm._data = {}, true
          /* asRootData */
          );
        }

        if (opts.computed) {
          initComputed(vm, opts.computed);
        }

        if (opts.watch && opts.watch !== nativeWatch) {
          initWatch(vm, opts.watch);
        }
      }

      function initProps(vm, propsOptions) {
        var propsData = vm.$options.propsData || {};
        var props = vm._props = {}; // cache prop keys so that future props updates can iterate using Array
        // instead of dynamic object key enumeration.

        var keys = vm.$options._propKeys = [];
        var isRoot = !vm.$parent; // root instance props should be converted

        if (!isRoot) {
          toggleObserving(false);
        }

        var loop = function loop(key) {
          keys.push(key);
          var value = validateProp(key, propsOptions, propsData, vm);
          /* istanbul ignore else */

          if (true) {
            var hyphenatedKey = hyphenate(key);

            if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {
              warn("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop.", vm);
            }

            defineReactive(props, key, value, function () {
              if (vm.$parent && !isUpdatingChildComponent) {
                warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
              }
            });
          } else {} // static props are already proxied on the component's prototype
          // during Vue.extend(). We only need to proxy props defined at
          // instantiation here.


          if (!(key in vm)) {
            proxy(vm, "_props", key);
          }
        };

        for (var key in propsOptions) loop(key);

        toggleObserving(true);
      }

      function initData(vm) {
        var data = vm.$options.data;
        data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};

        if (!isPlainObject(data)) {
          data = {};
           true && warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
        } // proxy data on instance


        var keys = Object.keys(data);
        var props = vm.$options.props;
        var methods = vm.$options.methods;
        var i = keys.length;

        while (i--) {
          var key = keys[i];

          if (true) {
            if (methods && hasOwn(methods, key)) {
              warn("Method \"" + key + "\" has already been defined as a data property.", vm);
            }
          }

          if (props && hasOwn(props, key)) {
             true && warn("The data property \"" + key + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
          } else if (!isReserved(key)) {
            proxy(vm, "_data", key);
          }
        } // observe data


        observe(data, true
        /* asRootData */
        );
      }

      function getData(data, vm) {
        // #7573 disable dep collection when invoking data getters
        pushTarget();

        try {
          return data.call(vm, vm);
        } catch (e) {
          handleError(e, vm, "data()");
          return {};
        } finally {
          popTarget();
        }
      }

      var computedWatcherOptions = {
        lazy: true
      };

      function initComputed(vm, computed) {
        // $flow-disable-line
        var watchers = vm._computedWatchers = Object.create(null); // computed properties are just getters during SSR

        var isSSR = isServerRendering();

        for (var key in computed) {
          var userDef = computed[key];
          var getter = typeof userDef === 'function' ? userDef : userDef.get;

          if ( true && getter == null) {
            warn("Getter is missing for computed property \"" + key + "\".", vm);
          }

          if (!isSSR) {
            // create internal watcher for the computed property.
            watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
          } // component-defined computed properties are already defined on the
          // component prototype. We only need to define computed properties defined
          // at instantiation here.


          if (!(key in vm)) {
            defineComputed(vm, key, userDef);
          } else if (true) {
            if (key in vm.$data) {
              warn("The computed property \"" + key + "\" is already defined in data.", vm);
            } else if (vm.$options.props && key in vm.$options.props) {
              warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
            }
          }
        }
      }

      function defineComputed(target, key, userDef) {
        var shouldCache = !isServerRendering();

        if (typeof userDef === 'function') {
          sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : userDef;
          sharedPropertyDefinition.set = noop;
        } else {
          sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : userDef.get : noop;
          sharedPropertyDefinition.set = userDef.set ? userDef.set : noop;
        }

        if ( true && sharedPropertyDefinition.set === noop) {
          sharedPropertyDefinition.set = function () {
            warn("Computed property \"" + key + "\" was assigned to but it has no setter.", this);
          };
        }

        Object.defineProperty(target, key, sharedPropertyDefinition);
      }

      function createComputedGetter(key) {
        return function computedGetter() {
          var watcher = this._computedWatchers && this._computedWatchers[key];

          if (watcher) {
            if (watcher.dirty) {
              watcher.evaluate();
            }

            if (Dep.target) {
              watcher.depend();
            }

            return watcher.value;
          }
        };
      }

      function initMethods(vm, methods) {
        var props = vm.$options.props;

        for (var key in methods) {
          if (true) {
            if (methods[key] == null) {
              warn("Method \"" + key + "\" has an undefined value in the component definition. " + "Did you reference the function correctly?", vm);
            }

            if (props && hasOwn(props, key)) {
              warn("Method \"" + key + "\" has already been defined as a prop.", vm);
            }

            if (key in vm && isReserved(key)) {
              warn("Method \"" + key + "\" conflicts with an existing Vue instance method. " + "Avoid defining component methods that start with _ or $.");
            }
          }

          vm[key] = methods[key] == null ? noop : bind(methods[key], vm);
        }
      }

      function initWatch(vm, watch) {
        for (var key in watch) {
          var handler = watch[key];

          if (Array.isArray(handler)) {
            for (var i = 0; i < handler.length; i++) {
              createWatcher(vm, key, handler[i]);
            }
          } else {
            createWatcher(vm, key, handler);
          }
        }
      }

      function createWatcher(vm, expOrFn, handler, options) {
        if (isPlainObject(handler)) {
          options = handler;
          handler = handler.handler;
        }

        if (typeof handler === 'string') {
          handler = vm[handler];
        }

        return vm.$watch(expOrFn, handler, options);
      }

      function stateMixin(Vue) {
        // flow somehow has problems with directly declared definition object
        // when using Object.defineProperty, so we have to procedurally build up
        // the object here.
        var dataDef = {};

        dataDef.get = function () {
          return this._data;
        };

        var propsDef = {};

        propsDef.get = function () {
          return this._props;
        };

        if (true) {
          dataDef.set = function (newData) {
            warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
          };

          propsDef.set = function () {
            warn("$props is readonly.", this);
          };
        }

        Object.defineProperty(Vue.prototype, '$data', dataDef);
        Object.defineProperty(Vue.prototype, '$props', propsDef);
        Vue.prototype.$set = set;
        Vue.prototype.$delete = del;

        Vue.prototype.$watch = function (expOrFn, cb, options) {
          var vm = this;

          if (isPlainObject(cb)) {
            return createWatcher(vm, expOrFn, cb, options);
          }

          options = options || {};
          options.user = true;
          var watcher = new Watcher(vm, expOrFn, cb, options);

          if (options.immediate) {
            cb.call(vm, watcher.value);
          }

          return function unwatchFn() {
            watcher.teardown();
          };
        };
      }
      /*  */


      function initProvide(vm) {
        var provide = vm.$options.provide;

        if (provide) {
          vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
        }
      }

      function initInjections(vm) {
        var result = resolveInject(vm.$options.inject, vm);

        if (result) {
          toggleObserving(false);
          Object.keys(result).forEach(function (key) {
            /* istanbul ignore else */
            if (true) {
              defineReactive(vm, key, result[key], function () {
                warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
              });
            } else {}
          });
          toggleObserving(true);
        }
      }

      function resolveInject(inject, vm) {
        if (inject) {
          // inject is :any because flow is not smart enough to figure out cached
          var result = Object.create(null);
          var keys = hasSymbol ? Reflect.ownKeys(inject).filter(function (key) {
            /* istanbul ignore next */
            return Object.getOwnPropertyDescriptor(inject, key).enumerable;
          }) : Object.keys(inject);

          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var provideKey = inject[key].from;
            var source = vm;

            while (source) {
              if (source._provided && hasOwn(source._provided, provideKey)) {
                result[key] = source._provided[provideKey];
                break;
              }

              source = source.$parent;
            }

            if (!source) {
              if ('default' in inject[key]) {
                var provideDefault = inject[key].default;
                result[key] = typeof provideDefault === 'function' ? provideDefault.call(vm) : provideDefault;
              } else if (true) {
                warn("Injection \"" + key + "\" not found", vm);
              }
            }
          }

          return result;
        }
      }
      /*  */

      /**
       * Runtime helper for rendering v-for lists.
       */


      function renderList(val, render) {
        var ret, i, l, keys, key;

        if (Array.isArray(val) || typeof val === 'string') {
          ret = new Array(val.length);

          for (i = 0, l = val.length; i < l; i++) {
            ret[i] = render(val[i], i);
          }
        } else if (typeof val === 'number') {
          ret = new Array(val);

          for (i = 0; i < val; i++) {
            ret[i] = render(i + 1, i);
          }
        } else if (isObject(val)) {
          keys = Object.keys(val);
          ret = new Array(keys.length);

          for (i = 0, l = keys.length; i < l; i++) {
            key = keys[i];
            ret[i] = render(val[key], key, i);
          }
        }

        if (isDef(ret)) {
          ret._isVList = true;
        }

        return ret;
      }
      /*  */

      /**
       * Runtime helper for rendering <slot>
       */


      function renderSlot(name, fallback, props, bindObject) {
        var scopedSlotFn = this.$scopedSlots[name];
        var nodes;

        if (scopedSlotFn) {
          // scoped slot
          props = props || {};

          if (bindObject) {
            if ( true && !isObject(bindObject)) {
              warn('slot v-bind without argument expects an Object', this);
            }

            props = extend(extend({}, bindObject), props);
          }

          nodes = scopedSlotFn(props) || fallback;
        } else {
          var slotNodes = this.$slots[name]; // warn duplicate slot usage

          if (slotNodes) {
            if ( true && slotNodes._rendered) {
              warn("Duplicate presence of slot \"" + name + "\" found in the same render tree " + "- this will likely cause render errors.", this);
            }

            slotNodes._rendered = true;
          }

          nodes = slotNodes || fallback;
        }

        var target = props && props.slot;

        if (target) {
          return this.$createElement('template', {
            slot: target
          }, nodes);
        } else {
          return nodes;
        }
      }
      /*  */

      /**
       * Runtime helper for resolving filters
       */


      function resolveFilter(id) {
        return resolveAsset(this.$options, 'filters', id, true) || identity;
      }
      /*  */


      function isKeyNotMatch(expect, actual) {
        if (Array.isArray(expect)) {
          return expect.indexOf(actual) === -1;
        } else {
          return expect !== actual;
        }
      }
      /**
       * Runtime helper for checking keyCodes from config.
       * exposed as Vue.prototype._k
       * passing in eventKeyName as last argument separately for backwards compat
       */


      function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
        var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;

        if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
          return isKeyNotMatch(builtInKeyName, eventKeyName);
        } else if (mappedKeyCode) {
          return isKeyNotMatch(mappedKeyCode, eventKeyCode);
        } else if (eventKeyName) {
          return hyphenate(eventKeyName) !== key;
        }
      }
      /*  */

      /**
       * Runtime helper for merging v-bind="object" into a VNode's data.
       */


      function bindObjectProps(data, tag, value, asProp, isSync) {
        if (value) {
          if (!isObject(value)) {
             true && warn('v-bind without argument expects an Object or Array value', this);
          } else {
            if (Array.isArray(value)) {
              value = toObject(value);
            }

            var hash;

            var loop = function loop(key) {
              if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
                hash = data;
              } else {
                var type = data.attrs && data.attrs.type;
                hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
              }

              if (!(key in hash)) {
                hash[key] = value[key];

                if (isSync) {
                  var on = data.on || (data.on = {});

                  on["update:" + key] = function ($event) {
                    value[key] = $event;
                  };
                }
              }
            };

            for (var key in value) loop(key);
          }
        }

        return data;
      }
      /*  */

      /**
       * Runtime helper for rendering static trees.
       */


      function renderStatic(index, isInFor) {
        var cached = this._staticTrees || (this._staticTrees = []);
        var tree = cached[index]; // if has already-rendered static tree and not inside v-for,
        // we can reuse the same tree.

        if (tree && !isInFor) {
          return tree;
        } // otherwise, render a fresh tree.


        tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, null, this // for render fns generated for functional component templates
        );
        markStatic(tree, "__static__" + index, false);
        return tree;
      }
      /**
       * Runtime helper for v-once.
       * Effectively it means marking the node as static with a unique key.
       */


      function markOnce(tree, index, key) {
        markStatic(tree, "__once__" + index + (key ? "_" + key : ""), true);
        return tree;
      }

      function markStatic(tree, key, isOnce) {
        if (Array.isArray(tree)) {
          for (var i = 0; i < tree.length; i++) {
            if (tree[i] && typeof tree[i] !== 'string') {
              markStaticNode(tree[i], key + "_" + i, isOnce);
            }
          }
        } else {
          markStaticNode(tree, key, isOnce);
        }
      }

      function markStaticNode(node, key, isOnce) {
        node.isStatic = true;
        node.key = key;
        node.isOnce = isOnce;
      }
      /*  */


      function bindObjectListeners(data, value) {
        if (value) {
          if (!isPlainObject(value)) {
             true && warn('v-on without argument expects an Object value', this);
          } else {
            var on = data.on = data.on ? extend({}, data.on) : {};

            for (var key in value) {
              var existing = on[key];
              var ours = value[key];
              on[key] = existing ? [].concat(existing, ours) : ours;
            }
          }
        }

        return data;
      }
      /*  */


      function installRenderHelpers(target) {
        target._o = markOnce;
        target._n = toNumber;
        target._s = toString;
        target._l = renderList;
        target._t = renderSlot;
        target._q = looseEqual;
        target._i = looseIndexOf;
        target._m = renderStatic;
        target._f = resolveFilter;
        target._k = checkKeyCodes;
        target._b = bindObjectProps;
        target._v = createTextVNode;
        target._e = createEmptyVNode;
        target._u = resolveScopedSlots;
        target._g = bindObjectListeners;
      }
      /*  */


      function FunctionalRenderContext(data, props, children, parent, Ctor) {
        var options = Ctor.options; // ensure the createElement function in functional components
        // gets a unique context - this is necessary for correct named slot check

        var contextVm;

        if (hasOwn(parent, '_uid')) {
          contextVm = Object.create(parent); // $flow-disable-line

          contextVm._original = parent;
        } else {
          // the context vm passed in is a functional context as well.
          // in this case we want to make sure we are able to get a hold to the
          // real context instance.
          contextVm = parent; // $flow-disable-line

          parent = parent._original;
        }

        var isCompiled = isTrue(options._compiled);
        var needNormalization = !isCompiled;
        this.data = data;
        this.props = props;
        this.children = children;
        this.parent = parent;
        this.listeners = data.on || emptyObject;
        this.injections = resolveInject(options.inject, parent);

        this.slots = function () {
          return resolveSlots(children, parent);
        }; // support for compiled functional template


        if (isCompiled) {
          // exposing $options for renderStatic()
          this.$options = options; // pre-resolve slots for renderSlot()

          this.$slots = this.slots();
          this.$scopedSlots = data.scopedSlots || emptyObject;
        }

        if (options._scopeId) {
          this._c = function (a, b, c, d) {
            var vnode = createElement(contextVm, a, b, c, d, needNormalization);

            if (vnode && !Array.isArray(vnode)) {
              vnode.fnScopeId = options._scopeId;
              vnode.fnContext = parent;
            }

            return vnode;
          };
        } else {
          this._c = function (a, b, c, d) {
            return createElement(contextVm, a, b, c, d, needNormalization);
          };
        }
      }

      installRenderHelpers(FunctionalRenderContext.prototype);

      function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
        var options = Ctor.options;
        var props = {};
        var propOptions = options.props;

        if (isDef(propOptions)) {
          for (var key in propOptions) {
            props[key] = validateProp(key, propOptions, propsData || emptyObject);
          }
        } else {
          if (isDef(data.attrs)) {
            mergeProps(props, data.attrs);
          }

          if (isDef(data.props)) {
            mergeProps(props, data.props);
          }
        }

        var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);
        var vnode = options.render.call(null, renderContext._c, renderContext);

        if (vnode instanceof VNode) {
          return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options);
        } else if (Array.isArray(vnode)) {
          var vnodes = normalizeChildren(vnode) || [];
          var res = new Array(vnodes.length);

          for (var i = 0; i < vnodes.length; i++) {
            res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options);
          }

          return res;
        }
      }

      function cloneAndMarkFunctionalResult(vnode, data, contextVm, options) {
        // #7817 clone node before setting fnContext, otherwise if the node is reused
        // (e.g. it was from a cached normal slot) the fnContext causes named slots
        // that should not be matched to match.
        var clone = cloneVNode(vnode);
        clone.fnContext = contextVm;
        clone.fnOptions = options;

        if (data.slot) {
          (clone.data || (clone.data = {})).slot = data.slot;
        }

        return clone;
      }

      function mergeProps(to, from) {
        for (var key in from) {
          to[camelize(key)] = from[key];
        }
      }
      /*  */
      // Register the component hook to weex native render engine.
      // The hook will be triggered by native, not javascript.
      // Updates the state of the component to weex native render engine.

      /*  */
      // https://github.com/Hanks10100/weex-native-directive/tree/master/component
      // listening on native callback

      /*  */

      /*  */
      // inline hooks to be invoked on component VNodes during patch


      var componentVNodeHooks = {
        init: function init(vnode, hydrating, parentElm, refElm) {
          if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
            // kept-alive components, treat as a patch
            var mountedNode = vnode; // work around flow

            componentVNodeHooks.prepatch(mountedNode, mountedNode);
          } else {
            var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance, parentElm, refElm);
            child.$mount(hydrating ? vnode.elm : undefined, hydrating);
          }
        },
        prepatch: function prepatch(oldVnode, vnode) {
          var options = vnode.componentOptions;
          var child = vnode.componentInstance = oldVnode.componentInstance;
          updateChildComponent(child, options.propsData, // updated props
          options.listeners, // updated listeners
          vnode, // new parent vnode
          options.children // new children
          );
        },
        insert: function insert(vnode) {
          var context = vnode.context;
          var componentInstance = vnode.componentInstance;

          if (!componentInstance._isMounted) {
            componentInstance._isMounted = true;
            callHook(componentInstance, 'mounted');
          }

          if (vnode.data.keepAlive) {
            if (context._isMounted) {
              // vue-router#1212
              // During updates, a kept-alive component's child components may
              // change, so directly walking the tree here may call activated hooks
              // on incorrect children. Instead we push them into a queue which will
              // be processed after the whole patch process ended.
              queueActivatedComponent(componentInstance);
            } else {
              activateChildComponent(componentInstance, true
              /* direct */
              );
            }
          }
        },
        destroy: function destroy(vnode) {
          var componentInstance = vnode.componentInstance;

          if (!componentInstance._isDestroyed) {
            if (!vnode.data.keepAlive) {
              componentInstance.$destroy();
            } else {
              deactivateChildComponent(componentInstance, true
              /* direct */
              );
            }
          }
        }
      };
      var hooksToMerge = Object.keys(componentVNodeHooks);

      function createComponent(Ctor, data, context, children, tag) {
        if (isUndef(Ctor)) {
          return;
        }

        var baseCtor = context.$options._base; // plain options object: turn it into a constructor

        if (isObject(Ctor)) {
          Ctor = baseCtor.extend(Ctor);
        } // if at this stage it's not a constructor or an async component factory,
        // reject.


        if (typeof Ctor !== 'function') {
          if (true) {
            warn("Invalid Component definition: " + String(Ctor), context);
          }

          return;
        } // async component


        var asyncFactory;

        if (isUndef(Ctor.cid)) {
          asyncFactory = Ctor;
          Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);

          if (Ctor === undefined) {
            // return a placeholder node for async component, which is rendered
            // as a comment node but preserves all the raw information for the node.
            // the information will be used for async server-rendering and hydration.
            return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
          }
        }

        data = data || {}; // resolve constructor options in case global mixins are applied after
        // component constructor creation

        resolveConstructorOptions(Ctor); // transform component v-model data into props & events

        if (isDef(data.model)) {
          transformModel(Ctor.options, data);
        } // extract props


        var propsData = extractPropsFromVNodeData(data, Ctor, tag); // functional component

        if (isTrue(Ctor.options.functional)) {
          return createFunctionalComponent(Ctor, propsData, data, context, children);
        } // extract listeners, since these needs to be treated as
        // child component listeners instead of DOM listeners


        var listeners = data.on; // replace with listeners with .native modifier
        // so it gets processed during parent component patch.

        data.on = data.nativeOn;

        if (isTrue(Ctor.options.abstract)) {
          // abstract components do not keep anything
          // other than props & listeners & slot
          // work around flow
          var slot = data.slot;
          data = {};

          if (slot) {
            data.slot = slot;
          }
        } // install component management hooks onto the placeholder node


        installComponentHooks(data); // return a placeholder vnode

        var name = Ctor.options.name || tag;
        var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, {
          Ctor: Ctor,
          propsData: propsData,
          listeners: listeners,
          tag: tag,
          children: children
        }, asyncFactory); // Weex specific: invoke recycle-list optimized @render function for
        // extracting cell-slot template.
        // https://github.com/Hanks10100/weex-native-directive/tree/master/component

        /* istanbul ignore if */

        return vnode;
      }

      function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't
      parent, // activeInstance in lifecycle state
      parentElm, refElm) {
        var options = {
          _isComponent: true,
          parent: parent,
          _parentVnode: vnode,
          _parentElm: parentElm || null,
          _refElm: refElm || null
        }; // check inline-template render functions

        var inlineTemplate = vnode.data.inlineTemplate;

        if (isDef(inlineTemplate)) {
          options.render = inlineTemplate.render;
          options.staticRenderFns = inlineTemplate.staticRenderFns;
        }

        return new vnode.componentOptions.Ctor(options);
      }

      function installComponentHooks(data) {
        var hooks = data.hook || (data.hook = {});

        for (var i = 0; i < hooksToMerge.length; i++) {
          var key = hooksToMerge[i];
          hooks[key] = componentVNodeHooks[key];
        }
      } // transform component v-model info (value and callback) into
      // prop and event handler respectively.


      function transformModel(options, data) {
        var prop = options.model && options.model.prop || 'value';
        var event = options.model && options.model.event || 'input';
        (data.props || (data.props = {}))[prop] = data.model.value;
        var on = data.on || (data.on = {});

        if (isDef(on[event])) {
          on[event] = [data.model.callback].concat(on[event]);
        } else {
          on[event] = data.model.callback;
        }
      }
      /*  */


      var SIMPLE_NORMALIZE = 1;
      var ALWAYS_NORMALIZE = 2; // wrapper function for providing a more flexible interface
      // without getting yelled at by flow

      function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
        if (Array.isArray(data) || isPrimitive(data)) {
          normalizationType = children;
          children = data;
          data = undefined;
        }

        if (isTrue(alwaysNormalize)) {
          normalizationType = ALWAYS_NORMALIZE;
        }

        return _createElement(context, tag, data, children, normalizationType);
      }

      function _createElement(context, tag, data, children, normalizationType) {
        if (isDef(data) && isDef(data.__ob__)) {
           true && warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
          return createEmptyVNode();
        } // object syntax in v-bind


        if (isDef(data) && isDef(data.is)) {
          tag = data.is;
        }

        if (!tag) {
          // in case of component :is set to falsy value
          return createEmptyVNode();
        } // warn against non-primitive key


        if ( true && isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
          {
            warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);
          }
        } // support single function children as default scoped slot


        if (Array.isArray(children) && typeof children[0] === 'function') {
          data = data || {};
          data.scopedSlots = {
            default: children[0]
          };
          children.length = 0;
        }

        if (normalizationType === ALWAYS_NORMALIZE) {
          children = normalizeChildren(children);
        } else if (normalizationType === SIMPLE_NORMALIZE) {
          children = simpleNormalizeChildren(children);
        }

        var vnode, ns;

        if (typeof tag === 'string') {
          var Ctor;
          ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);

          if (config.isReservedTag(tag)) {
            // platform built-in elements
            vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
          } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
            // component
            vnode = createComponent(Ctor, data, context, children, tag);
          } else {
            // unknown or unlisted namespaced elements
            // check at runtime because it may get assigned a namespace when its
            // parent normalizes children
            vnode = new VNode(tag, data, children, undefined, undefined, context);
          }
        } else {
          // direct component options / constructor
          vnode = createComponent(tag, data, context, children);
        }

        if (Array.isArray(vnode)) {
          return vnode;
        } else if (isDef(vnode)) {
          if (isDef(ns)) {
            applyNS(vnode, ns);
          }

          if (isDef(data)) {
            registerDeepBindings(data);
          }

          return vnode;
        } else {
          return createEmptyVNode();
        }
      }

      function applyNS(vnode, ns, force) {
        vnode.ns = ns;

        if (vnode.tag === 'foreignObject') {
          // use default namespace inside foreignObject
          ns = undefined;
          force = true;
        }

        if (isDef(vnode.children)) {
          for (var i = 0, l = vnode.children.length; i < l; i++) {
            var child = vnode.children[i];

            if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== 'svg')) {
              applyNS(child, ns, force);
            }
          }
        }
      } // ref #5318
      // necessary to ensure parent re-render when deep bindings like :style and
      // :class are used on slot nodes


      function registerDeepBindings(data) {
        if (isObject(data.style)) {
          traverse(data.style);
        }

        if (isObject(data.class)) {
          traverse(data.class);
        }
      }
      /*  */


      function initRender(vm) {
        vm._vnode = null; // the root of the child tree

        vm._staticTrees = null; // v-once cached trees

        var options = vm.$options;
        var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree

        var renderContext = parentVnode && parentVnode.context;
        vm.$slots = resolveSlots(options._renderChildren, renderContext);
        vm.$scopedSlots = emptyObject; // bind the createElement fn to this instance
        // so that we get proper render context inside it.
        // args order: tag, data, children, normalizationType, alwaysNormalize
        // internal version is used by render functions compiled from templates

        vm._c = function (a, b, c, d) {
          return createElement(vm, a, b, c, d, false);
        }; // normalization is always applied for the public version, used in
        // user-written render functions.


        vm.$createElement = function (a, b, c, d) {
          return createElement(vm, a, b, c, d, true);
        }; // $attrs & $listeners are exposed for easier HOC creation.
        // they need to be reactive so that HOCs using them are always updated


        var parentData = parentVnode && parentVnode.data;
        /* istanbul ignore else */

        if (true) {
          defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
            !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
          }, true);
          defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {
            !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
          }, true);
        } else {}
      }

      function renderMixin(Vue) {
        // install runtime convenience helpers
        installRenderHelpers(Vue.prototype);

        Vue.prototype.$nextTick = function (fn) {
          return nextTick(fn, this);
        };

        Vue.prototype._render = function () {
          var vm = this;
          var ref = vm.$options;
          var render = ref.render;
          var _parentVnode = ref._parentVnode; // reset _rendered flag on slots for duplicate slot check

          if (true) {
            for (var key in vm.$slots) {
              // $flow-disable-line
              vm.$slots[key]._rendered = false;
            }
          }

          if (_parentVnode) {
            vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject;
          } // set parent vnode. this allows render functions to have access
          // to the data on the placeholder node.


          vm.$vnode = _parentVnode; // render self

          var vnode;

          try {
            vnode = render.call(vm._renderProxy, vm.$createElement);
          } catch (e) {
            handleError(e, vm, "render"); // return error render result,
            // or previous vnode to prevent render error causing blank component

            /* istanbul ignore else */

            if (true) {
              if (vm.$options.renderError) {
                try {
                  vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
                } catch (e) {
                  handleError(e, vm, "renderError");
                  vnode = vm._vnode;
                }
              } else {
                vnode = vm._vnode;
              }
            } else {}
          } // return empty vnode in case the render function errored out


          if (!(vnode instanceof VNode)) {
            if ( true && Array.isArray(vnode)) {
              warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
            }

            vnode = createEmptyVNode();
          } // set parent


          vnode.parent = _parentVnode;
          return vnode;
        };
      }
      /*  */


      var uid$3 = 0;

      function initMixin(Vue) {
        Vue.prototype._init = function (options) {
          var vm = this; // a uid

          vm._uid = uid$3++;
          var startTag, endTag;
          /* istanbul ignore if */

          if ( true && config.performance && mark) {
            startTag = "vue-perf-start:" + vm._uid;
            endTag = "vue-perf-end:" + vm._uid;
            mark(startTag);
          } // a flag to avoid this being observed


          vm._isVue = true; // merge options

          if (options && options._isComponent) {
            // optimize internal component instantiation
            // since dynamic options merging is pretty slow, and none of the
            // internal component options needs special treatment.
            initInternalComponent(vm, options);
          } else {
            vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
          }
          /* istanbul ignore else */


          if (true) {
            initProxy(vm);
          } else {} // expose real self


          vm._self = vm;
          initLifecycle(vm);
          initEvents(vm);
          initRender(vm);
          callHook(vm, 'beforeCreate');
          initInjections(vm); // resolve injections before data/props

          initState(vm);
          initProvide(vm); // resolve provide after data/props

          callHook(vm, 'created');
          /* istanbul ignore if */

          if ( true && config.performance && mark) {
            vm._name = formatComponentName(vm, false);
            mark(endTag);
            measure("vue " + vm._name + " init", startTag, endTag);
          }

          if (vm.$options.el) {
            vm.$mount(vm.$options.el);
          }
        };
      }

      function initInternalComponent(vm, options) {
        var opts = vm.$options = Object.create(vm.constructor.options); // doing this because it's faster than dynamic enumeration.

        var parentVnode = options._parentVnode;
        opts.parent = options.parent;
        opts._parentVnode = parentVnode;
        opts._parentElm = options._parentElm;
        opts._refElm = options._refElm;
        var vnodeComponentOptions = parentVnode.componentOptions;
        opts.propsData = vnodeComponentOptions.propsData;
        opts._parentListeners = vnodeComponentOptions.listeners;
        opts._renderChildren = vnodeComponentOptions.children;
        opts._componentTag = vnodeComponentOptions.tag;

        if (options.render) {
          opts.render = options.render;
          opts.staticRenderFns = options.staticRenderFns;
        }
      }

      function resolveConstructorOptions(Ctor) {
        var options = Ctor.options;

        if (Ctor.super) {
          var superOptions = resolveConstructorOptions(Ctor.super);
          var cachedSuperOptions = Ctor.superOptions;

          if (superOptions !== cachedSuperOptions) {
            // super option changed,
            // need to resolve new options.
            Ctor.superOptions = superOptions; // check if there are any late-modified/attached options (#4976)

            var modifiedOptions = resolveModifiedOptions(Ctor); // update base extend options

            if (modifiedOptions) {
              extend(Ctor.extendOptions, modifiedOptions);
            }

            options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);

            if (options.name) {
              options.components[options.name] = Ctor;
            }
          }
        }

        return options;
      }

      function resolveModifiedOptions(Ctor) {
        var modified;
        var latest = Ctor.options;
        var extended = Ctor.extendOptions;
        var sealed = Ctor.sealedOptions;

        for (var key in latest) {
          if (latest[key] !== sealed[key]) {
            if (!modified) {
              modified = {};
            }

            modified[key] = dedupe(latest[key], extended[key], sealed[key]);
          }
        }

        return modified;
      }

      function dedupe(latest, extended, sealed) {
        // compare latest and sealed to ensure lifecycle hooks won't be duplicated
        // between merges
        if (Array.isArray(latest)) {
          var res = [];
          sealed = Array.isArray(sealed) ? sealed : [sealed];
          extended = Array.isArray(extended) ? extended : [extended];

          for (var i = 0; i < latest.length; i++) {
            // push original options and not sealed options to exclude duplicated options
            if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {
              res.push(latest[i]);
            }
          }

          return res;
        } else {
          return latest;
        }
      }

      function Vue(options) {
        if ( true && !(this instanceof Vue)) {
          warn('Vue is a constructor and should be called with the `new` keyword');
        }

        this._init(options);
      }

      initMixin(Vue);
      stateMixin(Vue);
      eventsMixin(Vue);
      lifecycleMixin(Vue);
      renderMixin(Vue);
      /*  */

      function initUse(Vue) {
        Vue.use = function (plugin) {
          var installedPlugins = this._installedPlugins || (this._installedPlugins = []);

          if (installedPlugins.indexOf(plugin) > -1) {
            return this;
          } // additional parameters


          var args = toArray(arguments, 1);
          args.unshift(this);

          if (typeof plugin.install === 'function') {
            plugin.install.apply(plugin, args);
          } else if (typeof plugin === 'function') {
            plugin.apply(null, args);
          }

          installedPlugins.push(plugin);
          return this;
        };
      }
      /*  */


      function initMixin$1(Vue) {
        Vue.mixin = function (mixin) {
          this.options = mergeOptions(this.options, mixin);
          return this;
        };
      }
      /*  */


      function initExtend(Vue) {
        /**
         * Each instance constructor, including Vue, has a unique
         * cid. This enables us to create wrapped "child
         * constructors" for prototypal inheritance and cache them.
         */
        Vue.cid = 0;
        var cid = 1;
        /**
         * Class inheritance
         */

        Vue.extend = function (extendOptions) {
          extendOptions = extendOptions || {};
          var Super = this;
          var SuperId = Super.cid;
          var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});

          if (cachedCtors[SuperId]) {
            return cachedCtors[SuperId];
          }

          var name = extendOptions.name || Super.options.name;

          if ( true && name) {
            validateComponentName(name);
          }

          var Sub = function VueComponent(options) {
            this._init(options);
          };

          Sub.prototype = Object.create(Super.prototype);
          Sub.prototype.constructor = Sub;
          Sub.cid = cid++;
          Sub.options = mergeOptions(Super.options, extendOptions);
          Sub['super'] = Super; // For props and computed properties, we define the proxy getters on
          // the Vue instances at extension time, on the extended prototype. This
          // avoids Object.defineProperty calls for each instance created.

          if (Sub.options.props) {
            initProps$1(Sub);
          }

          if (Sub.options.computed) {
            initComputed$1(Sub);
          } // allow further extension/mixin/plugin usage


          Sub.extend = Super.extend;
          Sub.mixin = Super.mixin;
          Sub.use = Super.use; // create asset registers, so extended classes
          // can have their private assets too.

          ASSET_TYPES.forEach(function (type) {
            Sub[type] = Super[type];
          }); // enable recursive self-lookup

          if (name) {
            Sub.options.components[name] = Sub;
          } // keep a reference to the super options at extension time.
          // later at instantiation we can check if Super's options have
          // been updated.


          Sub.superOptions = Super.options;
          Sub.extendOptions = extendOptions;
          Sub.sealedOptions = extend({}, Sub.options); // cache constructor

          cachedCtors[SuperId] = Sub;
          return Sub;
        };
      }

      function initProps$1(Comp) {
        var props = Comp.options.props;

        for (var key in props) {
          proxy(Comp.prototype, "_props", key);
        }
      }

      function initComputed$1(Comp) {
        var computed = Comp.options.computed;

        for (var key in computed) {
          defineComputed(Comp.prototype, key, computed[key]);
        }
      }
      /*  */


      function initAssetRegisters(Vue) {
        /**
         * Create asset registration methods.
         */
        ASSET_TYPES.forEach(function (type) {
          Vue[type] = function (id, definition) {
            if (!definition) {
              return this.options[type + 's'][id];
            } else {
              /* istanbul ignore if */
              if ( true && type === 'component') {
                validateComponentName(id);
              }

              if (type === 'component' && isPlainObject(definition)) {
                definition.name = definition.name || id;
                definition = this.options._base.extend(definition);
              }

              if (type === 'directive' && typeof definition === 'function') {
                definition = {
                  bind: definition,
                  update: definition
                };
              }

              this.options[type + 's'][id] = definition;
              return definition;
            }
          };
        });
      }
      /*  */


      function getComponentName(opts) {
        return opts && (opts.Ctor.options.name || opts.tag);
      }

      function matches(pattern, name) {
        if (Array.isArray(pattern)) {
          return pattern.indexOf(name) > -1;
        } else if (typeof pattern === 'string') {
          return pattern.split(',').indexOf(name) > -1;
        } else if (isRegExp(pattern)) {
          return pattern.test(name);
        }
        /* istanbul ignore next */


        return false;
      }

      function pruneCache(keepAliveInstance, filter) {
        var cache = keepAliveInstance.cache;
        var keys = keepAliveInstance.keys;
        var _vnode = keepAliveInstance._vnode;

        for (var key in cache) {
          var cachedNode = cache[key];

          if (cachedNode) {
            var name = getComponentName(cachedNode.componentOptions);

            if (name && !filter(name)) {
              pruneCacheEntry(cache, key, keys, _vnode);
            }
          }
        }
      }

      function pruneCacheEntry(cache, key, keys, current) {
        var cached$$1 = cache[key];

        if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
          cached$$1.componentInstance.$destroy();
        }

        cache[key] = null;
        remove(keys, key);
      }

      var patternTypes = [String, RegExp, Array];
      var KeepAlive = {
        name: 'keep-alive',
        abstract: true,
        props: {
          include: patternTypes,
          exclude: patternTypes,
          max: [String, Number]
        },
        created: function created() {
          this.cache = Object.create(null);
          this.keys = [];
        },
        destroyed: function destroyed() {
          var this$1 = this;

          for (var key in this$1.cache) {
            pruneCacheEntry(this$1.cache, key, this$1.keys);
          }
        },
        mounted: function mounted() {
          var this$1 = this;
          this.$watch('include', function (val) {
            pruneCache(this$1, function (name) {
              return matches(val, name);
            });
          });
          this.$watch('exclude', function (val) {
            pruneCache(this$1, function (name) {
              return !matches(val, name);
            });
          });
        },
        render: function render() {
          var slot = this.$slots.default;
          var vnode = getFirstComponentChild(slot);
          var componentOptions = vnode && vnode.componentOptions;

          if (componentOptions) {
            // check pattern
            var name = getComponentName(componentOptions);
            var ref = this;
            var include = ref.include;
            var exclude = ref.exclude;

            if ( // not included
            include && (!name || !matches(include, name)) || // excluded
            exclude && name && matches(exclude, name)) {
              return vnode;
            }

            var ref$1 = this;
            var cache = ref$1.cache;
            var keys = ref$1.keys;
            var key = vnode.key == null // same constructor may get registered as different local components
            // so cid alone is not enough (#3269)
            ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;

            if (cache[key]) {
              vnode.componentInstance = cache[key].componentInstance; // make current key freshest

              remove(keys, key);
              keys.push(key);
            } else {
              cache[key] = vnode;
              keys.push(key); // prune oldest entry

              if (this.max && keys.length > parseInt(this.max)) {
                pruneCacheEntry(cache, keys[0], keys, this._vnode);
              }
            }

            vnode.data.keepAlive = true;
          }

          return vnode || slot && slot[0];
        }
      };
      var builtInComponents = {
        KeepAlive: KeepAlive
        /*  */

      };

      function initGlobalAPI(Vue) {
        // config
        var configDef = {};

        configDef.get = function () {
          return config;
        };

        if (true) {
          configDef.set = function () {
            warn('Do not replace the Vue.config object, set individual fields instead.');
          };
        }

        Object.defineProperty(Vue, 'config', configDef); // exposed util methods.
        // NOTE: these are not considered part of the public API - avoid relying on
        // them unless you are aware of the risk.

        Vue.util = {
          warn: warn,
          extend: extend,
          mergeOptions: mergeOptions,
          defineReactive: defineReactive
        };
        Vue.set = set;
        Vue.delete = del;
        Vue.nextTick = nextTick;
        Vue.options = Object.create(null);
        ASSET_TYPES.forEach(function (type) {
          Vue.options[type + 's'] = Object.create(null);
        }); // this is used to identify the "base" constructor to extend all plain-object
        // components with in Weex's multi-instance scenarios.

        Vue.options._base = Vue;
        extend(Vue.options.components, builtInComponents);
        initUse(Vue);
        initMixin$1(Vue);
        initExtend(Vue);
        initAssetRegisters(Vue);
      }

      initGlobalAPI(Vue);
      Object.defineProperty(Vue.prototype, '$isServer', {
        get: isServerRendering
      });
      Object.defineProperty(Vue.prototype, '$ssrContext', {
        get: function get() {
          /* istanbul ignore next */
          return this.$vnode && this.$vnode.ssrContext;
        }
      }); // expose FunctionalRenderContext for ssr runtime helper installation

      Object.defineProperty(Vue, 'FunctionalRenderContext', {
        value: FunctionalRenderContext
      });
      Vue.version = '2.5.17';
      /*  */
      // these are reserved for web because they are directly compiled away
      // during template compilation

      var isReservedAttr = makeMap('style,class'); // attributes that should be using props for binding

      var acceptValue = makeMap('input,textarea,option,select,progress');

      var mustUseProp = function mustUseProp(tag, type, attr) {
        return attr === 'value' && acceptValue(tag) && type !== 'button' || attr === 'selected' && tag === 'option' || attr === 'checked' && tag === 'input' || attr === 'muted' && tag === 'video';
      };

      var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');
      var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');
      var xlinkNS = 'http://www.w3.org/1999/xlink';

      var isXlink = function isXlink(name) {
        return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';
      };

      var getXlinkProp = function getXlinkProp(name) {
        return isXlink(name) ? name.slice(6, name.length) : '';
      };

      var isFalsyAttrValue = function isFalsyAttrValue(val) {
        return val == null || val === false;
      };
      /*  */


      function genClassForVnode(vnode) {
        var data = vnode.data;
        var parentNode = vnode;
        var childNode = vnode;

        while (isDef(childNode.componentInstance)) {
          childNode = childNode.componentInstance._vnode;

          if (childNode && childNode.data) {
            data = mergeClassData(childNode.data, data);
          }
        }

        while (isDef(parentNode = parentNode.parent)) {
          if (parentNode && parentNode.data) {
            data = mergeClassData(data, parentNode.data);
          }
        }

        return renderClass(data.staticClass, data.class);
      }

      function mergeClassData(child, parent) {
        return {
          staticClass: concat(child.staticClass, parent.staticClass),
          class: isDef(child.class) ? [child.class, parent.class] : parent.class
        };
      }

      function renderClass(staticClass, dynamicClass) {
        if (isDef(staticClass) || isDef(dynamicClass)) {
          return concat(staticClass, stringifyClass(dynamicClass));
        }
        /* istanbul ignore next */


        return '';
      }

      function concat(a, b) {
        return a ? b ? a + ' ' + b : a : b || '';
      }

      function stringifyClass(value) {
        if (Array.isArray(value)) {
          return stringifyArray(value);
        }

        if (isObject(value)) {
          return stringifyObject(value);
        }

        if (typeof value === 'string') {
          return value;
        }
        /* istanbul ignore next */


        return '';
      }

      function stringifyArray(value) {
        var res = '';
        var stringified;

        for (var i = 0, l = value.length; i < l; i++) {
          if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
            if (res) {
              res += ' ';
            }

            res += stringified;
          }
        }

        return res;
      }

      function stringifyObject(value) {
        var res = '';

        for (var key in value) {
          if (value[key]) {
            if (res) {
              res += ' ';
            }

            res += key;
          }
        }

        return res;
      }
      /*  */


      var namespaceMap = {
        svg: 'http://www.w3.org/2000/svg',
        math: 'http://www.w3.org/1998/Math/MathML'
      };
      var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot'); // this map is intentionally selective, only covering SVG elements that may
      // contain child elements.

      var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);

      var isReservedTag = function isReservedTag(tag) {
        return isHTMLTag(tag) || isSVG(tag);
      };

      function getTagNamespace(tag) {
        if (isSVG(tag)) {
          return 'svg';
        } // basic support for MathML
        // note it doesn't support other MathML elements being component roots


        if (tag === 'math') {
          return 'math';
        }
      }

      var unknownElementCache = Object.create(null);

      function isUnknownElement(tag) {
        /* istanbul ignore if */
        if (!inBrowser) {
          return true;
        }

        if (isReservedTag(tag)) {
          return false;
        }

        tag = tag.toLowerCase();
        /* istanbul ignore if */

        if (unknownElementCache[tag] != null) {
          return unknownElementCache[tag];
        }

        var el = document.createElement(tag);

        if (tag.indexOf('-') > -1) {
          // http://stackoverflow.com/a/28210364/1070244
          return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
        } else {
          return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
        }
      }

      var isTextInputType = makeMap('text,number,password,search,email,tel,url');
      /*  */

      /**
       * Query an element selector if it's not an element already.
       */

      function query(el) {
        if (typeof el === 'string') {
          var selected = document.querySelector(el);

          if (!selected) {
             true && warn('Cannot find element: ' + el);
            return document.createElement('div');
          }

          return selected;
        } else {
          return el;
        }
      }
      /*  */


      function createElement$1(tagName, vnode) {
        var elm = document.createElement(tagName);

        if (tagName !== 'select') {
          return elm;
        } // false or null will remove the attribute but undefined will not


        if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
          elm.setAttribute('multiple', 'multiple');
        }

        return elm;
      }

      function createElementNS(namespace, tagName) {
        return document.createElementNS(namespaceMap[namespace], tagName);
      }

      function createTextNode(text) {
        return document.createTextNode(text);
      }

      function createComment(text) {
        return document.createComment(text);
      }

      function insertBefore(parentNode, newNode, referenceNode) {
        parentNode.insertBefore(newNode, referenceNode);
      }

      function removeChild(node, child) {
        node.removeChild(child);
      }

      function appendChild(node, child) {
        node.appendChild(child);
      }

      function parentNode(node) {
        return node.parentNode;
      }

      function nextSibling(node) {
        return node.nextSibling;
      }

      function tagName(node) {
        return node.tagName;
      }

      function setTextContent(node, text) {
        node.textContent = text;
      }

      function setStyleScope(node, scopeId) {
        node.setAttribute(scopeId, '');
      }

      var nodeOps = Object.freeze({
        createElement: createElement$1,
        createElementNS: createElementNS,
        createTextNode: createTextNode,
        createComment: createComment,
        insertBefore: insertBefore,
        removeChild: removeChild,
        appendChild: appendChild,
        parentNode: parentNode,
        nextSibling: nextSibling,
        tagName: tagName,
        setTextContent: setTextContent,
        setStyleScope: setStyleScope
      });
      /*  */

      var ref = {
        create: function create(_, vnode) {
          registerRef(vnode);
        },
        update: function update(oldVnode, vnode) {
          if (oldVnode.data.ref !== vnode.data.ref) {
            registerRef(oldVnode, true);
            registerRef(vnode);
          }
        },
        destroy: function destroy(vnode) {
          registerRef(vnode, true);
        }
      };

      function registerRef(vnode, isRemoval) {
        var key = vnode.data.ref;

        if (!isDef(key)) {
          return;
        }

        var vm = vnode.context;
        var ref = vnode.componentInstance || vnode.elm;
        var refs = vm.$refs;

        if (isRemoval) {
          if (Array.isArray(refs[key])) {
            remove(refs[key], ref);
          } else if (refs[key] === ref) {
            refs[key] = undefined;
          }
        } else {
          if (vnode.data.refInFor) {
            if (!Array.isArray(refs[key])) {
              refs[key] = [ref];
            } else if (refs[key].indexOf(ref) < 0) {
              // $flow-disable-line
              refs[key].push(ref);
            }
          } else {
            refs[key] = ref;
          }
        }
      }
      /**
       * Virtual DOM patching algorithm based on Snabbdom by
       * Simon Friis Vindum (@paldepind)
       * Licensed under the MIT License
       * https://github.com/paldepind/snabbdom/blob/master/LICENSE
       *
       * modified by Evan You (@yyx990803)
       *
       * Not type-checking this because this file is perf-critical and the cost
       * of making flow understand it is not worth it.
       */


      var emptyNode = new VNode('', {}, []);
      var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

      function sameVnode(a, b) {
        return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
      }

      function sameInputType(a, b) {
        if (a.tag !== 'input') {
          return true;
        }

        var i;
        var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
        var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
        return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
      }

      function createKeyToOldIdx(children, beginIdx, endIdx) {
        var i, key;
        var map = {};

        for (i = beginIdx; i <= endIdx; ++i) {
          key = children[i].key;

          if (isDef(key)) {
            map[key] = i;
          }
        }

        return map;
      }

      function createPatchFunction(backend) {
        var i, j;
        var cbs = {};
        var modules = backend.modules;
        var nodeOps = backend.nodeOps;

        for (i = 0; i < hooks.length; ++i) {
          cbs[hooks[i]] = [];

          for (j = 0; j < modules.length; ++j) {
            if (isDef(modules[j][hooks[i]])) {
              cbs[hooks[i]].push(modules[j][hooks[i]]);
            }
          }
        }

        function emptyNodeAt(elm) {
          return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
        }

        function createRmCb(childElm, listeners) {
          function remove() {
            if (--remove.listeners === 0) {
              removeNode(childElm);
            }
          }

          remove.listeners = listeners;
          return remove;
        }

        function removeNode(el) {
          var parent = nodeOps.parentNode(el); // element may have already been removed due to v-html / v-text

          if (isDef(parent)) {
            nodeOps.removeChild(parent, el);
          }
        }

        function isUnknownElement$$1(vnode, inVPre) {
          return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some(function (ignore) {
            return isRegExp(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
          })) && config.isUnknownElement(vnode.tag);
        }

        var creatingElmInVPre = 0;

        function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {
          if (isDef(vnode.elm) && isDef(ownerArray)) {
            // This vnode was used in a previous render!
            // now it's used as a new node, overwriting its elm would cause
            // potential patch errors down the road when it's used as an insertion
            // reference node. Instead, we clone the node on-demand before creating
            // associated DOM element for it.
            vnode = ownerArray[index] = cloneVNode(vnode);
          }

          vnode.isRootInsert = !nested; // for transition enter check

          if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
            return;
          }

          var data = vnode.data;
          var children = vnode.children;
          var tag = vnode.tag;

          if (isDef(tag)) {
            if (true) {
              if (data && data.pre) {
                creatingElmInVPre++;
              }

              if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
                warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
              }
            }

            vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
            setScope(vnode);
            /* istanbul ignore if */

            {
              createChildren(vnode, children, insertedVnodeQueue);

              if (isDef(data)) {
                invokeCreateHooks(vnode, insertedVnodeQueue);
              }

              insert(parentElm, vnode.elm, refElm);
            }

            if ( true && data && data.pre) {
              creatingElmInVPre--;
            }
          } else if (isTrue(vnode.isComment)) {
            vnode.elm = nodeOps.createComment(vnode.text);
            insert(parentElm, vnode.elm, refElm);
          } else {
            vnode.elm = nodeOps.createTextNode(vnode.text);
            insert(parentElm, vnode.elm, refElm);
          }
        }

        function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
          var i = vnode.data;

          if (isDef(i)) {
            var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;

            if (isDef(i = i.hook) && isDef(i = i.init)) {
              i(vnode, false
              /* hydrating */
              , parentElm, refElm);
            } // after calling the init hook, if the vnode is a child component
            // it should've created a child instance and mounted it. the child
            // component also has set the placeholder vnode's elm.
            // in that case we can just return the element and be done.


            if (isDef(vnode.componentInstance)) {
              initComponent(vnode, insertedVnodeQueue);

              if (isTrue(isReactivated)) {
                reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
              }

              return true;
            }
          }
        }

        function initComponent(vnode, insertedVnodeQueue) {
          if (isDef(vnode.data.pendingInsert)) {
            insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
            vnode.data.pendingInsert = null;
          }

          vnode.elm = vnode.componentInstance.$el;

          if (isPatchable(vnode)) {
            invokeCreateHooks(vnode, insertedVnodeQueue);
            setScope(vnode);
          } else {
            // empty component root.
            // skip all element-related modules except for ref (#3455)
            registerRef(vnode); // make sure to invoke the insert hook

            insertedVnodeQueue.push(vnode);
          }
        }

        function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
          var i; // hack for #4339: a reactivated component with inner transition
          // does not trigger because the inner node's created hooks are not called
          // again. It's not ideal to involve module-specific logic in here but
          // there doesn't seem to be a better way to do it.

          var innerNode = vnode;

          while (innerNode.componentInstance) {
            innerNode = innerNode.componentInstance._vnode;

            if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
              for (i = 0; i < cbs.activate.length; ++i) {
                cbs.activate[i](emptyNode, innerNode);
              }

              insertedVnodeQueue.push(innerNode);
              break;
            }
          } // unlike a newly created component,
          // a reactivated keep-alive component doesn't insert itself


          insert(parentElm, vnode.elm, refElm);
        }

        function insert(parent, elm, ref$$1) {
          if (isDef(parent)) {
            if (isDef(ref$$1)) {
              if (ref$$1.parentNode === parent) {
                nodeOps.insertBefore(parent, elm, ref$$1);
              }
            } else {
              nodeOps.appendChild(parent, elm);
            }
          }
        }

        function createChildren(vnode, children, insertedVnodeQueue) {
          if (Array.isArray(children)) {
            if (true) {
              checkDuplicateKeys(children);
            }

            for (var i = 0; i < children.length; ++i) {
              createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
            }
          } else if (isPrimitive(vnode.text)) {
            nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
          }
        }

        function isPatchable(vnode) {
          while (vnode.componentInstance) {
            vnode = vnode.componentInstance._vnode;
          }

          return isDef(vnode.tag);
        }

        function invokeCreateHooks(vnode, insertedVnodeQueue) {
          for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
            cbs.create[i$1](emptyNode, vnode);
          }

          i = vnode.data.hook; // Reuse variable

          if (isDef(i)) {
            if (isDef(i.create)) {
              i.create(emptyNode, vnode);
            }

            if (isDef(i.insert)) {
              insertedVnodeQueue.push(vnode);
            }
          }
        } // set scope id attribute for scoped CSS.
        // this is implemented as a special case to avoid the overhead
        // of going through the normal attribute patching process.


        function setScope(vnode) {
          var i;

          if (isDef(i = vnode.fnScopeId)) {
            nodeOps.setStyleScope(vnode.elm, i);
          } else {
            var ancestor = vnode;

            while (ancestor) {
              if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
                nodeOps.setStyleScope(vnode.elm, i);
              }

              ancestor = ancestor.parent;
            }
          } // for slot content they should also get the scopeId from the host instance.


          if (isDef(i = activeInstance) && i !== vnode.context && i !== vnode.fnContext && isDef(i = i.$options._scopeId)) {
            nodeOps.setStyleScope(vnode.elm, i);
          }
        }

        function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
          for (; startIdx <= endIdx; ++startIdx) {
            createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
          }
        }

        function invokeDestroyHook(vnode) {
          var i, j;
          var data = vnode.data;

          if (isDef(data)) {
            if (isDef(i = data.hook) && isDef(i = i.destroy)) {
              i(vnode);
            }

            for (i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](vnode);
            }
          }

          if (isDef(i = vnode.children)) {
            for (j = 0; j < vnode.children.length; ++j) {
              invokeDestroyHook(vnode.children[j]);
            }
          }
        }

        function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
          for (; startIdx <= endIdx; ++startIdx) {
            var ch = vnodes[startIdx];

            if (isDef(ch)) {
              if (isDef(ch.tag)) {
                removeAndInvokeRemoveHook(ch);
                invokeDestroyHook(ch);
              } else {
                // Text node
                removeNode(ch.elm);
              }
            }
          }
        }

        function removeAndInvokeRemoveHook(vnode, rm) {
          if (isDef(rm) || isDef(vnode.data)) {
            var i;
            var listeners = cbs.remove.length + 1;

            if (isDef(rm)) {
              // we have a recursively passed down rm callback
              // increase the listeners count
              rm.listeners += listeners;
            } else {
              // directly removing
              rm = createRmCb(vnode.elm, listeners);
            } // recursively invoke hooks on child component root node


            if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
              removeAndInvokeRemoveHook(i, rm);
            }

            for (i = 0; i < cbs.remove.length; ++i) {
              cbs.remove[i](vnode, rm);
            }

            if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
              i(vnode, rm);
            } else {
              rm();
            }
          } else {
            removeNode(vnode.elm);
          }
        }

        function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
          var oldStartIdx = 0;
          var newStartIdx = 0;
          var oldEndIdx = oldCh.length - 1;
          var oldStartVnode = oldCh[0];
          var oldEndVnode = oldCh[oldEndIdx];
          var newEndIdx = newCh.length - 1;
          var newStartVnode = newCh[0];
          var newEndVnode = newCh[newEndIdx];
          var oldKeyToIdx, idxInOld, vnodeToMove, refElm; // removeOnly is a special flag used only by <transition-group>
          // to ensure removed elements stay in correct relative positions
          // during leaving transitions

          var canMove = !removeOnly;

          if (true) {
            checkDuplicateKeys(newCh);
          }

          while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
            if (isUndef(oldStartVnode)) {
              oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
            } else if (isUndef(oldEndVnode)) {
              oldEndVnode = oldCh[--oldEndIdx];
            } else if (sameVnode(oldStartVnode, newStartVnode)) {
              patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
              oldStartVnode = oldCh[++oldStartIdx];
              newStartVnode = newCh[++newStartIdx];
            } else if (sameVnode(oldEndVnode, newEndVnode)) {
              patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
              oldEndVnode = oldCh[--oldEndIdx];
              newEndVnode = newCh[--newEndIdx];
            } else if (sameVnode(oldStartVnode, newEndVnode)) {
              // Vnode moved right
              patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
              canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
              oldStartVnode = oldCh[++oldStartIdx];
              newEndVnode = newCh[--newEndIdx];
            } else if (sameVnode(oldEndVnode, newStartVnode)) {
              // Vnode moved left
              patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
              canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
              oldEndVnode = oldCh[--oldEndIdx];
              newStartVnode = newCh[++newStartIdx];
            } else {
              if (isUndef(oldKeyToIdx)) {
                oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
              }

              idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);

              if (isUndef(idxInOld)) {
                // New element
                createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
              } else {
                vnodeToMove = oldCh[idxInOld];

                if (sameVnode(vnodeToMove, newStartVnode)) {
                  patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);
                  oldCh[idxInOld] = undefined;
                  canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
                } else {
                  // same key but different element. treat as new element
                  createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
                }
              }

              newStartVnode = newCh[++newStartIdx];
            }
          }

          if (oldStartIdx > oldEndIdx) {
            refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
            addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
          } else if (newStartIdx > newEndIdx) {
            removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
          }
        }

        function checkDuplicateKeys(children) {
          var seenKeys = {};

          for (var i = 0; i < children.length; i++) {
            var vnode = children[i];
            var key = vnode.key;

            if (isDef(key)) {
              if (seenKeys[key]) {
                warn("Duplicate keys detected: '" + key + "'. This may cause an update error.", vnode.context);
              } else {
                seenKeys[key] = true;
              }
            }
          }
        }

        function findIdxInOld(node, oldCh, start, end) {
          for (var i = start; i < end; i++) {
            var c = oldCh[i];

            if (isDef(c) && sameVnode(node, c)) {
              return i;
            }
          }
        }

        function patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly) {
          if (oldVnode === vnode) {
            return;
          }

          var elm = vnode.elm = oldVnode.elm;

          if (isTrue(oldVnode.isAsyncPlaceholder)) {
            if (isDef(vnode.asyncFactory.resolved)) {
              hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
            } else {
              vnode.isAsyncPlaceholder = true;
            }

            return;
          } // reuse element for static trees.
          // note we only do this if the vnode is cloned -
          // if the new node is not cloned it means the render functions have been
          // reset by the hot-reload-api and we need to do a proper re-render.


          if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
            vnode.componentInstance = oldVnode.componentInstance;
            return;
          }

          var i;
          var data = vnode.data;

          if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
            i(oldVnode, vnode);
          }

          var oldCh = oldVnode.children;
          var ch = vnode.children;

          if (isDef(data) && isPatchable(vnode)) {
            for (i = 0; i < cbs.update.length; ++i) {
              cbs.update[i](oldVnode, vnode);
            }

            if (isDef(i = data.hook) && isDef(i = i.update)) {
              i(oldVnode, vnode);
            }
          }

          if (isUndef(vnode.text)) {
            if (isDef(oldCh) && isDef(ch)) {
              if (oldCh !== ch) {
                updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
              }
            } else if (isDef(ch)) {
              if (isDef(oldVnode.text)) {
                nodeOps.setTextContent(elm, '');
              }

              addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
            } else if (isDef(oldCh)) {
              removeVnodes(elm, oldCh, 0, oldCh.length - 1);
            } else if (isDef(oldVnode.text)) {
              nodeOps.setTextContent(elm, '');
            }
          } else if (oldVnode.text !== vnode.text) {
            nodeOps.setTextContent(elm, vnode.text);
          }

          if (isDef(data)) {
            if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
              i(oldVnode, vnode);
            }
          }
        }

        function invokeInsertHook(vnode, queue, initial) {
          // delay insert hooks for component root nodes, invoke them after the
          // element is really inserted
          if (isTrue(initial) && isDef(vnode.parent)) {
            vnode.parent.data.pendingInsert = queue;
          } else {
            for (var i = 0; i < queue.length; ++i) {
              queue[i].data.hook.insert(queue[i]);
            }
          }
        }

        var hydrationBailed = false; // list of modules that can skip create hook during hydration because they
        // are already rendered on the client or has no need for initialization
        // Note: style is excluded because it relies on initial clone for future
        // deep updates (#7063).

        var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key'); // Note: this is a browser-only function so we can assume elms are DOM nodes.

        function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
          var i;
          var tag = vnode.tag;
          var data = vnode.data;
          var children = vnode.children;
          inVPre = inVPre || data && data.pre;
          vnode.elm = elm;

          if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
            vnode.isAsyncPlaceholder = true;
            return true;
          } // assert node match


          if (true) {
            if (!assertNodeMatch(elm, vnode, inVPre)) {
              return false;
            }
          }

          if (isDef(data)) {
            if (isDef(i = data.hook) && isDef(i = i.init)) {
              i(vnode, true
              /* hydrating */
              );
            }

            if (isDef(i = vnode.componentInstance)) {
              // child component. it should have hydrated its own tree.
              initComponent(vnode, insertedVnodeQueue);
              return true;
            }
          }

          if (isDef(tag)) {
            if (isDef(children)) {
              // empty element, allow client to pick up and populate children
              if (!elm.hasChildNodes()) {
                createChildren(vnode, children, insertedVnodeQueue);
              } else {
                // v-html and domProps: innerHTML
                if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
                  if (i !== elm.innerHTML) {
                    /* istanbul ignore if */
                    if ( true && typeof console !== 'undefined' && !hydrationBailed) {
                      hydrationBailed = true;
                      console.warn('Parent: ', elm);
                      console.warn('server innerHTML: ', i);
                      console.warn('client innerHTML: ', elm.innerHTML);
                    }

                    return false;
                  }
                } else {
                  // iterate and compare children lists
                  var childrenMatch = true;
                  var childNode = elm.firstChild;

                  for (var i$1 = 0; i$1 < children.length; i$1++) {
                    if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                      childrenMatch = false;
                      break;
                    }

                    childNode = childNode.nextSibling;
                  } // if childNode is not null, it means the actual childNodes list is
                  // longer than the virtual children list.


                  if (!childrenMatch || childNode) {
                    /* istanbul ignore if */
                    if ( true && typeof console !== 'undefined' && !hydrationBailed) {
                      hydrationBailed = true;
                      console.warn('Parent: ', elm);
                      console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
                    }

                    return false;
                  }
                }
              }
            }

            if (isDef(data)) {
              var fullInvoke = false;

              for (var key in data) {
                if (!isRenderedModule(key)) {
                  fullInvoke = true;
                  invokeCreateHooks(vnode, insertedVnodeQueue);
                  break;
                }
              }

              if (!fullInvoke && data['class']) {
                // ensure collecting deps for deep class bindings for future updates
                traverse(data['class']);
              }
            }
          } else if (elm.data !== vnode.text) {
            elm.data = vnode.text;
          }

          return true;
        }

        function assertNodeMatch(node, vnode, inVPre) {
          if (isDef(vnode.tag)) {
            return vnode.tag.indexOf('vue-component') === 0 || !isUnknownElement$$1(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
          } else {
            return node.nodeType === (vnode.isComment ? 8 : 3);
          }
        }

        return function patch(oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {
          if (isUndef(vnode)) {
            if (isDef(oldVnode)) {
              invokeDestroyHook(oldVnode);
            }

            return;
          }

          var isInitialPatch = false;
          var insertedVnodeQueue = [];

          if (isUndef(oldVnode)) {
            // empty mount (likely as component), create new root element
            isInitialPatch = true;
            createElm(vnode, insertedVnodeQueue, parentElm, refElm);
          } else {
            var isRealElement = isDef(oldVnode.nodeType);

            if (!isRealElement && sameVnode(oldVnode, vnode)) {
              // patch existing root node
              patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);
            } else {
              if (isRealElement) {
                // mounting to a real element
                // check if this is server-rendered content and if we can perform
                // a successful hydration.
                if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
                  oldVnode.removeAttribute(SSR_ATTR);
                  hydrating = true;
                }

                if (isTrue(hydrating)) {
                  if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
                    invokeInsertHook(vnode, insertedVnodeQueue, true);
                    return oldVnode;
                  } else if (true) {
                    warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
                  }
                } // either not server-rendered, or hydration failed.
                // create an empty node and replace it


                oldVnode = emptyNodeAt(oldVnode);
              } // replacing existing element


              var oldElm = oldVnode.elm;
              var parentElm$1 = nodeOps.parentNode(oldElm); // create new node

              createElm(vnode, insertedVnodeQueue, // extremely rare edge case: do not insert if old element is in a
              // leaving transition. Only happens when combining transition +
              // keep-alive + HOCs. (#4590)
              oldElm._leaveCb ? null : parentElm$1, nodeOps.nextSibling(oldElm)); // update parent placeholder node element, recursively

              if (isDef(vnode.parent)) {
                var ancestor = vnode.parent;
                var patchable = isPatchable(vnode);

                while (ancestor) {
                  for (var i = 0; i < cbs.destroy.length; ++i) {
                    cbs.destroy[i](ancestor);
                  }

                  ancestor.elm = vnode.elm;

                  if (patchable) {
                    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                      cbs.create[i$1](emptyNode, ancestor);
                    } // #6513
                    // invoke insert hooks that may have been merged by create hooks.
                    // e.g. for directives that uses the "inserted" hook.


                    var insert = ancestor.data.hook.insert;

                    if (insert.merged) {
                      // start at index 1 to avoid re-invoking component mounted hook
                      for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                        insert.fns[i$2]();
                      }
                    }
                  } else {
                    registerRef(ancestor);
                  }

                  ancestor = ancestor.parent;
                }
              } // destroy old node


              if (isDef(parentElm$1)) {
                removeVnodes(parentElm$1, [oldVnode], 0, 0);
              } else if (isDef(oldVnode.tag)) {
                invokeDestroyHook(oldVnode);
              }
            }
          }

          invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
          return vnode.elm;
        };
      }
      /*  */


      var directives = {
        create: updateDirectives,
        update: updateDirectives,
        destroy: function unbindDirectives(vnode) {
          updateDirectives(vnode, emptyNode);
        }
      };

      function updateDirectives(oldVnode, vnode) {
        if (oldVnode.data.directives || vnode.data.directives) {
          _update(oldVnode, vnode);
        }
      }

      function _update(oldVnode, vnode) {
        var isCreate = oldVnode === emptyNode;
        var isDestroy = vnode === emptyNode;
        var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
        var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
        var dirsWithInsert = [];
        var dirsWithPostpatch = [];
        var key, oldDir, dir;

        for (key in newDirs) {
          oldDir = oldDirs[key];
          dir = newDirs[key];

          if (!oldDir) {
            // new directive, bind
            callHook$1(dir, 'bind', vnode, oldVnode);

            if (dir.def && dir.def.inserted) {
              dirsWithInsert.push(dir);
            }
          } else {
            // existing directive, update
            dir.oldValue = oldDir.value;
            callHook$1(dir, 'update', vnode, oldVnode);

            if (dir.def && dir.def.componentUpdated) {
              dirsWithPostpatch.push(dir);
            }
          }
        }

        if (dirsWithInsert.length) {
          var callInsert = function callInsert() {
            for (var i = 0; i < dirsWithInsert.length; i++) {
              callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
            }
          };

          if (isCreate) {
            mergeVNodeHook(vnode, 'insert', callInsert);
          } else {
            callInsert();
          }
        }

        if (dirsWithPostpatch.length) {
          mergeVNodeHook(vnode, 'postpatch', function () {
            for (var i = 0; i < dirsWithPostpatch.length; i++) {
              callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
            }
          });
        }

        if (!isCreate) {
          for (key in oldDirs) {
            if (!newDirs[key]) {
              // no longer present, unbind
              callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
            }
          }
        }
      }

      var emptyModifiers = Object.create(null);

      function normalizeDirectives$1(dirs, vm) {
        var res = Object.create(null);

        if (!dirs) {
          // $flow-disable-line
          return res;
        }

        var i, dir;

        for (i = 0; i < dirs.length; i++) {
          dir = dirs[i];

          if (!dir.modifiers) {
            // $flow-disable-line
            dir.modifiers = emptyModifiers;
          }

          res[getRawDirName(dir)] = dir;
          dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
        } // $flow-disable-line


        return res;
      }

      function getRawDirName(dir) {
        return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
      }

      function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
        var fn = dir.def && dir.def[hook];

        if (fn) {
          try {
            fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
          } catch (e) {
            handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
          }
        }
      }

      var baseModules = [ref, directives];
      /*  */

      function updateAttrs(oldVnode, vnode) {
        var opts = vnode.componentOptions;

        if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
          return;
        }

        if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
          return;
        }

        var key, cur, old;
        var elm = vnode.elm;
        var oldAttrs = oldVnode.data.attrs || {};
        var attrs = vnode.data.attrs || {}; // clone observed objects, as the user probably wants to mutate it

        if (isDef(attrs.__ob__)) {
          attrs = vnode.data.attrs = extend({}, attrs);
        }

        for (key in attrs) {
          cur = attrs[key];
          old = oldAttrs[key];

          if (old !== cur) {
            setAttr(elm, key, cur);
          }
        } // #4391: in IE9, setting type can reset value for input[type=radio]
        // #6666: IE/Edge forces progress value down to 1 before setting a max

        /* istanbul ignore if */


        if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
          setAttr(elm, 'value', attrs.value);
        }

        for (key in oldAttrs) {
          if (isUndef(attrs[key])) {
            if (isXlink(key)) {
              elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
            } else if (!isEnumeratedAttr(key)) {
              elm.removeAttribute(key);
            }
          }
        }
      }

      function setAttr(el, key, value) {
        if (el.tagName.indexOf('-') > -1) {
          baseSetAttr(el, key, value);
        } else if (isBooleanAttr(key)) {
          // set attribute for blank value
          // e.g. <option disabled>Select one</option>
          if (isFalsyAttrValue(value)) {
            el.removeAttribute(key);
          } else {
            // technically allowfullscreen is a boolean attribute for <iframe>,
            // but Flash expects a value of "true" when used on <embed> tag
            value = key === 'allowfullscreen' && el.tagName === 'EMBED' ? 'true' : key;
            el.setAttribute(key, value);
          }
        } else if (isEnumeratedAttr(key)) {
          el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');
        } else if (isXlink(key)) {
          if (isFalsyAttrValue(value)) {
            el.removeAttributeNS(xlinkNS, getXlinkProp(key));
          } else {
            el.setAttributeNS(xlinkNS, key, value);
          }
        } else {
          baseSetAttr(el, key, value);
        }
      }

      function baseSetAttr(el, key, value) {
        if (isFalsyAttrValue(value)) {
          el.removeAttribute(key);
        } else {
          // #7138: IE10 & 11 fires input event when setting placeholder on
          // <textarea>... block the first input event and remove the blocker
          // immediately.

          /* istanbul ignore if */
          if (isIE && !isIE9 && el.tagName === 'TEXTAREA' && key === 'placeholder' && !el.__ieph) {
            var blocker = function blocker(e) {
              e.stopImmediatePropagation();
              el.removeEventListener('input', blocker);
            };

            el.addEventListener('input', blocker); // $flow-disable-line

            el.__ieph = true;
            /* IE placeholder patched */
          }

          el.setAttribute(key, value);
        }
      }

      var attrs = {
        create: updateAttrs,
        update: updateAttrs
        /*  */

      };

      function updateClass(oldVnode, vnode) {
        var el = vnode.elm;
        var data = vnode.data;
        var oldData = oldVnode.data;

        if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {
          return;
        }

        var cls = genClassForVnode(vnode); // handle transition classes

        var transitionClass = el._transitionClasses;

        if (isDef(transitionClass)) {
          cls = concat(cls, stringifyClass(transitionClass));
        } // set the class


        if (cls !== el._prevClass) {
          el.setAttribute('class', cls);
          el._prevClass = cls;
        }
      }

      var klass = {
        create: updateClass,
        update: updateClass
        /*  */

        /*  */
        // add a raw attr (use this in preTransforms)
        // note: this only removes the attr from the Array (attrsList) so that it
        // doesn't get processed by processAttrs.
        // By default it does NOT remove it from the map (attrsMap) because the map is
        // needed during codegen.

        /*  */

        /**
         * Cross-platform code generation for component v-model
         */

        /**
         * Cross-platform codegen helper for generating v-model value assignment code.
         */

        /*  */
        // in some cases, the event used has to be determined at runtime
        // so we used some reserved tokens during compile.

      };
      var RANGE_TOKEN = '__r';
      var CHECKBOX_RADIO_TOKEN = '__c';
      /*  */
      // normalize v-model event tokens that can only be determined at runtime.
      // it's important to place the event as the first in the array because
      // the whole point is ensuring the v-model callback gets called before
      // user-attached handlers.

      function normalizeEvents(on) {
        /* istanbul ignore if */
        if (isDef(on[RANGE_TOKEN])) {
          // IE input[type=range] only supports `change` event
          var event = isIE ? 'change' : 'input';
          on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
          delete on[RANGE_TOKEN];
        } // This was originally intended to fix #4521 but no longer necessary
        // after 2.5. Keeping it for backwards compat with generated code from < 2.4

        /* istanbul ignore if */


        if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
          on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
          delete on[CHECKBOX_RADIO_TOKEN];
        }
      }

      var target$1;

      function createOnceHandler(handler, event, capture) {
        var _target = target$1; // save current target element in closure

        return function onceHandler() {
          var res = handler.apply(null, arguments);

          if (res !== null) {
            remove$2(event, onceHandler, capture, _target);
          }
        };
      }

      function add$1(event, handler, once$$1, capture, passive) {
        handler = withMacroTask(handler);

        if (once$$1) {
          handler = createOnceHandler(handler, event, capture);
        }

        target$1.addEventListener(event, handler, supportsPassive ? {
          capture: capture,
          passive: passive
        } : capture);
      }

      function remove$2(event, handler, capture, _target) {
        (_target || target$1).removeEventListener(event, handler._withTask || handler, capture);
      }

      function updateDOMListeners(oldVnode, vnode) {
        if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
          return;
        }

        var on = vnode.data.on || {};
        var oldOn = oldVnode.data.on || {};
        target$1 = vnode.elm;
        normalizeEvents(on);
        updateListeners(on, oldOn, add$1, remove$2, vnode.context);
        target$1 = undefined;
      }

      var events = {
        create: updateDOMListeners,
        update: updateDOMListeners
        /*  */

      };

      function updateDOMProps(oldVnode, vnode) {
        if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
          return;
        }

        var key, cur;
        var elm = vnode.elm;
        var oldProps = oldVnode.data.domProps || {};
        var props = vnode.data.domProps || {}; // clone observed objects, as the user probably wants to mutate it

        if (isDef(props.__ob__)) {
          props = vnode.data.domProps = extend({}, props);
        }

        for (key in oldProps) {
          if (isUndef(props[key])) {
            elm[key] = '';
          }
        }

        for (key in props) {
          cur = props[key]; // ignore children if the node has textContent or innerHTML,
          // as these will throw away existing DOM nodes and cause removal errors
          // on subsequent patches (#3360)

          if (key === 'textContent' || key === 'innerHTML') {
            if (vnode.children) {
              vnode.children.length = 0;
            }

            if (cur === oldProps[key]) {
              continue;
            } // #6601 work around Chrome version <= 55 bug where single textNode
            // replaced by innerHTML/textContent retains its parentNode property


            if (elm.childNodes.length === 1) {
              elm.removeChild(elm.childNodes[0]);
            }
          }

          if (key === 'value') {
            // store value as _value as well since
            // non-string values will be stringified
            elm._value = cur; // avoid resetting cursor position when value is the same

            var strCur = isUndef(cur) ? '' : String(cur);

            if (shouldUpdateValue(elm, strCur)) {
              elm.value = strCur;
            }
          } else {
            elm[key] = cur;
          }
        }
      } // check platforms/web/util/attrs.js acceptValue


      function shouldUpdateValue(elm, checkVal) {
        return !elm.composing && (elm.tagName === 'OPTION' || isNotInFocusAndDirty(elm, checkVal) || isDirtyWithModifiers(elm, checkVal));
      }

      function isNotInFocusAndDirty(elm, checkVal) {
        // return true when textbox (.number and .trim) loses focus and its value is
        // not equal to the updated value
        var notInFocus = true; // #6157
        // work around IE bug when accessing document.activeElement in an iframe

        try {
          notInFocus = document.activeElement !== elm;
        } catch (e) {}

        return notInFocus && elm.value !== checkVal;
      }

      function isDirtyWithModifiers(elm, newVal) {
        var value = elm.value;
        var modifiers = elm._vModifiers; // injected by v-model runtime

        if (isDef(modifiers)) {
          if (modifiers.lazy) {
            // inputs with lazy should only be updated when not in focus
            return false;
          }

          if (modifiers.number) {
            return toNumber(value) !== toNumber(newVal);
          }

          if (modifiers.trim) {
            return value.trim() !== newVal.trim();
          }
        }

        return value !== newVal;
      }

      var domProps = {
        create: updateDOMProps,
        update: updateDOMProps
        /*  */

      };
      var parseStyleText = cached(function (cssText) {
        var res = {};
        var listDelimiter = /;(?![^(]*\))/g;
        var propertyDelimiter = /:(.+)/;
        cssText.split(listDelimiter).forEach(function (item) {
          if (item) {
            var tmp = item.split(propertyDelimiter);
            tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
          }
        });
        return res;
      }); // merge static and dynamic style data on the same vnode

      function normalizeStyleData(data) {
        var style = normalizeStyleBinding(data.style); // static style is pre-processed into an object during compilation
        // and is always a fresh object, so it's safe to merge into it

        return data.staticStyle ? extend(data.staticStyle, style) : style;
      } // normalize possible array / string values into Object


      function normalizeStyleBinding(bindingStyle) {
        if (Array.isArray(bindingStyle)) {
          return toObject(bindingStyle);
        }

        if (typeof bindingStyle === 'string') {
          return parseStyleText(bindingStyle);
        }

        return bindingStyle;
      }
      /**
       * parent component style should be after child's
       * so that parent component's style could override it
       */


      function getStyle(vnode, checkChild) {
        var res = {};
        var styleData;

        if (checkChild) {
          var childNode = vnode;

          while (childNode.componentInstance) {
            childNode = childNode.componentInstance._vnode;

            if (childNode && childNode.data && (styleData = normalizeStyleData(childNode.data))) {
              extend(res, styleData);
            }
          }
        }

        if (styleData = normalizeStyleData(vnode.data)) {
          extend(res, styleData);
        }

        var parentNode = vnode;

        while (parentNode = parentNode.parent) {
          if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
            extend(res, styleData);
          }
        }

        return res;
      }
      /*  */


      var cssVarRE = /^--/;
      var importantRE = /\s*!important$/;

      var setProp = function setProp(el, name, val) {
        /* istanbul ignore if */
        if (cssVarRE.test(name)) {
          el.style.setProperty(name, val);
        } else if (importantRE.test(val)) {
          el.style.setProperty(name, val.replace(importantRE, ''), 'important');
        } else {
          var normalizedName = normalize(name);

          if (Array.isArray(val)) {
            // Support values array created by autoprefixer, e.g.
            // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
            // Set them one by one, and the browser will only set those it can recognize
            for (var i = 0, len = val.length; i < len; i++) {
              el.style[normalizedName] = val[i];
            }
          } else {
            el.style[normalizedName] = val;
          }
        }
      };

      var vendorNames = ['Webkit', 'Moz', 'ms'];
      var emptyStyle;
      var normalize = cached(function (prop) {
        emptyStyle = emptyStyle || document.createElement('div').style;
        prop = camelize(prop);

        if (prop !== 'filter' && prop in emptyStyle) {
          return prop;
        }

        var capName = prop.charAt(0).toUpperCase() + prop.slice(1);

        for (var i = 0; i < vendorNames.length; i++) {
          var name = vendorNames[i] + capName;

          if (name in emptyStyle) {
            return name;
          }
        }
      });

      function updateStyle(oldVnode, vnode) {
        var data = vnode.data;
        var oldData = oldVnode.data;

        if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
          return;
        }

        var cur, name;
        var el = vnode.elm;
        var oldStaticStyle = oldData.staticStyle;
        var oldStyleBinding = oldData.normalizedStyle || oldData.style || {}; // if static style exists, stylebinding already merged into it when doing normalizeStyleData

        var oldStyle = oldStaticStyle || oldStyleBinding;
        var style = normalizeStyleBinding(vnode.data.style) || {}; // store normalized style under a different key for next diff
        // make sure to clone it if it's reactive, since the user likely wants
        // to mutate it.

        vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;
        var newStyle = getStyle(vnode, true);

        for (name in oldStyle) {
          if (isUndef(newStyle[name])) {
            setProp(el, name, '');
          }
        }

        for (name in newStyle) {
          cur = newStyle[name];

          if (cur !== oldStyle[name]) {
            // ie9 setting to null has no effect, must use empty string
            setProp(el, name, cur == null ? '' : cur);
          }
        }
      }

      var style = {
        create: updateStyle,
        update: updateStyle
        /*  */

        /**
         * Add class with compatibility for SVG since classList is not supported on
         * SVG elements in IE
         */

      };

      function addClass(el, cls) {
        /* istanbul ignore if */
        if (!cls || !(cls = cls.trim())) {
          return;
        }
        /* istanbul ignore else */


        if (el.classList) {
          if (cls.indexOf(' ') > -1) {
            cls.split(/\s+/).forEach(function (c) {
              return el.classList.add(c);
            });
          } else {
            el.classList.add(cls);
          }
        } else {
          var cur = " " + (el.getAttribute('class') || '') + " ";

          if (cur.indexOf(' ' + cls + ' ') < 0) {
            el.setAttribute('class', (cur + cls).trim());
          }
        }
      }
      /**
       * Remove class with compatibility for SVG since classList is not supported on
       * SVG elements in IE
       */


      function removeClass(el, cls) {
        /* istanbul ignore if */
        if (!cls || !(cls = cls.trim())) {
          return;
        }
        /* istanbul ignore else */


        if (el.classList) {
          if (cls.indexOf(' ') > -1) {
            cls.split(/\s+/).forEach(function (c) {
              return el.classList.remove(c);
            });
          } else {
            el.classList.remove(cls);
          }

          if (!el.classList.length) {
            el.removeAttribute('class');
          }
        } else {
          var cur = " " + (el.getAttribute('class') || '') + " ";
          var tar = ' ' + cls + ' ';

          while (cur.indexOf(tar) >= 0) {
            cur = cur.replace(tar, ' ');
          }

          cur = cur.trim();

          if (cur) {
            el.setAttribute('class', cur);
          } else {
            el.removeAttribute('class');
          }
        }
      }
      /*  */


      function resolveTransition(def) {
        if (!def) {
          return;
        }
        /* istanbul ignore else */


        if (typeof def === 'object') {
          var res = {};

          if (def.css !== false) {
            extend(res, autoCssTransition(def.name || 'v'));
          }

          extend(res, def);
          return res;
        } else if (typeof def === 'string') {
          return autoCssTransition(def);
        }
      }

      var autoCssTransition = cached(function (name) {
        return {
          enterClass: name + "-enter",
          enterToClass: name + "-enter-to",
          enterActiveClass: name + "-enter-active",
          leaveClass: name + "-leave",
          leaveToClass: name + "-leave-to",
          leaveActiveClass: name + "-leave-active"
        };
      });
      var hasTransition = inBrowser && !isIE9;
      var TRANSITION = 'transition';
      var ANIMATION = 'animation'; // Transition property/event sniffing

      var transitionProp = 'transition';
      var transitionEndEvent = 'transitionend';
      var animationProp = 'animation';
      var animationEndEvent = 'animationend';

      if (hasTransition) {
        /* istanbul ignore if */
        if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
          transitionProp = 'WebkitTransition';
          transitionEndEvent = 'webkitTransitionEnd';
        }

        if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
          animationProp = 'WebkitAnimation';
          animationEndEvent = 'webkitAnimationEnd';
        }
      } // binding to window is necessary to make hot reload work in IE in strict mode


      var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout :
      /* istanbul ignore next */
      function (fn) {
        return fn();
      };

      function nextFrame(fn) {
        raf(function () {
          raf(fn);
        });
      }

      function addTransitionClass(el, cls) {
        var transitionClasses = el._transitionClasses || (el._transitionClasses = []);

        if (transitionClasses.indexOf(cls) < 0) {
          transitionClasses.push(cls);
          addClass(el, cls);
        }
      }

      function removeTransitionClass(el, cls) {
        if (el._transitionClasses) {
          remove(el._transitionClasses, cls);
        }

        removeClass(el, cls);
      }

      function whenTransitionEnds(el, expectedType, cb) {
        var ref = getTransitionInfo(el, expectedType);
        var type = ref.type;
        var timeout = ref.timeout;
        var propCount = ref.propCount;

        if (!type) {
          return cb();
        }

        var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
        var ended = 0;

        var end = function end() {
          el.removeEventListener(event, onEnd);
          cb();
        };

        var onEnd = function onEnd(e) {
          if (e.target === el) {
            if (++ended >= propCount) {
              end();
            }
          }
        };

        setTimeout(function () {
          if (ended < propCount) {
            end();
          }
        }, timeout + 1);
        el.addEventListener(event, onEnd);
      }

      var transformRE = /\b(transform|all)(,|$)/;

      function getTransitionInfo(el, expectedType) {
        var styles = window.getComputedStyle(el);
        var transitionDelays = styles[transitionProp + 'Delay'].split(', ');
        var transitionDurations = styles[transitionProp + 'Duration'].split(', ');
        var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
        var animationDelays = styles[animationProp + 'Delay'].split(', ');
        var animationDurations = styles[animationProp + 'Duration'].split(', ');
        var animationTimeout = getTimeout(animationDelays, animationDurations);
        var type;
        var timeout = 0;
        var propCount = 0;
        /* istanbul ignore if */

        if (expectedType === TRANSITION) {
          if (transitionTimeout > 0) {
            type = TRANSITION;
            timeout = transitionTimeout;
            propCount = transitionDurations.length;
          }
        } else if (expectedType === ANIMATION) {
          if (animationTimeout > 0) {
            type = ANIMATION;
            timeout = animationTimeout;
            propCount = animationDurations.length;
          }
        } else {
          timeout = Math.max(transitionTimeout, animationTimeout);
          type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
          propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
        }

        var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);
        return {
          type: type,
          timeout: timeout,
          propCount: propCount,
          hasTransform: hasTransform
        };
      }

      function getTimeout(delays, durations) {
        /* istanbul ignore next */
        while (delays.length < durations.length) {
          delays = delays.concat(delays);
        }

        return Math.max.apply(null, durations.map(function (d, i) {
          return toMs(d) + toMs(delays[i]);
        }));
      }

      function toMs(s) {
        return Number(s.slice(0, -1)) * 1000;
      }
      /*  */


      function enter(vnode, toggleDisplay) {
        var el = vnode.elm; // call leave callback now

        if (isDef(el._leaveCb)) {
          el._leaveCb.cancelled = true;

          el._leaveCb();
        }

        var data = resolveTransition(vnode.data.transition);

        if (isUndef(data)) {
          return;
        }
        /* istanbul ignore if */


        if (isDef(el._enterCb) || el.nodeType !== 1) {
          return;
        }

        var css = data.css;
        var type = data.type;
        var enterClass = data.enterClass;
        var enterToClass = data.enterToClass;
        var enterActiveClass = data.enterActiveClass;
        var appearClass = data.appearClass;
        var appearToClass = data.appearToClass;
        var appearActiveClass = data.appearActiveClass;
        var beforeEnter = data.beforeEnter;
        var enter = data.enter;
        var afterEnter = data.afterEnter;
        var enterCancelled = data.enterCancelled;
        var beforeAppear = data.beforeAppear;
        var appear = data.appear;
        var afterAppear = data.afterAppear;
        var appearCancelled = data.appearCancelled;
        var duration = data.duration; // activeInstance will always be the <transition> component managing this
        // transition. One edge case to check is when the <transition> is placed
        // as the root node of a child component. In that case we need to check
        // <transition>'s parent for appear check.

        var context = activeInstance;
        var transitionNode = activeInstance.$vnode;

        while (transitionNode && transitionNode.parent) {
          transitionNode = transitionNode.parent;
          context = transitionNode.context;
        }

        var isAppear = !context._isMounted || !vnode.isRootInsert;

        if (isAppear && !appear && appear !== '') {
          return;
        }

        var startClass = isAppear && appearClass ? appearClass : enterClass;
        var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
        var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
        var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
        var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
        var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
        var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
        var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);

        if ( true && explicitEnterDuration != null) {
          checkDuration(explicitEnterDuration, 'enter', vnode);
        }

        var expectsCSS = css !== false && !isIE9;
        var userWantsControl = getHookArgumentsLength(enterHook);
        var cb = el._enterCb = once(function () {
          if (expectsCSS) {
            removeTransitionClass(el, toClass);
            removeTransitionClass(el, activeClass);
          }

          if (cb.cancelled) {
            if (expectsCSS) {
              removeTransitionClass(el, startClass);
            }

            enterCancelledHook && enterCancelledHook(el);
          } else {
            afterEnterHook && afterEnterHook(el);
          }

          el._enterCb = null;
        });

        if (!vnode.data.show) {
          // remove pending leave element on enter by injecting an insert hook
          mergeVNodeHook(vnode, 'insert', function () {
            var parent = el.parentNode;
            var pendingNode = parent && parent._pending && parent._pending[vnode.key];

            if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
              pendingNode.elm._leaveCb();
            }

            enterHook && enterHook(el, cb);
          });
        } // start enter transition


        beforeEnterHook && beforeEnterHook(el);

        if (expectsCSS) {
          addTransitionClass(el, startClass);
          addTransitionClass(el, activeClass);
          nextFrame(function () {
            removeTransitionClass(el, startClass);

            if (!cb.cancelled) {
              addTransitionClass(el, toClass);

              if (!userWantsControl) {
                if (isValidDuration(explicitEnterDuration)) {
                  setTimeout(cb, explicitEnterDuration);
                } else {
                  whenTransitionEnds(el, type, cb);
                }
              }
            }
          });
        }

        if (vnode.data.show) {
          toggleDisplay && toggleDisplay();
          enterHook && enterHook(el, cb);
        }

        if (!expectsCSS && !userWantsControl) {
          cb();
        }
      }

      function leave(vnode, rm) {
        var el = vnode.elm; // call enter callback now

        if (isDef(el._enterCb)) {
          el._enterCb.cancelled = true;

          el._enterCb();
        }

        var data = resolveTransition(vnode.data.transition);

        if (isUndef(data) || el.nodeType !== 1) {
          return rm();
        }
        /* istanbul ignore if */


        if (isDef(el._leaveCb)) {
          return;
        }

        var css = data.css;
        var type = data.type;
        var leaveClass = data.leaveClass;
        var leaveToClass = data.leaveToClass;
        var leaveActiveClass = data.leaveActiveClass;
        var beforeLeave = data.beforeLeave;
        var leave = data.leave;
        var afterLeave = data.afterLeave;
        var leaveCancelled = data.leaveCancelled;
        var delayLeave = data.delayLeave;
        var duration = data.duration;
        var expectsCSS = css !== false && !isIE9;
        var userWantsControl = getHookArgumentsLength(leave);
        var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);

        if ( true && isDef(explicitLeaveDuration)) {
          checkDuration(explicitLeaveDuration, 'leave', vnode);
        }

        var cb = el._leaveCb = once(function () {
          if (el.parentNode && el.parentNode._pending) {
            el.parentNode._pending[vnode.key] = null;
          }

          if (expectsCSS) {
            removeTransitionClass(el, leaveToClass);
            removeTransitionClass(el, leaveActiveClass);
          }

          if (cb.cancelled) {
            if (expectsCSS) {
              removeTransitionClass(el, leaveClass);
            }

            leaveCancelled && leaveCancelled(el);
          } else {
            rm();
            afterLeave && afterLeave(el);
          }

          el._leaveCb = null;
        });

        if (delayLeave) {
          delayLeave(performLeave);
        } else {
          performLeave();
        }

        function performLeave() {
          // the delayed leave may have already been cancelled
          if (cb.cancelled) {
            return;
          } // record leaving element


          if (!vnode.data.show) {
            (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
          }

          beforeLeave && beforeLeave(el);

          if (expectsCSS) {
            addTransitionClass(el, leaveClass);
            addTransitionClass(el, leaveActiveClass);
            nextFrame(function () {
              removeTransitionClass(el, leaveClass);

              if (!cb.cancelled) {
                addTransitionClass(el, leaveToClass);

                if (!userWantsControl) {
                  if (isValidDuration(explicitLeaveDuration)) {
                    setTimeout(cb, explicitLeaveDuration);
                  } else {
                    whenTransitionEnds(el, type, cb);
                  }
                }
              }
            });
          }

          leave && leave(el, cb);

          if (!expectsCSS && !userWantsControl) {
            cb();
          }
        }
      } // only used in dev mode


      function checkDuration(val, name, vnode) {
        if (typeof val !== 'number') {
          warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
        } else if (isNaN(val)) {
          warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
        }
      }

      function isValidDuration(val) {
        return typeof val === 'number' && !isNaN(val);
      }
      /**
       * Normalize a transition hook's argument length. The hook may be:
       * - a merged hook (invoker) with the original in .fns
       * - a wrapped component method (check ._length)
       * - a plain function (.length)
       */


      function getHookArgumentsLength(fn) {
        if (isUndef(fn)) {
          return false;
        }

        var invokerFns = fn.fns;

        if (isDef(invokerFns)) {
          // invoker
          return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
        } else {
          return (fn._length || fn.length) > 1;
        }
      }

      function _enter(_, vnode) {
        if (vnode.data.show !== true) {
          enter(vnode);
        }
      }

      var transition = inBrowser ? {
        create: _enter,
        activate: _enter,
        remove: function remove$$1(vnode, rm) {
          /* istanbul ignore else */
          if (vnode.data.show !== true) {
            leave(vnode, rm);
          } else {
            rm();
          }
        }
      } : {};
      var platformModules = [attrs, klass, events, domProps, style, transition];
      /*  */
      // the directive module should be applied last, after all
      // built-in modules have been applied.

      var modules = platformModules.concat(baseModules);
      var patch = createPatchFunction({
        nodeOps: nodeOps,
        modules: modules
      });
      /**
       * Not type checking this file because flow doesn't like attaching
       * properties to Elements.
       */

      /* istanbul ignore if */

      if (isIE9) {
        // http://www.matts411.com/post/internet-explorer-9-oninput/
        document.addEventListener('selectionchange', function () {
          var el = document.activeElement;

          if (el && el.vmodel) {
            trigger(el, 'input');
          }
        });
      }

      var directive = {
        inserted: function inserted(el, binding, vnode, oldVnode) {
          if (vnode.tag === 'select') {
            // #6903
            if (oldVnode.elm && !oldVnode.elm._vOptions) {
              mergeVNodeHook(vnode, 'postpatch', function () {
                directive.componentUpdated(el, binding, vnode);
              });
            } else {
              setSelected(el, binding, vnode.context);
            }

            el._vOptions = [].map.call(el.options, getValue);
          } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
            el._vModifiers = binding.modifiers;

            if (!binding.modifiers.lazy) {
              el.addEventListener('compositionstart', onCompositionStart);
              el.addEventListener('compositionend', onCompositionEnd); // Safari < 10.2 & UIWebView doesn't fire compositionend when
              // switching focus before confirming composition choice
              // this also fixes the issue where some browsers e.g. iOS Chrome
              // fires "change" instead of "input" on autocomplete.

              el.addEventListener('change', onCompositionEnd);
              /* istanbul ignore if */

              if (isIE9) {
                el.vmodel = true;
              }
            }
          }
        },
        componentUpdated: function componentUpdated(el, binding, vnode) {
          if (vnode.tag === 'select') {
            setSelected(el, binding, vnode.context); // in case the options rendered by v-for have changed,
            // it's possible that the value is out-of-sync with the rendered options.
            // detect such cases and filter out values that no longer has a matching
            // option in the DOM.

            var prevOptions = el._vOptions;
            var curOptions = el._vOptions = [].map.call(el.options, getValue);

            if (curOptions.some(function (o, i) {
              return !looseEqual(o, prevOptions[i]);
            })) {
              // trigger change event if
              // no matching option found for at least one value
              var needReset = el.multiple ? binding.value.some(function (v) {
                return hasNoMatchingOption(v, curOptions);
              }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);

              if (needReset) {
                trigger(el, 'change');
              }
            }
          }
        }
      };

      function setSelected(el, binding, vm) {
        actuallySetSelected(el, binding, vm);
        /* istanbul ignore if */

        if (isIE || isEdge) {
          setTimeout(function () {
            actuallySetSelected(el, binding, vm);
          }, 0);
        }
      }

      function actuallySetSelected(el, binding, vm) {
        var value = binding.value;
        var isMultiple = el.multiple;

        if (isMultiple && !Array.isArray(value)) {
           true && warn("<select multiple v-model=\"" + binding.expression + "\"> " + "expects an Array value for its binding, but got " + Object.prototype.toString.call(value).slice(8, -1), vm);
          return;
        }

        var selected, option;

        for (var i = 0, l = el.options.length; i < l; i++) {
          option = el.options[i];

          if (isMultiple) {
            selected = looseIndexOf(value, getValue(option)) > -1;

            if (option.selected !== selected) {
              option.selected = selected;
            }
          } else {
            if (looseEqual(getValue(option), value)) {
              if (el.selectedIndex !== i) {
                el.selectedIndex = i;
              }

              return;
            }
          }
        }

        if (!isMultiple) {
          el.selectedIndex = -1;
        }
      }

      function hasNoMatchingOption(value, options) {
        return options.every(function (o) {
          return !looseEqual(o, value);
        });
      }

      function getValue(option) {
        return '_value' in option ? option._value : option.value;
      }

      function onCompositionStart(e) {
        e.target.composing = true;
      }

      function onCompositionEnd(e) {
        // prevent triggering an input event for no reason
        if (!e.target.composing) {
          return;
        }

        e.target.composing = false;
        trigger(e.target, 'input');
      }

      function trigger(el, type) {
        var e = document.createEvent('HTMLEvents');
        e.initEvent(type, true, true);
        el.dispatchEvent(e);
      }
      /*  */
      // recursively search for possible transition defined inside the component root


      function locateNode(vnode) {
        return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
      }

      var show = {
        bind: function bind(el, ref, vnode) {
          var value = ref.value;
          vnode = locateNode(vnode);
          var transition$$1 = vnode.data && vnode.data.transition;
          var originalDisplay = el.__vOriginalDisplay = el.style.display === 'none' ? '' : el.style.display;

          if (value && transition$$1) {
            vnode.data.show = true;
            enter(vnode, function () {
              el.style.display = originalDisplay;
            });
          } else {
            el.style.display = value ? originalDisplay : 'none';
          }
        },
        update: function update(el, ref, vnode) {
          var value = ref.value;
          var oldValue = ref.oldValue;
          /* istanbul ignore if */

          if (!value === !oldValue) {
            return;
          }

          vnode = locateNode(vnode);
          var transition$$1 = vnode.data && vnode.data.transition;

          if (transition$$1) {
            vnode.data.show = true;

            if (value) {
              enter(vnode, function () {
                el.style.display = el.__vOriginalDisplay;
              });
            } else {
              leave(vnode, function () {
                el.style.display = 'none';
              });
            }
          } else {
            el.style.display = value ? el.__vOriginalDisplay : 'none';
          }
        },
        unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
          if (!isDestroy) {
            el.style.display = el.__vOriginalDisplay;
          }
        }
      };
      var platformDirectives = {
        model: directive,
        show: show
        /*  */
        // Provides transition support for a single element/component.
        // supports transition mode (out-in / in-out)

      };
      var transitionProps = {
        name: String,
        appear: Boolean,
        css: Boolean,
        mode: String,
        type: String,
        enterClass: String,
        leaveClass: String,
        enterToClass: String,
        leaveToClass: String,
        enterActiveClass: String,
        leaveActiveClass: String,
        appearClass: String,
        appearActiveClass: String,
        appearToClass: String,
        duration: [Number, String, Object]
      }; // in case the child is also an abstract component, e.g. <keep-alive>
      // we want to recursively retrieve the real component to be rendered

      function getRealChild(vnode) {
        var compOptions = vnode && vnode.componentOptions;

        if (compOptions && compOptions.Ctor.options.abstract) {
          return getRealChild(getFirstComponentChild(compOptions.children));
        } else {
          return vnode;
        }
      }

      function extractTransitionData(comp) {
        var data = {};
        var options = comp.$options; // props

        for (var key in options.propsData) {
          data[key] = comp[key];
        } // events.
        // extract listeners and pass them directly to the transition methods


        var listeners = options._parentListeners;

        for (var key$1 in listeners) {
          data[camelize(key$1)] = listeners[key$1];
        }

        return data;
      }

      function placeholder(h, rawChild) {
        if (/\d-keep-alive$/.test(rawChild.tag)) {
          return h('keep-alive', {
            props: rawChild.componentOptions.propsData
          });
        }
      }

      function hasParentTransition(vnode) {
        while (vnode = vnode.parent) {
          if (vnode.data.transition) {
            return true;
          }
        }
      }

      function isSameChild(child, oldChild) {
        return oldChild.key === child.key && oldChild.tag === child.tag;
      }

      var Transition = {
        name: 'transition',
        props: transitionProps,
        abstract: true,
        render: function render(h) {
          var this$1 = this;
          var children = this.$slots.default;

          if (!children) {
            return;
          } // filter out text nodes (possible whitespaces)


          children = children.filter(function (c) {
            return c.tag || isAsyncPlaceholder(c);
          });
          /* istanbul ignore if */

          if (!children.length) {
            return;
          } // warn multiple elements


          if ( true && children.length > 1) {
            warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
          }

          var mode = this.mode; // warn invalid mode

          if ( true && mode && mode !== 'in-out' && mode !== 'out-in') {
            warn('invalid <transition> mode: ' + mode, this.$parent);
          }

          var rawChild = children[0]; // if this is a component root node and the component's
          // parent container node also has transition, skip.

          if (hasParentTransition(this.$vnode)) {
            return rawChild;
          } // apply transition data to child
          // use getRealChild() to ignore abstract components e.g. keep-alive


          var child = getRealChild(rawChild);
          /* istanbul ignore if */

          if (!child) {
            return rawChild;
          }

          if (this._leaving) {
            return placeholder(h, rawChild);
          } // ensure a key that is unique to the vnode type and to this transition
          // component instance. This key will be used to remove pending leaving nodes
          // during entering.


          var id = "__transition-" + this._uid + "-";
          child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
          var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
          var oldRawChild = this._vnode;
          var oldChild = getRealChild(oldRawChild); // mark v-show
          // so that the transition module can hand over the control to the directive

          if (child.data.directives && child.data.directives.some(function (d) {
            return d.name === 'show';
          })) {
            child.data.show = true;
          }

          if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && // #6687 component root is a comment node
          !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
            // replace old child transition data with fresh one
            // important for dynamic transitions!
            var oldData = oldChild.data.transition = extend({}, data); // handle transition mode

            if (mode === 'out-in') {
              // return placeholder node and queue update when leave finishes
              this._leaving = true;
              mergeVNodeHook(oldData, 'afterLeave', function () {
                this$1._leaving = false;
                this$1.$forceUpdate();
              });
              return placeholder(h, rawChild);
            } else if (mode === 'in-out') {
              if (isAsyncPlaceholder(child)) {
                return oldRawChild;
              }

              var delayedLeave;

              var performLeave = function performLeave() {
                delayedLeave();
              };

              mergeVNodeHook(data, 'afterEnter', performLeave);
              mergeVNodeHook(data, 'enterCancelled', performLeave);
              mergeVNodeHook(oldData, 'delayLeave', function (leave) {
                delayedLeave = leave;
              });
            }
          }

          return rawChild;
        }
        /*  */
        // Provides transition support for list items.
        // supports move transitions using the FLIP technique.
        // Because the vdom's children update algorithm is "unstable" - i.e.
        // it doesn't guarantee the relative positioning of removed elements,
        // we force transition-group to update its children into two passes:
        // in the first pass, we remove all nodes that need to be removed,
        // triggering their leaving transition; in the second pass, we insert/move
        // into the final desired state. This way in the second pass removed
        // nodes will remain where they should be.

      };
      var props = extend({
        tag: String,
        moveClass: String
      }, transitionProps);
      delete props.mode;
      var TransitionGroup = {
        props: props,
        render: function render(h) {
          var tag = this.tag || this.$vnode.data.tag || 'span';
          var map = Object.create(null);
          var prevChildren = this.prevChildren = this.children;
          var rawChildren = this.$slots.default || [];
          var children = this.children = [];
          var transitionData = extractTransitionData(this);

          for (var i = 0; i < rawChildren.length; i++) {
            var c = rawChildren[i];

            if (c.tag) {
              if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
                children.push(c);
                map[c.key] = c;
                (c.data || (c.data = {})).transition = transitionData;
              } else if (true) {
                var opts = c.componentOptions;
                var name = opts ? opts.Ctor.options.name || opts.tag || '' : c.tag;
                warn("<transition-group> children must be keyed: <" + name + ">");
              }
            }
          }

          if (prevChildren) {
            var kept = [];
            var removed = [];

            for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
              var c$1 = prevChildren[i$1];
              c$1.data.transition = transitionData;
              c$1.data.pos = c$1.elm.getBoundingClientRect();

              if (map[c$1.key]) {
                kept.push(c$1);
              } else {
                removed.push(c$1);
              }
            }

            this.kept = h(tag, null, kept);
            this.removed = removed;
          }

          return h(tag, null, children);
        },
        beforeUpdate: function beforeUpdate() {
          // force removing pass
          this.__patch__(this._vnode, this.kept, false, // hydrating
          true // removeOnly (!important, avoids unnecessary moves)
          );

          this._vnode = this.kept;
        },
        updated: function updated() {
          var children = this.prevChildren;
          var moveClass = this.moveClass || (this.name || 'v') + '-move';

          if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
            return;
          } // we divide the work into three loops to avoid mixing DOM reads and writes
          // in each iteration - which helps prevent layout thrashing.


          children.forEach(callPendingCbs);
          children.forEach(recordPosition);
          children.forEach(applyTranslation); // force reflow to put everything in position
          // assign to this to avoid being removed in tree-shaking
          // $flow-disable-line

          this._reflow = document.body.offsetHeight;
          children.forEach(function (c) {
            if (c.data.moved) {
              var el = c.elm;
              var s = el.style;
              addTransitionClass(el, moveClass);
              s.transform = s.WebkitTransform = s.transitionDuration = '';
              el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
                if (!e || /transform$/.test(e.propertyName)) {
                  el.removeEventListener(transitionEndEvent, cb);
                  el._moveCb = null;
                  removeTransitionClass(el, moveClass);
                }
              });
            }
          });
        },
        methods: {
          hasMove: function hasMove(el, moveClass) {
            /* istanbul ignore if */
            if (!hasTransition) {
              return false;
            }
            /* istanbul ignore if */


            if (this._hasMove) {
              return this._hasMove;
            } // Detect whether an element with the move class applied has
            // CSS transitions. Since the element may be inside an entering
            // transition at this very moment, we make a clone of it and remove
            // all other transition classes applied to ensure only the move class
            // is applied.


            var clone = el.cloneNode();

            if (el._transitionClasses) {
              el._transitionClasses.forEach(function (cls) {
                removeClass(clone, cls);
              });
            }

            addClass(clone, moveClass);
            clone.style.display = 'none';
            this.$el.appendChild(clone);
            var info = getTransitionInfo(clone);
            this.$el.removeChild(clone);
            return this._hasMove = info.hasTransform;
          }
        }
      };

      function callPendingCbs(c) {
        /* istanbul ignore if */
        if (c.elm._moveCb) {
          c.elm._moveCb();
        }
        /* istanbul ignore if */


        if (c.elm._enterCb) {
          c.elm._enterCb();
        }
      }

      function recordPosition(c) {
        c.data.newPos = c.elm.getBoundingClientRect();
      }

      function applyTranslation(c) {
        var oldPos = c.data.pos;
        var newPos = c.data.newPos;
        var dx = oldPos.left - newPos.left;
        var dy = oldPos.top - newPos.top;

        if (dx || dy) {
          c.data.moved = true;
          var s = c.elm.style;
          s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
          s.transitionDuration = '0s';
        }
      }

      var platformComponents = {
        Transition: Transition,
        TransitionGroup: TransitionGroup
        /*  */
        // install platform specific utils

      };
      Vue.config.mustUseProp = mustUseProp;
      Vue.config.isReservedTag = isReservedTag;
      Vue.config.isReservedAttr = isReservedAttr;
      Vue.config.getTagNamespace = getTagNamespace;
      Vue.config.isUnknownElement = isUnknownElement; // install platform runtime directives & components

      extend(Vue.options.directives, platformDirectives);
      extend(Vue.options.components, platformComponents); // install platform patch function

      Vue.prototype.__patch__ = inBrowser ? patch : noop; // public mount method

      Vue.prototype.$mount = function (el, hydrating) {
        el = el && inBrowser ? query(el) : undefined;
        return mountComponent(this, el, hydrating);
      }; // devtools global hook

      /* istanbul ignore next */


      if (inBrowser) {
        setTimeout(function () {
          if (config.devtools) {
            if (devtools) {
              devtools.emit('init', Vue);
            } else if ( true && isChrome) {
              console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
            }
          }

          if ( true && config.productionTip !== false && typeof console !== 'undefined') {
            console[console.info ? 'info' : 'log']("You are running Vue in development mode.\n" + "Make sure to turn on production mode when deploying for production.\n" + "See more tips at https://vuejs.org/guide/deployment.html");
          }
        }, 0);
      }
      /*  */

      /* harmony default export */


      __webpack_exports__["default"] = Vue;
      /* WEBPACK VAR INJECTION */
    }).call(this, __webpack_require__(
    /*! ./../../../shells/electron/node_modules/webpack/buildin/global.js */
    "./node_modules/webpack/buildin/global.js"), __webpack_require__(
    /*! ./../../../shells/electron/node_modules/timers-browserify/main.js */
    "./node_modules/timers-browserify/main.js").setImmediate);
    /***/
  },

  /***/
  "../../src/backend/component-selector.js":
  /*!***************************************************************************!*\
    !*** /home/akryum/Projets/vue-devtools/src/backend/component-selector.js ***!
    \***************************************************************************/

  /*! exports provided: default */

  /***/
  function srcBackendComponentSelectorJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony import */


    var _highlighter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./highlighter */
    "../../src/backend/highlighter.js");
    /* harmony import */


    var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./utils */
    "../../src/backend/utils.js");
    /* harmony import */


    var _devtools_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../devtools/env */
    "../../src/devtools/env.js");

    var ComponentSelector = function ComponentSelector(bridge, instanceMap) {
      var self = this;
      self.bridge = bridge;
      self.instanceMap = instanceMap;
      self.bindMethods();
      bridge.on('start-component-selector', self.startSelecting);
      bridge.on('stop-component-selector', self.stopSelecting);
    };
    /**
     * Adds event listeners for mouseover and mouseup
     */


    ComponentSelector.prototype.startSelecting = function startSelecting() {
      if (!_devtools_env__WEBPACK_IMPORTED_MODULE_2__["isBrowser"]) {
        return;
      }

      document.body.addEventListener('mouseover', this.elementMouseOver, true);
      document.body.addEventListener('click', this.elementClicked, true);
      document.body.addEventListener('mouseout', this.cancelEvent, true);
      document.body.addEventListener('mouseenter', this.cancelEvent, true);
      document.body.addEventListener('mouseleave', this.cancelEvent, true);
      document.body.addEventListener('mousedown', this.cancelEvent, true);
      document.body.addEventListener('mouseup', this.cancelEvent, true);
    };
    /**
     * Removes event listeners
     */


    ComponentSelector.prototype.stopSelecting = function stopSelecting() {
      if (!_devtools_env__WEBPACK_IMPORTED_MODULE_2__["isBrowser"]) {
        return;
      }

      document.body.removeEventListener('mouseover', this.elementMouseOver, true);
      document.body.removeEventListener('click', this.elementClicked, true);
      document.body.removeEventListener('mouseout', this.cancelEvent, true);
      document.body.removeEventListener('mouseenter', this.cancelEvent, true);
      document.body.removeEventListener('mouseleave', this.cancelEvent, true);
      document.body.removeEventListener('mousedown', this.cancelEvent, true);
      document.body.removeEventListener('mouseup', this.cancelEvent, true);
      Object(_highlighter__WEBPACK_IMPORTED_MODULE_0__["unHighlight"])();
    };
    /**
     * Highlights a component on element mouse over
     * @param {MouseEvent} e
     */


    ComponentSelector.prototype.elementMouseOver = function elementMouseOver(e) {
      this.cancelEvent(e);
      var el = e.target;

      if (el) {
        this.selectedInstance = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["findRelatedComponent"])(el);
      }

      Object(_highlighter__WEBPACK_IMPORTED_MODULE_0__["unHighlight"])();

      if (this.selectedInstance) {
        Object(_highlighter__WEBPACK_IMPORTED_MODULE_0__["highlight"])(this.selectedInstance);
      }
    };
    /**
     * Selects an instance in the component view
     * @param {MouseEvent} e
     */


    ComponentSelector.prototype.elementClicked = function elementClicked(e) {
      this.cancelEvent(e);

      if (this.selectedInstance) {
        this.bridge.send('inspect-instance', this.selectedInstance.__VUE_DEVTOOLS_UID__);
      }

      this.stopSelecting();
    };
    /**
     * Cancel a mouse event
     * @param {MouseEvent} e
     */


    ComponentSelector.prototype.cancelEvent = function cancelEvent(e) {
      e.stopImmediatePropagation();
      e.preventDefault();
    };
    /**
     * Bind class methods to the class scope to avoid rebind for event listeners
     */


    ComponentSelector.prototype.bindMethods = function bindMethods() {
      this.startSelecting = this.startSelecting.bind(this);
      this.stopSelecting = this.stopSelecting.bind(this);
      this.elementMouseOver = this.elementMouseOver.bind(this);
      this.elementClicked = this.elementClicked.bind(this);
    };
    /* harmony default export */


    __webpack_exports__["default"] = ComponentSelector;
    /***/
  },

  /***/
  "../../src/backend/events.js":
  /*!***************************************************************!*\
    !*** /home/akryum/Projets/vue-devtools/src/backend/events.js ***!
    \***************************************************************/

  /*! exports provided: initEventsBackend */

  /***/
  function srcBackendEventsJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "initEventsBackend", function () {
      return initEventsBackend;
    });
    /* harmony import */


    var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../util */
    "../../src/util.js");
    /* harmony import */


    var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./index */
    "../../src/backend/index.js");

    var internalRE = /^(?:pre-)?hook:/;

    function initEventsBackend(Vue, bridge) {
      var recording = true;
      bridge.send('events:reset');
      bridge.on('events:toggle-recording', function (enabled) {
        recording = enabled;
      });

      function logEvent(vm, type, eventName, payload) {
        // The string check is important for compat with 1.x where the first
        // argument may be an object instead of a string.
        // this also ensures the event is only logged for direct $emit (source)
        // instead of by $dispatch/$broadcast
        if (typeof eventName === 'string' && !internalRE.test(eventName)) {
          bridge.send('event:triggered', Object(_util__WEBPACK_IMPORTED_MODULE_0__["stringify"])({
            eventName: eventName,
            type: type,
            payload: payload,
            instanceId: vm._uid,
            instanceName: Object(_index__WEBPACK_IMPORTED_MODULE_1__["getInstanceName"])(vm._self || vm),
            timestamp: Date.now()
          }));
        }
      }

      function wrap(method) {
        var original = Vue.prototype[method];

        if (original) {
          Vue.prototype[method] = function () {
            var args = [],
                len = arguments.length;

            while (len--) args[len] = arguments[len];

            var res = original.apply(this, args);

            if (recording) {
              logEvent(this, method, args[0], args.slice(1));
            }

            return res;
          };
        }
      }

      wrap('$emit');
      wrap('$broadcast');
      wrap('$dispatch');
    }
    /***/

  },

  /***/
  "../../src/backend/highlighter.js":
  /*!********************************************************************!*\
    !*** /home/akryum/Projets/vue-devtools/src/backend/highlighter.js ***!
    \********************************************************************/

  /*! exports provided: highlight, unHighlight, getInstanceOrVnodeRect */

  /***/
  function srcBackendHighlighterJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "highlight", function () {
      return highlight;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "unHighlight", function () {
      return unHighlight;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getInstanceOrVnodeRect", function () {
      return getInstanceOrVnodeRect;
    });
    /* harmony import */


    var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../util */
    "../../src/util.js");
    /* harmony import */


    var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./index */
    "../../src/backend/index.js");
    /* harmony import */


    var src_shared_data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! src/shared-data */
    "../../src/shared-data.js");
    /* harmony import */


    var _devtools_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../devtools/env */
    "../../src/devtools/env.js");

    var overlay;
    var overlayContent;

    function init() {
      if (overlay || !_devtools_env__WEBPACK_IMPORTED_MODULE_3__["isBrowser"]) {
        return;
      }

      overlay = document.createElement('div');
      overlay.style.backgroundColor = 'rgba(104, 182, 255, 0.35)';
      overlay.style.position = 'fixed';
      overlay.style.zIndex = '99999999999999';
      overlay.style.pointerEvents = 'none';
      overlay.style.display = 'flex';
      overlay.style.alignItems = 'center';
      overlay.style.justifyContent = 'center';
      overlay.style.borderRadius = '3px';
      overlayContent = document.createElement('div');
      overlayContent.style.backgroundColor = 'rgba(104, 182, 255, 0.9)';
      overlayContent.style.fontFamily = 'monospace';
      overlayContent.style.fontSize = '11px';
      overlayContent.style.padding = '2px 3px';
      overlayContent.style.borderRadius = '3px';
      overlayContent.style.color = 'white';
      overlay.appendChild(overlayContent);
    }
    /**
     * Highlight an instance.
     *
     * @param {Vue} instance
     */


    function highlight(instance) {
      if (!instance) {
        return;
      }

      var rect = getInstanceOrVnodeRect(instance);

      if (!_devtools_env__WEBPACK_IMPORTED_MODULE_3__["isBrowser"]) {
        // TODO: Highlight rect area.
        return;
      }

      init();

      if (rect) {
        var content = '';
        var name = instance.fnContext ? Object(_util__WEBPACK_IMPORTED_MODULE_0__["getComponentName"])(instance.fnOptions) : Object(_index__WEBPACK_IMPORTED_MODULE_1__["getInstanceName"])(instance);

        if (src_shared_data__WEBPACK_IMPORTED_MODULE_2__["default"].classifyComponents) {
          name = Object(_util__WEBPACK_IMPORTED_MODULE_0__["classify"])(name);
        }

        if (name) {
          content = "<span style=\"opacity: .6;\">&lt;</span>" + name + "<span style=\"opacity: .6;\">&gt;</span>";
        }

        showOverlay(rect, content);
      }
    }
    /**
     * Remove highlight overlay.
     */


    function unHighlight() {
      if (overlay && overlay.parentNode) {
        document.body.removeChild(overlay);
      }
    }
    /**
     * Get the client rect for an instance.
     *
     * @param {Vue|Vnode} instance
     * @return {Object}
     */


    function getInstanceOrVnodeRect(instance) {
      var el = instance.$el || instance.elm;

      if (!_devtools_env__WEBPACK_IMPORTED_MODULE_3__["isBrowser"]) {
        // TODO: Find position from instance or a vnode (for functional components).
        return;
      }

      if (!Object(_util__WEBPACK_IMPORTED_MODULE_0__["inDoc"])(el)) {
        return;
      }

      if (instance._isFragment) {
        return getFragmentRect(instance);
      } else if (el.nodeType === 1) {
        return el.getBoundingClientRect();
      }
    }
    /**
     * Highlight a fragment instance.
     * Loop over its node range and determine its bounding box.
     *
     * @param {Vue} instance
     * @return {Object}
     */


    function getFragmentRect(ref) {
      var _fragmentStart = ref._fragmentStart;
      var _fragmentEnd = ref._fragmentEnd;
      var top, bottom, left, right;
      util().mapNodeRange(_fragmentStart, _fragmentEnd, function (node) {
        var rect;

        if (node.nodeType === 1 || node.getBoundingClientRect) {
          rect = node.getBoundingClientRect();
        } else if (node.nodeType === 3 && node.data.trim()) {
          rect = getTextRect(node);
        }

        if (rect) {
          if (!top || rect.top < top) {
            top = rect.top;
          }

          if (!bottom || rect.bottom > bottom) {
            bottom = rect.bottom;
          }

          if (!left || rect.left < left) {
            left = rect.left;
          }

          if (!right || rect.right > right) {
            right = rect.right;
          }
        }
      });
      return {
        top: top,
        left: left,
        width: right - left,
        height: bottom - top
      };
    }

    var range;
    /**
     * Get the bounding rect for a text node using a Range.
     *
     * @param {Text} node
     * @return {Rect}
     */

    function getTextRect(node) {
      if (!_devtools_env__WEBPACK_IMPORTED_MODULE_3__["isBrowser"]) {
        return;
      }

      if (!range) {
        range = document.createRange();
      }

      range.selectNode(node);
      return range.getBoundingClientRect();
    }
    /**
     * Display the overlay with given rect.
     *
     * @param {Rect}
     */


    function showOverlay(ref, content) {
      var width = ref.width;
      if (width === void 0) width = 0;
      var height = ref.height;
      if (height === void 0) height = 0;
      var top = ref.top;
      if (top === void 0) top = 0;
      var left = ref.left;
      if (left === void 0) left = 0;
      if (content === void 0) content = '';

      if (!_devtools_env__WEBPACK_IMPORTED_MODULE_3__["isBrowser"]) {
        return;
      }

      overlay.style.width = ~~width + 'px';
      overlay.style.height = ~~height + 'px';
      overlay.style.top = ~~top + 'px';
      overlay.style.left = ~~left + 'px';
      overlayContent.innerHTML = content;
      document.body.appendChild(overlay);
    }
    /**
     * Get Vue's util
     */


    function util() {
      return _devtools_env__WEBPACK_IMPORTED_MODULE_3__["target"].__VUE_DEVTOOLS_GLOBAL_HOOK__.Vue.util;
    }
    /***/

  },

  /***/
  "../../src/backend/index.js":
  /*!**************************************************************!*\
    !*** /home/akryum/Projets/vue-devtools/src/backend/index.js ***!
    \**************************************************************/

  /*! exports provided: instanceMap, functionalVnodeMap, initBackend, findInstanceOrVnode, getCustomInstanceDetails, reduceStateList, getInstanceName, toast, inspectInstance */

  /***/
  function srcBackendIndexJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "instanceMap", function () {
      return instanceMap;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "functionalVnodeMap", function () {
      return functionalVnodeMap;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "initBackend", function () {
      return initBackend;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "findInstanceOrVnode", function () {
      return findInstanceOrVnode;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getCustomInstanceDetails", function () {
      return getCustomInstanceDetails;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "reduceStateList", function () {
      return reduceStateList;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getInstanceName", function () {
      return getInstanceName;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "toast", function () {
      return toast;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "inspectInstance", function () {
      return inspectInstance;
    });
    /* harmony import */


    var _highlighter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./highlighter */
    "../../src/backend/highlighter.js");
    /* harmony import */


    var _vuex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./vuex */
    "../../src/backend/vuex.js");
    /* harmony import */


    var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./events */
    "../../src/backend/events.js");
    /* harmony import */


    var _router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./router */
    "../../src/backend/router.js");
    /* harmony import */


    var _perf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./perf */
    "../../src/backend/perf.js");
    /* harmony import */


    var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./utils */
    "../../src/backend/utils.js");
    /* harmony import */


    var _util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../util */
    "../../src/util.js");
    /* harmony import */


    var _component_selector__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ./component-selector */
    "../../src/backend/component-selector.js");
    /* harmony import */


    var src_shared_data__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! src/shared-data */
    "../../src/shared-data.js");
    /* harmony import */


    var src_devtools_env__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! src/devtools/env */
    "../../src/devtools/env.js"); // This is the backend that is injected into the page that a Vue app lives in
    // when the Vue Devtools panel is activated.
    // hook should have been injected before this executes.


    var hook = src_devtools_env__WEBPACK_IMPORTED_MODULE_9__["target"].__VUE_DEVTOOLS_GLOBAL_HOOK__;
    var rootInstances = [];
    var propModes = ['default', 'sync', 'once'];
    var instanceMap = src_devtools_env__WEBPACK_IMPORTED_MODULE_9__["target"].__VUE_DEVTOOLS_INSTANCE_MAP__ = new Map();
    var functionalVnodeMap = src_devtools_env__WEBPACK_IMPORTED_MODULE_9__["target"].__VUE_DEVTOOLS_FUNCTIONAL_VNODE_MAP__ = new Map();
    var consoleBoundInstances = Array(5);
    var currentInspectedId;
    var bridge;
    var filter = '';
    var captureCount = 0;
    var isLegacy = false;
    var rootUID = 0;
    var functionalIds = new Map(); // Dedupe instances
    // Some instances may be both on a component and on a child abstract/functional component

    var captureIds = new Map();

    function initBackend(_bridge) {
      bridge = _bridge;

      if (hook.Vue) {
        isLegacy = hook.Vue.version && hook.Vue.version.split('.')[0] === '1';
        connect(hook.Vue);
      } else {
        hook.once('init', connect);
      }

      initRightClick();
    }

    function connect(Vue) {
      Object(src_shared_data__WEBPACK_IMPORTED_MODULE_8__["init"])({
        bridge: bridge,
        Vue: Vue
      });
      hook.currentTab = 'components';
      bridge.on('switch-tab', function (tab) {
        hook.currentTab = tab;

        if (tab === 'components') {
          flush();
        }
      }); // the backend may get injected to the same page multiple times
      // if the user closes and reopens the devtools.
      // make sure there's only one flush listener.

      hook.off('flush');
      hook.on('flush', function () {
        if (hook.currentTab === 'components') {
          flush();
        }
      });
      bridge.on('select-instance', function (id) {
        currentInspectedId = id;
        var instance = findInstanceOrVnode(id);

        if (!instance) {
          return;
        }

        if (!/:functional:/.test(id)) {
          bindToConsole(instance);
        }

        flush();
        bridge.send('instance-selected');
      });
      bridge.on('scroll-to-instance', function (id) {
        var instance = findInstanceOrVnode(id);
        instance && scrollIntoView(instance);
      });
      bridge.on('filter-instances', function (_filter) {
        filter = _filter.toLowerCase();
        flush();
      });
      bridge.on('refresh', scan);
      bridge.on('enter-instance', function (id) {
        var instance = findInstanceOrVnode(id);

        if (instance) {
          Object(_highlighter__WEBPACK_IMPORTED_MODULE_0__["highlight"])(instance);
        }
      });
      bridge.on('leave-instance', _highlighter__WEBPACK_IMPORTED_MODULE_0__["unHighlight"]); // eslint-disable-next-line no-new

      new _component_selector__WEBPACK_IMPORTED_MODULE_7__["default"](bridge, instanceMap); // Get the instance id that is targeted by context menu

      bridge.on('get-context-menu-target', function () {
        var instance = src_devtools_env__WEBPACK_IMPORTED_MODULE_9__["target"].__VUE_DEVTOOLS_CONTEXT_MENU_TARGET__;
        src_devtools_env__WEBPACK_IMPORTED_MODULE_9__["target"].__VUE_DEVTOOLS_CONTEXT_MENU_TARGET__ = null;
        src_devtools_env__WEBPACK_IMPORTED_MODULE_9__["target"].__VUE_DEVTOOLS_CONTEXT_MENU_HAS_TARGET__ = false;

        if (instance) {
          var id = instance.__VUE_DEVTOOLS_UID__;

          if (id) {
            return bridge.send('inspect-instance', id);
          }
        }

        toast('No Vue component was found', 'warn');
      });
      bridge.on('set-instance-data', function (args) {
        setStateValue(args);
        flush();
      }); // vuex

      if (hook.store) {
        Object(_vuex__WEBPACK_IMPORTED_MODULE_1__["initVuexBackend"])(hook, bridge);
      } else {
        hook.once('vuex:init', function (store) {
          Object(_vuex__WEBPACK_IMPORTED_MODULE_1__["initVuexBackend"])(hook, bridge);
        });
      }

      hook.once('router:init', function () {
        Object(_router__WEBPACK_IMPORTED_MODULE_3__["initRouterBackend"])(hook.Vue, bridge, rootInstances);
      }); // events

      Object(_events__WEBPACK_IMPORTED_MODULE_2__["initEventsBackend"])(Vue, bridge);
      src_devtools_env__WEBPACK_IMPORTED_MODULE_9__["target"].__VUE_DEVTOOLS_INSPECT__ = inspectInstance; // User project devtools config

      if (src_devtools_env__WEBPACK_IMPORTED_MODULE_9__["target"].hasOwnProperty('VUE_DEVTOOLS_CONFIG')) {
        var config = src_devtools_env__WEBPACK_IMPORTED_MODULE_9__["target"].VUE_DEVTOOLS_CONFIG; // Open in editor

        if (config.hasOwnProperty('openInEditorHost')) {
          src_shared_data__WEBPACK_IMPORTED_MODULE_8__["default"].openInEditorHost = config.openInEditorHost;
        }
      }

      bridge.log('backend ready.');
      bridge.send('ready', Vue.version);
      console.log("%c vue-devtools %c Detected Vue v" + Vue.version + " %c", 'background:#35495e ; padding: 1px; border-radius: 3px 0 0 3px;  color: #fff', 'background:#41b883 ; padding: 1px; border-radius: 0 3px 3px 0;  color: #fff', 'background:transparent');
      setTimeout(function () {
        scan(); // perf

        Object(_perf__WEBPACK_IMPORTED_MODULE_4__["initPerfBackend"])(Vue, bridge, instanceMap);
      }, 0);
    }

    function findInstanceOrVnode(id) {
      if (/:functional:/.test(id)) {
        var ref = id.split(':functional:');
        var refId = ref[0];
        var map = functionalVnodeMap.get(refId);
        return map && map[id];
      }

      return instanceMap.get(id);
    }
    /**
     * Scan the page for root level Vue instances.
     */


    function scan() {
      rootInstances.length = 0;
      var inFragment = false;
      var currentFragment = null;

      function processInstance(instance) {
        if (instance) {
          if (rootInstances.indexOf(instance.$root) === -1) {
            instance = instance.$root;
          }

          if (instance._isFragment) {
            inFragment = true;
            currentFragment = instance;
          } // respect Vue.config.devtools option


          var baseVue = instance.constructor;

          while (baseVue.super) {
            baseVue = baseVue.super;
          }

          if (baseVue.config && baseVue.config.devtools) {
            // give a unique id to root instance so we can
            // 'namespace' its children
            if (typeof instance.__VUE_DEVTOOLS_ROOT_UID__ === 'undefined') {
              instance.__VUE_DEVTOOLS_ROOT_UID__ = ++rootUID;
            }

            rootInstances.push(instance);
          }

          return true;
        }
      }

      if (src_devtools_env__WEBPACK_IMPORTED_MODULE_9__["isBrowser"]) {
        walk(document, function (node) {
          if (inFragment) {
            if (node === currentFragment._fragmentEnd) {
              inFragment = false;
              currentFragment = null;
            }

            return true;
          }

          var instance = node.__vue__;
          return processInstance(instance);
        });
      } else {
        if (Array.isArray(src_devtools_env__WEBPACK_IMPORTED_MODULE_9__["target"].__VUE_ROOT_INSTANCES__)) {
          src_devtools_env__WEBPACK_IMPORTED_MODULE_9__["target"].__VUE_ROOT_INSTANCES__.map(processInstance);
        }
      }

      hook.emit('router:init');
      flush();
    }
    /**
     * DOM walk helper
     *
     * @param {NodeList} nodes
     * @param {Function} fn
     */


    function walk(node, fn) {
      if (node.childNodes) {
        for (var i = 0, l = node.childNodes.length; i < l; i++) {
          var child = node.childNodes[i];
          var stop = fn(child);

          if (!stop) {
            walk(child, fn);
          }
        }
      } // also walk shadow DOM


      if (node.shadowRoot) {
        walk(node.shadowRoot, fn);
      }
    }
    /**
     * Called on every Vue.js batcher flush cycle.
     * Capture current component tree structure and the state
     * of the current inspected instance (if present) and
     * send it to the devtools.
     */


    function flush() {
      var start;
      functionalIds.clear();
      captureIds.clear();

      if (true) {
        captureCount = 0;
        start = src_devtools_env__WEBPACK_IMPORTED_MODULE_9__["isBrowser"] ? window.performance.now() : 0;
      }

      var payload = Object(_util__WEBPACK_IMPORTED_MODULE_6__["stringify"])({
        inspectedInstance: getInstanceDetails(currentInspectedId),
        instances: findQualifiedChildrenFromList(rootInstances)
      });

      if (true) {
        console.log("[flush] serialized " + captureCount + " instances" + (src_devtools_env__WEBPACK_IMPORTED_MODULE_9__["isBrowser"] ? ", took " + (window.performance.now() - start) + "ms." : '') + ".");
      }

      bridge.send('flush', payload);
    }
    /**
     * Iterate through an array of instances and flatten it into
     * an array of qualified instances. This is a depth-first
     * traversal - e.g. if an instance is not matched, we will
     * recursively go deeper until a qualified child is found.
     *
     * @param {Array} instances
     * @return {Array}
     */


    function findQualifiedChildrenFromList(instances) {
      instances = instances.filter(function (child) {
        return !child._isBeingDestroyed;
      });
      return !filter ? instances.map(capture) : Array.prototype.concat.apply([], instances.map(findQualifiedChildren));
    }
    /**
     * Find qualified children from a single instance.
     * If the instance itself is qualified, just return itself.
     * This is ok because [].concat works in both cases.
     *
     * @param {Vue|Vnode} instance
     * @return {Vue|Array}
     */


    function findQualifiedChildren(instance) {
      return isQualified(instance) ? capture(instance) : findQualifiedChildrenFromList(instance.$children).concat(instance._vnode && instance._vnode.children // Find functional components in recursively in non-functional vnodes.
      ? flatten(instance._vnode.children.filter(function (child) {
        return !child.componentInstance;
      }).map(captureChild)) // Filter qualified children.
      .filter(function (instance) {
        return isQualified(instance);
      }) : []);
    }
    /**
     * Check if an instance is qualified.
     *
     * @param {Vue|Vnode} instance
     * @return {Boolean}
     */


    function isQualified(instance) {
      var name = Object(_util__WEBPACK_IMPORTED_MODULE_6__["classify"])(instance.name || getInstanceName(instance)).toLowerCase();
      return name.indexOf(filter) > -1;
    }

    function flatten(items) {
      return items.reduce(function (acc, item) {
        if (item instanceof Array) {
          acc.push.apply(acc, flatten(item));
        } else if (item) {
          acc.push(item);
        }

        return acc;
      }, []);
    }

    function captureChild(child) {
      if (child.fnContext && !child.componentInstance) {
        return capture(child);
      } else if (child.componentInstance) {
        if (!child.componentInstance._isBeingDestroyed) {
          return capture(child.componentInstance);
        }
      } else if (child.children) {
        return flatten(child.children.map(captureChild));
      }
    }
    /**
     * Capture the meta information of an instance. (recursive)
     *
     * @param {Vue} instance
     * @return {Object}
     */


    function capture(instance, index, list) {
      if (true) {
        captureCount++;
      }

      if (instance.$options && instance.$options.abstract && instance._vnode.componentInstance) {
        instance = instance._vnode.componentInstance;
      } // Functional component.


      if (instance.fnContext && !instance.componentInstance) {
        var contextUid = instance.fnContext.__VUE_DEVTOOLS_UID__;
        var id = functionalIds.get(contextUid);

        if (id == null) {
          id = 0;
        } else {
          id++;
        }

        functionalIds.set(contextUid, id);
        var functionalId = contextUid + ':functional:' + id;
        markFunctional(functionalId, instance);
        return {
          id: functionalId,
          functional: true,
          name: getInstanceName(instance),
          renderKey: getRenderKey(instance.key),
          children: (instance.children ? instance.children.map(function (child) {
            return child.fnContext ? captureChild(child) : child.componentInstance ? capture(child.componentInstance) : undefined;
          }) // router-view has both fnContext and componentInstance on vnode.
          : instance.componentInstance ? [capture(instance.componentInstance)] : []).filter(Boolean),
          inactive: false,
          isFragment: false // TODO: Check what is it for.

        };
      } // instance._uid is not reliable in devtools as there
      // may be 2 roots with same _uid which causes unexpected
      // behaviour


      instance.__VUE_DEVTOOLS_UID__ = getUniqueId(instance); // Dedupe

      if (captureIds.has(instance.__VUE_DEVTOOLS_UID__)) {
        return;
      } else {
        captureIds.set(instance.__VUE_DEVTOOLS_UID__, undefined);
      }

      mark(instance);
      var name = getInstanceName(instance);
      var ret = {
        uid: instance._uid,
        id: instance.__VUE_DEVTOOLS_UID__,
        name: name,
        renderKey: getRenderKey(instance.$vnode ? instance.$vnode['key'] : null),
        inactive: !!instance._inactive,
        isFragment: !!instance._isFragment,
        children: instance.$children.filter(function (child) {
          return !child._isBeingDestroyed;
        }).map(capture).filter(Boolean)
      };

      if (instance._vnode.children) {
        ret.children = ret.children.concat(flatten(instance._vnode.children.map(captureChild)).filter(Boolean));
      } // record screen position to ensure correct ordering


      if ((!list || list.length > 1) && !instance._inactive) {
        var rect = Object(_highlighter__WEBPACK_IMPORTED_MODULE_0__["getInstanceOrVnodeRect"])(instance);
        ret.top = rect ? rect.top : Infinity;
      } else {
        ret.top = Infinity;
      } // check if instance is available in console


      var consoleId = consoleBoundInstances.indexOf(instance.__VUE_DEVTOOLS_UID__);
      ret.consoleId = consoleId > -1 ? '$vm' + consoleId : null; // check router view

      var isRouterView2 = instance.$vnode && instance.$vnode.data.routerView;

      if (instance._routerView || isRouterView2) {
        ret.isRouterView = true;

        if (!instance._inactive && instance.$route) {
          var matched = instance.$route.matched;
          var depth = isRouterView2 ? instance.$vnode.data.routerViewDepth : instance._routerView.depth;
          ret.matchedRouteSegment = matched && matched[depth] && (isRouterView2 ? matched[depth].path : matched[depth].handler.path);
        }
      }

      return ret;
    }
    /**
     * Mark an instance as captured and store it in the instance map.
     *
     * @param {Vue} instance
     */


    function mark(instance) {
      if (!instanceMap.has(instance.__VUE_DEVTOOLS_UID__)) {
        instanceMap.set(instance.__VUE_DEVTOOLS_UID__, instance);
        instance.$on('hook:beforeDestroy', function () {
          instanceMap.delete(instance.__VUE_DEVTOOLS_UID__);
        });
      }
    }

    function markFunctional(id, vnode) {
      var refId = vnode.fnContext.__VUE_DEVTOOLS_UID__;

      if (!functionalVnodeMap.has(refId)) {
        functionalVnodeMap.set(refId, {});
        vnode.fnContext.$on('hook:beforeDestroy', function () {
          functionalVnodeMap.delete(refId);
        });
      }

      functionalVnodeMap.get(refId)[id] = vnode;
    }
    /**
     * Get the detailed information of an inspected instance.
     *
     * @param {Number} id
     */


    function getInstanceDetails(id) {
      var instance = instanceMap.get(id);

      if (!instance) {
        var vnode = findInstanceOrVnode(id);

        if (!vnode) {
          return {};
        }

        var data = {
          id: id,
          name: Object(_util__WEBPACK_IMPORTED_MODULE_6__["getComponentName"])(vnode.fnOptions),
          file: vnode.fnOptions.__file || null,
          state: processProps(Object.assign({}, {
            $options: vnode.fnOptions
          }, vnode.devtoolsMeta && vnode.devtoolsMeta.renderContext.props)),
          functional: true
        };
        return data;
      } else {
        var data$1 = {
          id: id,
          name: getInstanceName(instance),
          state: getInstanceState(instance)
        };
        var i;

        if ((i = instance.$vnode) && (i = i.componentOptions) && (i = i.Ctor) && (i = i.options)) {
          data$1.file = i.__file || null;
        }

        return data$1;
      }
    }

    function getInstanceState(instance) {
      return processProps(instance).concat(processState(instance), processRefs(instance), processComputed(instance), processInjected(instance), processRouteContext(instance), processVuexGetters(instance), processFirebaseBindings(instance), processObservables(instance));
    }

    function getCustomInstanceDetails(instance) {
      var state = getInstanceState(instance);
      return {
        _custom: {
          type: 'component',
          id: instance.__VUE_DEVTOOLS_UID__,
          display: getInstanceName(instance),
          tooltip: 'Component instance',
          value: reduceStateList(state),
          fields: {
            abstract: true
          }
        }
      };
    }

    function reduceStateList(list) {
      if (!list.length) {
        return undefined;
      }

      return list.reduce(function (map, item) {
        var key = item.type || 'data';
        var obj = map[key] = map[key] || {};
        obj[item.key] = item.value;
        return map;
      }, {});
    }
    /**
     * Get the appropriate display name for an instance.
     *
     * @param {Vue} instance
     * @return {String}
     */


    function getInstanceName(instance) {
      var name = Object(_util__WEBPACK_IMPORTED_MODULE_6__["getComponentName"])(instance.$options || instance.fnOptions || {});

      if (name) {
        return name;
      }

      return instance.$root === instance ? 'Root' : 'Anonymous Component';
    }
    /**
     * Process the props of an instance.
     * Make sure return a plain object because window.postMessage()
     * will throw an Error if the passed object contains Functions.
     *
     * @param {Vue} instance
     * @return {Array}
     */


    function processProps(instance) {
      var props;

      if (isLegacy && (props = instance._props)) {
        // 1.x
        return Object.keys(props).map(function (key) {
          var prop = props[key];
          var options = prop.options;
          return {
            type: 'props',
            key: prop.path,
            value: instance[prop.path],
            meta: options ? {
              type: options.type ? getPropType(options.type) : 'any',
              required: !!options.required,
              mode: propModes[prop.mode]
            } : {}
          };
        });
      } else if (props = instance.$options.props) {
        // 2.0
        var propsData = [];

        for (var key in props) {
          var prop = props[key];
          key = Object(_util__WEBPACK_IMPORTED_MODULE_6__["camelize"])(key);
          propsData.push({
            type: 'props',
            key: key,
            value: instance[key],
            meta: prop ? {
              type: prop.type ? getPropType(prop.type) : 'any',
              required: !!prop.required
            } : {
              type: 'invalid'
            }
          });
        }

        return propsData;
      } else {
        return [];
      }
    }
    /**
     * Convert prop type constructor to string.
     *
     * @param {Function} fn
     */


    var fnTypeRE = /^(?:function|class) (\w+)/;

    function getPropType(type) {
      var match = type.toString().match(fnTypeRE);
      return typeof type === 'function' ? match && match[1] || 'any' : 'any';
    }
    /**
     * Process state, filtering out props and "clean" the result
     * with a JSON dance. This removes functions which can cause
     * errors during structured clone used by window.postMessage.
     *
     * @param {Vue} instance
     * @return {Array}
     */


    function processState(instance) {
      var props = isLegacy ? instance._props : instance.$options.props;
      var getters = instance.$options.vuex && instance.$options.vuex.getters;
      return Object.keys(instance._data).filter(function (key) {
        return !(props && key in props) && !(getters && key in getters);
      }).map(function (key) {
        return {
          key: key,
          value: instance._data[key],
          editable: true
        };
      });
    }
    /**
     * Process refs
     *
     * @param {Vue} instance
     * @return {Array}
     */


    function processRefs(instance) {
      if (Object.keys(instance.$refs).length === 0) {
        return [];
      }

      console.log(instance.$refs);
      var refs = Object.keys(instance.$refs).map(function (key) {
        return Object(_util__WEBPACK_IMPORTED_MODULE_6__["getCustomRefDetails"])(instance, key, instance.$refs[key]);
      });
      return refs.length > 0 ? refs : [];
    }
    /**
     * Process the computed properties of an instance.
     *
     * @param {Vue} instance
     * @return {Array}
     */


    function processComputed(instance) {
      var computed = [];
      var defs = instance.$options.computed || {}; // use for...in here because if 'computed' is not defined
      // on component, computed properties will be placed in prototype
      // and Object.keys does not include
      // properties from object's prototype

      for (var key in defs) {
        var def = defs[key];
        var type = typeof def === 'function' && def.vuex ? 'vuex bindings' : 'computed'; // use try ... catch here because some computed properties may
        // throw error during its evaluation

        var computedProp = null;

        try {
          computedProp = {
            type: type,
            key: key,
            value: instance[key]
          };
        } catch (e) {
          computedProp = {
            type: type,
            key: key,
            value: '(error during evaluation)'
          };
        }

        computed.push(computedProp);
      }

      return computed;
    }
    /**
     * Process Vuex getters.
     *
     * @param {Vue} instance
     * @return {Array}
     */


    function processInjected(instance) {
      var injected = instance.$options.inject;

      if (injected) {
        return Object.keys(injected).map(function (key) {
          return {
            key: key,
            type: 'injected',
            value: instance[key]
          };
        });
      } else {
        return [];
      }
    }
    /**
     * Process possible vue-router $route context
     *
     * @param {Vue} instance
     * @return {Array}
     */


    function processRouteContext(instance) {
      try {
        var route = instance.$route;

        if (route) {
          var path = route.path;
          var query = route.query;
          var params = route.params;
          var value = {
            path: path,
            query: query,
            params: params
          };

          if (route.fullPath) {
            value.fullPath = route.fullPath;
          }

          if (route.hash) {
            value.hash = route.hash;
          }

          if (route.name) {
            value.name = route.name;
          }

          if (route.meta) {
            value.meta = route.meta;
          }

          return [{
            key: '$route',
            value: {
              _custom: {
                type: 'router',
                abstract: true,
                value: value
              }
            }
          }];
        }
      } catch (e) {// Invalid $router
      }

      return [];
    }
    /**
     * Process Vuex getters.
     *
     * @param {Vue} instance
     * @return {Array}
     */


    function processVuexGetters(instance) {
      var getters = instance.$options.vuex && instance.$options.vuex.getters;

      if (getters) {
        return Object.keys(getters).map(function (key) {
          return {
            type: 'vuex getters',
            key: key,
            value: instance[key]
          };
        });
      } else {
        return [];
      }
    }
    /**
     * Process Firebase bindings.
     *
     * @param {Vue} instance
     * @return {Array}
     */


    function processFirebaseBindings(instance) {
      var refs = instance.$firebaseRefs;

      if (refs) {
        return Object.keys(refs).map(function (key) {
          return {
            type: 'firebase bindings',
            key: key,
            value: instance[key]
          };
        });
      } else {
        return [];
      }
    }
    /**
     * Process vue-rx observable bindings.
     *
     * @param {Vue} instance
     * @return {Array}
     */


    function processObservables(instance) {
      var obs = instance.$observables;

      if (obs) {
        return Object.keys(obs).map(function (key) {
          return {
            type: 'observables',
            key: key,
            value: instance[key]
          };
        });
      } else {
        return [];
      }
    }
    /**
     * Sroll a node into view.
     *
     * @param {Vue} instance
     */


    function scrollIntoView(instance) {
      var rect = Object(_highlighter__WEBPACK_IMPORTED_MODULE_0__["getInstanceOrVnodeRect"])(instance);

      if (rect) {
        // TODO: Handle this for non-browser environments.
        window.scrollBy(0, rect.top + (rect.height - window.innerHeight) / 2);
      }
    }
    /**
     * Binds given instance in console as $vm0.
     * For compatibility reasons it also binds it as $vm.
     *
     * @param {Vue} instance
     */


    function bindToConsole(instance) {
      if (!instance) {
        return;
      }

      if (!src_devtools_env__WEBPACK_IMPORTED_MODULE_9__["isBrowser"]) {
        return;
      }

      var id = instance.__VUE_DEVTOOLS_UID__;
      var index = consoleBoundInstances.indexOf(id);

      if (index > -1) {
        consoleBoundInstances.splice(index, 1);
      } else {
        consoleBoundInstances.pop();
      }

      consoleBoundInstances.unshift(id);

      for (var i = 0; i < 5; i++) {
        window['$vm' + i] = instanceMap.get(consoleBoundInstances[i]);
      }

      window.$vm = instance;
    }
    /**
     * Returns a devtools unique id for instance.
     * @param {Vue} instance
     */


    function getUniqueId(instance) {
      var rootVueId = instance.$root.__VUE_DEVTOOLS_ROOT_UID__;
      return rootVueId + ":" + instance._uid;
    }

    function getRenderKey(value) {
      if (value == null) {
        return;
      }

      var type = typeof value;

      if (type === 'number') {
        return value;
      } else if (type === 'string') {
        return "'" + value + "'";
      } else if (Array.isArray(value)) {
        return 'Array';
      } else {
        return 'Object';
      }
    }
    /**
     * Display a toast message.
     * @param {any} message HTML content
     */


    function toast(message, type) {
      if (type === void 0) type = 'normal';
      var fn = src_devtools_env__WEBPACK_IMPORTED_MODULE_9__["target"].__VUE_DEVTOOLS_TOAST__;
      fn && fn(message, type);
    }

    function inspectInstance(instance) {
      var id = instance.__VUE_DEVTOOLS_UID__;
      id && bridge.send('inspect-instance', id);
    }

    function setStateValue(ref) {
      var id = ref.id;
      var path = ref.path;
      var value = ref.value;
      var newKey = ref.newKey;
      var remove = ref.remove;
      var instance = instanceMap.get(id);

      if (instance) {
        try {
          var parsedValue;

          if (value) {
            parsedValue = Object(_util__WEBPACK_IMPORTED_MODULE_6__["parse"])(value, true);
          }

          var api = isLegacy ? {
            $set: hook.Vue.set,
            $delete: hook.Vue.delete
          } : instance;
          Object(_util__WEBPACK_IMPORTED_MODULE_6__["set"])(instance._data, path, parsedValue, function (obj, field, value) {
            (remove || newKey) && api.$delete(obj, field);
            !remove && api.$set(obj, newKey || field, value);
          });
        } catch (e) {
          console.error(e);
        }
      }
    }

    function initRightClick() {
      if (!src_devtools_env__WEBPACK_IMPORTED_MODULE_9__["isBrowser"]) {
        return;
      } // Start recording context menu when Vue is detected
      // event if Vue devtools are not loaded yet


      document.addEventListener('contextmenu', function (event) {
        var el = event.target;

        if (el) {
          // Search for parent that "is" a component instance
          var instance = Object(_utils__WEBPACK_IMPORTED_MODULE_5__["findRelatedComponent"])(el);

          if (instance) {
            window.__VUE_DEVTOOLS_CONTEXT_MENU_HAS_TARGET__ = true;
            window.__VUE_DEVTOOLS_CONTEXT_MENU_TARGET__ = instance;
            return;
          }
        }

        window.__VUE_DEVTOOLS_CONTEXT_MENU_HAS_TARGET__ = null;
        window.__VUE_DEVTOOLS_CONTEXT_MENU_TARGET__ = null;
      });
    }
    /***/

  },

  /***/
  "../../src/backend/perf.js":
  /*!*************************************************************!*\
    !*** /home/akryum/Projets/vue-devtools/src/backend/perf.js ***!
    \*************************************************************/

  /*! exports provided: initPerfBackend */

  /***/
  function srcBackendPerfJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "initPerfBackend", function () {
      return initPerfBackend;
    });
    /* harmony import */


    var src_shared_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! src/shared-data */
    "../../src/shared-data.js");
    /* harmony import */


    var src_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! src/util */
    "../../src/util.js");

    var COMPONENT_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroyed', 'destroyed'];
    var RENDER_HOOKS = {
      beforeMount: {
        after: 'mountRender'
      },
      mounted: {
        before: 'mountRender'
      },
      beforeUpdate: {
        after: 'updateRender'
      },
      updated: {
        before: 'updateRender'
      }
    };
    var frames = 0;
    var frameTime;
    var secondsTimer;
    var bridge;
    var componentMetrics;

    function initPerfBackend(Vue, _bridge, instanceMap) {
      bridge = _bridge; // Global mixin

      Vue.mixin({
        beforeCreate: function beforeCreate() {
          applyHooks(this);
        }
      }); // Apply to existing components

      instanceMap.forEach(applyHooks);
      Object(src_shared_data__WEBPACK_IMPORTED_MODULE_0__["watch"])('recordPerf', function (value) {
        if (value) {
          startRecording();
        } else {
          stopRecording();
        }
      });
    }

    function startRecording() {
      frames = 0;
      frameTime = performance.now();
      secondsTimer = setInterval(frameInterval, 500);
      componentMetrics = {};
      requestAnimationFrame(frame);
    }

    function stopRecording() {
      clearInterval(secondsTimer);
    }

    function frame() {
      frames++;

      if (src_shared_data__WEBPACK_IMPORTED_MODULE_0__["default"].recordPerf) {
        requestAnimationFrame(frame);
      }
    }

    function frameInterval() {
      var metric = {
        type: 'fps',
        time: Date.now(),
        start: frameTime,
        end: frameTime = performance.now()
      };
      metric.value = Math.round(frames / (metric.end - metric.start) * 1000);
      frames = 0;
      bridge.send('perf:add-metric', metric);
    }

    function applyHooks(vm) {
      if (vm.$options.$_devtoolsPerfHooks) {
        return;
      }

      vm.$options.$_devtoolsPerfHooks = true;
      var renderMetrics = {};
      COMPONENT_HOOKS.forEach(function (hook) {
        var renderHook = RENDER_HOOKS[hook];

        var handler = function handler() {
          if (src_shared_data__WEBPACK_IMPORTED_MODULE_0__["default"].recordPerf) {
            // Before
            var time = performance.now();

            if (renderHook && renderHook.before) {
              // Render hook ends before one hook
              var metric = renderMetrics[renderHook.before];

              if (metric) {
                metric.end = time;
                addComponentMetric(vm.$options, renderHook.before, metric.start, metric.end);
              }
            } // After


            this.$once("hook:" + hook, function () {
              var newTime = performance.now();
              addComponentMetric(vm.$options, hook, time, newTime);

              if (renderHook && renderHook.after) {
                // Render hook starts after one hook
                renderMetrics[renderHook.after] = {
                  start: newTime,
                  end: 0
                };
              }
            });
          }
        };

        var currentValue = vm.$options[hook];

        if (Array.isArray(currentValue)) {
          vm.$options[hook] = [handler].concat(currentValue);
        } else if (typeof currentValue === 'function') {
          vm.$options[hook] = [handler, currentValue];
        } else {
          vm.$options[hook] = [handler];
        }
      });
    }

    function addComponentMetric(options, type, start, end) {
      var duration = end - start;
      var name = Object(src_util__WEBPACK_IMPORTED_MODULE_1__["getComponentName"])(options);
      var metric = componentMetrics[name] = componentMetrics[name] || {
        id: name,
        hooks: {},
        totalTime: 0
      };
      var hook = metric.hooks[type] = metric.hooks[type] || {
        count: 0,
        totalTime: 0
      };
      hook.count++;
      hook.totalTime += duration;
      metric.totalTime += duration;
      bridge.send('perf:upsert-metric', {
        type: 'componentRender',
        data: metric
      });
    }
    /***/

  },

  /***/
  "../../src/backend/router.js":
  /*!***************************************************************!*\
    !*** /home/akryum/Projets/vue-devtools/src/backend/router.js ***!
    \***************************************************************/

  /*! exports provided: initRouterBackend, getCustomRouterDetails */

  /***/
  function srcBackendRouterJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "initRouterBackend", function () {
      return initRouterBackend;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getCustomRouterDetails", function () {
      return getCustomRouterDetails;
    });
    /* harmony import */


    var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../util */
    "../../src/util.js");

    function initRouterBackend(Vue, bridge, rootInstances) {
      var recording = true;

      var getSnapshot = function getSnapshot() {
        var routeChanges = [];
        rootInstances.forEach(function (instance) {
          var router = instance._router;

          if (router && router.options && router.options.routes) {
            routeChanges.push.apply(routeChanges, router.options.routes);
          }
        });
        return Object(_util__WEBPACK_IMPORTED_MODULE_0__["stringify"])({
          routeChanges: routeChanges
        });
      };

      bridge.send('routes:init', getSnapshot());
      bridge.on('router:toggle-recording', function (enabled) {
        recording = enabled;
      });
      rootInstances.forEach(function (instance) {
        var router = instance._router;

        if (router) {
          router.afterEach(function (to, from) {
            if (!recording) {
              return;
            }

            bridge.send('router:changed', Object(_util__WEBPACK_IMPORTED_MODULE_0__["stringify"])({
              to: to,
              from: from,
              timestamp: Date.now()
            }));
          });
          bridge.send('router:init', Object(_util__WEBPACK_IMPORTED_MODULE_0__["stringify"])({
            mode: router.mode,
            current: {
              from: router.history.current,
              to: router.history.current,
              timestamp: Date.now()
            }
          }));

          if (router.matcher && router.matcher.addRoutes) {
            var addRoutes = router.matcher.addRoutes;

            router.matcher.addRoutes = function (routes) {
              routes.forEach(function (item) {
                bridge.send('routes:changed', Object(_util__WEBPACK_IMPORTED_MODULE_0__["stringify"])(item));
              });
              addRoutes.call(this, routes);
            };
          }
        }
      });
    }

    function getCustomRouterDetails(router) {
      return {
        _custom: {
          type: 'router',
          display: 'VueRouter',
          value: {
            options: router.options,
            currentRoute: router.currentRoute
          },
          fields: {
            abstract: true
          }
        }
      };
    }
    /***/

  },

  /***/
  "../../src/backend/toast.js":
  /*!**************************************************************!*\
    !*** /home/akryum/Projets/vue-devtools/src/backend/toast.js ***!
    \**************************************************************/

  /*! exports provided: installToast */

  /***/
  function srcBackendToastJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "installToast", function () {
      return installToast;
    });

    function installToast(target) {
      if (typeof document === 'undefined') {
        return;
      }

      var toastEl = null;
      var toastTimer = 0;
      var colors = {
        normal: '#3BA776',
        warn: '#DB6B00',
        error: '#DB2600'
      };

      target.__VUE_DEVTOOLS_TOAST__ = function (message, type) {
        var color = colors[type] || colors.normal;
        console.log("%c vue-devtools %c " + message + " %c ", 'background:#35495e ; padding: 1px; border-radius: 3px 0 0 3px;  color: #fff', "background: " + color + "; padding: 1px; border-radius: 0 3px 3px 0;  color: #fff", 'background:transparent');

        if (!toastEl) {
          toastEl = document.createElement('div');
          toastEl.addEventListener('click', removeToast);
          toastEl.innerHTML = "\n      <div id=\"vue-devtools-toast\" style=\"\n        position: fixed;\n        bottom: 6px;\n        left: 0;\n        right: 0;\n        height: 0;\n        display: flex;\n        align-items: flex-end;\n        justify-content: center;\n        z-index: 999999999999999999999;\n        font-family: Menlo, Consolas, monospace;\n        font-size: 14px;\n      \">\n        <div class=\"vue-wrapper\" style=\"\n          padding: 6px 12px;\n          background: " + color + ";\n          color: white;\n          border-radius: 3px;\n          flex: auto 0 1;\n          box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);\n          cursor: pointer;\n        \">\n          <div class=\"vue-content\"></div>\n        </div>\n      </div>\n      ";
          document.body.appendChild(toastEl);
        } else {
          toastEl.querySelector('.vue-wrapper').style.background = color;
        }

        toastEl.querySelector('.vue-content').innerText = message;
        clearTimeout(toastTimer);
        toastTimer = setTimeout(removeToast, 5000);
      };

      function removeToast() {
        clearTimeout(toastTimer);

        if (toastEl) {
          document.body.removeChild(toastEl);
          toastEl = null;
        }
      }
    }
    /***/

  },

  /***/
  "../../src/backend/utils.js":
  /*!**************************************************************!*\
    !*** /home/akryum/Projets/vue-devtools/src/backend/utils.js ***!
    \**************************************************************/

  /*! exports provided: findRelatedComponent */

  /***/
  function srcBackendUtilsJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "findRelatedComponent", function () {
      return findRelatedComponent;
    });

    function findRelatedComponent(el) {
      while (!el.__vue__ && el.parentElement) {
        el = el.parentElement;
      }

      return el.__vue__;
    }
    /***/

  },

  /***/
  "../../src/backend/vuex.js":
  /*!*************************************************************!*\
    !*** /home/akryum/Projets/vue-devtools/src/backend/vuex.js ***!
    \*************************************************************/

  /*! exports provided: initVuexBackend, getCustomStoreDetails */

  /***/
  function srcBackendVuexJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "initVuexBackend", function () {
      return initVuexBackend;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getCustomStoreDetails", function () {
      return getCustomStoreDetails;
    });
    /* harmony import */


    var src_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! src/util */
    "../../src/util.js");
    /* harmony import */


    var src_shared_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! src/shared-data */
    "../../src/shared-data.js");
    /* harmony import */


    var vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! vue */
    "../../node_modules/vue/dist/vue.runtime.esm.js");

    function initVuexBackend(hook, bridge) {
      var store = hook.store;
      var originalVm = store._vm;
      var snapshotsVm = new vue__WEBPACK_IMPORTED_MODULE_2__["default"]({
        data: {
          $$state: {}
        },
        computed: originalVm.$options.computed
      });

      var getSnapshot = function getSnapshot(_store) {
        if (_store === void 0) _store = store;
        return Object(src_util__WEBPACK_IMPORTED_MODULE_0__["stringify"])({
          state: _store.state,
          getters: _store.getters || {}
        });
      };

      var baseSnapshot, snapshots, mutations, lastState;

      function reset() {
        baseSnapshot = getSnapshot(hook.initialStore);
        hook.initialStore = undefined;
        mutations = [];
        resetSnapshotCache();
      }

      function resetSnapshotCache() {
        snapshots = [{
          index: -1,
          state: baseSnapshot
        }];
      }

      reset();
      bridge.send('vuex:init', baseSnapshot); // deal with multiple backend injections

      hook.off('vuex:mutation'); // application -> devtool

      hook.on('vuex:mutation', function (ref) {
        var type = ref.type;
        var payload = ref.payload;

        if (!src_shared_data__WEBPACK_IMPORTED_MODULE_1__["default"].recordVuex) {
          return;
        }

        var index = mutations.length;
        mutations.push({
          type: type,
          payload: payload,
          index: index,
          handlers: store._mutations[type]
        });
        bridge.send('vuex:mutation', {
          mutation: {
            type: type,
            payload: Object(src_util__WEBPACK_IMPORTED_MODULE_0__["stringify"])(payload),
            index: index
          },
          timestamp: Date.now()
        });
      }); // devtool -> application

      bridge.on('vuex:travel-to-state', function (ref) {
        var index = ref.index;
        var apply = ref.apply;
        var snapshot = replayMutations(index);
        var ref$1 = Object(src_util__WEBPACK_IMPORTED_MODULE_0__["parse"])(snapshot, true);
        var state = ref$1.state;
        bridge.send('vuex:inspected-state', {
          index: index,
          snapshot: snapshot
        });

        if (apply) {
          hook.emit('vuex:travel-to-state', state);
        }
      });
      bridge.on('vuex:commit-all', function () {
        reset();
      });
      bridge.on('vuex:revert-all', function () {
        reset();
      });
      bridge.on('vuex:commit', function (index) {
        baseSnapshot = lastState;
        resetSnapshotCache();
        mutations = mutations.slice(index + 1);
        mutations.forEach(function (mutation, index) {
          mutation.index = index;
        });
      });
      bridge.on('vuex:revert', function (index) {
        resetSnapshotCache();
        mutations = mutations.slice(0, index);
      });
      bridge.on('vuex:import-state', function (state) {
        hook.emit('vuex:travel-to-state', Object(src_util__WEBPACK_IMPORTED_MODULE_0__["parse"])(state, true));
        bridge.send('vuex:init', getSnapshot());
      });
      bridge.on('vuex:inspect-state', function (index) {
        var snapshot = replayMutations(index);
        bridge.send('vuex:inspected-state', {
          index: index,
          snapshot: snapshot
        });
      });

      function replayMutations(index) {
        store._vm = snapshotsVm; // Get most recent snapshot for target index
        // for faster replay

        var snapshot;

        for (var i = 0; i < snapshots.length; i++) {
          var s = snapshots[i];

          if (s.index > index) {
            break;
          } else {
            snapshot = s;
          }
        }

        var resultState; // Snapshot was already replayed

        if (snapshot.index === index) {
          resultState = snapshot.state;
        } else {
          var ref = Object(src_util__WEBPACK_IMPORTED_MODULE_0__["parse"])(snapshot.state, true);
          var state = ref.state;
          store.replaceState(state);
          var total = index - snapshot.index;
          src_shared_data__WEBPACK_IMPORTED_MODULE_1__["default"].snapshotLoading = {
            current: 0,
            total: total
          };
          var time = Date.now(); // Replay mutations

          var loop = function loop(i) {
            var mutation = mutations[i];
            mutation.handlers.forEach(function (handler) {
              return handler(state, mutation.payload);
            });

            if (i !== index && i % src_shared_data__WEBPACK_IMPORTED_MODULE_1__["default"].cacheVuexSnapshotsEvery === 0) {
              takeSnapshot(i, state);
            }

            var now = Date.now();

            if (now - time <= 100) {
              time = now;
              src_shared_data__WEBPACK_IMPORTED_MODULE_1__["default"].snapshotLoading = {
                current: i - snapshot.index,
                total: total
              };
            }
          };

          for (var i$1 = snapshot.index + 1; i$1 <= index; i$1++) loop(i$1); // Send final state after replay


          resultState = getSnapshot();
        }

        lastState = resultState; // Restore user state

        store._vm = originalVm;
        return resultState;
      }

      bridge.on('vuex:edit-state', function (ref) {
        var index = ref.index;
        var value = ref.value;
        var path = ref.path;
        var parsedValue;

        if (value) {
          parsedValue = Object(src_util__WEBPACK_IMPORTED_MODULE_0__["parse"])(value, true);
        }

        Object(src_util__WEBPACK_IMPORTED_MODULE_0__["set"])(store.state, path, parsedValue);
        bridge.send('vuex:inspected-state', {
          index: index,
          snapshot: getSnapshot()
        });
      });

      function takeSnapshot(index) {
        snapshots.push({
          index: index,
          state: getSnapshot()
        }); // Delete old cached snapshots

        if (snapshots.length > src_shared_data__WEBPACK_IMPORTED_MODULE_1__["default"].cacheVuexSnapshotsLimit) {
          snapshots.splice(1, 1);
        }
      }
    }

    function getCustomStoreDetails(store) {
      return {
        _custom: {
          type: 'store',
          display: 'Store',
          value: {
            state: store.state,
            getters: store.getters
          },
          fields: {
            abstract: true
          }
        }
      };
    }
    /***/

  },

  /***/
  "../../src/bridge.js":
  /*!*******************************************************!*\
    !*** /home/akryum/Projets/vue-devtools/src/bridge.js ***!
    \*******************************************************/

  /*! exports provided: default */

  /***/
  function srcBridgeJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony import */


    var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! events */
    "./node_modules/events/events.js");
    /* harmony import */


    var events__WEBPACK_IMPORTED_MODULE_0___default =
    /*#__PURE__*/
    __webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);

    var BATCH_DURATION = 100;

    var Bridge = function (EventEmitter) {
      function Bridge(wall) {
        var this$1 = this;
        EventEmitter.call(this);
        this.setMaxListeners(Infinity);
        this.wall = wall;
        wall.listen(function (messages) {
          if (Array.isArray(messages)) {
            messages.forEach(function (message) {
              return this$1._emit(message);
            });
          } else {
            this$1._emit(messages);
          }
        });
        this._queue = [];
        this._time = null;
      }

      if (EventEmitter) Bridge.__proto__ = EventEmitter;
      Bridge.prototype = Object.create(EventEmitter && EventEmitter.prototype);
      Bridge.prototype.constructor = Bridge;
      /**
       * Send an event.
       *
       * @param {String} event
       * @param {*} payload
       */

      Bridge.prototype.send = function send(event, payload) {
        var this$1 = this;

        if (this._time === null) {
          this.wall.send([{
            event: event,
            payload: payload
          }]);
          this._time = Date.now();
        } else {
          this._queue.push({
            event: event,
            payload: payload
          });

          var now = Date.now();

          if (now - this._time > BATCH_DURATION) {
            this._flush();
          } else {
            this._timer = setTimeout(function () {
              return this$1._flush();
            }, BATCH_DURATION);
          }
        }
      };
      /**
       * Log a message to the devtools background page.
       *
       * @param {String} message
       */


      Bridge.prototype.log = function log(message) {
        this.send('log', message);
      };

      Bridge.prototype._flush = function _flush() {
        if (this._queue.length) {
          this.wall.send(this._queue);
        }

        clearTimeout(this._timer);
        this._queue = [];
        this._time = null;
      };

      Bridge.prototype._emit = function _emit(message) {
        if (typeof message === 'string') {
          this.emit(message);
        } else {
          this.emit(message.event, message.payload);
        }
      };

      return Bridge;
    }(events__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]);
    /* harmony default export */


    __webpack_exports__["default"] = Bridge;
    /***/
  },

  /***/
  "../../src/devtools/env.js":
  /*!*************************************************************!*\
    !*** /home/akryum/Projets/vue-devtools/src/devtools/env.js ***!
    \*************************************************************/

  /*! exports provided: isBrowser, target, isChrome, isFirefox, isWindows, isMac, isLinux, keys, initEnv */

  /***/
  function srcDevtoolsEnvJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* WEBPACK VAR INJECTION */


    (function (global) {
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "isBrowser", function () {
        return isBrowser;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "target", function () {
        return target;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isChrome", function () {
        return isChrome;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isFirefox", function () {
        return isFirefox;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isWindows", function () {
        return isWindows;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isMac", function () {
        return isMac;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isLinux", function () {
        return isLinux;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "keys", function () {
        return keys;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "initEnv", function () {
        return initEnv;
      });

      var isBrowser = typeof navigator !== 'undefined';
      var target = isBrowser ? window : typeof global !== 'undefined' ? global : {};
      var isChrome = typeof chrome !== 'undefined' && !!chrome.devtools;
      var isFirefox = isBrowser && navigator.userAgent.indexOf('Firefox') > -1;
      var isWindows = isBrowser && navigator.platform.indexOf('Win') === 0;
      var isMac = isBrowser && navigator.platform === 'MacIntel';
      var isLinux = isBrowser && navigator.platform.indexOf('Linux') === 0;
      var keys = {
        ctrl: isMac ? '&#8984;' : 'Ctrl',
        shift: 'Shift',
        alt: isMac ? '&#8997;' : 'Alt',
        del: 'Del',
        enter: 'Enter',
        esc: 'Esc'
      };

      function initEnv(Vue) {
        if (Vue.prototype.hasOwnProperty('$isChrome')) {
          return;
        }

        Object.defineProperties(Vue.prototype, {
          '$isChrome': {
            get: function get() {
              return isChrome;
            }
          },
          '$isFirefox': {
            get: function get() {
              return isFirefox;
            }
          },
          '$isWindows': {
            get: function get() {
              return isWindows;
            }
          },
          '$isMac': {
            get: function get() {
              return isMac;
            }
          },
          '$isLinux': {
            get: function get() {
              return isLinux;
            }
          },
          '$keys': {
            get: function get() {
              return keys;
            }
          }
        });

        if (isWindows) {
          document.body.classList.add('platform-windows');
        }

        if (isMac) {
          document.body.classList.add('platform-mac');
        }

        if (isLinux) {
          document.body.classList.add('platform-linux');
        }
      }
      /* WEBPACK VAR INJECTION */

    }).call(this, __webpack_require__(
    /*! ./../../shells/electron/node_modules/webpack/buildin/global.js */
    "./node_modules/webpack/buildin/global.js"));
    /***/
  },

  /***/
  "../../src/shared-data.js":
  /*!************************************************************!*\
    !*** /home/akryum/Projets/vue-devtools/src/shared-data.js ***!
    \************************************************************/

  /*! exports provided: init, destroy, watch, default */

  /***/
  function srcSharedDataJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "init", function () {
      return init;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "destroy", function () {
      return destroy;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "watch", function () {
      return watch;
    }); // Initial state


    var internalSharedData = {
      openInEditorHost: '/',
      classifyComponents: true,
      theme: 'auto',
      displayDensity: 'low',
      recordVuex: true,
      cacheVuexSnapshotsEvery: 50,
      cacheVuexSnapshotsLimit: 10,
      snapshotLoading: null,
      recordPerf: false
    };
    var persisted = ['classifyComponents', 'theme', 'displayDensity', 'recordVuex']; // ---- INTERNALS ---- //

    var Vue;
    var bridge; // Storage API

    var storage = null; // List of fields to persist to storage (disabled if 'false')
    // This should be unique to each shared data client to prevent conflicts

    var persist = false; // For reactivity, we wrap the data in a Vue instance

    var vm;

    function init(params) {
      // Mandatory params
      bridge = params.bridge;
      Vue = params.Vue;

      if (params.hasOwnProperty('storage')) {
        storage = params.storage;
        persist = persisted;
      } // Load persisted fields


      if (persist) {
        persist.forEach(function (key) {
          var value = storage.get("shared-data:" + key);

          if (value !== null) {
            internalSharedData[key] = value; // Send to other shared data clients

            sendValue(key, value);
          }
        });
      } // Wrapper Vue instance


      vm = new Vue({
        data: internalSharedData
      }); // Update value from other shared data clients

      bridge.on('shared-data:set', function (ref) {
        var key = ref.key;
        var value = ref.value;
        setValue(key, value);
      });
    }

    function destroy() {
      bridge.removeAllListeners('shared-data:set');
      vm.$destroy();
    }

    function setValue(key, value) {
      // Storage
      if (persist && persist.includes(key)) {
        storage.set("shared-data:" + key, value);
      }

      vm[key] = value; // Validate Proxy set trap

      return true;
    }

    function sendValue(key, value) {
      bridge && bridge.send('shared-data:set', {
        key: key,
        value: value
      });
    }

    function watch() {
      var args = [],
          len = arguments.length;

      while (len--) args[len] = arguments[len];

      vm.$watch.apply(vm, args);
    }

    var proxy = {};
    Object.keys(internalSharedData).forEach(function (key) {
      Object.defineProperty(proxy, key, {
        configurable: false,
        get: function get() {
          return vm && vm.$data[key];
        },
        set: function set(value) {
          sendValue(key, value);
          setValue(key, value);
        }
      });
    });
    /* harmony default export */

    __webpack_exports__["default"] = proxy;
    /***/
  },

  /***/
  "../../src/transfer.js":
  /*!*********************************************************!*\
    !*** /home/akryum/Projets/vue-devtools/src/transfer.js ***!
    \*********************************************************/

  /*! exports provided: stringify, parse, stringifyStrict */

  /***/
  function srcTransferJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "stringify", function () {
      return stringify;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "parse", function () {
      return parse;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "stringifyStrict", function () {
      return stringifyStrict;
    });

    function encode(data, replacer, list, seen) {
      var stored, key, value, i, l;
      var seenIndex = seen.get(data);

      if (seenIndex != null) {
        return seenIndex;
      }

      var index = list.length;
      var proto = Object.prototype.toString.call(data);

      if (proto === '[object Object]') {
        stored = {};
        seen.set(data, index);
        list.push(stored);
        var keys = Object.keys(data);

        for (i = 0, l = keys.length; i < l; i++) {
          key = keys[i];
          value = data[key];

          if (replacer) {
            value = replacer.call(data, key, value);
          }

          stored[key] = encode(value, replacer, list, seen);
        }
      } else if (proto === '[object Array]') {
        stored = [];
        seen.set(data, index);
        list.push(stored);

        for (i = 0, l = data.length; i < l; i++) {
          value = data[i];

          if (replacer) {
            value = replacer.call(data, i, value);
          }

          stored[i] = encode(value, replacer, list, seen);
        }
      } else {
        list.push(data);
      }

      return index;
    }

    function decode(list, reviver) {
      var i = list.length;
      var j, k, data, key, value, proto;

      while (i--) {
        data = list[i];
        proto = Object.prototype.toString.call(data);

        if (proto === '[object Object]') {
          var keys = Object.keys(data);

          for (j = 0, k = keys.length; j < k; j++) {
            key = keys[j];
            value = list[data[key]];

            if (reviver) {
              value = reviver.call(data, key, value);
            }

            data[key] = value;
          }
        } else if (proto === '[object Array]') {
          for (j = 0, k = data.length; j < k; j++) {
            value = list[data[j]];

            if (reviver) {
              value = reviver.call(data, j, value);
            }

            data[j] = value;
          }
        }
      }
    }

    function stringify(data, replacer, space) {
      try {
        return arguments.length === 1 ? JSON.stringify(data) : JSON.stringify(data, replacer, space);
      } catch (e) {
        return stringifyStrict(data, replacer, space);
      }
    }

    function parse(data, reviver) {
      var hasCircular = /^\s/.test(data);

      if (!hasCircular) {
        return arguments.length === 1 ? JSON.parse(data) : JSON.parse(data, reviver);
      } else {
        var list = JSON.parse(data);
        decode(list, reviver);
        return list[0];
      }
    }

    function stringifyStrict(data, replacer, space) {
      var list = [];
      encode(data, replacer, list, new Map());
      return space ? ' ' + JSON.stringify(list, null, space) : ' ' + JSON.stringify(list);
    }
    /***/

  },

  /***/
  "../../src/util.js":
  /*!*****************************************************!*\
    !*** /home/akryum/Projets/vue-devtools/src/util.js ***!
    \*****************************************************/

  /*! exports provided: classify, camelize, inDoc, UNDEFINED, INFINITY, NEGATIVE_INFINITY, NAN, SPECIAL_TOKENS, specialTokenToString, stringify, getCustomMapDetails, reviveMap, getCustomSetDetails, reviveSet, getComponentName, getCustomComponentDefinitionDetails, getCustomFunctionDetails, getCustomRefDetails, parse, isPlainObject, searchDeepInObject, sortByKey, set, get, scrollIntoView, focusInput, openInEditor, escape, copyToClipboard */

  /***/
  function srcUtilJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "classify", function () {
      return classify;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "camelize", function () {
      return camelize;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "inDoc", function () {
      return inDoc;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "UNDEFINED", function () {
      return UNDEFINED;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "INFINITY", function () {
      return INFINITY;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NEGATIVE_INFINITY", function () {
      return NEGATIVE_INFINITY;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NAN", function () {
      return NAN;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SPECIAL_TOKENS", function () {
      return SPECIAL_TOKENS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "specialTokenToString", function () {
      return specialTokenToString;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "stringify", function () {
      return stringify;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getCustomMapDetails", function () {
      return getCustomMapDetails;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "reviveMap", function () {
      return reviveMap;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getCustomSetDetails", function () {
      return getCustomSetDetails;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "reviveSet", function () {
      return reviveSet;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getComponentName", function () {
      return getComponentName;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getCustomComponentDefinitionDetails", function () {
      return getCustomComponentDefinitionDetails;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getCustomFunctionDetails", function () {
      return getCustomFunctionDetails;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getCustomRefDetails", function () {
      return getCustomRefDetails;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "parse", function () {
      return parse;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isPlainObject", function () {
      return isPlainObject;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "searchDeepInObject", function () {
      return searchDeepInObject;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sortByKey", function () {
      return sortByKey;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "set", function () {
      return set;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "get", function () {
      return get;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "scrollIntoView", function () {
      return scrollIntoView;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "focusInput", function () {
      return focusInput;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "openInEditor", function () {
      return openInEditor;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "escape", function () {
      return escape;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "copyToClipboard", function () {
      return copyToClipboard;
    });
    /* harmony import */


    var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! path */
    "./node_modules/path-browserify/index.js");
    /* harmony import */


    var path__WEBPACK_IMPORTED_MODULE_0___default =
    /*#__PURE__*/
    __webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_0__);
    /* harmony import */


    var _transfer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./transfer */
    "../../src/transfer.js");
    /* harmony import */


    var src_backend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! src/backend */
    "../../src/backend/index.js");
    /* harmony import */


    var src_backend_vuex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! src/backend/vuex */
    "../../src/backend/vuex.js");
    /* harmony import */


    var src_backend_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! src/backend/router */
    "../../src/backend/router.js");
    /* harmony import */


    var src_shared_data__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! src/shared-data */
    "../../src/shared-data.js");
    /* harmony import */


    var _devtools_env__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ./devtools/env */
    "../../src/devtools/env.js");

    function cached(fn) {
      var cache = Object.create(null);
      return function cachedFn(str) {
        var hit = cache[str];
        return hit || (cache[str] = fn(str));
      };
    }

    var classifyRE = /(?:^|[-_/])(\w)/g;
    var classify = cached(function (str) {
      return str && str.replace(classifyRE, toUpper);
    });
    var camelizeRE = /-(\w)/g;
    var camelize = cached(function (str) {
      return str.replace(camelizeRE, toUpper);
    });

    function toUpper(_, c) {
      return c ? c.toUpperCase() : '';
    }

    function inDoc(node) {
      if (!node) {
        return false;
      }

      var doc = node.ownerDocument.documentElement;
      var parent = node.parentNode;
      return doc === node || doc === parent || !!(parent && parent.nodeType === 1 && doc.contains(parent));
    }
    /**
     * Stringify/parse data using CircularJSON.
     */


    var UNDEFINED = '__vue_devtool_undefined__';
    var INFINITY = '__vue_devtool_infinity__';
    var NEGATIVE_INFINITY = '__vue_devtool_negative_infinity__';
    var NAN = '__vue_devtool_nan__';
    var SPECIAL_TOKENS = {
      'true': true,
      'false': false,
      'undefined': UNDEFINED,
      'null': null,
      '-Infinity': NEGATIVE_INFINITY,
      'Infinity': INFINITY,
      'NaN': NAN
    };

    function specialTokenToString(value) {
      if (value === null) {
        return 'null';
      } else if (value === UNDEFINED) {
        return 'undefined';
      } else if (value === NAN) {
        return 'NaN';
      } else if (value === INFINITY) {
        return 'Infinity';
      } else if (value === NEGATIVE_INFINITY) {
        return '-Infinity';
      }

      return false;
    }
    /**
     * Needed to prevent stack overflow
     * while replacing complex objects
     * like components because we create
     * new objects with the CustomValue API
     * (.i.e `{ _custom: { ... } }`)
     */


    var EncodeCache = function EncodeCache() {
      this.map = new Map();
    };
    /**
     * Returns a result unique to each input data
     * @param {*} data Input data
     * @param {*} factory Function used to create the unique result
     */


    EncodeCache.prototype.cache = function cache(data, factory) {
      var cached = this.map.get(data);

      if (cached) {
        return cached;
      } else {
        var result = factory(data);
        this.map.set(data, result);
        return result;
      }
    };

    EncodeCache.prototype.clear = function clear() {
      this.map.clear();
    };

    var encodeCache = new EncodeCache();

    function stringify(data) {
      // Create a fresh cache for each serialization
      encodeCache.clear();
      return _transfer__WEBPACK_IMPORTED_MODULE_1__["stringify"](data, replacer);
    }

    function replacer(key) {
      var val = this[key];
      var type = typeof val;

      if (type === 'undefined') {
        return UNDEFINED;
      } else if (val === Infinity) {
        return INFINITY;
      } else if (val === -Infinity) {
        return NEGATIVE_INFINITY;
      } else if (type === 'function') {
        return getCustomFunctionDetails(val);
      } else if (type === 'symbol') {
        return "[native Symbol " + Symbol.prototype.toString.call(val) + "]";
      } else if (val !== null && type === 'object') {
        if (val instanceof Map) {
          return encodeCache.cache(val, function () {
            return getCustomMapDetails(val);
          });
        } else if (val instanceof Set) {
          return encodeCache.cache(val, function () {
            return getCustomSetDetails(val);
          });
        } else if (val instanceof RegExp) {
          // special handling of native type
          return "[native RegExp " + RegExp.prototype.toString.call(val) + "]";
        } else if (val instanceof Date) {
          return "[native Date " + Date.prototype.toString.call(val) + "]";
        } else if (val.state && val._vm) {
          return encodeCache.cache(val, function () {
            return Object(src_backend_vuex__WEBPACK_IMPORTED_MODULE_3__["getCustomStoreDetails"])(val);
          });
        } else if (val.constructor && val.constructor.name === 'VueRouter') {
          return encodeCache.cache(val, function () {
            return Object(src_backend_router__WEBPACK_IMPORTED_MODULE_4__["getCustomRouterDetails"])(val);
          });
        } else if (val._isVue) {
          return encodeCache.cache(val, function () {
            return Object(src_backend__WEBPACK_IMPORTED_MODULE_2__["getCustomInstanceDetails"])(val);
          });
        } else if (typeof val.render === 'function') {
          return encodeCache.cache(val, function () {
            return getCustomComponentDefinitionDetails(val);
          });
        }
      } else if (Number.isNaN(val)) {
        return NAN;
      }

      return sanitize(val);
    }

    function getCustomMapDetails(val) {
      var list = [];
      val.forEach(function (value, key) {
        return list.push({
          key: key,
          value: value
        });
      });
      return {
        _custom: {
          type: 'map',
          display: 'Map',
          value: list,
          readOnly: true,
          fields: {
            abstract: true
          }
        }
      };
    }

    function reviveMap(val) {
      var result = new Map();
      var list = val._custom.value;

      for (var i = 0; i < list.length; i++) {
        var ref = list[i];
        var key = ref.key;
        var value = ref.value;
        result.set(key, reviver(null, value));
      }

      return result;
    }

    function getCustomSetDetails(val) {
      var list = Array.from(val);
      return {
        _custom: {
          type: 'set',
          display: "Set[" + list.length + "]",
          value: list,
          readOnly: true
        }
      };
    }

    function reviveSet(val) {
      var result = new Set();
      var list = val._custom.value;

      for (var i = 0; i < list.length; i++) {
        var value = list[i];
        result.add(reviver(null, value));
      }

      return result;
    } // Use a custom basename functions instead of the shimed version
    // because it doesn't work on Windows


    function basename(filename, ext) {
      return path__WEBPACK_IMPORTED_MODULE_0___default.a.basename(filename.replace(/^[a-zA-Z]:/, '').replace(/\\/g, '/'), ext);
    }

    function getComponentName(options) {
      var name = options.name || options._componentTag;

      if (name) {
        return name;
      }

      var file = options.__file; // injected by vue-loader

      if (file) {
        return classify(basename(file, '.vue'));
      }
    }

    function getCustomComponentDefinitionDetails(def) {
      var display = getComponentName(def);

      if (display) {
        if (def.name && def.__file) {
          display += " <span>(" + def.__file + ")</span>";
        }
      } else {
        display = '<i>Unknown Component</i>';
      }

      return {
        _custom: Object.assign({}, {
          type: 'component-definition',
          display: display,
          tooltip: 'Component definition'
        }, def.__file ? {
          file: def.__file
        } : {})
      };
    }

    function getCustomFunctionDetails(func) {
      var string = '';
      var matches = null;

      try {
        string = Function.prototype.toString.call(func);
        matches = String.prototype.match.call(string, /\([\s\S]*?\)/);
      } catch (e) {} // Func is probably a Proxy, which can break Function.prototype.toString()
      // Trim any excess whitespace from the argument string


      var match = matches && matches[0];
      var args = typeof match === 'string' ? "(" + match.substr(1, match.length - 2).split(',').map(function (a) {
        return a.trim();
      }).join(', ') + ")" : '(?)';
      var name = typeof func.name === 'string' ? func.name : '';
      return {
        _custom: {
          type: 'function',
          display: "<span>ƒ</span> " + escape(name) + args
        }
      };
    }

    function getCustomRefDetails(instance, key, ref) {
      var value;

      if (Array.isArray(ref)) {
        value = ref.map(function (r) {
          return getCustomRefDetails(instance, key, r);
        }).map(function (data) {
          return data.value;
        });
      } else {
        var name;

        if (ref._isVue) {
          name = getComponentName(ref.$options);
        } else {
          name = ref.tagName.toLowerCase();
        }

        value = {
          _custom: {
            display: "&lt;" + name + (ref.id ? " <span class=\"attr-title\">id</span>=\"" + ref.id + "\"" : '') + (ref.className ? " <span class=\"attr-title\">class</span>=\"" + ref.className + "\"" : '') + '&gt;',
            uid: instance.__VUE_DEVTOOLS_UID__,
            type: 'reference'
          }
        };
      }

      return {
        type: '$refs',
        key: key,
        value: value,
        editable: false
      };
    }

    function parse(data, revive) {
      return revive ? _transfer__WEBPACK_IMPORTED_MODULE_1__["parse"](data, reviver) : _transfer__WEBPACK_IMPORTED_MODULE_1__["parse"](data);
    }

    var specialTypeRE = /^\[native (\w+) (.*)\]$/;
    var symbolRE = /^\[native Symbol Symbol\((.*)\)\]$/;

    function reviver(key, val) {
      if (val === UNDEFINED) {
        return undefined;
      } else if (val === INFINITY) {
        return Infinity;
      } else if (val === NEGATIVE_INFINITY) {
        return -Infinity;
      } else if (val === NAN) {
        return NaN;
      } else if (val && val._custom) {
        if (val._custom.type === 'component') {
          return src_backend__WEBPACK_IMPORTED_MODULE_2__["instanceMap"].get(val._custom.id);
        } else if (val._custom.type === 'map') {
          return reviveMap(val);
        } else if (val._custom.type === 'set') {
          return reviveSet(val);
        }
      } else if (symbolRE.test(val)) {
        var ref = symbolRE.exec(val);
        var string = ref[1];
        return Symbol.for(string);
      } else if (specialTypeRE.test(val)) {
        var ref$1 = specialTypeRE.exec(val);
        var type = ref$1[1];
        var string$1 = ref$1[2];
        return new window[type](string$1);
      } else {
        return val;
      }
    }
    /**
     * Sanitize data to be posted to the other side.
     * Since the message posted is sent with structured clone,
     * we need to filter out any types that might cause an error.
     *
     * @param {*} data
     * @return {*}
     */


    function sanitize(data) {
      if (!isPrimitive(data) && !Array.isArray(data) && !isPlainObject(data)) {
        // handle types that will probably cause issues in
        // the structured clone
        return Object.prototype.toString.call(data);
      } else {
        return data;
      }
    }

    function isPlainObject(obj) {
      return Object.prototype.toString.call(obj) === '[object Object]';
    }

    function isPrimitive(data) {
      if (data == null) {
        return true;
      }

      var type = typeof data;
      return type === 'string' || type === 'number' || type === 'boolean';
    }
    /**
     * Searches a key or value in the object, with a maximum deepness
     * @param {*} obj Search target
     * @param {string} searchTerm Search string
     * @returns {boolean} Search match
     */


    function searchDeepInObject(obj, searchTerm) {
      var seen = new Map();
      var result = internalSearchObject(obj, searchTerm.toLowerCase(), seen, 0);
      seen.clear();
      return result;
    }

    var SEARCH_MAX_DEPTH = 10;
    /**
     * Executes a search on each field of the provided object
     * @param {*} obj Search target
     * @param {string} searchTerm Search string
     * @param {Map<any,boolean>} seen Map containing the search result to prevent stack overflow by walking on the same object multiple times
     * @param {number} depth Deep search depth level, which is capped to prevent performance issues
     * @returns {boolean} Search match
     */

    function internalSearchObject(obj, searchTerm, seen, depth) {
      if (depth > SEARCH_MAX_DEPTH) {
        return false;
      }

      var match = false;
      var keys = Object.keys(obj);
      var key, value;

      for (var i = 0; i < keys.length; i++) {
        key = keys[i];
        value = obj[key];
        match = interalSearchCheck(searchTerm, key, value, seen, depth + 1);

        if (match) {
          break;
        }
      }

      return match;
    }
    /**
     * Executes a search on each value of the provided array
     * @param {*} array Search target
     * @param {string} searchTerm Search string
     * @param {Map<any,boolean>} seen Map containing the search result to prevent stack overflow by walking on the same object multiple times
     * @param {number} depth Deep search depth level, which is capped to prevent performance issues
     * @returns {boolean} Search match
     */


    function internalSearchArray(array, searchTerm, seen, depth) {
      if (depth > SEARCH_MAX_DEPTH) {
        return false;
      }

      var match = false;
      var value;

      for (var i = 0; i < array.length; i++) {
        value = array[i];
        match = interalSearchCheck(searchTerm, null, value, seen, depth + 1);

        if (match) {
          break;
        }
      }

      return match;
    }
    /**
     * Checks if the provided field matches the search terms
     * @param {string} searchTerm Search string
     * @param {string} key Field key (null if from array)
     * @param {*} value Field value
     * @param {Map<any,boolean>} seen Map containing the search result to prevent stack overflow by walking on the same object multiple times
     * @param {number} depth Deep search depth level, which is capped to prevent performance issues
     * @returns {boolean} Search match
     */


    function interalSearchCheck(searchTerm, key, value, seen, depth) {
      var match = false;
      var result;

      if (key === '_custom') {
        key = value.display;
        value = value.value;
      }

      (result = specialTokenToString(value)) && (value = result);

      if (key && compare(key, searchTerm)) {
        match = true;
        seen.set(value, true);
      } else if (seen.has(value)) {
        match = seen.get(value);
      } else if (Array.isArray(value)) {
        seen.set(value, null);
        match = internalSearchArray(value, searchTerm, seen, depth);
        seen.set(value, match);
      } else if (isPlainObject(value)) {
        seen.set(value, null);
        match = internalSearchObject(value, searchTerm, seen, depth);
        seen.set(value, match);
      } else if (compare(value, searchTerm)) {
        match = true;
        seen.set(value, true);
      }

      return match;
    }
    /**
     * Compares two values
     * @param {*} value Mixed type value that will be cast to string
     * @param {string} searchTerm Search string
     * @returns {boolean} Search match
     */


    function compare(value, searchTerm) {
      return ('' + value).toLowerCase().indexOf(searchTerm) !== -1;
    }

    function sortByKey(state) {
      return state && state.slice().sort(function (a, b) {
        if (a.key < b.key) {
          return -1;
        }

        if (a.key > b.key) {
          return 1;
        }

        return 0;
      });
    }

    function set(object, path, value, cb) {
      if (cb === void 0) cb = null;
      var sections = path.split('.');

      while (sections.length > 1) {
        object = object[sections.shift()];
      }

      var field = sections[0];

      if (cb) {
        cb(object, field, value);
      } else {
        object[field] = value;
      }
    }

    function get(object, path) {
      var sections = path.split('.');

      for (var i = 0; i < sections.length; i++) {
        object = object[sections[i]];

        if (!object) {
          return undefined;
        }
      }

      return object;
    }

    function scrollIntoView(scrollParent, el, center) {
      if (center === void 0) center = true;
      var parentTop = scrollParent.scrollTop;
      var parentHeight = scrollParent.offsetHeight;
      var elBounds = el.getBoundingClientRect();
      var parentBounds = scrollParent.getBoundingClientRect();
      var top = elBounds.top - parentBounds.top + scrollParent.scrollTop;
      var height = el.offsetHeight;

      if (center) {
        scrollParent.scrollTop = top + (height - parentHeight) / 2;
      } else if (top < parentTop) {
        scrollParent.scrollTop = top;
      } else if (top + height > parentTop + parentHeight) {
        scrollParent.scrollTop = top - parentHeight + height;
      }
    }

    function focusInput(el) {
      el.focus();
      el.setSelectionRange(0, el.value.length);
    }

    function openInEditor(file) {
      // Console display
      var fileName = file.replace(/\\/g, '\\\\');
      var src = "fetch('" + src_shared_data__WEBPACK_IMPORTED_MODULE_5__["default"].openInEditorHost + "__open-in-editor?file=" + encodeURI(file) + "').then(response => {\n    if (response.ok) {\n      console.log('File " + fileName + " opened in editor')\n    } else {\n      const msg = 'Opening component " + fileName + " failed'\n      const target = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {}\n      if (target.__VUE_DEVTOOLS_TOAST__) {\n        target.__VUE_DEVTOOLS_TOAST__(msg, 'error')\n      } else {\n        console.log('%c' + msg, 'color:red')\n      }\n      console.log('Check the setup of your project, see https://github.com/vuejs/vue-devtools/blob/master/docs/open-in-editor.md')\n    }\n  })";

      if (_devtools_env__WEBPACK_IMPORTED_MODULE_6__["isChrome"]) {
        chrome.devtools.inspectedWindow.eval(src);
      } else {
        // eslint-disable-next-line no-eval
        eval(src);
      }
    }

    var ESC = {
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      '&': '&amp;'
    };

    function escape(s) {
      return s.replace(/[<>"&]/g, escapeChar);
    }

    function escapeChar(a) {
      return ESC[a] || a;
    }

    function copyToClipboard(state) {
      if (typeof document === 'undefined') {
        return;
      }

      var dummyTextArea = document.createElement('textarea');
      dummyTextArea.textContent = stringify(state);
      document.body.appendChild(dummyTextArea);
      dummyTextArea.select();
      document.execCommand('copy');
      document.body.removeChild(dummyTextArea);
    }
    /***/

  },

  /***/
  "./node_modules/after/index.js":
  /*!*************************************!*\
    !*** ./node_modules/after/index.js ***!
    \*************************************/

  /*! no static exports found */

  /***/
  function node_modulesAfterIndexJs(module, exports) {
    module.exports = after;

    function after(count, callback, err_cb) {
      var bail = false;
      err_cb = err_cb || noop;
      proxy.count = count;
      return count === 0 ? callback() : proxy;

      function proxy(err, result) {
        if (proxy.count <= 0) {
          throw new Error('after called too many times');
        }

        --proxy.count; // after first error, rest are passed to err_cb

        if (err) {
          bail = true;
          callback(err); // future error callbacks will go to error handler

          callback = err_cb;
        } else if (proxy.count === 0 && !bail) {
          callback(null, result);
        }
      }
    }

    function noop() {}
    /***/

  },

  /***/
  "./node_modules/arraybuffer.slice/index.js":
  /*!*************************************************!*\
    !*** ./node_modules/arraybuffer.slice/index.js ***!
    \*************************************************/

  /*! no static exports found */

  /***/
  function node_modulesArraybufferSliceIndexJs(module, exports) {
    /**
     * An abstraction for slicing an arraybuffer even when
     * ArrayBuffer.prototype.slice is not supported
     *
     * @api public
     */
    module.exports = function (arraybuffer, start, end) {
      var bytes = arraybuffer.byteLength;
      start = start || 0;
      end = end || bytes;

      if (arraybuffer.slice) {
        return arraybuffer.slice(start, end);
      }

      if (start < 0) {
        start += bytes;
      }

      if (end < 0) {
        end += bytes;
      }

      if (end > bytes) {
        end = bytes;
      }

      if (start >= bytes || start >= end || bytes === 0) {
        return new ArrayBuffer(0);
      }

      var abv = new Uint8Array(arraybuffer);
      var result = new Uint8Array(end - start);

      for (var i = start, ii = 0; i < end; i++, ii++) {
        result[ii] = abv[i];
      }

      return result.buffer;
    };
    /***/

  },

  /***/
  "./node_modules/backo2/index.js":
  /*!**************************************!*\
    !*** ./node_modules/backo2/index.js ***!
    \**************************************/

  /*! no static exports found */

  /***/
  function node_modulesBacko2IndexJs(module, exports) {
    /**
     * Expose `Backoff`.
     */
    module.exports = Backoff;
    /**
     * Initialize backoff timer with `opts`.
     *
     * - `min` initial timeout in milliseconds [100]
     * - `max` max timeout [10000]
     * - `jitter` [0]
     * - `factor` [2]
     *
     * @param {Object} opts
     * @api public
     */

    function Backoff(opts) {
      opts = opts || {};
      this.ms = opts.min || 100;
      this.max = opts.max || 10000;
      this.factor = opts.factor || 2;
      this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
      this.attempts = 0;
    }
    /**
     * Return the backoff duration.
     *
     * @return {Number}
     * @api public
     */


    Backoff.prototype.duration = function () {
      var ms = this.ms * Math.pow(this.factor, this.attempts++);

      if (this.jitter) {
        var rand = Math.random();
        var deviation = Math.floor(rand * this.jitter * ms);
        ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
      }

      return Math.min(ms, this.max) | 0;
    };
    /**
     * Reset the number of attempts.
     *
     * @api public
     */


    Backoff.prototype.reset = function () {
      this.attempts = 0;
    };
    /**
     * Set the minimum duration
     *
     * @api public
     */


    Backoff.prototype.setMin = function (min) {
      this.ms = min;
    };
    /**
     * Set the maximum duration
     *
     * @api public
     */


    Backoff.prototype.setMax = function (max) {
      this.max = max;
    };
    /**
     * Set the jitter
     *
     * @api public
     */


    Backoff.prototype.setJitter = function (jitter) {
      this.jitter = jitter;
    };
    /***/

  },

  /***/
  "./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js":
  /*!*******************************************************************!*\
    !*** ./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js ***!
    \*******************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesBase64ArraybufferLibBase64ArraybufferJs(module, exports) {
    /*
     * base64-arraybuffer
     * https://github.com/niklasvh/base64-arraybuffer
     *
     * Copyright (c) 2012 Niklas von Hertzen
     * Licensed under the MIT license.
     */
    (function () {
      "use strict";

      var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"; // Use a lookup table to find the index.

      var lookup = new Uint8Array(256);

      for (var i = 0; i < chars.length; i++) {
        lookup[chars.charCodeAt(i)] = i;
      }

      exports.encode = function (arraybuffer) {
        var bytes = new Uint8Array(arraybuffer),
            i,
            len = bytes.length,
            base64 = "";

        for (i = 0; i < len; i += 3) {
          base64 += chars[bytes[i] >> 2];
          base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
          base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
          base64 += chars[bytes[i + 2] & 63];
        }

        if (len % 3 === 2) {
          base64 = base64.substring(0, base64.length - 1) + "=";
        } else if (len % 3 === 1) {
          base64 = base64.substring(0, base64.length - 2) + "==";
        }

        return base64;
      };

      exports.decode = function (base64) {
        var bufferLength = base64.length * 0.75,
            len = base64.length,
            i,
            p = 0,
            encoded1,
            encoded2,
            encoded3,
            encoded4;

        if (base64[base64.length - 1] === "=") {
          bufferLength--;

          if (base64[base64.length - 2] === "=") {
            bufferLength--;
          }
        }

        var arraybuffer = new ArrayBuffer(bufferLength),
            bytes = new Uint8Array(arraybuffer);

        for (i = 0; i < len; i += 4) {
          encoded1 = lookup[base64.charCodeAt(i)];
          encoded2 = lookup[base64.charCodeAt(i + 1)];
          encoded3 = lookup[base64.charCodeAt(i + 2)];
          encoded4 = lookup[base64.charCodeAt(i + 3)];
          bytes[p++] = encoded1 << 2 | encoded2 >> 4;
          bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
          bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
        }

        return arraybuffer;
      };
    })();
    /***/

  },

  /***/
  "./node_modules/blob/index.js":
  /*!************************************!*\
    !*** ./node_modules/blob/index.js ***!
    \************************************/

  /*! no static exports found */

  /***/
  function node_modulesBlobIndexJs(module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (global) {
      /**
      * Create a blob builder even when vendor prefixes exist
      */
      var BlobBuilder = global.BlobBuilder || global.WebKitBlobBuilder || global.MSBlobBuilder || global.MozBlobBuilder;
      /**
       * Check if Blob constructor is supported
       */

      var blobSupported = function () {
        try {
          var a = new Blob(['hi']);
          return a.size === 2;
        } catch (e) {
          return false;
        }
      }();
      /**
       * Check if Blob constructor supports ArrayBufferViews
       * Fails in Safari 6, so we need to map to ArrayBuffers there.
       */


      var blobSupportsArrayBufferView = blobSupported && function () {
        try {
          var b = new Blob([new Uint8Array([1, 2])]);
          return b.size === 2;
        } catch (e) {
          return false;
        }
      }();
      /**
       * Check if BlobBuilder is supported
       */


      var blobBuilderSupported = BlobBuilder && BlobBuilder.prototype.append && BlobBuilder.prototype.getBlob;
      /**
       * Helper function that maps ArrayBufferViews to ArrayBuffers
       * Used by BlobBuilder constructor and old browsers that didn't
       * support it in the Blob constructor.
       */

      function mapArrayBufferViews(ary) {
        for (var i = 0; i < ary.length; i++) {
          var chunk = ary[i];

          if (chunk.buffer instanceof ArrayBuffer) {
            var buf = chunk.buffer; // if this is a subarray, make a copy so we only
            // include the subarray region from the underlying buffer

            if (chunk.byteLength !== buf.byteLength) {
              var copy = new Uint8Array(chunk.byteLength);
              copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
              buf = copy.buffer;
            }

            ary[i] = buf;
          }
        }
      }

      function BlobBuilderConstructor(ary, options) {
        options = options || {};
        var bb = new BlobBuilder();
        mapArrayBufferViews(ary);

        for (var i = 0; i < ary.length; i++) {
          bb.append(ary[i]);
        }

        return options.type ? bb.getBlob(options.type) : bb.getBlob();
      }

      ;

      function BlobConstructor(ary, options) {
        mapArrayBufferViews(ary);
        return new Blob(ary, options || {});
      }

      ;

      module.exports = function () {
        if (blobSupported) {
          return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;
        } else if (blobBuilderSupported) {
          return BlobBuilderConstructor;
        } else {
          return undefined;
        }
      }();
      /* WEBPACK VAR INJECTION */

    }).call(this, __webpack_require__(
    /*! ./../webpack/buildin/global.js */
    "./node_modules/webpack/buildin/global.js"));
    /***/
  },

  /***/
  "./node_modules/component-bind/index.js":
  /*!**********************************************!*\
    !*** ./node_modules/component-bind/index.js ***!
    \**********************************************/

  /*! no static exports found */

  /***/
  function node_modulesComponentBindIndexJs(module, exports) {
    /**
     * Slice reference.
     */
    var slice = [].slice;
    /**
     * Bind `obj` to `fn`.
     *
     * @param {Object} obj
     * @param {Function|String} fn or string
     * @return {Function}
     * @api public
     */

    module.exports = function (obj, fn) {
      if ('string' == typeof fn) fn = obj[fn];
      if ('function' != typeof fn) throw new Error('bind() requires a function');
      var args = slice.call(arguments, 2);
      return function () {
        return fn.apply(obj, args.concat(slice.call(arguments)));
      };
    };
    /***/

  },

  /***/
  "./node_modules/component-emitter/index.js":
  /*!*************************************************!*\
    !*** ./node_modules/component-emitter/index.js ***!
    \*************************************************/

  /*! no static exports found */

  /***/
  function node_modulesComponentEmitterIndexJs(module, exports, __webpack_require__) {
    /**
     * Expose `Emitter`.
     */
    if (true) {
      module.exports = Emitter;
    }
    /**
     * Initialize a new `Emitter`.
     *
     * @api public
     */


    function Emitter(obj) {
      if (obj) return mixin(obj);
    }

    ;
    /**
     * Mixin the emitter properties.
     *
     * @param {Object} obj
     * @return {Object}
     * @api private
     */

    function mixin(obj) {
      for (var key in Emitter.prototype) {
        obj[key] = Emitter.prototype[key];
      }

      return obj;
    }
    /**
     * Listen on the given `event` with `fn`.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */


    Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
      this._callbacks = this._callbacks || {};
      (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
      return this;
    };
    /**
     * Adds an `event` listener that will be invoked a single
     * time then automatically removed.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */


    Emitter.prototype.once = function (event, fn) {
      function on() {
        this.off(event, on);
        fn.apply(this, arguments);
      }

      on.fn = fn;
      this.on(event, on);
      return this;
    };
    /**
     * Remove the given callback for `event` or all
     * registered callbacks.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */


    Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
      this._callbacks = this._callbacks || {}; // all

      if (0 == arguments.length) {
        this._callbacks = {};
        return this;
      } // specific event


      var callbacks = this._callbacks['$' + event];
      if (!callbacks) return this; // remove all handlers

      if (1 == arguments.length) {
        delete this._callbacks['$' + event];
        return this;
      } // remove specific handler


      var cb;

      for (var i = 0; i < callbacks.length; i++) {
        cb = callbacks[i];

        if (cb === fn || cb.fn === fn) {
          callbacks.splice(i, 1);
          break;
        }
      }

      return this;
    };
    /**
     * Emit `event` with the given args.
     *
     * @param {String} event
     * @param {Mixed} ...
     * @return {Emitter}
     */


    Emitter.prototype.emit = function (event) {
      this._callbacks = this._callbacks || {};
      var args = [].slice.call(arguments, 1),
          callbacks = this._callbacks['$' + event];

      if (callbacks) {
        callbacks = callbacks.slice(0);

        for (var i = 0, len = callbacks.length; i < len; ++i) {
          callbacks[i].apply(this, args);
        }
      }

      return this;
    };
    /**
     * Return array of callbacks for `event`.
     *
     * @param {String} event
     * @return {Array}
     * @api public
     */


    Emitter.prototype.listeners = function (event) {
      this._callbacks = this._callbacks || {};
      return this._callbacks['$' + event] || [];
    };
    /**
     * Check if this emitter has `event` handlers.
     *
     * @param {String} event
     * @return {Boolean}
     * @api public
     */


    Emitter.prototype.hasListeners = function (event) {
      return !!this.listeners(event).length;
    };
    /***/

  },

  /***/
  "./node_modules/component-inherit/index.js":
  /*!*************************************************!*\
    !*** ./node_modules/component-inherit/index.js ***!
    \*************************************************/

  /*! no static exports found */

  /***/
  function node_modulesComponentInheritIndexJs(module, exports) {
    module.exports = function (a, b) {
      var fn = function fn() {};

      fn.prototype = b.prototype;
      a.prototype = new fn();
      a.prototype.constructor = a;
    };
    /***/

  },

  /***/
  "./node_modules/debug/src/browser.js":
  /*!*******************************************!*\
    !*** ./node_modules/debug/src/browser.js ***!
    \*******************************************/

  /*! no static exports found */

  /***/
  function node_modulesDebugSrcBrowserJs(module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      /**
      * This is the web browser implementation of `debug()`.
      *
      * Expose `debug()` as the module.
      */
      exports = module.exports = __webpack_require__(
      /*! ./debug */
      "./node_modules/debug/src/debug.js");
      exports.log = log;
      exports.formatArgs = formatArgs;
      exports.save = save;
      exports.load = load;
      exports.useColors = useColors;
      exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();
      /**
       * Colors.
       */

      exports.colors = ['lightseagreen', 'forestgreen', 'goldenrod', 'dodgerblue', 'darkorchid', 'crimson'];
      /**
       * Currently only WebKit-based Web Inspectors, Firefox >= v31,
       * and the Firebug extension (any Firefox version) are known
       * to support "%c" CSS customizations.
       *
       * TODO: add a `localStorage` variable to explicitly enable/disable colors
       */

      function useColors() {
        // NB: In an Electron preload script, document will be defined but not fully
        // initialized. Since we know we're in Chrome, we'll just detect this case
        // explicitly
        if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
          return true;
        } // is webkit? http://stackoverflow.com/a/16459606/376773
        // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


        return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // is firebug? http://stackoverflow.com/a/398120/376773
        typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // is firefox >= v31?
        // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
        typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // double check webkit in userAgent just in case we are in a worker
        typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
      }
      /**
       * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
       */


      exports.formatters.j = function (v) {
        try {
          return JSON.stringify(v);
        } catch (err) {
          return '[UnexpectedJSONParseError]: ' + err.message;
        }
      };
      /**
       * Colorize log arguments if enabled.
       *
       * @api public
       */


      function formatArgs(args) {
        var useColors = this.useColors;
        args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);
        if (!useColors) return;
        var c = 'color: ' + this.color;
        args.splice(1, 0, c, 'color: inherit'); // the final "%c" is somewhat tricky, because there could be other
        // arguments passed either before or after the %c, so we need to
        // figure out the correct index to insert the CSS into

        var index = 0;
        var lastC = 0;
        args[0].replace(/%[a-zA-Z%]/g, function (match) {
          if ('%%' === match) return;
          index++;

          if ('%c' === match) {
            // we only are interested in the *last* %c
            // (the user may have provided their own)
            lastC = index;
          }
        });
        args.splice(lastC, 0, c);
      }
      /**
       * Invokes `console.log()` when available.
       * No-op when `console.log` is not a "function".
       *
       * @api public
       */


      function log() {
        // this hackery is required for IE8/9, where
        // the `console.log` function doesn't have 'apply'
        return 'object' === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
      }
      /**
       * Save `namespaces`.
       *
       * @param {String} namespaces
       * @api private
       */


      function save(namespaces) {
        try {
          if (null == namespaces) {
            exports.storage.removeItem('debug');
          } else {
            exports.storage.debug = namespaces;
          }
        } catch (e) {}
      }
      /**
       * Load `namespaces`.
       *
       * @return {String} returns the previously persisted debug modes
       * @api private
       */


      function load() {
        var r;

        try {
          r = exports.storage.debug;
        } catch (e) {} // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


        if (!r && typeof process !== 'undefined' && 'env' in process) {
          r = process.env.DEBUG;
        }

        return r;
      }
      /**
       * Enable namespaces listed in `localStorage.debug` initially.
       */


      exports.enable(load());
      /**
       * Localstorage attempts to return the localstorage.
       *
       * This is necessary because safari throws
       * when a user disables cookies/localstorage
       * and you attempt to access it.
       *
       * @return {LocalStorage}
       * @api private
       */

      function localstorage() {
        try {
          return window.localStorage;
        } catch (e) {}
      }
      /* WEBPACK VAR INJECTION */

    }).call(this, __webpack_require__(
    /*! ./../../process/browser.js */
    "./node_modules/process/browser.js"));
    /***/
  },

  /***/
  "./node_modules/debug/src/debug.js":
  /*!*****************************************!*\
    !*** ./node_modules/debug/src/debug.js ***!
    \*****************************************/

  /*! no static exports found */

  /***/
  function node_modulesDebugSrcDebugJs(module, exports, __webpack_require__) {
    /**
     * This is the common logic for both the Node.js and web browser
     * implementations of `debug()`.
     *
     * Expose `debug()` as the module.
     */
    exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
    exports.coerce = coerce;
    exports.disable = disable;
    exports.enable = enable;
    exports.enabled = enabled;
    exports.humanize = __webpack_require__(
    /*! ms */
    "./node_modules/ms/index.js");
    /**
     * The currently active debug mode names, and names to skip.
     */

    exports.names = [];
    exports.skips = [];
    /**
     * Map of special "%n" handling functions, for the debug "format" argument.
     *
     * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
     */

    exports.formatters = {};
    /**
     * Previous log timestamp.
     */

    var prevTime;
    /**
     * Select a color.
     * @param {String} namespace
     * @return {Number}
     * @api private
     */

    function selectColor(namespace) {
      var hash = 0,
          i;

      for (i in namespace) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0; // Convert to 32bit integer
      }

      return exports.colors[Math.abs(hash) % exports.colors.length];
    }
    /**
     * Create a debugger with the given `namespace`.
     *
     * @param {String} namespace
     * @return {Function}
     * @api public
     */


    function createDebug(namespace) {
      function debug() {
        // disabled?
        if (!debug.enabled) return;
        var self = debug; // set `diff` timestamp

        var curr = +new Date();
        var ms = curr - (prevTime || curr);
        self.diff = ms;
        self.prev = prevTime;
        self.curr = curr;
        prevTime = curr; // turn the `arguments` into a proper Array

        var args = new Array(arguments.length);

        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }

        args[0] = exports.coerce(args[0]);

        if ('string' !== typeof args[0]) {
          // anything else let's inspect with %O
          args.unshift('%O');
        } // apply any `formatters` transformations


        var index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
          // if we encounter an escaped % then don't increase the array index
          if (match === '%%') return match;
          index++;
          var formatter = exports.formatters[format];

          if ('function' === typeof formatter) {
            var val = args[index];
            match = formatter.call(self, val); // now we need to remove `args[index]` since it's inlined in the `format`

            args.splice(index, 1);
            index--;
          }

          return match;
        }); // apply env-specific formatting (colors, etc.)

        exports.formatArgs.call(self, args);
        var logFn = debug.log || exports.log || console.log.bind(console);
        logFn.apply(self, args);
      }

      debug.namespace = namespace;
      debug.enabled = exports.enabled(namespace);
      debug.useColors = exports.useColors();
      debug.color = selectColor(namespace); // env-specific initialization logic for debug instances

      if ('function' === typeof exports.init) {
        exports.init(debug);
      }

      return debug;
    }
    /**
     * Enables a debug mode by namespaces. This can include modes
     * separated by a colon and wildcards.
     *
     * @param {String} namespaces
     * @api public
     */


    function enable(namespaces) {
      exports.save(namespaces);
      exports.names = [];
      exports.skips = [];
      var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
      var len = split.length;

      for (var i = 0; i < len; i++) {
        if (!split[i]) continue; // ignore empty strings

        namespaces = split[i].replace(/\*/g, '.*?');

        if (namespaces[0] === '-') {
          exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
        } else {
          exports.names.push(new RegExp('^' + namespaces + '$'));
        }
      }
    }
    /**
     * Disable debug output.
     *
     * @api public
     */


    function disable() {
      exports.enable('');
    }
    /**
     * Returns true if the given mode name is enabled, false otherwise.
     *
     * @param {String} name
     * @return {Boolean}
     * @api public
     */


    function enabled(name) {
      var i, len;

      for (i = 0, len = exports.skips.length; i < len; i++) {
        if (exports.skips[i].test(name)) {
          return false;
        }
      }

      for (i = 0, len = exports.names.length; i < len; i++) {
        if (exports.names[i].test(name)) {
          return true;
        }
      }

      return false;
    }
    /**
     * Coerce `val`.
     *
     * @param {Mixed} val
     * @return {Mixed}
     * @api private
     */


    function coerce(val) {
      if (val instanceof Error) return val.stack || val.message;
      return val;
    }
    /***/

  },

  /***/
  "./node_modules/engine.io-client/lib/index.js":
  /*!****************************************************!*\
    !*** ./node_modules/engine.io-client/lib/index.js ***!
    \****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesEngineIoClientLibIndexJs(module, exports, __webpack_require__) {
    module.exports = __webpack_require__(
    /*! ./socket */
    "./node_modules/engine.io-client/lib/socket.js");
    /**
     * Exports parser
     *
     * @api public
     *
     */

    module.exports.parser = __webpack_require__(
    /*! engine.io-parser */
    "./node_modules/engine.io-parser/lib/browser.js");
    /***/
  },

  /***/
  "./node_modules/engine.io-client/lib/socket.js":
  /*!*****************************************************!*\
    !*** ./node_modules/engine.io-client/lib/socket.js ***!
    \*****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesEngineIoClientLibSocketJs(module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (global) {
      /**
      * Module dependencies.
      */
      var transports = __webpack_require__(
      /*! ./transports/index */
      "./node_modules/engine.io-client/lib/transports/index.js");

      var Emitter = __webpack_require__(
      /*! component-emitter */
      "./node_modules/component-emitter/index.js");

      var debug = __webpack_require__(
      /*! debug */
      "./node_modules/debug/src/browser.js")('engine.io-client:socket');

      var index = __webpack_require__(
      /*! indexof */
      "./node_modules/indexof/index.js");

      var parser = __webpack_require__(
      /*! engine.io-parser */
      "./node_modules/engine.io-parser/lib/browser.js");

      var parseuri = __webpack_require__(
      /*! parseuri */
      "./node_modules/parseuri/index.js");

      var parseqs = __webpack_require__(
      /*! parseqs */
      "./node_modules/parseqs/index.js");
      /**
       * Module exports.
       */


      module.exports = Socket;
      /**
       * Socket constructor.
       *
       * @param {String|Object} uri or options
       * @param {Object} options
       * @api public
       */

      function Socket(uri, opts) {
        if (!(this instanceof Socket)) return new Socket(uri, opts);
        opts = opts || {};

        if (uri && 'object' === typeof uri) {
          opts = uri;
          uri = null;
        }

        if (uri) {
          uri = parseuri(uri);
          opts.hostname = uri.host;
          opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
          opts.port = uri.port;
          if (uri.query) opts.query = uri.query;
        } else if (opts.host) {
          opts.hostname = parseuri(opts.host).host;
        }

        this.secure = null != opts.secure ? opts.secure : global.location && 'https:' === location.protocol;

        if (opts.hostname && !opts.port) {
          // if no port is specified manually, use the protocol default
          opts.port = this.secure ? '443' : '80';
        }

        this.agent = opts.agent || false;
        this.hostname = opts.hostname || (global.location ? location.hostname : 'localhost');
        this.port = opts.port || (global.location && location.port ? location.port : this.secure ? 443 : 80);
        this.query = opts.query || {};
        if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
        this.upgrade = false !== opts.upgrade;
        this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
        this.forceJSONP = !!opts.forceJSONP;
        this.jsonp = false !== opts.jsonp;
        this.forceBase64 = !!opts.forceBase64;
        this.enablesXDR = !!opts.enablesXDR;
        this.timestampParam = opts.timestampParam || 't';
        this.timestampRequests = opts.timestampRequests;
        this.transports = opts.transports || ['polling', 'websocket'];
        this.transportOptions = opts.transportOptions || {};
        this.readyState = '';
        this.writeBuffer = [];
        this.prevBufferLen = 0;
        this.policyPort = opts.policyPort || 843;
        this.rememberUpgrade = opts.rememberUpgrade || false;
        this.binaryType = null;
        this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
        this.perMessageDeflate = false !== opts.perMessageDeflate ? opts.perMessageDeflate || {} : false;
        if (true === this.perMessageDeflate) this.perMessageDeflate = {};

        if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
          this.perMessageDeflate.threshold = 1024;
        } // SSL options for Node.js client


        this.pfx = opts.pfx || null;
        this.key = opts.key || null;
        this.passphrase = opts.passphrase || null;
        this.cert = opts.cert || null;
        this.ca = opts.ca || null;
        this.ciphers = opts.ciphers || null;
        this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;
        this.forceNode = !!opts.forceNode; // other options for Node.js client

        var freeGlobal = typeof global === 'object' && global;

        if (freeGlobal.global === freeGlobal) {
          if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
            this.extraHeaders = opts.extraHeaders;
          }

          if (opts.localAddress) {
            this.localAddress = opts.localAddress;
          }
        } // set on handshake


        this.id = null;
        this.upgrades = null;
        this.pingInterval = null;
        this.pingTimeout = null; // set on heartbeat

        this.pingIntervalTimer = null;
        this.pingTimeoutTimer = null;
        this.open();
      }

      Socket.priorWebsocketSuccess = false;
      /**
       * Mix in `Emitter`.
       */

      Emitter(Socket.prototype);
      /**
       * Protocol version.
       *
       * @api public
       */

      Socket.protocol = parser.protocol; // this is an int

      /**
       * Expose deps for legacy compatibility
       * and standalone browser access.
       */

      Socket.Socket = Socket;
      Socket.Transport = __webpack_require__(
      /*! ./transport */
      "./node_modules/engine.io-client/lib/transport.js");
      Socket.transports = __webpack_require__(
      /*! ./transports/index */
      "./node_modules/engine.io-client/lib/transports/index.js");
      Socket.parser = __webpack_require__(
      /*! engine.io-parser */
      "./node_modules/engine.io-parser/lib/browser.js");
      /**
       * Creates transport of the given type.
       *
       * @param {String} transport name
       * @return {Transport}
       * @api private
       */

      Socket.prototype.createTransport = function (name) {
        debug('creating transport "%s"', name);
        var query = clone(this.query); // append engine.io protocol identifier

        query.EIO = parser.protocol; // transport name

        query.transport = name; // per-transport options

        var options = this.transportOptions[name] || {}; // session id if we already have one

        if (this.id) query.sid = this.id;
        var transport = new transports[name]({
          query: query,
          socket: this,
          agent: options.agent || this.agent,
          hostname: options.hostname || this.hostname,
          port: options.port || this.port,
          secure: options.secure || this.secure,
          path: options.path || this.path,
          forceJSONP: options.forceJSONP || this.forceJSONP,
          jsonp: options.jsonp || this.jsonp,
          forceBase64: options.forceBase64 || this.forceBase64,
          enablesXDR: options.enablesXDR || this.enablesXDR,
          timestampRequests: options.timestampRequests || this.timestampRequests,
          timestampParam: options.timestampParam || this.timestampParam,
          policyPort: options.policyPort || this.policyPort,
          pfx: options.pfx || this.pfx,
          key: options.key || this.key,
          passphrase: options.passphrase || this.passphrase,
          cert: options.cert || this.cert,
          ca: options.ca || this.ca,
          ciphers: options.ciphers || this.ciphers,
          rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,
          perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,
          extraHeaders: options.extraHeaders || this.extraHeaders,
          forceNode: options.forceNode || this.forceNode,
          localAddress: options.localAddress || this.localAddress,
          requestTimeout: options.requestTimeout || this.requestTimeout,
          protocols: options.protocols || void 0
        });
        return transport;
      };

      function clone(obj) {
        var o = {};

        for (var i in obj) {
          if (obj.hasOwnProperty(i)) {
            o[i] = obj[i];
          }
        }

        return o;
      }
      /**
       * Initializes transport to use and starts probe.
       *
       * @api private
       */


      Socket.prototype.open = function () {
        var transport;

        if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
          transport = 'websocket';
        } else if (0 === this.transports.length) {
          // Emit error on next tick so it can be listened to
          var self = this;
          setTimeout(function () {
            self.emit('error', 'No transports available');
          }, 0);
          return;
        } else {
          transport = this.transports[0];
        }

        this.readyState = 'opening'; // Retry with the next transport if the transport is disabled (jsonp: false)

        try {
          transport = this.createTransport(transport);
        } catch (e) {
          this.transports.shift();
          this.open();
          return;
        }

        transport.open();
        this.setTransport(transport);
      };
      /**
       * Sets the current transport. Disables the existing one (if any).
       *
       * @api private
       */


      Socket.prototype.setTransport = function (transport) {
        debug('setting transport %s', transport.name);
        var self = this;

        if (this.transport) {
          debug('clearing existing transport %s', this.transport.name);
          this.transport.removeAllListeners();
        } // set up transport


        this.transport = transport; // set up transport listeners

        transport.on('drain', function () {
          self.onDrain();
        }).on('packet', function (packet) {
          self.onPacket(packet);
        }).on('error', function (e) {
          self.onError(e);
        }).on('close', function () {
          self.onClose('transport close');
        });
      };
      /**
       * Probes a transport.
       *
       * @param {String} transport name
       * @api private
       */


      Socket.prototype.probe = function (name) {
        debug('probing transport "%s"', name);
        var transport = this.createTransport(name, {
          probe: 1
        });
        var failed = false;
        var self = this;
        Socket.priorWebsocketSuccess = false;

        function onTransportOpen() {
          if (self.onlyBinaryUpgrades) {
            var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
            failed = failed || upgradeLosesBinary;
          }

          if (failed) return;
          debug('probe transport "%s" opened', name);
          transport.send([{
            type: 'ping',
            data: 'probe'
          }]);
          transport.once('packet', function (msg) {
            if (failed) return;

            if ('pong' === msg.type && 'probe' === msg.data) {
              debug('probe transport "%s" pong', name);
              self.upgrading = true;
              self.emit('upgrading', transport);
              if (!transport) return;
              Socket.priorWebsocketSuccess = 'websocket' === transport.name;
              debug('pausing current transport "%s"', self.transport.name);
              self.transport.pause(function () {
                if (failed) return;
                if ('closed' === self.readyState) return;
                debug('changing transport and sending upgrade packet');
                cleanup();
                self.setTransport(transport);
                transport.send([{
                  type: 'upgrade'
                }]);
                self.emit('upgrade', transport);
                transport = null;
                self.upgrading = false;
                self.flush();
              });
            } else {
              debug('probe transport "%s" failed', name);
              var err = new Error('probe error');
              err.transport = transport.name;
              self.emit('upgradeError', err);
            }
          });
        }

        function freezeTransport() {
          if (failed) return; // Any callback called by transport should be ignored since now

          failed = true;
          cleanup();
          transport.close();
          transport = null;
        } // Handle any error that happens while probing


        function onerror(err) {
          var error = new Error('probe error: ' + err);
          error.transport = transport.name;
          freezeTransport();
          debug('probe transport "%s" failed because of error: %s', name, err);
          self.emit('upgradeError', error);
        }

        function onTransportClose() {
          onerror('transport closed');
        } // When the socket is closed while we're probing


        function onclose() {
          onerror('socket closed');
        } // When the socket is upgraded while we're probing


        function onupgrade(to) {
          if (transport && to.name !== transport.name) {
            debug('"%s" works - aborting "%s"', to.name, transport.name);
            freezeTransport();
          }
        } // Remove all listeners on the transport and on self


        function cleanup() {
          transport.removeListener('open', onTransportOpen);
          transport.removeListener('error', onerror);
          transport.removeListener('close', onTransportClose);
          self.removeListener('close', onclose);
          self.removeListener('upgrading', onupgrade);
        }

        transport.once('open', onTransportOpen);
        transport.once('error', onerror);
        transport.once('close', onTransportClose);
        this.once('close', onclose);
        this.once('upgrading', onupgrade);
        transport.open();
      };
      /**
       * Called when connection is deemed open.
       *
       * @api public
       */


      Socket.prototype.onOpen = function () {
        debug('socket open');
        this.readyState = 'open';
        Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
        this.emit('open');
        this.flush(); // we check for `readyState` in case an `open`
        // listener already closed the socket

        if ('open' === this.readyState && this.upgrade && this.transport.pause) {
          debug('starting upgrade probes');

          for (var i = 0, l = this.upgrades.length; i < l; i++) {
            this.probe(this.upgrades[i]);
          }
        }
      };
      /**
       * Handles a packet.
       *
       * @api private
       */


      Socket.prototype.onPacket = function (packet) {
        if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
          debug('socket receive: type "%s", data "%s"', packet.type, packet.data);
          this.emit('packet', packet); // Socket is live - any packet counts

          this.emit('heartbeat');

          switch (packet.type) {
            case 'open':
              this.onHandshake(JSON.parse(packet.data));
              break;

            case 'pong':
              this.setPing();
              this.emit('pong');
              break;

            case 'error':
              var err = new Error('server error');
              err.code = packet.data;
              this.onError(err);
              break;

            case 'message':
              this.emit('data', packet.data);
              this.emit('message', packet.data);
              break;
          }
        } else {
          debug('packet received with socket readyState "%s"', this.readyState);
        }
      };
      /**
       * Called upon handshake completion.
       *
       * @param {Object} handshake obj
       * @api private
       */


      Socket.prototype.onHandshake = function (data) {
        this.emit('handshake', data);
        this.id = data.sid;
        this.transport.query.sid = data.sid;
        this.upgrades = this.filterUpgrades(data.upgrades);
        this.pingInterval = data.pingInterval;
        this.pingTimeout = data.pingTimeout;
        this.onOpen(); // In case open handler closes socket

        if ('closed' === this.readyState) return;
        this.setPing(); // Prolong liveness of socket on heartbeat

        this.removeListener('heartbeat', this.onHeartbeat);
        this.on('heartbeat', this.onHeartbeat);
      };
      /**
       * Resets ping timeout.
       *
       * @api private
       */


      Socket.prototype.onHeartbeat = function (timeout) {
        clearTimeout(this.pingTimeoutTimer);
        var self = this;
        self.pingTimeoutTimer = setTimeout(function () {
          if ('closed' === self.readyState) return;
          self.onClose('ping timeout');
        }, timeout || self.pingInterval + self.pingTimeout);
      };
      /**
       * Pings server every `this.pingInterval` and expects response
       * within `this.pingTimeout` or closes connection.
       *
       * @api private
       */


      Socket.prototype.setPing = function () {
        var self = this;
        clearTimeout(self.pingIntervalTimer);
        self.pingIntervalTimer = setTimeout(function () {
          debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
          self.ping();
          self.onHeartbeat(self.pingTimeout);
        }, self.pingInterval);
      };
      /**
      * Sends a ping packet.
      *
      * @api private
      */


      Socket.prototype.ping = function () {
        var self = this;
        this.sendPacket('ping', function () {
          self.emit('ping');
        });
      };
      /**
       * Called on `drain` event
       *
       * @api private
       */


      Socket.prototype.onDrain = function () {
        this.writeBuffer.splice(0, this.prevBufferLen); // setting prevBufferLen = 0 is very important
        // for example, when upgrading, upgrade packet is sent over,
        // and a nonzero prevBufferLen could cause problems on `drain`

        this.prevBufferLen = 0;

        if (0 === this.writeBuffer.length) {
          this.emit('drain');
        } else {
          this.flush();
        }
      };
      /**
       * Flush write buffers.
       *
       * @api private
       */


      Socket.prototype.flush = function () {
        if ('closed' !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
          debug('flushing %d packets in socket', this.writeBuffer.length);
          this.transport.send(this.writeBuffer); // keep track of current length of writeBuffer
          // splice writeBuffer and callbackBuffer on `drain`

          this.prevBufferLen = this.writeBuffer.length;
          this.emit('flush');
        }
      };
      /**
       * Sends a message.
       *
       * @param {String} message.
       * @param {Function} callback function.
       * @param {Object} options.
       * @return {Socket} for chaining.
       * @api public
       */


      Socket.prototype.write = Socket.prototype.send = function (msg, options, fn) {
        this.sendPacket('message', msg, options, fn);
        return this;
      };
      /**
       * Sends a packet.
       *
       * @param {String} packet type.
       * @param {String} data.
       * @param {Object} options.
       * @param {Function} callback function.
       * @api private
       */


      Socket.prototype.sendPacket = function (type, data, options, fn) {
        if ('function' === typeof data) {
          fn = data;
          data = undefined;
        }

        if ('function' === typeof options) {
          fn = options;
          options = null;
        }

        if ('closing' === this.readyState || 'closed' === this.readyState) {
          return;
        }

        options = options || {};
        options.compress = false !== options.compress;
        var packet = {
          type: type,
          data: data,
          options: options
        };
        this.emit('packetCreate', packet);
        this.writeBuffer.push(packet);
        if (fn) this.once('flush', fn);
        this.flush();
      };
      /**
       * Closes the connection.
       *
       * @api private
       */


      Socket.prototype.close = function () {
        if ('opening' === this.readyState || 'open' === this.readyState) {
          this.readyState = 'closing';
          var self = this;

          if (this.writeBuffer.length) {
            this.once('drain', function () {
              if (this.upgrading) {
                waitForUpgrade();
              } else {
                close();
              }
            });
          } else if (this.upgrading) {
            waitForUpgrade();
          } else {
            close();
          }
        }

        function close() {
          self.onClose('forced close');
          debug('socket closing - telling transport to close');
          self.transport.close();
        }

        function cleanupAndClose() {
          self.removeListener('upgrade', cleanupAndClose);
          self.removeListener('upgradeError', cleanupAndClose);
          close();
        }

        function waitForUpgrade() {
          // wait for upgrade to finish since we can't send packets while pausing a transport
          self.once('upgrade', cleanupAndClose);
          self.once('upgradeError', cleanupAndClose);
        }

        return this;
      };
      /**
       * Called upon transport error
       *
       * @api private
       */


      Socket.prototype.onError = function (err) {
        debug('socket error %j', err);
        Socket.priorWebsocketSuccess = false;
        this.emit('error', err);
        this.onClose('transport error', err);
      };
      /**
       * Called upon transport close.
       *
       * @api private
       */


      Socket.prototype.onClose = function (reason, desc) {
        if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
          debug('socket close with reason: "%s"', reason);
          var self = this; // clear timers

          clearTimeout(this.pingIntervalTimer);
          clearTimeout(this.pingTimeoutTimer); // stop event from firing again for transport

          this.transport.removeAllListeners('close'); // ensure transport won't stay open

          this.transport.close(); // ignore further transport communication

          this.transport.removeAllListeners(); // set ready state

          this.readyState = 'closed'; // clear session id

          this.id = null; // emit close event

          this.emit('close', reason, desc); // clean buffers after, so users can still
          // grab the buffers on `close` event

          self.writeBuffer = [];
          self.prevBufferLen = 0;
        }
      };
      /**
       * Filters upgrades, returning only those matching client transports.
       *
       * @param {Array} server upgrades
       * @api private
       *
       */


      Socket.prototype.filterUpgrades = function (upgrades) {
        var filteredUpgrades = [];

        for (var i = 0, j = upgrades.length; i < j; i++) {
          if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
        }

        return filteredUpgrades;
      };
      /* WEBPACK VAR INJECTION */

    }).call(this, __webpack_require__(
    /*! ./../../webpack/buildin/global.js */
    "./node_modules/webpack/buildin/global.js"));
    /***/
  },

  /***/
  "./node_modules/engine.io-client/lib/transport.js":
  /*!********************************************************!*\
    !*** ./node_modules/engine.io-client/lib/transport.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesEngineIoClientLibTransportJs(module, exports, __webpack_require__) {
    /**
     * Module dependencies.
     */
    var parser = __webpack_require__(
    /*! engine.io-parser */
    "./node_modules/engine.io-parser/lib/browser.js");

    var Emitter = __webpack_require__(
    /*! component-emitter */
    "./node_modules/component-emitter/index.js");
    /**
     * Module exports.
     */


    module.exports = Transport;
    /**
     * Transport abstract constructor.
     *
     * @param {Object} options.
     * @api private
     */

    function Transport(opts) {
      this.path = opts.path;
      this.hostname = opts.hostname;
      this.port = opts.port;
      this.secure = opts.secure;
      this.query = opts.query;
      this.timestampParam = opts.timestampParam;
      this.timestampRequests = opts.timestampRequests;
      this.readyState = '';
      this.agent = opts.agent || false;
      this.socket = opts.socket;
      this.enablesXDR = opts.enablesXDR; // SSL options for Node.js client

      this.pfx = opts.pfx;
      this.key = opts.key;
      this.passphrase = opts.passphrase;
      this.cert = opts.cert;
      this.ca = opts.ca;
      this.ciphers = opts.ciphers;
      this.rejectUnauthorized = opts.rejectUnauthorized;
      this.forceNode = opts.forceNode; // other options for Node.js client

      this.extraHeaders = opts.extraHeaders;
      this.localAddress = opts.localAddress;
    }
    /**
     * Mix in `Emitter`.
     */


    Emitter(Transport.prototype);
    /**
     * Emits an error.
     *
     * @param {String} str
     * @return {Transport} for chaining
     * @api public
     */

    Transport.prototype.onError = function (msg, desc) {
      var err = new Error(msg);
      err.type = 'TransportError';
      err.description = desc;
      this.emit('error', err);
      return this;
    };
    /**
     * Opens the transport.
     *
     * @api public
     */


    Transport.prototype.open = function () {
      if ('closed' === this.readyState || '' === this.readyState) {
        this.readyState = 'opening';
        this.doOpen();
      }

      return this;
    };
    /**
     * Closes the transport.
     *
     * @api private
     */


    Transport.prototype.close = function () {
      if ('opening' === this.readyState || 'open' === this.readyState) {
        this.doClose();
        this.onClose();
      }

      return this;
    };
    /**
     * Sends multiple packets.
     *
     * @param {Array} packets
     * @api private
     */


    Transport.prototype.send = function (packets) {
      if ('open' === this.readyState) {
        this.write(packets);
      } else {
        throw new Error('Transport not open');
      }
    };
    /**
     * Called upon open
     *
     * @api private
     */


    Transport.prototype.onOpen = function () {
      this.readyState = 'open';
      this.writable = true;
      this.emit('open');
    };
    /**
     * Called with data.
     *
     * @param {String} data
     * @api private
     */


    Transport.prototype.onData = function (data) {
      var packet = parser.decodePacket(data, this.socket.binaryType);
      this.onPacket(packet);
    };
    /**
     * Called with a decoded packet.
     */


    Transport.prototype.onPacket = function (packet) {
      this.emit('packet', packet);
    };
    /**
     * Called upon close.
     *
     * @api private
     */


    Transport.prototype.onClose = function () {
      this.readyState = 'closed';
      this.emit('close');
    };
    /***/

  },

  /***/
  "./node_modules/engine.io-client/lib/transports/index.js":
  /*!***************************************************************!*\
    !*** ./node_modules/engine.io-client/lib/transports/index.js ***!
    \***************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesEngineIoClientLibTransportsIndexJs(module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (global) {
      /**
      * Module dependencies
      */
      var XMLHttpRequest = __webpack_require__(
      /*! xmlhttprequest-ssl */
      "./node_modules/engine.io-client/lib/xmlhttprequest.js");

      var XHR = __webpack_require__(
      /*! ./polling-xhr */
      "./node_modules/engine.io-client/lib/transports/polling-xhr.js");

      var JSONP = __webpack_require__(
      /*! ./polling-jsonp */
      "./node_modules/engine.io-client/lib/transports/polling-jsonp.js");

      var websocket = __webpack_require__(
      /*! ./websocket */
      "./node_modules/engine.io-client/lib/transports/websocket.js");
      /**
       * Export transports.
       */


      exports.polling = polling;
      exports.websocket = websocket;
      /**
       * Polling transport polymorphic constructor.
       * Decides on xhr vs jsonp based on feature detection.
       *
       * @api private
       */

      function polling(opts) {
        var xhr;
        var xd = false;
        var xs = false;
        var jsonp = false !== opts.jsonp;

        if (global.location) {
          var isSSL = 'https:' === location.protocol;
          var port = location.port; // some user agents have empty `location.port`

          if (!port) {
            port = isSSL ? 443 : 80;
          }

          xd = opts.hostname !== location.hostname || port !== opts.port;
          xs = opts.secure !== isSSL;
        }

        opts.xdomain = xd;
        opts.xscheme = xs;
        xhr = new XMLHttpRequest(opts);

        if ('open' in xhr && !opts.forceJSONP) {
          return new XHR(opts);
        } else {
          if (!jsonp) throw new Error('JSONP disabled');
          return new JSONP(opts);
        }
      }
      /* WEBPACK VAR INJECTION */

    }).call(this, __webpack_require__(
    /*! ./../../../webpack/buildin/global.js */
    "./node_modules/webpack/buildin/global.js"));
    /***/
  },

  /***/
  "./node_modules/engine.io-client/lib/transports/polling-jsonp.js":
  /*!***********************************************************************!*\
    !*** ./node_modules/engine.io-client/lib/transports/polling-jsonp.js ***!
    \***********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesEngineIoClientLibTransportsPollingJsonpJs(module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (global) {
      /**
       * Module requirements.
       */
      var Polling = __webpack_require__(
      /*! ./polling */
      "./node_modules/engine.io-client/lib/transports/polling.js");

      var inherit = __webpack_require__(
      /*! component-inherit */
      "./node_modules/component-inherit/index.js");
      /**
       * Module exports.
       */


      module.exports = JSONPPolling;
      /**
       * Cached regular expressions.
       */

      var rNewline = /\n/g;
      var rEscapedNewline = /\\n/g;
      /**
       * Global JSONP callbacks.
       */

      var callbacks;
      /**
       * Noop.
       */

      function empty() {}
      /**
       * JSONP Polling constructor.
       *
       * @param {Object} opts.
       * @api public
       */


      function JSONPPolling(opts) {
        Polling.call(this, opts);
        this.query = this.query || {}; // define global callbacks array if not present
        // we do this here (lazily) to avoid unneeded global pollution

        if (!callbacks) {
          // we need to consider multiple engines in the same page
          if (!global.___eio) global.___eio = [];
          callbacks = global.___eio;
        } // callback identifier


        this.index = callbacks.length; // add callback to jsonp global

        var self = this;
        callbacks.push(function (msg) {
          self.onData(msg);
        }); // append to query string

        this.query.j = this.index; // prevent spurious errors from being emitted when the window is unloaded

        if (global.document && global.addEventListener) {
          global.addEventListener('beforeunload', function () {
            if (self.script) self.script.onerror = empty;
          }, false);
        }
      }
      /**
       * Inherits from Polling.
       */


      inherit(JSONPPolling, Polling);
      /*
       * JSONP only supports binary as base64 encoded strings
       */

      JSONPPolling.prototype.supportsBinary = false;
      /**
       * Closes the socket.
       *
       * @api private
       */

      JSONPPolling.prototype.doClose = function () {
        if (this.script) {
          this.script.parentNode.removeChild(this.script);
          this.script = null;
        }

        if (this.form) {
          this.form.parentNode.removeChild(this.form);
          this.form = null;
          this.iframe = null;
        }

        Polling.prototype.doClose.call(this);
      };
      /**
       * Starts a poll cycle.
       *
       * @api private
       */


      JSONPPolling.prototype.doPoll = function () {
        var self = this;
        var script = document.createElement('script');

        if (this.script) {
          this.script.parentNode.removeChild(this.script);
          this.script = null;
        }

        script.async = true;
        script.src = this.uri();

        script.onerror = function (e) {
          self.onError('jsonp poll error', e);
        };

        var insertAt = document.getElementsByTagName('script')[0];

        if (insertAt) {
          insertAt.parentNode.insertBefore(script, insertAt);
        } else {
          (document.head || document.body).appendChild(script);
        }

        this.script = script;
        var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

        if (isUAgecko) {
          setTimeout(function () {
            var iframe = document.createElement('iframe');
            document.body.appendChild(iframe);
            document.body.removeChild(iframe);
          }, 100);
        }
      };
      /**
       * Writes with a hidden iframe.
       *
       * @param {String} data to send
       * @param {Function} called upon flush.
       * @api private
       */


      JSONPPolling.prototype.doWrite = function (data, fn) {
        var self = this;

        if (!this.form) {
          var form = document.createElement('form');
          var area = document.createElement('textarea');
          var id = this.iframeId = 'eio_iframe_' + this.index;
          var iframe;
          form.className = 'socketio';
          form.style.position = 'absolute';
          form.style.top = '-1000px';
          form.style.left = '-1000px';
          form.target = id;
          form.method = 'POST';
          form.setAttribute('accept-charset', 'utf-8');
          area.name = 'd';
          form.appendChild(area);
          document.body.appendChild(form);
          this.form = form;
          this.area = area;
        }

        this.form.action = this.uri();

        function complete() {
          initIframe();
          fn();
        }

        function initIframe() {
          if (self.iframe) {
            try {
              self.form.removeChild(self.iframe);
            } catch (e) {
              self.onError('jsonp polling iframe removal error', e);
            }
          }

          try {
            // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
            var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
            iframe = document.createElement(html);
          } catch (e) {
            iframe = document.createElement('iframe');
            iframe.name = self.iframeId;
            iframe.src = 'javascript:0';
          }

          iframe.id = self.iframeId;
          self.form.appendChild(iframe);
          self.iframe = iframe;
        }

        initIframe(); // escape \n to prevent it from being converted into \r\n by some UAs
        // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side

        data = data.replace(rEscapedNewline, '\\\n');
        this.area.value = data.replace(rNewline, '\\n');

        try {
          this.form.submit();
        } catch (e) {}

        if (this.iframe.attachEvent) {
          this.iframe.onreadystatechange = function () {
            if (self.iframe.readyState === 'complete') {
              complete();
            }
          };
        } else {
          this.iframe.onload = complete;
        }
      };
      /* WEBPACK VAR INJECTION */

    }).call(this, __webpack_require__(
    /*! ./../../../webpack/buildin/global.js */
    "./node_modules/webpack/buildin/global.js"));
    /***/
  },

  /***/
  "./node_modules/engine.io-client/lib/transports/polling-xhr.js":
  /*!*********************************************************************!*\
    !*** ./node_modules/engine.io-client/lib/transports/polling-xhr.js ***!
    \*********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesEngineIoClientLibTransportsPollingXhrJs(module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (global) {
      /**
      * Module requirements.
      */
      var XMLHttpRequest = __webpack_require__(
      /*! xmlhttprequest-ssl */
      "./node_modules/engine.io-client/lib/xmlhttprequest.js");

      var Polling = __webpack_require__(
      /*! ./polling */
      "./node_modules/engine.io-client/lib/transports/polling.js");

      var Emitter = __webpack_require__(
      /*! component-emitter */
      "./node_modules/component-emitter/index.js");

      var inherit = __webpack_require__(
      /*! component-inherit */
      "./node_modules/component-inherit/index.js");

      var debug = __webpack_require__(
      /*! debug */
      "./node_modules/debug/src/browser.js")('engine.io-client:polling-xhr');
      /**
       * Module exports.
       */


      module.exports = XHR;
      module.exports.Request = Request;
      /**
       * Empty function
       */

      function empty() {}
      /**
       * XHR Polling constructor.
       *
       * @param {Object} opts
       * @api public
       */


      function XHR(opts) {
        Polling.call(this, opts);
        this.requestTimeout = opts.requestTimeout;
        this.extraHeaders = opts.extraHeaders;

        if (global.location) {
          var isSSL = 'https:' === location.protocol;
          var port = location.port; // some user agents have empty `location.port`

          if (!port) {
            port = isSSL ? 443 : 80;
          }

          this.xd = opts.hostname !== global.location.hostname || port !== opts.port;
          this.xs = opts.secure !== isSSL;
        }
      }
      /**
       * Inherits from Polling.
       */


      inherit(XHR, Polling);
      /**
       * XHR supports binary
       */

      XHR.prototype.supportsBinary = true;
      /**
       * Creates a request.
       *
       * @param {String} method
       * @api private
       */

      XHR.prototype.request = function (opts) {
        opts = opts || {};
        opts.uri = this.uri();
        opts.xd = this.xd;
        opts.xs = this.xs;
        opts.agent = this.agent || false;
        opts.supportsBinary = this.supportsBinary;
        opts.enablesXDR = this.enablesXDR; // SSL options for Node.js client

        opts.pfx = this.pfx;
        opts.key = this.key;
        opts.passphrase = this.passphrase;
        opts.cert = this.cert;
        opts.ca = this.ca;
        opts.ciphers = this.ciphers;
        opts.rejectUnauthorized = this.rejectUnauthorized;
        opts.requestTimeout = this.requestTimeout; // other options for Node.js client

        opts.extraHeaders = this.extraHeaders;
        return new Request(opts);
      };
      /**
       * Sends data.
       *
       * @param {String} data to send.
       * @param {Function} called upon flush.
       * @api private
       */


      XHR.prototype.doWrite = function (data, fn) {
        var isBinary = typeof data !== 'string' && data !== undefined;
        var req = this.request({
          method: 'POST',
          data: data,
          isBinary: isBinary
        });
        var self = this;
        req.on('success', fn);
        req.on('error', function (err) {
          self.onError('xhr post error', err);
        });
        this.sendXhr = req;
      };
      /**
       * Starts a poll cycle.
       *
       * @api private
       */


      XHR.prototype.doPoll = function () {
        debug('xhr poll');
        var req = this.request();
        var self = this;
        req.on('data', function (data) {
          self.onData(data);
        });
        req.on('error', function (err) {
          self.onError('xhr poll error', err);
        });
        this.pollXhr = req;
      };
      /**
       * Request constructor
       *
       * @param {Object} options
       * @api public
       */


      function Request(opts) {
        this.method = opts.method || 'GET';
        this.uri = opts.uri;
        this.xd = !!opts.xd;
        this.xs = !!opts.xs;
        this.async = false !== opts.async;
        this.data = undefined !== opts.data ? opts.data : null;
        this.agent = opts.agent;
        this.isBinary = opts.isBinary;
        this.supportsBinary = opts.supportsBinary;
        this.enablesXDR = opts.enablesXDR;
        this.requestTimeout = opts.requestTimeout; // SSL options for Node.js client

        this.pfx = opts.pfx;
        this.key = opts.key;
        this.passphrase = opts.passphrase;
        this.cert = opts.cert;
        this.ca = opts.ca;
        this.ciphers = opts.ciphers;
        this.rejectUnauthorized = opts.rejectUnauthorized; // other options for Node.js client

        this.extraHeaders = opts.extraHeaders;
        this.create();
      }
      /**
       * Mix in `Emitter`.
       */


      Emitter(Request.prototype);
      /**
       * Creates the XHR object and sends the request.
       *
       * @api private
       */

      Request.prototype.create = function () {
        var opts = {
          agent: this.agent,
          xdomain: this.xd,
          xscheme: this.xs,
          enablesXDR: this.enablesXDR
        }; // SSL options for Node.js client

        opts.pfx = this.pfx;
        opts.key = this.key;
        opts.passphrase = this.passphrase;
        opts.cert = this.cert;
        opts.ca = this.ca;
        opts.ciphers = this.ciphers;
        opts.rejectUnauthorized = this.rejectUnauthorized;
        var xhr = this.xhr = new XMLHttpRequest(opts);
        var self = this;

        try {
          debug('xhr open %s: %s', this.method, this.uri);
          xhr.open(this.method, this.uri, this.async);

          try {
            if (this.extraHeaders) {
              xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);

              for (var i in this.extraHeaders) {
                if (this.extraHeaders.hasOwnProperty(i)) {
                  xhr.setRequestHeader(i, this.extraHeaders[i]);
                }
              }
            }
          } catch (e) {}

          if ('POST' === this.method) {
            try {
              if (this.isBinary) {
                xhr.setRequestHeader('Content-type', 'application/octet-stream');
              } else {
                xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
              }
            } catch (e) {}
          }

          try {
            xhr.setRequestHeader('Accept', '*/*');
          } catch (e) {} // ie6 check


          if ('withCredentials' in xhr) {
            xhr.withCredentials = true;
          }

          if (this.requestTimeout) {
            xhr.timeout = this.requestTimeout;
          }

          if (this.hasXDR()) {
            xhr.onload = function () {
              self.onLoad();
            };

            xhr.onerror = function () {
              self.onError(xhr.responseText);
            };
          } else {
            xhr.onreadystatechange = function () {
              if (xhr.readyState === 2) {
                var contentType;

                try {
                  contentType = xhr.getResponseHeader('Content-Type');
                } catch (e) {}

                if (contentType === 'application/octet-stream') {
                  xhr.responseType = 'arraybuffer';
                }
              }

              if (4 !== xhr.readyState) return;

              if (200 === xhr.status || 1223 === xhr.status) {
                self.onLoad();
              } else {
                // make sure the `error` event handler that's user-set
                // does not throw in the same tick and gets caught here
                setTimeout(function () {
                  self.onError(xhr.status);
                }, 0);
              }
            };
          }

          debug('xhr data %s', this.data);
          xhr.send(this.data);
        } catch (e) {
          // Need to defer since .create() is called directly fhrom the constructor
          // and thus the 'error' event can only be only bound *after* this exception
          // occurs.  Therefore, also, we cannot throw here at all.
          setTimeout(function () {
            self.onError(e);
          }, 0);
          return;
        }

        if (global.document) {
          this.index = Request.requestsCount++;
          Request.requests[this.index] = this;
        }
      };
      /**
       * Called upon successful response.
       *
       * @api private
       */


      Request.prototype.onSuccess = function () {
        this.emit('success');
        this.cleanup();
      };
      /**
       * Called if we have data.
       *
       * @api private
       */


      Request.prototype.onData = function (data) {
        this.emit('data', data);
        this.onSuccess();
      };
      /**
       * Called upon error.
       *
       * @api private
       */


      Request.prototype.onError = function (err) {
        this.emit('error', err);
        this.cleanup(true);
      };
      /**
       * Cleans up house.
       *
       * @api private
       */


      Request.prototype.cleanup = function (fromError) {
        if ('undefined' === typeof this.xhr || null === this.xhr) {
          return;
        } // xmlhttprequest


        if (this.hasXDR()) {
          this.xhr.onload = this.xhr.onerror = empty;
        } else {
          this.xhr.onreadystatechange = empty;
        }

        if (fromError) {
          try {
            this.xhr.abort();
          } catch (e) {}
        }

        if (global.document) {
          delete Request.requests[this.index];
        }

        this.xhr = null;
      };
      /**
       * Called upon load.
       *
       * @api private
       */


      Request.prototype.onLoad = function () {
        var data;

        try {
          var contentType;

          try {
            contentType = this.xhr.getResponseHeader('Content-Type');
          } catch (e) {}

          if (contentType === 'application/octet-stream') {
            data = this.xhr.response || this.xhr.responseText;
          } else {
            data = this.xhr.responseText;
          }
        } catch (e) {
          this.onError(e);
        }

        if (null != data) {
          this.onData(data);
        }
      };
      /**
       * Check if it has XDomainRequest.
       *
       * @api private
       */


      Request.prototype.hasXDR = function () {
        return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;
      };
      /**
       * Aborts the request.
       *
       * @api public
       */


      Request.prototype.abort = function () {
        this.cleanup();
      };
      /**
       * Aborts pending requests when unloading the window. This is needed to prevent
       * memory leaks (e.g. when using IE) and to ensure that no spurious error is
       * emitted.
       */


      Request.requestsCount = 0;
      Request.requests = {};

      if (global.document) {
        if (global.attachEvent) {
          global.attachEvent('onunload', unloadHandler);
        } else if (global.addEventListener) {
          global.addEventListener('beforeunload', unloadHandler, false);
        }
      }

      function unloadHandler() {
        for (var i in Request.requests) {
          if (Request.requests.hasOwnProperty(i)) {
            Request.requests[i].abort();
          }
        }
      }
      /* WEBPACK VAR INJECTION */

    }).call(this, __webpack_require__(
    /*! ./../../../webpack/buildin/global.js */
    "./node_modules/webpack/buildin/global.js"));
    /***/
  },

  /***/
  "./node_modules/engine.io-client/lib/transports/polling.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/engine.io-client/lib/transports/polling.js ***!
    \*****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesEngineIoClientLibTransportsPollingJs(module, exports, __webpack_require__) {
    /**
     * Module dependencies.
     */
    var Transport = __webpack_require__(
    /*! ../transport */
    "./node_modules/engine.io-client/lib/transport.js");

    var parseqs = __webpack_require__(
    /*! parseqs */
    "./node_modules/parseqs/index.js");

    var parser = __webpack_require__(
    /*! engine.io-parser */
    "./node_modules/engine.io-parser/lib/browser.js");

    var inherit = __webpack_require__(
    /*! component-inherit */
    "./node_modules/component-inherit/index.js");

    var yeast = __webpack_require__(
    /*! yeast */
    "./node_modules/yeast/index.js");

    var debug = __webpack_require__(
    /*! debug */
    "./node_modules/debug/src/browser.js")('engine.io-client:polling');
    /**
     * Module exports.
     */


    module.exports = Polling;
    /**
     * Is XHR2 supported?
     */

    var hasXHR2 = function () {
      var XMLHttpRequest = __webpack_require__(
      /*! xmlhttprequest-ssl */
      "./node_modules/engine.io-client/lib/xmlhttprequest.js");

      var xhr = new XMLHttpRequest({
        xdomain: false
      });
      return null != xhr.responseType;
    }();
    /**
     * Polling interface.
     *
     * @param {Object} opts
     * @api private
     */


    function Polling(opts) {
      var forceBase64 = opts && opts.forceBase64;

      if (!hasXHR2 || forceBase64) {
        this.supportsBinary = false;
      }

      Transport.call(this, opts);
    }
    /**
     * Inherits from Transport.
     */


    inherit(Polling, Transport);
    /**
     * Transport name.
     */

    Polling.prototype.name = 'polling';
    /**
     * Opens the socket (triggers polling). We write a PING message to determine
     * when the transport is open.
     *
     * @api private
     */

    Polling.prototype.doOpen = function () {
      this.poll();
    };
    /**
     * Pauses polling.
     *
     * @param {Function} callback upon buffers are flushed and transport is paused
     * @api private
     */


    Polling.prototype.pause = function (onPause) {
      var self = this;
      this.readyState = 'pausing';

      function pause() {
        debug('paused');
        self.readyState = 'paused';
        onPause();
      }

      if (this.polling || !this.writable) {
        var total = 0;

        if (this.polling) {
          debug('we are currently polling - waiting to pause');
          total++;
          this.once('pollComplete', function () {
            debug('pre-pause polling complete');
            --total || pause();
          });
        }

        if (!this.writable) {
          debug('we are currently writing - waiting to pause');
          total++;
          this.once('drain', function () {
            debug('pre-pause writing complete');
            --total || pause();
          });
        }
      } else {
        pause();
      }
    };
    /**
     * Starts polling cycle.
     *
     * @api public
     */


    Polling.prototype.poll = function () {
      debug('polling');
      this.polling = true;
      this.doPoll();
      this.emit('poll');
    };
    /**
     * Overloads onData to detect payloads.
     *
     * @api private
     */


    Polling.prototype.onData = function (data) {
      var self = this;
      debug('polling got data %s', data);

      var callback = function callback(packet, index, total) {
        // if its the first message we consider the transport open
        if ('opening' === self.readyState) {
          self.onOpen();
        } // if its a close packet, we close the ongoing requests


        if ('close' === packet.type) {
          self.onClose();
          return false;
        } // otherwise bypass onData and handle the message


        self.onPacket(packet);
      }; // decode payload


      parser.decodePayload(data, this.socket.binaryType, callback); // if an event did not trigger closing

      if ('closed' !== this.readyState) {
        // if we got data we're not polling
        this.polling = false;
        this.emit('pollComplete');

        if ('open' === this.readyState) {
          this.poll();
        } else {
          debug('ignoring poll - transport state "%s"', this.readyState);
        }
      }
    };
    /**
     * For polling, send a close packet.
     *
     * @api private
     */


    Polling.prototype.doClose = function () {
      var self = this;

      function close() {
        debug('writing close packet');
        self.write([{
          type: 'close'
        }]);
      }

      if ('open' === this.readyState) {
        debug('transport open - closing');
        close();
      } else {
        // in case we're trying to close while
        // handshaking is in progress (GH-164)
        debug('transport not open - deferring close');
        this.once('open', close);
      }
    };
    /**
     * Writes a packets payload.
     *
     * @param {Array} data packets
     * @param {Function} drain callback
     * @api private
     */


    Polling.prototype.write = function (packets) {
      var self = this;
      this.writable = false;

      var callbackfn = function callbackfn() {
        self.writable = true;
        self.emit('drain');
      };

      parser.encodePayload(packets, this.supportsBinary, function (data) {
        self.doWrite(data, callbackfn);
      });
    };
    /**
     * Generates uri for connection.
     *
     * @api private
     */


    Polling.prototype.uri = function () {
      var query = this.query || {};
      var schema = this.secure ? 'https' : 'http';
      var port = ''; // cache busting is forced

      if (false !== this.timestampRequests) {
        query[this.timestampParam] = yeast();
      }

      if (!this.supportsBinary && !query.sid) {
        query.b64 = 1;
      }

      query = parseqs.encode(query); // avoid port if default for schema

      if (this.port && ('https' === schema && Number(this.port) !== 443 || 'http' === schema && Number(this.port) !== 80)) {
        port = ':' + this.port;
      } // prepend ? to query


      if (query.length) {
        query = '?' + query;
      }

      var ipv6 = this.hostname.indexOf(':') !== -1;
      return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
    };
    /***/

  },

  /***/
  "./node_modules/engine.io-client/lib/transports/websocket.js":
  /*!*******************************************************************!*\
    !*** ./node_modules/engine.io-client/lib/transports/websocket.js ***!
    \*******************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesEngineIoClientLibTransportsWebsocketJs(module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (global) {
      /**
      * Module dependencies.
      */
      var Transport = __webpack_require__(
      /*! ../transport */
      "./node_modules/engine.io-client/lib/transport.js");

      var parser = __webpack_require__(
      /*! engine.io-parser */
      "./node_modules/engine.io-parser/lib/browser.js");

      var parseqs = __webpack_require__(
      /*! parseqs */
      "./node_modules/parseqs/index.js");

      var inherit = __webpack_require__(
      /*! component-inherit */
      "./node_modules/component-inherit/index.js");

      var yeast = __webpack_require__(
      /*! yeast */
      "./node_modules/yeast/index.js");

      var debug = __webpack_require__(
      /*! debug */
      "./node_modules/debug/src/browser.js")('engine.io-client:websocket');

      var BrowserWebSocket = global.WebSocket || global.MozWebSocket;
      var NodeWebSocket;

      if (typeof window === 'undefined') {
        try {
          NodeWebSocket = __webpack_require__(
          /*! ws */
          0);
        } catch (e) {}
      }
      /**
       * Get either the `WebSocket` or `MozWebSocket` globals
       * in the browser or try to resolve WebSocket-compatible
       * interface exposed by `ws` for Node-like environment.
       */


      var WebSocket = BrowserWebSocket;

      if (!WebSocket && typeof window === 'undefined') {
        WebSocket = NodeWebSocket;
      }
      /**
       * Module exports.
       */


      module.exports = WS;
      /**
       * WebSocket transport constructor.
       *
       * @api {Object} connection options
       * @api public
       */

      function WS(opts) {
        var forceBase64 = opts && opts.forceBase64;

        if (forceBase64) {
          this.supportsBinary = false;
        }

        this.perMessageDeflate = opts.perMessageDeflate;
        this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
        this.protocols = opts.protocols;

        if (!this.usingBrowserWebSocket) {
          WebSocket = NodeWebSocket;
        }

        Transport.call(this, opts);
      }
      /**
       * Inherits from Transport.
       */


      inherit(WS, Transport);
      /**
       * Transport name.
       *
       * @api public
       */

      WS.prototype.name = 'websocket';
      /*
       * WebSockets support binary
       */

      WS.prototype.supportsBinary = true;
      /**
       * Opens socket.
       *
       * @api private
       */

      WS.prototype.doOpen = function () {
        if (!this.check()) {
          // let probe timeout
          return;
        }

        var uri = this.uri();
        var protocols = this.protocols;
        var opts = {
          agent: this.agent,
          perMessageDeflate: this.perMessageDeflate
        }; // SSL options for Node.js client

        opts.pfx = this.pfx;
        opts.key = this.key;
        opts.passphrase = this.passphrase;
        opts.cert = this.cert;
        opts.ca = this.ca;
        opts.ciphers = this.ciphers;
        opts.rejectUnauthorized = this.rejectUnauthorized;

        if (this.extraHeaders) {
          opts.headers = this.extraHeaders;
        }

        if (this.localAddress) {
          opts.localAddress = this.localAddress;
        }

        try {
          this.ws = this.usingBrowserWebSocket ? protocols ? new WebSocket(uri, protocols) : new WebSocket(uri) : new WebSocket(uri, protocols, opts);
        } catch (err) {
          return this.emit('error', err);
        }

        if (this.ws.binaryType === undefined) {
          this.supportsBinary = false;
        }

        if (this.ws.supports && this.ws.supports.binary) {
          this.supportsBinary = true;
          this.ws.binaryType = 'nodebuffer';
        } else {
          this.ws.binaryType = 'arraybuffer';
        }

        this.addEventListeners();
      };
      /**
       * Adds event listeners to the socket
       *
       * @api private
       */


      WS.prototype.addEventListeners = function () {
        var self = this;

        this.ws.onopen = function () {
          self.onOpen();
        };

        this.ws.onclose = function () {
          self.onClose();
        };

        this.ws.onmessage = function (ev) {
          self.onData(ev.data);
        };

        this.ws.onerror = function (e) {
          self.onError('websocket error', e);
        };
      };
      /**
       * Writes data to socket.
       *
       * @param {Array} array of packets.
       * @api private
       */


      WS.prototype.write = function (packets) {
        var self = this;
        this.writable = false; // encodePacket efficient as it uses WS framing
        // no need for encodePayload

        var total = packets.length;

        for (var i = 0, l = total; i < l; i++) {
          (function (packet) {
            parser.encodePacket(packet, self.supportsBinary, function (data) {
              if (!self.usingBrowserWebSocket) {
                // always create a new object (GH-437)
                var opts = {};

                if (packet.options) {
                  opts.compress = packet.options.compress;
                }

                if (self.perMessageDeflate) {
                  var len = 'string' === typeof data ? global.Buffer.byteLength(data) : data.length;

                  if (len < self.perMessageDeflate.threshold) {
                    opts.compress = false;
                  }
                }
              } // Sometimes the websocket has already been closed but the browser didn't
              // have a chance of informing us about it yet, in that case send will
              // throw an error


              try {
                if (self.usingBrowserWebSocket) {
                  // TypeError is thrown when passing the second argument on Safari
                  self.ws.send(data);
                } else {
                  self.ws.send(data, opts);
                }
              } catch (e) {
                debug('websocket closed before onclose event');
              }

              --total || done();
            });
          })(packets[i]);
        }

        function done() {
          self.emit('flush'); // fake drain
          // defer to next tick to allow Socket to clear writeBuffer

          setTimeout(function () {
            self.writable = true;
            self.emit('drain');
          }, 0);
        }
      };
      /**
       * Called upon close
       *
       * @api private
       */


      WS.prototype.onClose = function () {
        Transport.prototype.onClose.call(this);
      };
      /**
       * Closes socket.
       *
       * @api private
       */


      WS.prototype.doClose = function () {
        if (typeof this.ws !== 'undefined') {
          this.ws.close();
        }
      };
      /**
       * Generates uri for connection.
       *
       * @api private
       */


      WS.prototype.uri = function () {
        var query = this.query || {};
        var schema = this.secure ? 'wss' : 'ws';
        var port = ''; // avoid port if default for schema

        if (this.port && ('wss' === schema && Number(this.port) !== 443 || 'ws' === schema && Number(this.port) !== 80)) {
          port = ':' + this.port;
        } // append timestamp to URI


        if (this.timestampRequests) {
          query[this.timestampParam] = yeast();
        } // communicate binary support capabilities


        if (!this.supportsBinary) {
          query.b64 = 1;
        }

        query = parseqs.encode(query); // prepend ? to query

        if (query.length) {
          query = '?' + query;
        }

        var ipv6 = this.hostname.indexOf(':') !== -1;
        return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
      };
      /**
       * Feature detection for WebSocket.
       *
       * @return {Boolean} whether this transport is available.
       * @api public
       */


      WS.prototype.check = function () {
        return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);
      };
      /* WEBPACK VAR INJECTION */

    }).call(this, __webpack_require__(
    /*! ./../../../webpack/buildin/global.js */
    "./node_modules/webpack/buildin/global.js"));
    /***/
  },

  /***/
  "./node_modules/engine.io-client/lib/xmlhttprequest.js":
  /*!*************************************************************!*\
    !*** ./node_modules/engine.io-client/lib/xmlhttprequest.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesEngineIoClientLibXmlhttprequestJs(module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (global) {
      // browser shim for xmlhttprequest module
      var hasCORS = __webpack_require__(
      /*! has-cors */
      "./node_modules/has-cors/index.js");

      module.exports = function (opts) {
        var xdomain = opts.xdomain; // scheme must be same when usign XDomainRequest
        // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx

        var xscheme = opts.xscheme; // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
        // https://github.com/Automattic/engine.io-client/pull/217

        var enablesXDR = opts.enablesXDR; // XMLHttpRequest can be disabled on IE

        try {
          if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
            return new XMLHttpRequest();
          }
        } catch (e) {} // Use XDomainRequest for IE8 if enablesXDR is true
        // because loading bar keeps flashing when using jsonp-polling
        // https://github.com/yujiosaka/socke.io-ie8-loading-example


        try {
          if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
            return new XDomainRequest();
          }
        } catch (e) {}

        if (!xdomain) {
          try {
            return new global[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
          } catch (e) {}
        }
      };
      /* WEBPACK VAR INJECTION */

    }).call(this, __webpack_require__(
    /*! ./../../webpack/buildin/global.js */
    "./node_modules/webpack/buildin/global.js"));
    /***/
  },

  /***/
  "./node_modules/engine.io-parser/lib/browser.js":
  /*!******************************************************!*\
    !*** ./node_modules/engine.io-parser/lib/browser.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesEngineIoParserLibBrowserJs(module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (global) {
      /**
      * Module dependencies.
      */
      var keys = __webpack_require__(
      /*! ./keys */
      "./node_modules/engine.io-parser/lib/keys.js");

      var hasBinary = __webpack_require__(
      /*! has-binary2 */
      "./node_modules/has-binary2/index.js");

      var sliceBuffer = __webpack_require__(
      /*! arraybuffer.slice */
      "./node_modules/arraybuffer.slice/index.js");

      var after = __webpack_require__(
      /*! after */
      "./node_modules/after/index.js");

      var utf8 = __webpack_require__(
      /*! ./utf8 */
      "./node_modules/engine.io-parser/lib/utf8.js");

      var base64encoder;

      if (global && global.ArrayBuffer) {
        base64encoder = __webpack_require__(
        /*! base64-arraybuffer */
        "./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js");
      }
      /**
       * Check if we are running an android browser. That requires us to use
       * ArrayBuffer with polling transports...
       *
       * http://ghinda.net/jpeg-blob-ajax-android/
       */


      var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);
      /**
       * Check if we are running in PhantomJS.
       * Uploading a Blob with PhantomJS does not work correctly, as reported here:
       * https://github.com/ariya/phantomjs/issues/11395
       * @type boolean
       */

      var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);
      /**
       * When true, avoids using Blobs to encode payloads.
       * @type boolean
       */

      var dontSendBlobs = isAndroid || isPhantomJS;
      /**
       * Current protocol version.
       */

      exports.protocol = 3;
      /**
       * Packet types.
       */

      var packets = exports.packets = {
        open: 0 // non-ws
        ,
        close: 1 // non-ws
        ,
        ping: 2,
        pong: 3,
        message: 4,
        upgrade: 5,
        noop: 6
      };
      var packetslist = keys(packets);
      /**
       * Premade error packet.
       */

      var err = {
        type: 'error',
        data: 'parser error'
      };
      /**
       * Create a blob api even for blob builder when vendor prefixes exist
       */

      var Blob = __webpack_require__(
      /*! blob */
      "./node_modules/blob/index.js");
      /**
       * Encodes a packet.
       *
       *     <packet type id> [ <data> ]
       *
       * Example:
       *
       *     5hello world
       *     3
       *     4
       *
       * Binary is encoded in an identical principle
       *
       * @api private
       */


      exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
        if (typeof supportsBinary === 'function') {
          callback = supportsBinary;
          supportsBinary = false;
        }

        if (typeof utf8encode === 'function') {
          callback = utf8encode;
          utf8encode = null;
        }

        var data = packet.data === undefined ? undefined : packet.data.buffer || packet.data;

        if (global.ArrayBuffer && data instanceof ArrayBuffer) {
          return encodeArrayBuffer(packet, supportsBinary, callback);
        } else if (Blob && data instanceof global.Blob) {
          return encodeBlob(packet, supportsBinary, callback);
        } // might be an object with { base64: true, data: dataAsBase64String }


        if (data && data.base64) {
          return encodeBase64Object(packet, callback);
        } // Sending data as a utf-8 string


        var encoded = packets[packet.type]; // data fragment is optional

        if (undefined !== packet.data) {
          encoded += utf8encode ? utf8.encode(String(packet.data), {
            strict: false
          }) : String(packet.data);
        }

        return callback('' + encoded);
      };

      function encodeBase64Object(packet, callback) {
        // packet data is an object { base64: true, data: dataAsBase64String }
        var message = 'b' + exports.packets[packet.type] + packet.data.data;
        return callback(message);
      }
      /**
       * Encode packet helpers for binary types
       */


      function encodeArrayBuffer(packet, supportsBinary, callback) {
        if (!supportsBinary) {
          return exports.encodeBase64Packet(packet, callback);
        }

        var data = packet.data;
        var contentArray = new Uint8Array(data);
        var resultBuffer = new Uint8Array(1 + data.byteLength);
        resultBuffer[0] = packets[packet.type];

        for (var i = 0; i < contentArray.length; i++) {
          resultBuffer[i + 1] = contentArray[i];
        }

        return callback(resultBuffer.buffer);
      }

      function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
        if (!supportsBinary) {
          return exports.encodeBase64Packet(packet, callback);
        }

        var fr = new FileReader();

        fr.onload = function () {
          packet.data = fr.result;
          exports.encodePacket(packet, supportsBinary, true, callback);
        };

        return fr.readAsArrayBuffer(packet.data);
      }

      function encodeBlob(packet, supportsBinary, callback) {
        if (!supportsBinary) {
          return exports.encodeBase64Packet(packet, callback);
        }

        if (dontSendBlobs) {
          return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
        }

        var length = new Uint8Array(1);
        length[0] = packets[packet.type];
        var blob = new Blob([length.buffer, packet.data]);
        return callback(blob);
      }
      /**
       * Encodes a packet with binary data in a base64 string
       *
       * @param {Object} packet, has `type` and `data`
       * @return {String} base64 encoded message
       */


      exports.encodeBase64Packet = function (packet, callback) {
        var message = 'b' + exports.packets[packet.type];

        if (Blob && packet.data instanceof global.Blob) {
          var fr = new FileReader();

          fr.onload = function () {
            var b64 = fr.result.split(',')[1];
            callback(message + b64);
          };

          return fr.readAsDataURL(packet.data);
        }

        var b64data;

        try {
          b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
        } catch (e) {
          // iPhone Safari doesn't let you apply with typed arrays
          var typed = new Uint8Array(packet.data);
          var basic = new Array(typed.length);

          for (var i = 0; i < typed.length; i++) {
            basic[i] = typed[i];
          }

          b64data = String.fromCharCode.apply(null, basic);
        }

        message += global.btoa(b64data);
        return callback(message);
      };
      /**
       * Decodes a packet. Changes format to Blob if requested.
       *
       * @return {Object} with `type` and `data` (if any)
       * @api private
       */


      exports.decodePacket = function (data, binaryType, utf8decode) {
        if (data === undefined) {
          return err;
        } // String data


        if (typeof data === 'string') {
          if (data.charAt(0) === 'b') {
            return exports.decodeBase64Packet(data.substr(1), binaryType);
          }

          if (utf8decode) {
            data = tryDecode(data);

            if (data === false) {
              return err;
            }
          }

          var type = data.charAt(0);

          if (Number(type) != type || !packetslist[type]) {
            return err;
          }

          if (data.length > 1) {
            return {
              type: packetslist[type],
              data: data.substring(1)
            };
          } else {
            return {
              type: packetslist[type]
            };
          }
        }

        var asArray = new Uint8Array(data);
        var type = asArray[0];
        var rest = sliceBuffer(data, 1);

        if (Blob && binaryType === 'blob') {
          rest = new Blob([rest]);
        }

        return {
          type: packetslist[type],
          data: rest
        };
      };

      function tryDecode(data) {
        try {
          data = utf8.decode(data, {
            strict: false
          });
        } catch (e) {
          return false;
        }

        return data;
      }
      /**
       * Decodes a packet encoded in a base64 string
       *
       * @param {String} base64 encoded message
       * @return {Object} with `type` and `data` (if any)
       */


      exports.decodeBase64Packet = function (msg, binaryType) {
        var type = packetslist[msg.charAt(0)];

        if (!base64encoder) {
          return {
            type: type,
            data: {
              base64: true,
              data: msg.substr(1)
            }
          };
        }

        var data = base64encoder.decode(msg.substr(1));

        if (binaryType === 'blob' && Blob) {
          data = new Blob([data]);
        }

        return {
          type: type,
          data: data
        };
      };
      /**
       * Encodes multiple messages (payload).
       *
       *     <length>:data
       *
       * Example:
       *
       *     11:hello world2:hi
       *
       * If any contents are binary, they will be encoded as base64 strings. Base64
       * encoded strings are marked with a b before the length specifier
       *
       * @param {Array} packets
       * @api private
       */


      exports.encodePayload = function (packets, supportsBinary, callback) {
        if (typeof supportsBinary === 'function') {
          callback = supportsBinary;
          supportsBinary = null;
        }

        var isBinary = hasBinary(packets);

        if (supportsBinary && isBinary) {
          if (Blob && !dontSendBlobs) {
            return exports.encodePayloadAsBlob(packets, callback);
          }

          return exports.encodePayloadAsArrayBuffer(packets, callback);
        }

        if (!packets.length) {
          return callback('0:');
        }

        function setLengthHeader(message) {
          return message.length + ':' + message;
        }

        function encodeOne(packet, doneCallback) {
          exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function (message) {
            doneCallback(null, setLengthHeader(message));
          });
        }

        map(packets, encodeOne, function (err, results) {
          return callback(results.join(''));
        });
      };
      /**
       * Async array map using after
       */


      function map(ary, each, done) {
        var result = new Array(ary.length);
        var next = after(ary.length, done);

        var eachWithIndex = function eachWithIndex(i, el, cb) {
          each(el, function (error, msg) {
            result[i] = msg;
            cb(error, result);
          });
        };

        for (var i = 0; i < ary.length; i++) {
          eachWithIndex(i, ary[i], next);
        }
      }
      /*
       * Decodes data when a payload is maybe expected. Possible binary contents are
       * decoded from their base64 representation
       *
       * @param {String} data, callback method
       * @api public
       */


      exports.decodePayload = function (data, binaryType, callback) {
        if (typeof data !== 'string') {
          return exports.decodePayloadAsBinary(data, binaryType, callback);
        }

        if (typeof binaryType === 'function') {
          callback = binaryType;
          binaryType = null;
        }

        var packet;

        if (data === '') {
          // parser error - ignoring payload
          return callback(err, 0, 1);
        }

        var length = '',
            n,
            msg;

        for (var i = 0, l = data.length; i < l; i++) {
          var chr = data.charAt(i);

          if (chr !== ':') {
            length += chr;
            continue;
          }

          if (length === '' || length != (n = Number(length))) {
            // parser error - ignoring payload
            return callback(err, 0, 1);
          }

          msg = data.substr(i + 1, n);

          if (length != msg.length) {
            // parser error - ignoring payload
            return callback(err, 0, 1);
          }

          if (msg.length) {
            packet = exports.decodePacket(msg, binaryType, false);

            if (err.type === packet.type && err.data === packet.data) {
              // parser error in individual packet - ignoring payload
              return callback(err, 0, 1);
            }

            var ret = callback(packet, i + n, l);
            if (false === ret) return;
          } // advance cursor


          i += n;
          length = '';
        }

        if (length !== '') {
          // parser error - ignoring payload
          return callback(err, 0, 1);
        }
      };
      /**
       * Encodes multiple messages (payload) as binary.
       *
       * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
       * 255><data>
       *
       * Example:
       * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
       *
       * @param {Array} packets
       * @return {ArrayBuffer} encoded payload
       * @api private
       */


      exports.encodePayloadAsArrayBuffer = function (packets, callback) {
        if (!packets.length) {
          return callback(new ArrayBuffer(0));
        }

        function encodeOne(packet, doneCallback) {
          exports.encodePacket(packet, true, true, function (data) {
            return doneCallback(null, data);
          });
        }

        map(packets, encodeOne, function (err, encodedPackets) {
          var totalLength = encodedPackets.reduce(function (acc, p) {
            var len;

            if (typeof p === 'string') {
              len = p.length;
            } else {
              len = p.byteLength;
            }

            return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
          }, 0);
          var resultArray = new Uint8Array(totalLength);
          var bufferIndex = 0;
          encodedPackets.forEach(function (p) {
            var isString = typeof p === 'string';
            var ab = p;

            if (isString) {
              var view = new Uint8Array(p.length);

              for (var i = 0; i < p.length; i++) {
                view[i] = p.charCodeAt(i);
              }

              ab = view.buffer;
            }

            if (isString) {
              // not true binary
              resultArray[bufferIndex++] = 0;
            } else {
              // true binary
              resultArray[bufferIndex++] = 1;
            }

            var lenStr = ab.byteLength.toString();

            for (var i = 0; i < lenStr.length; i++) {
              resultArray[bufferIndex++] = parseInt(lenStr[i]);
            }

            resultArray[bufferIndex++] = 255;
            var view = new Uint8Array(ab);

            for (var i = 0; i < view.length; i++) {
              resultArray[bufferIndex++] = view[i];
            }
          });
          return callback(resultArray.buffer);
        });
      };
      /**
       * Encode as Blob
       */


      exports.encodePayloadAsBlob = function (packets, callback) {
        function encodeOne(packet, doneCallback) {
          exports.encodePacket(packet, true, true, function (encoded) {
            var binaryIdentifier = new Uint8Array(1);
            binaryIdentifier[0] = 1;

            if (typeof encoded === 'string') {
              var view = new Uint8Array(encoded.length);

              for (var i = 0; i < encoded.length; i++) {
                view[i] = encoded.charCodeAt(i);
              }

              encoded = view.buffer;
              binaryIdentifier[0] = 0;
            }

            var len = encoded instanceof ArrayBuffer ? encoded.byteLength : encoded.size;
            var lenStr = len.toString();
            var lengthAry = new Uint8Array(lenStr.length + 1);

            for (var i = 0; i < lenStr.length; i++) {
              lengthAry[i] = parseInt(lenStr[i]);
            }

            lengthAry[lenStr.length] = 255;

            if (Blob) {
              var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
              doneCallback(null, blob);
            }
          });
        }

        map(packets, encodeOne, function (err, results) {
          return callback(new Blob(results));
        });
      };
      /*
       * Decodes data when a payload is maybe expected. Strings are decoded by
       * interpreting each byte as a key code for entries marked to start with 0. See
       * description of encodePayloadAsBinary
       *
       * @param {ArrayBuffer} data, callback method
       * @api public
       */


      exports.decodePayloadAsBinary = function (data, binaryType, callback) {
        if (typeof binaryType === 'function') {
          callback = binaryType;
          binaryType = null;
        }

        var bufferTail = data;
        var buffers = [];

        while (bufferTail.byteLength > 0) {
          var tailArray = new Uint8Array(bufferTail);
          var isString = tailArray[0] === 0;
          var msgLength = '';

          for (var i = 1;; i++) {
            if (tailArray[i] === 255) break; // 310 = char length of Number.MAX_VALUE

            if (msgLength.length > 310) {
              return callback(err, 0, 1);
            }

            msgLength += tailArray[i];
          }

          bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
          msgLength = parseInt(msgLength);
          var msg = sliceBuffer(bufferTail, 0, msgLength);

          if (isString) {
            try {
              msg = String.fromCharCode.apply(null, new Uint8Array(msg));
            } catch (e) {
              // iPhone Safari doesn't let you apply to typed arrays
              var typed = new Uint8Array(msg);
              msg = '';

              for (var i = 0; i < typed.length; i++) {
                msg += String.fromCharCode(typed[i]);
              }
            }
          }

          buffers.push(msg);
          bufferTail = sliceBuffer(bufferTail, msgLength);
        }

        var total = buffers.length;
        buffers.forEach(function (buffer, i) {
          callback(exports.decodePacket(buffer, binaryType, true), i, total);
        });
      };
      /* WEBPACK VAR INJECTION */

    }).call(this, __webpack_require__(
    /*! ./../../webpack/buildin/global.js */
    "./node_modules/webpack/buildin/global.js"));
    /***/
  },

  /***/
  "./node_modules/engine.io-parser/lib/keys.js":
  /*!***************************************************!*\
    !*** ./node_modules/engine.io-parser/lib/keys.js ***!
    \***************************************************/

  /*! no static exports found */

  /***/
  function node_modulesEngineIoParserLibKeysJs(module, exports) {
    /**
     * Gets the keys for an object.
     *
     * @return {Array} keys
     * @api private
     */
    module.exports = Object.keys || function keys(obj) {
      var arr = [];
      var has = Object.prototype.hasOwnProperty;

      for (var i in obj) {
        if (has.call(obj, i)) {
          arr.push(i);
        }
      }

      return arr;
    };
    /***/

  },

  /***/
  "./node_modules/engine.io-parser/lib/utf8.js":
  /*!***************************************************!*\
    !*** ./node_modules/engine.io-parser/lib/utf8.js ***!
    \***************************************************/

  /*! no static exports found */

  /***/
  function node_modulesEngineIoParserLibUtf8Js(module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (module, global) {
      var __WEBPACK_AMD_DEFINE_RESULT__;
      /*! https://mths.be/utf8js v2.1.2 by @mathias */


      ;

      (function (root) {
        // Detect free variables `exports`
        var freeExports = typeof exports == 'object' && exports; // Detect free variable `module`

        var freeModule = typeof module == 'object' && module && module.exports == freeExports && module; // Detect free variable `global`, from Node.js or Browserified code,
        // and use it as `root`

        var freeGlobal = typeof global == 'object' && global;

        if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
          root = freeGlobal;
        }
        /*--------------------------------------------------------------------------*/


        var stringFromCharCode = String.fromCharCode; // Taken from https://mths.be/punycode

        function ucs2decode(string) {
          var output = [];
          var counter = 0;
          var length = string.length;
          var value;
          var extra;

          while (counter < length) {
            value = string.charCodeAt(counter++);

            if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
              // high surrogate, and there is a next character
              extra = string.charCodeAt(counter++);

              if ((extra & 0xFC00) == 0xDC00) {
                // low surrogate
                output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
              } else {
                // unmatched surrogate; only append this code unit, in case the next
                // code unit is the high surrogate of a surrogate pair
                output.push(value);
                counter--;
              }
            } else {
              output.push(value);
            }
          }

          return output;
        } // Taken from https://mths.be/punycode


        function ucs2encode(array) {
          var length = array.length;
          var index = -1;
          var value;
          var output = '';

          while (++index < length) {
            value = array[index];

            if (value > 0xFFFF) {
              value -= 0x10000;
              output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
              value = 0xDC00 | value & 0x3FF;
            }

            output += stringFromCharCode(value);
          }

          return output;
        }

        function checkScalarValue(codePoint, strict) {
          if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
            if (strict) {
              throw Error('Lone surrogate U+' + codePoint.toString(16).toUpperCase() + ' is not a scalar value');
            }

            return false;
          }

          return true;
        }
        /*--------------------------------------------------------------------------*/


        function createByte(codePoint, shift) {
          return stringFromCharCode(codePoint >> shift & 0x3F | 0x80);
        }

        function encodeCodePoint(codePoint, strict) {
          if ((codePoint & 0xFFFFFF80) == 0) {
            // 1-byte sequence
            return stringFromCharCode(codePoint);
          }

          var symbol = '';

          if ((codePoint & 0xFFFFF800) == 0) {
            // 2-byte sequence
            symbol = stringFromCharCode(codePoint >> 6 & 0x1F | 0xC0);
          } else if ((codePoint & 0xFFFF0000) == 0) {
            // 3-byte sequence
            if (!checkScalarValue(codePoint, strict)) {
              codePoint = 0xFFFD;
            }

            symbol = stringFromCharCode(codePoint >> 12 & 0x0F | 0xE0);
            symbol += createByte(codePoint, 6);
          } else if ((codePoint & 0xFFE00000) == 0) {
            // 4-byte sequence
            symbol = stringFromCharCode(codePoint >> 18 & 0x07 | 0xF0);
            symbol += createByte(codePoint, 12);
            symbol += createByte(codePoint, 6);
          }

          symbol += stringFromCharCode(codePoint & 0x3F | 0x80);
          return symbol;
        }

        function utf8encode(string, opts) {
          opts = opts || {};
          var strict = false !== opts.strict;
          var codePoints = ucs2decode(string);
          var length = codePoints.length;
          var index = -1;
          var codePoint;
          var byteString = '';

          while (++index < length) {
            codePoint = codePoints[index];
            byteString += encodeCodePoint(codePoint, strict);
          }

          return byteString;
        }
        /*--------------------------------------------------------------------------*/


        function readContinuationByte() {
          if (byteIndex >= byteCount) {
            throw Error('Invalid byte index');
          }

          var continuationByte = byteArray[byteIndex] & 0xFF;
          byteIndex++;

          if ((continuationByte & 0xC0) == 0x80) {
            return continuationByte & 0x3F;
          } // If we end up here, it’s not a continuation byte


          throw Error('Invalid continuation byte');
        }

        function decodeSymbol(strict) {
          var byte1;
          var byte2;
          var byte3;
          var byte4;
          var codePoint;

          if (byteIndex > byteCount) {
            throw Error('Invalid byte index');
          }

          if (byteIndex == byteCount) {
            return false;
          } // Read first byte


          byte1 = byteArray[byteIndex] & 0xFF;
          byteIndex++; // 1-byte sequence (no continuation bytes)

          if ((byte1 & 0x80) == 0) {
            return byte1;
          } // 2-byte sequence


          if ((byte1 & 0xE0) == 0xC0) {
            byte2 = readContinuationByte();
            codePoint = (byte1 & 0x1F) << 6 | byte2;

            if (codePoint >= 0x80) {
              return codePoint;
            } else {
              throw Error('Invalid continuation byte');
            }
          } // 3-byte sequence (may include unpaired surrogates)


          if ((byte1 & 0xF0) == 0xE0) {
            byte2 = readContinuationByte();
            byte3 = readContinuationByte();
            codePoint = (byte1 & 0x0F) << 12 | byte2 << 6 | byte3;

            if (codePoint >= 0x0800) {
              return checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;
            } else {
              throw Error('Invalid continuation byte');
            }
          } // 4-byte sequence


          if ((byte1 & 0xF8) == 0xF0) {
            byte2 = readContinuationByte();
            byte3 = readContinuationByte();
            byte4 = readContinuationByte();
            codePoint = (byte1 & 0x07) << 0x12 | byte2 << 0x0C | byte3 << 0x06 | byte4;

            if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
              return codePoint;
            }
          }

          throw Error('Invalid UTF-8 detected');
        }

        var byteArray;
        var byteCount;
        var byteIndex;

        function utf8decode(byteString, opts) {
          opts = opts || {};
          var strict = false !== opts.strict;
          byteArray = ucs2decode(byteString);
          byteCount = byteArray.length;
          byteIndex = 0;
          var codePoints = [];
          var tmp;

          while ((tmp = decodeSymbol(strict)) !== false) {
            codePoints.push(tmp);
          }

          return ucs2encode(codePoints);
        }
        /*--------------------------------------------------------------------------*/


        var utf8 = {
          'version': '2.1.2',
          'encode': utf8encode,
          'decode': utf8decode
        }; // Some AMD build optimizers, like r.js, check for specific condition patterns
        // like the following:

        if (true) {
          !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
            return utf8;
          }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else { var key, hasOwnProperty, object; }
      })(this);
      /* WEBPACK VAR INJECTION */

    }).call(this, __webpack_require__(
    /*! ./../../webpack/buildin/module.js */
    "./node_modules/webpack/buildin/module.js")(module), __webpack_require__(
    /*! ./../../webpack/buildin/global.js */
    "./node_modules/webpack/buildin/global.js"));
    /***/
  },

  /***/
  "./node_modules/events/events.js":
  /*!***************************************!*\
    !*** ./node_modules/events/events.js ***!
    \***************************************/

  /*! no static exports found */

  /***/
  function node_modulesEventsEventsJs(module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    function EventEmitter() {
      this._events = this._events || {};
      this._maxListeners = this._maxListeners || undefined;
    }

    module.exports = EventEmitter; // Backwards-compat with node 0.10.x

    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.

    EventEmitter.defaultMaxListeners = 10; // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.

    EventEmitter.prototype.setMaxListeners = function (n) {
      if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError('n must be a positive number');
      this._maxListeners = n;
      return this;
    };

    EventEmitter.prototype.emit = function (type) {
      var er, handler, len, args, i, listeners;
      if (!this._events) this._events = {}; // If there is no 'error' event listener then throw.

      if (type === 'error') {
        if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
          er = arguments[1];

          if (er instanceof Error) {
            throw er; // Unhandled 'error' event
          } else {
            // At least give some kind of context to the user
            var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
            err.context = er;
            throw err;
          }
        }
      }

      handler = this._events[type];
      if (isUndefined(handler)) return false;

      if (isFunction(handler)) {
        switch (arguments.length) {
          // fast cases
          case 1:
            handler.call(this);
            break;

          case 2:
            handler.call(this, arguments[1]);
            break;

          case 3:
            handler.call(this, arguments[1], arguments[2]);
            break;
          // slower

          default:
            args = Array.prototype.slice.call(arguments, 1);
            handler.apply(this, args);
        }
      } else if (isObject(handler)) {
        args = Array.prototype.slice.call(arguments, 1);
        listeners = handler.slice();
        len = listeners.length;

        for (i = 0; i < len; i++) listeners[i].apply(this, args);
      }

      return true;
    };

    EventEmitter.prototype.addListener = function (type, listener) {
      var m;
      if (!isFunction(listener)) throw TypeError('listener must be a function');
      if (!this._events) this._events = {}; // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".

      if (this._events.newListener) this.emit('newListener', type, isFunction(listener.listener) ? listener.listener : listener);
      if (!this._events[type]) // Optimize the case of one listener. Don't need the extra array object.
        this._events[type] = listener;else if (isObject(this._events[type])) // If we've already got an array, just append.
        this._events[type].push(listener);else // Adding the second element, need to change to array.
        this._events[type] = [this._events[type], listener]; // Check for listener leak

      if (isObject(this._events[type]) && !this._events[type].warned) {
        if (!isUndefined(this._maxListeners)) {
          m = this._maxListeners;
        } else {
          m = EventEmitter.defaultMaxListeners;
        }

        if (m && m > 0 && this._events[type].length > m) {
          this._events[type].warned = true;
          console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);

          if (typeof console.trace === 'function') {
            // not supported in IE 10
            console.trace();
          }
        }
      }

      return this;
    };

    EventEmitter.prototype.on = EventEmitter.prototype.addListener;

    EventEmitter.prototype.once = function (type, listener) {
      if (!isFunction(listener)) throw TypeError('listener must be a function');
      var fired = false;

      function g() {
        this.removeListener(type, g);

        if (!fired) {
          fired = true;
          listener.apply(this, arguments);
        }
      }

      g.listener = listener;
      this.on(type, g);
      return this;
    }; // emits a 'removeListener' event iff the listener was removed


    EventEmitter.prototype.removeListener = function (type, listener) {
      var list, position, length, i;
      if (!isFunction(listener)) throw TypeError('listener must be a function');
      if (!this._events || !this._events[type]) return this;
      list = this._events[type];
      length = list.length;
      position = -1;

      if (list === listener || isFunction(list.listener) && list.listener === listener) {
        delete this._events[type];
        if (this._events.removeListener) this.emit('removeListener', type, listener);
      } else if (isObject(list)) {
        for (i = length; i-- > 0;) {
          if (list[i] === listener || list[i].listener && list[i].listener === listener) {
            position = i;
            break;
          }
        }

        if (position < 0) return this;

        if (list.length === 1) {
          list.length = 0;
          delete this._events[type];
        } else {
          list.splice(position, 1);
        }

        if (this._events.removeListener) this.emit('removeListener', type, listener);
      }

      return this;
    };

    EventEmitter.prototype.removeAllListeners = function (type) {
      var key, listeners;
      if (!this._events) return this; // not listening for removeListener, no need to emit

      if (!this._events.removeListener) {
        if (arguments.length === 0) this._events = {};else if (this._events[type]) delete this._events[type];
        return this;
      } // emit removeListener for all listeners on all events


      if (arguments.length === 0) {
        for (key in this._events) {
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }

        this.removeAllListeners('removeListener');
        this._events = {};
        return this;
      }

      listeners = this._events[type];

      if (isFunction(listeners)) {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        while (listeners.length) this.removeListener(type, listeners[listeners.length - 1]);
      }

      delete this._events[type];
      return this;
    };

    EventEmitter.prototype.listeners = function (type) {
      var ret;
      if (!this._events || !this._events[type]) ret = [];else if (isFunction(this._events[type])) ret = [this._events[type]];else ret = this._events[type].slice();
      return ret;
    };

    EventEmitter.prototype.listenerCount = function (type) {
      if (this._events) {
        var evlistener = this._events[type];
        if (isFunction(evlistener)) return 1;else if (evlistener) return evlistener.length;
      }

      return 0;
    };

    EventEmitter.listenerCount = function (emitter, type) {
      return emitter.listenerCount(type);
    };

    function isFunction(arg) {
      return typeof arg === 'function';
    }

    function isNumber(arg) {
      return typeof arg === 'number';
    }

    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }

    function isUndefined(arg) {
      return arg === void 0;
    }
    /***/

  },

  /***/
  "./node_modules/has-binary2/index.js":
  /*!*******************************************!*\
    !*** ./node_modules/has-binary2/index.js ***!
    \*******************************************/

  /*! no static exports found */

  /***/
  function node_modulesHasBinary2IndexJs(module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (global) {
      /* global Blob File */

      /*
       * Module requirements.
       */
      var isArray = __webpack_require__(
      /*! isarray */
      "./node_modules/has-binary2/node_modules/isarray/index.js");

      var toString = Object.prototype.toString;
      var withNativeBlob = typeof global.Blob === 'function' || toString.call(global.Blob) === '[object BlobConstructor]';
      var withNativeFile = typeof global.File === 'function' || toString.call(global.File) === '[object FileConstructor]';
      /**
       * Module exports.
       */

      module.exports = hasBinary;
      /**
       * Checks for binary data.
       *
       * Supports Buffer, ArrayBuffer, Blob and File.
       *
       * @param {Object} anything
       * @api public
       */

      function hasBinary(obj) {
        if (!obj || typeof obj !== 'object') {
          return false;
        }

        if (isArray(obj)) {
          for (var i = 0, l = obj.length; i < l; i++) {
            if (hasBinary(obj[i])) {
              return true;
            }
          }

          return false;
        }

        if (typeof global.Buffer === 'function' && global.Buffer.isBuffer && global.Buffer.isBuffer(obj) || typeof global.ArrayBuffer === 'function' && obj instanceof ArrayBuffer || withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File) {
          return true;
        } // see: https://github.com/Automattic/has-binary/pull/4


        if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
          return hasBinary(obj.toJSON(), true);
        }

        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
            return true;
          }
        }

        return false;
      }
      /* WEBPACK VAR INJECTION */

    }).call(this, __webpack_require__(
    /*! ./../webpack/buildin/global.js */
    "./node_modules/webpack/buildin/global.js"));
    /***/
  },

  /***/
  "./node_modules/has-binary2/node_modules/isarray/index.js":
  /*!****************************************************************!*\
    !*** ./node_modules/has-binary2/node_modules/isarray/index.js ***!
    \****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesHasBinary2Node_modulesIsarrayIndexJs(module, exports) {
    var toString = {}.toString;

    module.exports = Array.isArray || function (arr) {
      return toString.call(arr) == '[object Array]';
    };
    /***/

  },

  /***/
  "./node_modules/has-cors/index.js":
  /*!****************************************!*\
    !*** ./node_modules/has-cors/index.js ***!
    \****************************************/

  /*! no static exports found */

  /***/
  function node_modulesHasCorsIndexJs(module, exports) {
    /**
     * Module exports.
     *
     * Logic borrowed from Modernizr:
     *
     *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
     */
    try {
      module.exports = typeof XMLHttpRequest !== 'undefined' && 'withCredentials' in new XMLHttpRequest();
    } catch (err) {
      // if XMLHttp support is disabled in IE then it will throw
      // when trying to create
      module.exports = false;
    }
    /***/

  },

  /***/
  "./node_modules/indexof/index.js":
  /*!***************************************!*\
    !*** ./node_modules/indexof/index.js ***!
    \***************************************/

  /*! no static exports found */

  /***/
  function node_modulesIndexofIndexJs(module, exports) {
    var indexOf = [].indexOf;

    module.exports = function (arr, obj) {
      if (indexOf) return arr.indexOf(obj);

      for (var i = 0; i < arr.length; ++i) {
        if (arr[i] === obj) return i;
      }

      return -1;
    };
    /***/

  },

  /***/
  "./node_modules/ms/index.js":
  /*!**********************************!*\
    !*** ./node_modules/ms/index.js ***!
    \**********************************/

  /*! no static exports found */

  /***/
  function node_modulesMsIndexJs(module, exports) {
    /**
     * Helpers.
     */
    var s = 1000;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var y = d * 365.25;
    /**
     * Parse or format the given `val`.
     *
     * Options:
     *
     *  - `long` verbose formatting [false]
     *
     * @param {String|Number} val
     * @param {Object} [options]
     * @throws {Error} throw an error if val is not a non-empty string or a number
     * @return {String|Number}
     * @api public
     */

    module.exports = function (val, options) {
      options = options || {};
      var type = typeof val;

      if (type === 'string' && val.length > 0) {
        return parse(val);
      } else if (type === 'number' && isNaN(val) === false) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }

      throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
    };
    /**
     * Parse the given `str` and return milliseconds.
     *
     * @param {String} str
     * @return {Number}
     * @api private
     */


    function parse(str) {
      str = String(str);

      if (str.length > 100) {
        return;
      }

      var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);

      if (!match) {
        return;
      }

      var n = parseFloat(match[1]);
      var type = (match[2] || 'ms').toLowerCase();

      switch (type) {
        case 'years':
        case 'year':
        case 'yrs':
        case 'yr':
        case 'y':
          return n * y;

        case 'days':
        case 'day':
        case 'd':
          return n * d;

        case 'hours':
        case 'hour':
        case 'hrs':
        case 'hr':
        case 'h':
          return n * h;

        case 'minutes':
        case 'minute':
        case 'mins':
        case 'min':
        case 'm':
          return n * m;

        case 'seconds':
        case 'second':
        case 'secs':
        case 'sec':
        case 's':
          return n * s;

        case 'milliseconds':
        case 'millisecond':
        case 'msecs':
        case 'msec':
        case 'ms':
          return n;

        default:
          return undefined;
      }
    }
    /**
     * Short format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */


    function fmtShort(ms) {
      if (ms >= d) {
        return Math.round(ms / d) + 'd';
      }

      if (ms >= h) {
        return Math.round(ms / h) + 'h';
      }

      if (ms >= m) {
        return Math.round(ms / m) + 'm';
      }

      if (ms >= s) {
        return Math.round(ms / s) + 's';
      }

      return ms + 'ms';
    }
    /**
     * Long format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */


    function fmtLong(ms) {
      return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
    }
    /**
     * Pluralization helper.
     */


    function plural(ms, n, name) {
      if (ms < n) {
        return;
      }

      if (ms < n * 1.5) {
        return Math.floor(ms / n) + ' ' + name;
      }

      return Math.ceil(ms / n) + ' ' + name + 's';
    }
    /***/

  },

  /***/
  "./node_modules/parseqs/index.js":
  /*!***************************************!*\
    !*** ./node_modules/parseqs/index.js ***!
    \***************************************/

  /*! no static exports found */

  /***/
  function node_modulesParseqsIndexJs(module, exports) {
    /**
     * Compiles a querystring
     * Returns string representation of the object
     *
     * @param {Object}
     * @api private
     */
    exports.encode = function (obj) {
      var str = '';

      for (var i in obj) {
        if (obj.hasOwnProperty(i)) {
          if (str.length) str += '&';
          str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
        }
      }

      return str;
    };
    /**
     * Parses a simple querystring into an object
     *
     * @param {String} qs
     * @api private
     */


    exports.decode = function (qs) {
      var qry = {};
      var pairs = qs.split('&');

      for (var i = 0, l = pairs.length; i < l; i++) {
        var pair = pairs[i].split('=');
        qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
      }

      return qry;
    };
    /***/

  },

  /***/
  "./node_modules/parseuri/index.js":
  /*!****************************************!*\
    !*** ./node_modules/parseuri/index.js ***!
    \****************************************/

  /*! no static exports found */

  /***/
  function node_modulesParseuriIndexJs(module, exports) {
    /**
     * Parses an URI
     *
     * @author Steven Levithan <stevenlevithan.com> (MIT license)
     * @api private
     */
    var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
    var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'];

    module.exports = function parseuri(str) {
      var src = str,
          b = str.indexOf('['),
          e = str.indexOf(']');

      if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
      }

      var m = re.exec(str || ''),
          uri = {},
          i = 14;

      while (i--) {
        uri[parts[i]] = m[i] || '';
      }

      if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
        uri.ipv6uri = true;
      }

      return uri;
    };
    /***/

  },

  /***/
  "./node_modules/path-browserify/index.js":
  /*!***********************************************!*\
    !*** ./node_modules/path-browserify/index.js ***!
    \***********************************************/

  /*! no static exports found */

  /***/
  function node_modulesPathBrowserifyIndexJs(module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (process) {
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      // resolves . and .. elements in a path array with directory names there
      // must be no slashes, empty elements, or device names (c:\) in the array
      // (so also no leading and trailing slashes - it does not distinguish
      // relative and absolute paths)
      function normalizeArray(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;

        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];

          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        } // if the path is allowed to go above the root, restore leading ..s


        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }

        return parts;
      } // Split a filename into [root, dir, basename, ext], unix version
      // 'root' is just a slash, or nothing.


      var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;

      var splitPath = function splitPath(filename) {
        return splitPathRe.exec(filename).slice(1);
      }; // path.resolve([from ...], to)
      // posix version


      exports.resolve = function () {
        var resolvedPath = '',
            resolvedAbsolute = false;

        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = i >= 0 ? arguments[i] : process.cwd(); // Skip empty and invalid entries

          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }

          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        } // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        // Normalize the path


        resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
      }; // path.normalize(path)
      // posix version


      exports.normalize = function (path) {
        var isAbsolute = exports.isAbsolute(path),
            trailingSlash = substr(path, -1) === '/'; // Normalize the path

        path = normalizeArray(filter(path.split('/'), function (p) {
          return !!p;
        }), !isAbsolute).join('/');

        if (!path && !isAbsolute) {
          path = '.';
        }

        if (path && trailingSlash) {
          path += '/';
        }

        return (isAbsolute ? '/' : '') + path;
      }; // posix version


      exports.isAbsolute = function (path) {
        return path.charAt(0) === '/';
      }; // posix version


      exports.join = function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return exports.normalize(filter(paths, function (p, index) {
          if (typeof p !== 'string') {
            throw new TypeError('Arguments to path.join must be strings');
          }

          return p;
        }).join('/'));
      }; // path.relative(from, to)
      // posix version


      exports.relative = function (from, to) {
        from = exports.resolve(from).substr(1);
        to = exports.resolve(to).substr(1);

        function trim(arr) {
          var start = 0;

          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }

          var end = arr.length - 1;

          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }

          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }

        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;

        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }

        var outputParts = [];

        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }

        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      };

      exports.sep = '/';
      exports.delimiter = ':';

      exports.dirname = function (path) {
        var result = splitPath(path),
            root = result[0],
            dir = result[1];

        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }

        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }

        return root + dir;
      };

      exports.basename = function (path, ext) {
        var f = splitPath(path)[2]; // TODO: make this comparison case-insensitive on windows?

        if (ext && f.substr(-1 * ext.length) === ext) {
          f = f.substr(0, f.length - ext.length);
        }

        return f;
      };

      exports.extname = function (path) {
        return splitPath(path)[3];
      };

      function filter(xs, f) {
        if (xs.filter) return xs.filter(f);
        var res = [];

        for (var i = 0; i < xs.length; i++) {
          if (f(xs[i], i, xs)) res.push(xs[i]);
        }

        return res;
      } // String.prototype.substr - negative index don't work in IE8


      var substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {
        return str.substr(start, len);
      } : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
      };
      /* WEBPACK VAR INJECTION */
    }).call(this, __webpack_require__(
    /*! ./../process/browser.js */
    "./node_modules/process/browser.js"));
    /***/
  },

  /***/
  "./node_modules/process/browser.js":
  /*!*****************************************!*\
    !*** ./node_modules/process/browser.js ***!
    \*****************************************/

  /*! no static exports found */

  /***/
  function node_modulesProcessBrowserJs(module, exports) {
    // shim for using process in browser
    var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
    // don't break things.  But we need to wrap it in a try catch in case it is
    // wrapped in strict mode code which doesn't define any globals.  It's inside a
    // function because try/catches deoptimize in certain engines.

    var cachedSetTimeout;
    var cachedClearTimeout;

    function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
    }

    function defaultClearTimeout() {
      throw new Error('clearTimeout has not been defined');
    }

    (function () {
      try {
        if (typeof setTimeout === 'function') {
          cachedSetTimeout = setTimeout;
        } else {
          cachedSetTimeout = defaultSetTimout;
        }
      } catch (e) {
        cachedSetTimeout = defaultSetTimout;
      }

      try {
        if (typeof clearTimeout === 'function') {
          cachedClearTimeout = clearTimeout;
        } else {
          cachedClearTimeout = defaultClearTimeout;
        }
      } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
      }
    })();

    function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
      } // if setTimeout wasn't available but was latter defined


      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
      }

      try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
      } catch (e) {
        try {
          // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
          return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
          // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
          return cachedSetTimeout.call(this, fun, 0);
        }
      }
    }

    function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
      } // if clearTimeout wasn't available but was latter defined


      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
      }

      try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
      } catch (e) {
        try {
          // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
          return cachedClearTimeout.call(null, marker);
        } catch (e) {
          // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
          // Some versions of I.E. have different rules for clearTimeout vs setTimeout
          return cachedClearTimeout.call(this, marker);
        }
      }
    }

    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
      if (!draining || !currentQueue) {
        return;
      }

      draining = false;

      if (currentQueue.length) {
        queue = currentQueue.concat(queue);
      } else {
        queueIndex = -1;
      }

      if (queue.length) {
        drainQueue();
      }
    }

    function drainQueue() {
      if (draining) {
        return;
      }

      var timeout = runTimeout(cleanUpNextTick);
      draining = true;
      var len = queue.length;

      while (len) {
        currentQueue = queue;
        queue = [];

        while (++queueIndex < len) {
          if (currentQueue) {
            currentQueue[queueIndex].run();
          }
        }

        queueIndex = -1;
        len = queue.length;
      }

      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
    }

    process.nextTick = function (fun) {
      var args = new Array(arguments.length - 1);

      if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
          args[i - 1] = arguments[i];
        }
      }

      queue.push(new Item(fun, args));

      if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
      }
    }; // v8 likes predictible objects


    function Item(fun, array) {
      this.fun = fun;
      this.array = array;
    }

    Item.prototype.run = function () {
      this.fun.apply(null, this.array);
    };

    process.title = 'browser';
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues

    process.versions = {};

    function noop() {}

    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;

    process.listeners = function (name) {
      return [];
    };

    process.binding = function (name) {
      throw new Error('process.binding is not supported');
    };

    process.cwd = function () {
      return '/';
    };

    process.chdir = function (dir) {
      throw new Error('process.chdir is not supported');
    };

    process.umask = function () {
      return 0;
    };
    /***/

  },

  /***/
  "./node_modules/setimmediate/setImmediate.js":
  /*!***************************************************!*\
    !*** ./node_modules/setimmediate/setImmediate.js ***!
    \***************************************************/

  /*! no static exports found */

  /***/
  function node_modulesSetimmediateSetImmediateJs(module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (global, process) {
      (function (global, undefined) {
        "use strict";

        if (global.setImmediate) {
          return;
        }

        var nextHandle = 1; // Spec says greater than zero

        var tasksByHandle = {};
        var currentlyRunningATask = false;
        var doc = global.document;
        var registerImmediate;

        function setImmediate(callback) {
          // Callback can either be a function or a string
          if (typeof callback !== "function") {
            callback = new Function("" + callback);
          } // Copy function arguments


          var args = new Array(arguments.length - 1);

          for (var i = 0; i < args.length; i++) {
            args[i] = arguments[i + 1];
          } // Store and register the task


          var task = {
            callback: callback,
            args: args
          };
          tasksByHandle[nextHandle] = task;
          registerImmediate(nextHandle);
          return nextHandle++;
        }

        function clearImmediate(handle) {
          delete tasksByHandle[handle];
        }

        function run(task) {
          var callback = task.callback;
          var args = task.args;

          switch (args.length) {
            case 0:
              callback();
              break;

            case 1:
              callback(args[0]);
              break;

            case 2:
              callback(args[0], args[1]);
              break;

            case 3:
              callback(args[0], args[1], args[2]);
              break;

            default:
              callback.apply(undefined, args);
              break;
          }
        }

        function runIfPresent(handle) {
          // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
          // So if we're currently running a task, we'll need to delay this invocation.
          if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
          } else {
            var task = tasksByHandle[handle];

            if (task) {
              currentlyRunningATask = true;

              try {
                run(task);
              } finally {
                clearImmediate(handle);
                currentlyRunningATask = false;
              }
            }
          }
        }

        function installNextTickImplementation() {
          registerImmediate = function registerImmediate(handle) {
            process.nextTick(function () {
              runIfPresent(handle);
            });
          };
        }

        function canUsePostMessage() {
          // The test against `importScripts` prevents this implementation from being installed inside a web worker,
          // where `global.postMessage` means something completely different and can't be used for this purpose.
          if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;

            global.onmessage = function () {
              postMessageIsAsynchronous = false;
            };

            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
          }
        }

        function installPostMessageImplementation() {
          // Installs an event handler on `global` for the `message` event: see
          // * https://developer.mozilla.org/en/DOM/window.postMessage
          // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
          var messagePrefix = "setImmediate$" + Math.random() + "$";

          var onGlobalMessage = function onGlobalMessage(event) {
            if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
              runIfPresent(+event.data.slice(messagePrefix.length));
            }
          };

          if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
          } else {
            global.attachEvent("onmessage", onGlobalMessage);
          }

          registerImmediate = function registerImmediate(handle) {
            global.postMessage(messagePrefix + handle, "*");
          };
        }

        function installMessageChannelImplementation() {
          var channel = new MessageChannel();

          channel.port1.onmessage = function (event) {
            var handle = event.data;
            runIfPresent(handle);
          };

          registerImmediate = function registerImmediate(handle) {
            channel.port2.postMessage(handle);
          };
        }

        function installReadyStateChangeImplementation() {
          var html = doc.documentElement;

          registerImmediate = function registerImmediate(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");

            script.onreadystatechange = function () {
              runIfPresent(handle);
              script.onreadystatechange = null;
              html.removeChild(script);
              script = null;
            };

            html.appendChild(script);
          };
        }

        function installSetTimeoutImplementation() {
          registerImmediate = function registerImmediate(handle) {
            setTimeout(runIfPresent, 0, handle);
          };
        } // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.


        var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
        attachTo = attachTo && attachTo.setTimeout ? attachTo : global; // Don't get fooled by e.g. browserify environments.

        if ({}.toString.call(global.process) === "[object process]") {
          // For Node.js before 0.9
          installNextTickImplementation();
        } else if (canUsePostMessage()) {
          // For non-IE10 modern browsers
          installPostMessageImplementation();
        } else if (global.MessageChannel) {
          // For web workers, where supported
          installMessageChannelImplementation();
        } else if (doc && "onreadystatechange" in doc.createElement("script")) {
          // For IE 6–8
          installReadyStateChangeImplementation();
        } else {
          // For older browsers
          installSetTimeoutImplementation();
        }

        attachTo.setImmediate = setImmediate;
        attachTo.clearImmediate = clearImmediate;
      })(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self);
      /* WEBPACK VAR INJECTION */

    }).call(this, __webpack_require__(
    /*! ./../webpack/buildin/global.js */
    "./node_modules/webpack/buildin/global.js"), __webpack_require__(
    /*! ./../process/browser.js */
    "./node_modules/process/browser.js"));
    /***/
  },

  /***/
  "./node_modules/socket.io-client/lib/index.js":
  /*!****************************************************!*\
    !*** ./node_modules/socket.io-client/lib/index.js ***!
    \****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesSocketIoClientLibIndexJs(module, exports, __webpack_require__) {
    /**
     * Module dependencies.
     */
    var url = __webpack_require__(
    /*! ./url */
    "./node_modules/socket.io-client/lib/url.js");

    var parser = __webpack_require__(
    /*! socket.io-parser */
    "./node_modules/socket.io-parser/index.js");

    var Manager = __webpack_require__(
    /*! ./manager */
    "./node_modules/socket.io-client/lib/manager.js");

    var debug = __webpack_require__(
    /*! debug */
    "./node_modules/debug/src/browser.js")('socket.io-client');
    /**
     * Module exports.
     */


    module.exports = exports = lookup;
    /**
     * Managers cache.
     */

    var cache = exports.managers = {};
    /**
     * Looks up an existing `Manager` for multiplexing.
     * If the user summons:
     *
     *   `io('http://localhost/a');`
     *   `io('http://localhost/b');`
     *
     * We reuse the existing instance based on same scheme/port/host,
     * and we initialize sockets for each namespace.
     *
     * @api public
     */

    function lookup(uri, opts) {
      if (typeof uri === 'object') {
        opts = uri;
        uri = undefined;
      }

      opts = opts || {};
      var parsed = url(uri);
      var source = parsed.source;
      var id = parsed.id;
      var path = parsed.path;
      var sameNamespace = cache[id] && path in cache[id].nsps;
      var newConnection = opts.forceNew || opts['force new connection'] || false === opts.multiplex || sameNamespace;
      var io;

      if (newConnection) {
        debug('ignoring socket cache for %s', source);
        io = Manager(source, opts);
      } else {
        if (!cache[id]) {
          debug('new io instance for %s', source);
          cache[id] = Manager(source, opts);
        }

        io = cache[id];
      }

      if (parsed.query && !opts.query) {
        opts.query = parsed.query;
      }

      return io.socket(parsed.path, opts);
    }
    /**
     * Protocol version.
     *
     * @api public
     */


    exports.protocol = parser.protocol;
    /**
     * `connect`.
     *
     * @param {String} uri
     * @api public
     */

    exports.connect = lookup;
    /**
     * Expose constructors for standalone build.
     *
     * @api public
     */

    exports.Manager = __webpack_require__(
    /*! ./manager */
    "./node_modules/socket.io-client/lib/manager.js");
    exports.Socket = __webpack_require__(
    /*! ./socket */
    "./node_modules/socket.io-client/lib/socket.js");
    /***/
  },

  /***/
  "./node_modules/socket.io-client/lib/manager.js":
  /*!******************************************************!*\
    !*** ./node_modules/socket.io-client/lib/manager.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesSocketIoClientLibManagerJs(module, exports, __webpack_require__) {
    /**
     * Module dependencies.
     */
    var eio = __webpack_require__(
    /*! engine.io-client */
    "./node_modules/engine.io-client/lib/index.js");

    var Socket = __webpack_require__(
    /*! ./socket */
    "./node_modules/socket.io-client/lib/socket.js");

    var Emitter = __webpack_require__(
    /*! component-emitter */
    "./node_modules/component-emitter/index.js");

    var parser = __webpack_require__(
    /*! socket.io-parser */
    "./node_modules/socket.io-parser/index.js");

    var on = __webpack_require__(
    /*! ./on */
    "./node_modules/socket.io-client/lib/on.js");

    var bind = __webpack_require__(
    /*! component-bind */
    "./node_modules/component-bind/index.js");

    var debug = __webpack_require__(
    /*! debug */
    "./node_modules/debug/src/browser.js")('socket.io-client:manager');

    var indexOf = __webpack_require__(
    /*! indexof */
    "./node_modules/indexof/index.js");

    var Backoff = __webpack_require__(
    /*! backo2 */
    "./node_modules/backo2/index.js");
    /**
     * IE6+ hasOwnProperty
     */


    var has = Object.prototype.hasOwnProperty;
    /**
     * Module exports
     */

    module.exports = Manager;
    /**
     * `Manager` constructor.
     *
     * @param {String} engine instance or engine uri/opts
     * @param {Object} options
     * @api public
     */

    function Manager(uri, opts) {
      if (!(this instanceof Manager)) return new Manager(uri, opts);

      if (uri && 'object' === typeof uri) {
        opts = uri;
        uri = undefined;
      }

      opts = opts || {};
      opts.path = opts.path || '/socket.io';
      this.nsps = {};
      this.subs = [];
      this.opts = opts;
      this.reconnection(opts.reconnection !== false);
      this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
      this.reconnectionDelay(opts.reconnectionDelay || 1000);
      this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
      this.randomizationFactor(opts.randomizationFactor || 0.5);
      this.backoff = new Backoff({
        min: this.reconnectionDelay(),
        max: this.reconnectionDelayMax(),
        jitter: this.randomizationFactor()
      });
      this.timeout(null == opts.timeout ? 20000 : opts.timeout);
      this.readyState = 'closed';
      this.uri = uri;
      this.connecting = [];
      this.lastPing = null;
      this.encoding = false;
      this.packetBuffer = [];

      var _parser = opts.parser || parser;

      this.encoder = new _parser.Encoder();
      this.decoder = new _parser.Decoder();
      this.autoConnect = opts.autoConnect !== false;
      if (this.autoConnect) this.open();
    }
    /**
     * Propagate given event to sockets and emit on `this`
     *
     * @api private
     */


    Manager.prototype.emitAll = function () {
      this.emit.apply(this, arguments);

      for (var nsp in this.nsps) {
        if (has.call(this.nsps, nsp)) {
          this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
        }
      }
    };
    /**
     * Update `socket.id` of all sockets
     *
     * @api private
     */


    Manager.prototype.updateSocketIds = function () {
      for (var nsp in this.nsps) {
        if (has.call(this.nsps, nsp)) {
          this.nsps[nsp].id = this.generateId(nsp);
        }
      }
    };
    /**
     * generate `socket.id` for the given `nsp`
     *
     * @param {String} nsp
     * @return {String}
     * @api private
     */


    Manager.prototype.generateId = function (nsp) {
      return (nsp === '/' ? '' : nsp + '#') + this.engine.id;
    };
    /**
     * Mix in `Emitter`.
     */


    Emitter(Manager.prototype);
    /**
     * Sets the `reconnection` config.
     *
     * @param {Boolean} true/false if it should automatically reconnect
     * @return {Manager} self or value
     * @api public
     */

    Manager.prototype.reconnection = function (v) {
      if (!arguments.length) return this._reconnection;
      this._reconnection = !!v;
      return this;
    };
    /**
     * Sets the reconnection attempts config.
     *
     * @param {Number} max reconnection attempts before giving up
     * @return {Manager} self or value
     * @api public
     */


    Manager.prototype.reconnectionAttempts = function (v) {
      if (!arguments.length) return this._reconnectionAttempts;
      this._reconnectionAttempts = v;
      return this;
    };
    /**
     * Sets the delay between reconnections.
     *
     * @param {Number} delay
     * @return {Manager} self or value
     * @api public
     */


    Manager.prototype.reconnectionDelay = function (v) {
      if (!arguments.length) return this._reconnectionDelay;
      this._reconnectionDelay = v;
      this.backoff && this.backoff.setMin(v);
      return this;
    };

    Manager.prototype.randomizationFactor = function (v) {
      if (!arguments.length) return this._randomizationFactor;
      this._randomizationFactor = v;
      this.backoff && this.backoff.setJitter(v);
      return this;
    };
    /**
     * Sets the maximum delay between reconnections.
     *
     * @param {Number} delay
     * @return {Manager} self or value
     * @api public
     */


    Manager.prototype.reconnectionDelayMax = function (v) {
      if (!arguments.length) return this._reconnectionDelayMax;
      this._reconnectionDelayMax = v;
      this.backoff && this.backoff.setMax(v);
      return this;
    };
    /**
     * Sets the connection timeout. `false` to disable
     *
     * @return {Manager} self or value
     * @api public
     */


    Manager.prototype.timeout = function (v) {
      if (!arguments.length) return this._timeout;
      this._timeout = v;
      return this;
    };
    /**
     * Starts trying to reconnect if reconnection is enabled and we have not
     * started reconnecting yet
     *
     * @api private
     */


    Manager.prototype.maybeReconnectOnOpen = function () {
      // Only try to reconnect if it's the first time we're connecting
      if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
        // keeps reconnection from firing twice for the same reconnection loop
        this.reconnect();
      }
    };
    /**
     * Sets the current transport `socket`.
     *
     * @param {Function} optional, callback
     * @return {Manager} self
     * @api public
     */


    Manager.prototype.open = Manager.prototype.connect = function (fn, opts) {
      debug('readyState %s', this.readyState);
      if (~this.readyState.indexOf('open')) return this;
      debug('opening %s', this.uri);
      this.engine = eio(this.uri, this.opts);
      var socket = this.engine;
      var self = this;
      this.readyState = 'opening';
      this.skipReconnect = false; // emit `open`

      var openSub = on(socket, 'open', function () {
        self.onopen();
        fn && fn();
      }); // emit `connect_error`

      var errorSub = on(socket, 'error', function (data) {
        debug('connect_error');
        self.cleanup();
        self.readyState = 'closed';
        self.emitAll('connect_error', data);

        if (fn) {
          var err = new Error('Connection error');
          err.data = data;
          fn(err);
        } else {
          // Only do this if there is no fn to handle the error
          self.maybeReconnectOnOpen();
        }
      }); // emit `connect_timeout`

      if (false !== this._timeout) {
        var timeout = this._timeout;
        debug('connect attempt will timeout after %d', timeout); // set timer

        var timer = setTimeout(function () {
          debug('connect attempt timed out after %d', timeout);
          openSub.destroy();
          socket.close();
          socket.emit('error', 'timeout');
          self.emitAll('connect_timeout', timeout);
        }, timeout);
        this.subs.push({
          destroy: function destroy() {
            clearTimeout(timer);
          }
        });
      }

      this.subs.push(openSub);
      this.subs.push(errorSub);
      return this;
    };
    /**
     * Called upon transport open.
     *
     * @api private
     */


    Manager.prototype.onopen = function () {
      debug('open'); // clear old subs

      this.cleanup(); // mark as open

      this.readyState = 'open';
      this.emit('open'); // add new subs

      var socket = this.engine;
      this.subs.push(on(socket, 'data', bind(this, 'ondata')));
      this.subs.push(on(socket, 'ping', bind(this, 'onping')));
      this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
      this.subs.push(on(socket, 'error', bind(this, 'onerror')));
      this.subs.push(on(socket, 'close', bind(this, 'onclose')));
      this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
    };
    /**
     * Called upon a ping.
     *
     * @api private
     */


    Manager.prototype.onping = function () {
      this.lastPing = new Date();
      this.emitAll('ping');
    };
    /**
     * Called upon a packet.
     *
     * @api private
     */


    Manager.prototype.onpong = function () {
      this.emitAll('pong', new Date() - this.lastPing);
    };
    /**
     * Called with data.
     *
     * @api private
     */


    Manager.prototype.ondata = function (data) {
      this.decoder.add(data);
    };
    /**
     * Called when parser fully decodes a packet.
     *
     * @api private
     */


    Manager.prototype.ondecoded = function (packet) {
      this.emit('packet', packet);
    };
    /**
     * Called upon socket error.
     *
     * @api private
     */


    Manager.prototype.onerror = function (err) {
      debug('error', err);
      this.emitAll('error', err);
    };
    /**
     * Creates a new socket for the given `nsp`.
     *
     * @return {Socket}
     * @api public
     */


    Manager.prototype.socket = function (nsp, opts) {
      var socket = this.nsps[nsp];

      if (!socket) {
        socket = new Socket(this, nsp, opts);
        this.nsps[nsp] = socket;
        var self = this;
        socket.on('connecting', onConnecting);
        socket.on('connect', function () {
          socket.id = self.generateId(nsp);
        });

        if (this.autoConnect) {
          // manually call here since connecting event is fired before listening
          onConnecting();
        }
      }

      function onConnecting() {
        if (!~indexOf(self.connecting, socket)) {
          self.connecting.push(socket);
        }
      }

      return socket;
    };
    /**
     * Called upon a socket close.
     *
     * @param {Socket} socket
     */


    Manager.prototype.destroy = function (socket) {
      var index = indexOf(this.connecting, socket);
      if (~index) this.connecting.splice(index, 1);
      if (this.connecting.length) return;
      this.close();
    };
    /**
     * Writes a packet.
     *
     * @param {Object} packet
     * @api private
     */


    Manager.prototype.packet = function (packet) {
      debug('writing packet %j', packet);
      var self = this;
      if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

      if (!self.encoding) {
        // encode, then write to engine with result
        self.encoding = true;
        this.encoder.encode(packet, function (encodedPackets) {
          for (var i = 0; i < encodedPackets.length; i++) {
            self.engine.write(encodedPackets[i], packet.options);
          }

          self.encoding = false;
          self.processPacketQueue();
        });
      } else {
        // add packet to the queue
        self.packetBuffer.push(packet);
      }
    };
    /**
     * If packet buffer is non-empty, begins encoding the
     * next packet in line.
     *
     * @api private
     */


    Manager.prototype.processPacketQueue = function () {
      if (this.packetBuffer.length > 0 && !this.encoding) {
        var pack = this.packetBuffer.shift();
        this.packet(pack);
      }
    };
    /**
     * Clean up transport subscriptions and packet buffer.
     *
     * @api private
     */


    Manager.prototype.cleanup = function () {
      debug('cleanup');
      var subsLength = this.subs.length;

      for (var i = 0; i < subsLength; i++) {
        var sub = this.subs.shift();
        sub.destroy();
      }

      this.packetBuffer = [];
      this.encoding = false;
      this.lastPing = null;
      this.decoder.destroy();
    };
    /**
     * Close the current socket.
     *
     * @api private
     */


    Manager.prototype.close = Manager.prototype.disconnect = function () {
      debug('disconnect');
      this.skipReconnect = true;
      this.reconnecting = false;

      if ('opening' === this.readyState) {
        // `onclose` will not fire because
        // an open event never happened
        this.cleanup();
      }

      this.backoff.reset();
      this.readyState = 'closed';
      if (this.engine) this.engine.close();
    };
    /**
     * Called upon engine close.
     *
     * @api private
     */


    Manager.prototype.onclose = function (reason) {
      debug('onclose');
      this.cleanup();
      this.backoff.reset();
      this.readyState = 'closed';
      this.emit('close', reason);

      if (this._reconnection && !this.skipReconnect) {
        this.reconnect();
      }
    };
    /**
     * Attempt a reconnection.
     *
     * @api private
     */


    Manager.prototype.reconnect = function () {
      if (this.reconnecting || this.skipReconnect) return this;
      var self = this;

      if (this.backoff.attempts >= this._reconnectionAttempts) {
        debug('reconnect failed');
        this.backoff.reset();
        this.emitAll('reconnect_failed');
        this.reconnecting = false;
      } else {
        var delay = this.backoff.duration();
        debug('will wait %dms before reconnect attempt', delay);
        this.reconnecting = true;
        var timer = setTimeout(function () {
          if (self.skipReconnect) return;
          debug('attempting reconnect');
          self.emitAll('reconnect_attempt', self.backoff.attempts);
          self.emitAll('reconnecting', self.backoff.attempts); // check again for the case socket closed in above events

          if (self.skipReconnect) return;
          self.open(function (err) {
            if (err) {
              debug('reconnect attempt error');
              self.reconnecting = false;
              self.reconnect();
              self.emitAll('reconnect_error', err.data);
            } else {
              debug('reconnect success');
              self.onreconnect();
            }
          });
        }, delay);
        this.subs.push({
          destroy: function destroy() {
            clearTimeout(timer);
          }
        });
      }
    };
    /**
     * Called upon successful reconnect.
     *
     * @api private
     */


    Manager.prototype.onreconnect = function () {
      var attempt = this.backoff.attempts;
      this.reconnecting = false;
      this.backoff.reset();
      this.updateSocketIds();
      this.emitAll('reconnect', attempt);
    };
    /***/

  },

  /***/
  "./node_modules/socket.io-client/lib/on.js":
  /*!*************************************************!*\
    !*** ./node_modules/socket.io-client/lib/on.js ***!
    \*************************************************/

  /*! no static exports found */

  /***/
  function node_modulesSocketIoClientLibOnJs(module, exports) {
    /**
     * Module exports.
     */
    module.exports = on;
    /**
     * Helper for subscriptions.
     *
     * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
     * @param {String} event name
     * @param {Function} callback
     * @api public
     */

    function on(obj, ev, fn) {
      obj.on(ev, fn);
      return {
        destroy: function destroy() {
          obj.removeListener(ev, fn);
        }
      };
    }
    /***/

  },

  /***/
  "./node_modules/socket.io-client/lib/socket.js":
  /*!*****************************************************!*\
    !*** ./node_modules/socket.io-client/lib/socket.js ***!
    \*****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesSocketIoClientLibSocketJs(module, exports, __webpack_require__) {
    /**
     * Module dependencies.
     */
    var parser = __webpack_require__(
    /*! socket.io-parser */
    "./node_modules/socket.io-parser/index.js");

    var Emitter = __webpack_require__(
    /*! component-emitter */
    "./node_modules/component-emitter/index.js");

    var toArray = __webpack_require__(
    /*! to-array */
    "./node_modules/to-array/index.js");

    var on = __webpack_require__(
    /*! ./on */
    "./node_modules/socket.io-client/lib/on.js");

    var bind = __webpack_require__(
    /*! component-bind */
    "./node_modules/component-bind/index.js");

    var debug = __webpack_require__(
    /*! debug */
    "./node_modules/debug/src/browser.js")('socket.io-client:socket');

    var parseqs = __webpack_require__(
    /*! parseqs */
    "./node_modules/parseqs/index.js");
    /**
     * Module exports.
     */


    module.exports = exports = Socket;
    /**
     * Internal events (blacklisted).
     * These events can't be emitted by the user.
     *
     * @api private
     */

    var events = {
      connect: 1,
      connect_error: 1,
      connect_timeout: 1,
      connecting: 1,
      disconnect: 1,
      error: 1,
      reconnect: 1,
      reconnect_attempt: 1,
      reconnect_failed: 1,
      reconnect_error: 1,
      reconnecting: 1,
      ping: 1,
      pong: 1
    };
    /**
     * Shortcut to `Emitter#emit`.
     */

    var emit = Emitter.prototype.emit;
    /**
     * `Socket` constructor.
     *
     * @api public
     */

    function Socket(io, nsp, opts) {
      this.io = io;
      this.nsp = nsp;
      this.json = this; // compat

      this.ids = 0;
      this.acks = {};
      this.receiveBuffer = [];
      this.sendBuffer = [];
      this.connected = false;
      this.disconnected = true;

      if (opts && opts.query) {
        this.query = opts.query;
      }

      if (this.io.autoConnect) this.open();
    }
    /**
     * Mix in `Emitter`.
     */


    Emitter(Socket.prototype);
    /**
     * Subscribe to open, close and packet events
     *
     * @api private
     */

    Socket.prototype.subEvents = function () {
      if (this.subs) return;
      var io = this.io;
      this.subs = [on(io, 'open', bind(this, 'onopen')), on(io, 'packet', bind(this, 'onpacket')), on(io, 'close', bind(this, 'onclose'))];
    };
    /**
     * "Opens" the socket.
     *
     * @api public
     */


    Socket.prototype.open = Socket.prototype.connect = function () {
      if (this.connected) return this;
      this.subEvents();
      this.io.open(); // ensure open

      if ('open' === this.io.readyState) this.onopen();
      this.emit('connecting');
      return this;
    };
    /**
     * Sends a `message` event.
     *
     * @return {Socket} self
     * @api public
     */


    Socket.prototype.send = function () {
      var args = toArray(arguments);
      args.unshift('message');
      this.emit.apply(this, args);
      return this;
    };
    /**
     * Override `emit`.
     * If the event is in `events`, it's emitted normally.
     *
     * @param {String} event name
     * @return {Socket} self
     * @api public
     */


    Socket.prototype.emit = function (ev) {
      if (events.hasOwnProperty(ev)) {
        emit.apply(this, arguments);
        return this;
      }

      var args = toArray(arguments);
      var packet = {
        type: parser.EVENT,
        data: args
      };
      packet.options = {};
      packet.options.compress = !this.flags || false !== this.flags.compress; // event ack callback

      if ('function' === typeof args[args.length - 1]) {
        debug('emitting packet with ack id %d', this.ids);
        this.acks[this.ids] = args.pop();
        packet.id = this.ids++;
      }

      if (this.connected) {
        this.packet(packet);
      } else {
        this.sendBuffer.push(packet);
      }

      delete this.flags;
      return this;
    };
    /**
     * Sends a packet.
     *
     * @param {Object} packet
     * @api private
     */


    Socket.prototype.packet = function (packet) {
      packet.nsp = this.nsp;
      this.io.packet(packet);
    };
    /**
     * Called upon engine `open`.
     *
     * @api private
     */


    Socket.prototype.onopen = function () {
      debug('transport is open - connecting'); // write connect packet if necessary

      if ('/' !== this.nsp) {
        if (this.query) {
          var query = typeof this.query === 'object' ? parseqs.encode(this.query) : this.query;
          debug('sending connect packet with query %s', query);
          this.packet({
            type: parser.CONNECT,
            query: query
          });
        } else {
          this.packet({
            type: parser.CONNECT
          });
        }
      }
    };
    /**
     * Called upon engine `close`.
     *
     * @param {String} reason
     * @api private
     */


    Socket.prototype.onclose = function (reason) {
      debug('close (%s)', reason);
      this.connected = false;
      this.disconnected = true;
      delete this.id;
      this.emit('disconnect', reason);
    };
    /**
     * Called with socket packet.
     *
     * @param {Object} packet
     * @api private
     */


    Socket.prototype.onpacket = function (packet) {
      if (packet.nsp !== this.nsp) return;

      switch (packet.type) {
        case parser.CONNECT:
          this.onconnect();
          break;

        case parser.EVENT:
          this.onevent(packet);
          break;

        case parser.BINARY_EVENT:
          this.onevent(packet);
          break;

        case parser.ACK:
          this.onack(packet);
          break;

        case parser.BINARY_ACK:
          this.onack(packet);
          break;

        case parser.DISCONNECT:
          this.ondisconnect();
          break;

        case parser.ERROR:
          this.emit('error', packet.data);
          break;
      }
    };
    /**
     * Called upon a server event.
     *
     * @param {Object} packet
     * @api private
     */


    Socket.prototype.onevent = function (packet) {
      var args = packet.data || [];
      debug('emitting event %j', args);

      if (null != packet.id) {
        debug('attaching ack callback to event');
        args.push(this.ack(packet.id));
      }

      if (this.connected) {
        emit.apply(this, args);
      } else {
        this.receiveBuffer.push(args);
      }
    };
    /**
     * Produces an ack callback to emit with an event.
     *
     * @api private
     */


    Socket.prototype.ack = function (id) {
      var self = this;
      var sent = false;
      return function () {
        // prevent double callbacks
        if (sent) return;
        sent = true;
        var args = toArray(arguments);
        debug('sending ack %j', args);
        self.packet({
          type: parser.ACK,
          id: id,
          data: args
        });
      };
    };
    /**
     * Called upon a server acknowlegement.
     *
     * @param {Object} packet
     * @api private
     */


    Socket.prototype.onack = function (packet) {
      var ack = this.acks[packet.id];

      if ('function' === typeof ack) {
        debug('calling ack %s with %j', packet.id, packet.data);
        ack.apply(this, packet.data);
        delete this.acks[packet.id];
      } else {
        debug('bad ack %s', packet.id);
      }
    };
    /**
     * Called upon server connect.
     *
     * @api private
     */


    Socket.prototype.onconnect = function () {
      this.connected = true;
      this.disconnected = false;
      this.emit('connect');
      this.emitBuffered();
    };
    /**
     * Emit buffered events (received and emitted).
     *
     * @api private
     */


    Socket.prototype.emitBuffered = function () {
      var i;

      for (i = 0; i < this.receiveBuffer.length; i++) {
        emit.apply(this, this.receiveBuffer[i]);
      }

      this.receiveBuffer = [];

      for (i = 0; i < this.sendBuffer.length; i++) {
        this.packet(this.sendBuffer[i]);
      }

      this.sendBuffer = [];
    };
    /**
     * Called upon server disconnect.
     *
     * @api private
     */


    Socket.prototype.ondisconnect = function () {
      debug('server disconnect (%s)', this.nsp);
      this.destroy();
      this.onclose('io server disconnect');
    };
    /**
     * Called upon forced client/server side disconnections,
     * this method ensures the manager stops tracking us and
     * that reconnections don't get triggered for this.
     *
     * @api private.
     */


    Socket.prototype.destroy = function () {
      if (this.subs) {
        // clean subscriptions to avoid reconnections
        for (var i = 0; i < this.subs.length; i++) {
          this.subs[i].destroy();
        }

        this.subs = null;
      }

      this.io.destroy(this);
    };
    /**
     * Disconnects the socket manually.
     *
     * @return {Socket} self
     * @api public
     */


    Socket.prototype.close = Socket.prototype.disconnect = function () {
      if (this.connected) {
        debug('performing disconnect (%s)', this.nsp);
        this.packet({
          type: parser.DISCONNECT
        });
      } // remove socket from pool


      this.destroy();

      if (this.connected) {
        // fire events
        this.onclose('io client disconnect');
      }

      return this;
    };
    /**
     * Sets the compress flag.
     *
     * @param {Boolean} if `true`, compresses the sending data
     * @return {Socket} self
     * @api public
     */


    Socket.prototype.compress = function (compress) {
      this.flags = this.flags || {};
      this.flags.compress = compress;
      return this;
    };
    /***/

  },

  /***/
  "./node_modules/socket.io-client/lib/url.js":
  /*!**************************************************!*\
    !*** ./node_modules/socket.io-client/lib/url.js ***!
    \**************************************************/

  /*! no static exports found */

  /***/
  function node_modulesSocketIoClientLibUrlJs(module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (global) {
      /**
       * Module dependencies.
       */
      var parseuri = __webpack_require__(
      /*! parseuri */
      "./node_modules/parseuri/index.js");

      var debug = __webpack_require__(
      /*! debug */
      "./node_modules/debug/src/browser.js")('socket.io-client:url');
      /**
       * Module exports.
       */


      module.exports = url;
      /**
       * URL parser.
       *
       * @param {String} url
       * @param {Object} An object meant to mimic window.location.
       *                 Defaults to window.location.
       * @api public
       */

      function url(uri, loc) {
        var obj = uri; // default to window.location

        loc = loc || global.location;
        if (null == uri) uri = loc.protocol + '//' + loc.host; // relative path support

        if ('string' === typeof uri) {
          if ('/' === uri.charAt(0)) {
            if ('/' === uri.charAt(1)) {
              uri = loc.protocol + uri;
            } else {
              uri = loc.host + uri;
            }
          }

          if (!/^(https?|wss?):\/\//.test(uri)) {
            debug('protocol-less url %s', uri);

            if ('undefined' !== typeof loc) {
              uri = loc.protocol + '//' + uri;
            } else {
              uri = 'https://' + uri;
            }
          } // parse


          debug('parse %s', uri);
          obj = parseuri(uri);
        } // make sure we treat `localhost:80` and `localhost` equally


        if (!obj.port) {
          if (/^(http|ws)$/.test(obj.protocol)) {
            obj.port = '80';
          } else if (/^(http|ws)s$/.test(obj.protocol)) {
            obj.port = '443';
          }
        }

        obj.path = obj.path || '/';
        var ipv6 = obj.host.indexOf(':') !== -1;
        var host = ipv6 ? '[' + obj.host + ']' : obj.host; // define unique id

        obj.id = obj.protocol + '://' + host + ':' + obj.port; // define href

        obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : ':' + obj.port);
        return obj;
      }
      /* WEBPACK VAR INJECTION */

    }).call(this, __webpack_require__(
    /*! ./../../webpack/buildin/global.js */
    "./node_modules/webpack/buildin/global.js"));
    /***/
  },

  /***/
  "./node_modules/socket.io-parser/binary.js":
  /*!*************************************************!*\
    !*** ./node_modules/socket.io-parser/binary.js ***!
    \*************************************************/

  /*! no static exports found */

  /***/
  function node_modulesSocketIoParserBinaryJs(module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (global) {
      /*global Blob,File*/

      /**
       * Module requirements
       */
      var isArray = __webpack_require__(
      /*! isarray */
      "./node_modules/socket.io-parser/node_modules/isarray/index.js");

      var isBuf = __webpack_require__(
      /*! ./is-buffer */
      "./node_modules/socket.io-parser/is-buffer.js");

      var toString = Object.prototype.toString;
      var withNativeBlob = typeof global.Blob === 'function' || toString.call(global.Blob) === '[object BlobConstructor]';
      var withNativeFile = typeof global.File === 'function' || toString.call(global.File) === '[object FileConstructor]';
      /**
       * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
       * Anything with blobs or files should be fed through removeBlobs before coming
       * here.
       *
       * @param {Object} packet - socket.io event packet
       * @return {Object} with deconstructed packet and list of buffers
       * @api public
       */

      exports.deconstructPacket = function (packet) {
        var buffers = [];
        var packetData = packet.data;
        var pack = packet;
        pack.data = _deconstructPacket(packetData, buffers);
        pack.attachments = buffers.length; // number of binary 'attachments'

        return {
          packet: pack,
          buffers: buffers
        };
      };

      function _deconstructPacket(data, buffers) {
        if (!data) return data;

        if (isBuf(data)) {
          var placeholder = {
            _placeholder: true,
            num: buffers.length
          };
          buffers.push(data);
          return placeholder;
        } else if (isArray(data)) {
          var newData = new Array(data.length);

          for (var i = 0; i < data.length; i++) {
            newData[i] = _deconstructPacket(data[i], buffers);
          }

          return newData;
        } else if (typeof data === 'object' && !(data instanceof Date)) {
          var newData = {};

          for (var key in data) {
            newData[key] = _deconstructPacket(data[key], buffers);
          }

          return newData;
        }

        return data;
      }
      /**
       * Reconstructs a binary packet from its placeholder packet and buffers
       *
       * @param {Object} packet - event packet with placeholders
       * @param {Array} buffers - binary buffers to put in placeholder positions
       * @return {Object} reconstructed packet
       * @api public
       */


      exports.reconstructPacket = function (packet, buffers) {
        packet.data = _reconstructPacket(packet.data, buffers);
        packet.attachments = undefined; // no longer useful

        return packet;
      };

      function _reconstructPacket(data, buffers) {
        if (!data) return data;

        if (data && data._placeholder) {
          return buffers[data.num]; // appropriate buffer (should be natural order anyway)
        } else if (isArray(data)) {
          for (var i = 0; i < data.length; i++) {
            data[i] = _reconstructPacket(data[i], buffers);
          }
        } else if (typeof data === 'object') {
          for (var key in data) {
            data[key] = _reconstructPacket(data[key], buffers);
          }
        }

        return data;
      }
      /**
       * Asynchronously removes Blobs or Files from data via
       * FileReader's readAsArrayBuffer method. Used before encoding
       * data as msgpack. Calls callback with the blobless data.
       *
       * @param {Object} data
       * @param {Function} callback
       * @api private
       */


      exports.removeBlobs = function (data, callback) {
        function _removeBlobs(obj, curKey, containingObject) {
          if (!obj) return obj; // convert any blob

          if (withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File) {
            pendingBlobs++; // async filereader

            var fileReader = new FileReader();

            fileReader.onload = function () {
              // this.result == arraybuffer
              if (containingObject) {
                containingObject[curKey] = this.result;
              } else {
                bloblessData = this.result;
              } // if nothing pending its callback time


              if (! --pendingBlobs) {
                callback(bloblessData);
              }
            };

            fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
          } else if (isArray(obj)) {
            // handle array
            for (var i = 0; i < obj.length; i++) {
              _removeBlobs(obj[i], i, obj);
            }
          } else if (typeof obj === 'object' && !isBuf(obj)) {
            // and object
            for (var key in obj) {
              _removeBlobs(obj[key], key, obj);
            }
          }
        }

        var pendingBlobs = 0;
        var bloblessData = data;

        _removeBlobs(bloblessData);

        if (!pendingBlobs) {
          callback(bloblessData);
        }
      };
      /* WEBPACK VAR INJECTION */

    }).call(this, __webpack_require__(
    /*! ./../webpack/buildin/global.js */
    "./node_modules/webpack/buildin/global.js"));
    /***/
  },

  /***/
  "./node_modules/socket.io-parser/index.js":
  /*!************************************************!*\
    !*** ./node_modules/socket.io-parser/index.js ***!
    \************************************************/

  /*! no static exports found */

  /***/
  function node_modulesSocketIoParserIndexJs(module, exports, __webpack_require__) {
    /**
     * Module dependencies.
     */
    var debug = __webpack_require__(
    /*! debug */
    "./node_modules/debug/src/browser.js")('socket.io-parser');

    var Emitter = __webpack_require__(
    /*! component-emitter */
    "./node_modules/component-emitter/index.js");

    var hasBin = __webpack_require__(
    /*! has-binary2 */
    "./node_modules/has-binary2/index.js");

    var binary = __webpack_require__(
    /*! ./binary */
    "./node_modules/socket.io-parser/binary.js");

    var isBuf = __webpack_require__(
    /*! ./is-buffer */
    "./node_modules/socket.io-parser/is-buffer.js");
    /**
     * Protocol version.
     *
     * @api public
     */


    exports.protocol = 4;
    /**
     * Packet types.
     *
     * @api public
     */

    exports.types = ['CONNECT', 'DISCONNECT', 'EVENT', 'ACK', 'ERROR', 'BINARY_EVENT', 'BINARY_ACK'];
    /**
     * Packet type `connect`.
     *
     * @api public
     */

    exports.CONNECT = 0;
    /**
     * Packet type `disconnect`.
     *
     * @api public
     */

    exports.DISCONNECT = 1;
    /**
     * Packet type `event`.
     *
     * @api public
     */

    exports.EVENT = 2;
    /**
     * Packet type `ack`.
     *
     * @api public
     */

    exports.ACK = 3;
    /**
     * Packet type `error`.
     *
     * @api public
     */

    exports.ERROR = 4;
    /**
     * Packet type 'binary event'
     *
     * @api public
     */

    exports.BINARY_EVENT = 5;
    /**
     * Packet type `binary ack`. For acks with binary arguments.
     *
     * @api public
     */

    exports.BINARY_ACK = 6;
    /**
     * Encoder constructor.
     *
     * @api public
     */

    exports.Encoder = Encoder;
    /**
     * Decoder constructor.
     *
     * @api public
     */

    exports.Decoder = Decoder;
    /**
     * A socket.io Encoder instance
     *
     * @api public
     */

    function Encoder() {}
    /**
     * Encode a packet as a single string if non-binary, or as a
     * buffer sequence, depending on packet type.
     *
     * @param {Object} obj - packet object
     * @param {Function} callback - function to handle encodings (likely engine.write)
     * @return Calls callback with Array of encodings
     * @api public
     */


    Encoder.prototype.encode = function (obj, callback) {
      if ((obj.type === exports.EVENT || obj.type === exports.ACK) && hasBin(obj.data)) {
        obj.type = obj.type === exports.EVENT ? exports.BINARY_EVENT : exports.BINARY_ACK;
      }

      debug('encoding packet %j', obj);

      if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
        encodeAsBinary(obj, callback);
      } else {
        var encoding = encodeAsString(obj);
        callback([encoding]);
      }
    };
    /**
     * Encode packet as string.
     *
     * @param {Object} packet
     * @return {String} encoded
     * @api private
     */


    function encodeAsString(obj) {
      // first is type
      var str = '' + obj.type; // attachments if we have them

      if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
        str += obj.attachments + '-';
      } // if we have a namespace other than `/`
      // we append it followed by a comma `,`


      if (obj.nsp && '/' !== obj.nsp) {
        str += obj.nsp + ',';
      } // immediately followed by the id


      if (null != obj.id) {
        str += obj.id;
      } // json data


      if (null != obj.data) {
        str += JSON.stringify(obj.data);
      }

      debug('encoded %j as %s', obj, str);
      return str;
    }
    /**
     * Encode packet as 'buffer sequence' by removing blobs, and
     * deconstructing packet into object with placeholders and
     * a list of buffers.
     *
     * @param {Object} packet
     * @return {Buffer} encoded
     * @api private
     */


    function encodeAsBinary(obj, callback) {
      function writeEncoding(bloblessData) {
        var deconstruction = binary.deconstructPacket(bloblessData);
        var pack = encodeAsString(deconstruction.packet);
        var buffers = deconstruction.buffers;
        buffers.unshift(pack); // add packet info to beginning of data list

        callback(buffers); // write all the buffers
      }

      binary.removeBlobs(obj, writeEncoding);
    }
    /**
     * A socket.io Decoder instance
     *
     * @return {Object} decoder
     * @api public
     */


    function Decoder() {
      this.reconstructor = null;
    }
    /**
     * Mix in `Emitter` with Decoder.
     */


    Emitter(Decoder.prototype);
    /**
     * Decodes an ecoded packet string into packet JSON.
     *
     * @param {String} obj - encoded packet
     * @return {Object} packet
     * @api public
     */

    Decoder.prototype.add = function (obj) {
      var packet;

      if (typeof obj === 'string') {
        packet = decodeString(obj);

        if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) {
          // binary packet's json
          this.reconstructor = new BinaryReconstructor(packet); // no attachments, labeled binary but no binary data to follow

          if (this.reconstructor.reconPack.attachments === 0) {
            this.emit('decoded', packet);
          }
        } else {
          // non-binary full packet
          this.emit('decoded', packet);
        }
      } else if (isBuf(obj) || obj.base64) {
        // raw binary data
        if (!this.reconstructor) {
          throw new Error('got binary data when not reconstructing a packet');
        } else {
          packet = this.reconstructor.takeBinaryData(obj);

          if (packet) {
            // received final buffer
            this.reconstructor = null;
            this.emit('decoded', packet);
          }
        }
      } else {
        throw new Error('Unknown type: ' + obj);
      }
    };
    /**
     * Decode a packet String (JSON data)
     *
     * @param {String} str
     * @return {Object} packet
     * @api private
     */


    function decodeString(str) {
      var i = 0; // look up type

      var p = {
        type: Number(str.charAt(0))
      };
      if (null == exports.types[p.type]) return error(); // look up attachments if type binary

      if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
        var buf = '';

        while (str.charAt(++i) !== '-') {
          buf += str.charAt(i);
          if (i == str.length) break;
        }

        if (buf != Number(buf) || str.charAt(i) !== '-') {
          throw new Error('Illegal attachments');
        }

        p.attachments = Number(buf);
      } // look up namespace (if any)


      if ('/' === str.charAt(i + 1)) {
        p.nsp = '';

        while (++i) {
          var c = str.charAt(i);
          if (',' === c) break;
          p.nsp += c;
          if (i === str.length) break;
        }
      } else {
        p.nsp = '/';
      } // look up id


      var next = str.charAt(i + 1);

      if ('' !== next && Number(next) == next) {
        p.id = '';

        while (++i) {
          var c = str.charAt(i);

          if (null == c || Number(c) != c) {
            --i;
            break;
          }

          p.id += str.charAt(i);
          if (i === str.length) break;
        }

        p.id = Number(p.id);
      } // look up json data


      if (str.charAt(++i)) {
        p = tryParse(p, str.substr(i));
      }

      debug('decoded %s as %j', str, p);
      return p;
    }

    function tryParse(p, str) {
      try {
        p.data = JSON.parse(str);
      } catch (e) {
        return error();
      }

      return p;
    }
    /**
     * Deallocates a parser's resources
     *
     * @api public
     */


    Decoder.prototype.destroy = function () {
      if (this.reconstructor) {
        this.reconstructor.finishedReconstruction();
      }
    };
    /**
     * A manager of a binary event's 'buffer sequence'. Should
     * be constructed whenever a packet of type BINARY_EVENT is
     * decoded.
     *
     * @param {Object} packet
     * @return {BinaryReconstructor} initialized reconstructor
     * @api private
     */


    function BinaryReconstructor(packet) {
      this.reconPack = packet;
      this.buffers = [];
    }
    /**
     * Method to be called when binary data received from connection
     * after a BINARY_EVENT packet.
     *
     * @param {Buffer | ArrayBuffer} binData - the raw binary data received
     * @return {null | Object} returns null if more binary data is expected or
     *   a reconstructed packet object if all buffers have been received.
     * @api private
     */


    BinaryReconstructor.prototype.takeBinaryData = function (binData) {
      this.buffers.push(binData);

      if (this.buffers.length === this.reconPack.attachments) {
        // done with buffer list
        var packet = binary.reconstructPacket(this.reconPack, this.buffers);
        this.finishedReconstruction();
        return packet;
      }

      return null;
    };
    /**
     * Cleans up binary packet reconstruction variables.
     *
     * @api private
     */


    BinaryReconstructor.prototype.finishedReconstruction = function () {
      this.reconPack = null;
      this.buffers = [];
    };

    function error() {
      return {
        type: exports.ERROR,
        data: 'parser error'
      };
    }
    /***/

  },

  /***/
  "./node_modules/socket.io-parser/is-buffer.js":
  /*!****************************************************!*\
    !*** ./node_modules/socket.io-parser/is-buffer.js ***!
    \****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesSocketIoParserIsBufferJs(module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (global) {
      module.exports = isBuf;
      /**
       * Returns true if obj is a buffer or an arraybuffer.
       *
       * @api private
       */

      function isBuf(obj) {
        return global.Buffer && global.Buffer.isBuffer(obj) || global.ArrayBuffer && obj instanceof ArrayBuffer;
      }
      /* WEBPACK VAR INJECTION */

    }).call(this, __webpack_require__(
    /*! ./../webpack/buildin/global.js */
    "./node_modules/webpack/buildin/global.js"));
    /***/
  },

  /***/
  "./node_modules/socket.io-parser/node_modules/isarray/index.js":
  /*!*********************************************************************!*\
    !*** ./node_modules/socket.io-parser/node_modules/isarray/index.js ***!
    \*********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesSocketIoParserNode_modulesIsarrayIndexJs(module, exports) {
    var toString = {}.toString;

    module.exports = Array.isArray || function (arr) {
      return toString.call(arr) == '[object Array]';
    };
    /***/

  },

  /***/
  "./node_modules/timers-browserify/main.js":
  /*!************************************************!*\
    !*** ./node_modules/timers-browserify/main.js ***!
    \************************************************/

  /*! no static exports found */

  /***/
  function node_modulesTimersBrowserifyMainJs(module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (global) {
      var scope = typeof global !== "undefined" && global || typeof self !== "undefined" && self || window;
      var apply = Function.prototype.apply; // DOM APIs, for completeness

      exports.setTimeout = function () {
        return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
      };

      exports.setInterval = function () {
        return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
      };

      exports.clearTimeout = exports.clearInterval = function (timeout) {
        if (timeout) {
          timeout.close();
        }
      };

      function Timeout(id, clearFn) {
        this._id = id;
        this._clearFn = clearFn;
      }

      Timeout.prototype.unref = Timeout.prototype.ref = function () {};

      Timeout.prototype.close = function () {
        this._clearFn.call(scope, this._id);
      }; // Does not start the time, just sets up the members needed.


      exports.enroll = function (item, msecs) {
        clearTimeout(item._idleTimeoutId);
        item._idleTimeout = msecs;
      };

      exports.unenroll = function (item) {
        clearTimeout(item._idleTimeoutId);
        item._idleTimeout = -1;
      };

      exports._unrefActive = exports.active = function (item) {
        clearTimeout(item._idleTimeoutId);
        var msecs = item._idleTimeout;

        if (msecs >= 0) {
          item._idleTimeoutId = setTimeout(function onTimeout() {
            if (item._onTimeout) item._onTimeout();
          }, msecs);
        }
      }; // setimmediate attaches itself to the global object


      __webpack_require__(
      /*! setimmediate */
      "./node_modules/setimmediate/setImmediate.js"); // On some exotic environments, it's not clear which object `setimmediate` was
      // able to install onto.  Search each possibility in the same order as the
      // `setimmediate` library.


      exports.setImmediate = typeof self !== "undefined" && self.setImmediate || typeof global !== "undefined" && global.setImmediate || this && this.setImmediate;
      exports.clearImmediate = typeof self !== "undefined" && self.clearImmediate || typeof global !== "undefined" && global.clearImmediate || this && this.clearImmediate;
      /* WEBPACK VAR INJECTION */
    }).call(this, __webpack_require__(
    /*! ./../webpack/buildin/global.js */
    "./node_modules/webpack/buildin/global.js"));
    /***/
  },

  /***/
  "./node_modules/to-array/index.js":
  /*!****************************************!*\
    !*** ./node_modules/to-array/index.js ***!
    \****************************************/

  /*! no static exports found */

  /***/
  function node_modulesToArrayIndexJs(module, exports) {
    module.exports = toArray;

    function toArray(list, index) {
      var array = [];
      index = index || 0;

      for (var i = index || 0; i < list.length; i++) {
        array[i - index] = list[i];
      }

      return array;
    }
    /***/

  },

  /***/
  "./node_modules/webpack/buildin/global.js":
  /*!***********************************!*\
    !*** (webpack)/buildin/global.js ***!
    \***********************************/

  /*! no static exports found */

  /***/
  function node_modulesWebpackBuildinGlobalJs(module, exports) {
    var g; // This works in non-strict mode

    g = function () {
      return this;
    }();

    try {
      // This works if eval is allowed (see CSP)
      g = g || Function("return this")() || (1, eval)("this");
    } catch (e) {
      // This works if the window reference is available
      if (typeof window === "object") g = window;
    } // g can still be undefined, but nothing to do about it...
    // We return undefined, instead of nothing here, so it's
    // easier to handle this case. if(!global) { ...}


    module.exports = g;
    /***/
  },

  /***/
  "./node_modules/webpack/buildin/module.js":
  /*!***********************************!*\
    !*** (webpack)/buildin/module.js ***!
    \***********************************/

  /*! no static exports found */

  /***/
  function node_modulesWebpackBuildinModuleJs(module, exports) {
    module.exports = function (module) {
      if (!module.webpackPolyfill) {
        module.deprecate = function () {};

        module.paths = []; // module.parent = undefined by default

        if (!module.children) module.children = [];
        Object.defineProperty(module, "loaded", {
          enumerable: true,
          get: function get() {
            return module.l;
          }
        });
        Object.defineProperty(module, "id", {
          enumerable: true,
          get: function get() {
            return module.i;
          }
        });
        module.webpackPolyfill = 1;
      }

      return module;
    };
    /***/

  },

  /***/
  "./node_modules/yeast/index.js":
  /*!*************************************!*\
    !*** ./node_modules/yeast/index.js ***!
    \*************************************/

  /*! no static exports found */

  /***/
  function node_modulesYeastIndexJs(module, exports, __webpack_require__) {
    "use strict";

    var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''),
        length = 64,
        map = {},
        seed = 0,
        i = 0,
        prev;
    /**
     * Return a string representing the specified number.
     *
     * @param {Number} num The number to convert.
     * @returns {String} The string representation of the number.
     * @api public
     */

    function encode(num) {
      var encoded = '';

      do {
        encoded = alphabet[num % length] + encoded;
        num = Math.floor(num / length);
      } while (num > 0);

      return encoded;
    }
    /**
     * Return the integer value specified by the given string.
     *
     * @param {String} str The string to convert.
     * @returns {Number} The integer value represented by the string.
     * @api public
     */


    function decode(str) {
      var decoded = 0;

      for (i = 0; i < str.length; i++) {
        decoded = decoded * length + map[str.charAt(i)];
      }

      return decoded;
    }
    /**
     * Yeast: A tiny growing id generator.
     *
     * @returns {String} A unique id.
     * @api public
     */


    function yeast() {
      var now = encode(+new Date());
      if (now !== prev) return seed = 0, prev = now;
      return now + '.' + encode(seed++);
    } //
    // Map each character to its index.
    //


    for (; i < length; i++) map[alphabet[i]] = i; //
    // Expose the `yeast`, `encode` and `decode` functions.
    //


    yeast.encode = encode;
    yeast.decode = decode;
    module.exports = yeast;
    /***/
  },

  /***/
  "./src/backend.js":
  /*!************************!*\
    !*** ./src/backend.js ***!
    \************************/

  /*! no exports provided */

  /***/
  function srcBackendJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony import */


    var socket_io_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! socket.io-client */
    "./node_modules/socket.io-client/lib/index.js");
    /* harmony import */


    var socket_io_client__WEBPACK_IMPORTED_MODULE_0___default =
    /*#__PURE__*/
    __webpack_require__.n(socket_io_client__WEBPACK_IMPORTED_MODULE_0__);
    /* harmony import */


    var src_backend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! src/backend */
    "../../src/backend/index.js");
    /* harmony import */


    var src_bridge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! src/bridge */
    "../../src/bridge.js");
    /* harmony import */


    var src_backend_toast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! src/backend/toast */
    "../../src/backend/toast.js");
    /* harmony import */


    var src_devtools_env__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! src/devtools/env */
    "../../src/devtools/env.js");

    var host = src_devtools_env__WEBPACK_IMPORTED_MODULE_4__["target"].__VUE_DEVTOOLS_HOST__ || 'http://localhost';
    var port = src_devtools_env__WEBPACK_IMPORTED_MODULE_4__["target"].__VUE_DEVTOOLS_PORT__ !== undefined ? src_devtools_env__WEBPACK_IMPORTED_MODULE_4__["target"].__VUE_DEVTOOLS_PORT__ : 8098;
    var fullHost = port ? host + ':' + port : host;
    var createSocket = src_devtools_env__WEBPACK_IMPORTED_MODULE_4__["target"].__VUE_DEVTOOLS_SOCKET__ || socket_io_client__WEBPACK_IMPORTED_MODULE_0___default.a;
    var socket = createSocket(fullHost);

    var connectedMessage = function connectedMessage() {
      if (src_devtools_env__WEBPACK_IMPORTED_MODULE_4__["target"].__VUE_DEVTOOLS_TOAST__) {
        src_devtools_env__WEBPACK_IMPORTED_MODULE_4__["target"].__VUE_DEVTOOLS_TOAST__('Remote Devtools Connected', 'normal');
      }
    };

    var disconnectedMessage = function disconnectedMessage() {
      if (src_devtools_env__WEBPACK_IMPORTED_MODULE_4__["target"].__VUE_DEVTOOLS_TOAST__) {
        src_devtools_env__WEBPACK_IMPORTED_MODULE_4__["target"].__VUE_DEVTOOLS_TOAST__('Remote Devtools Disconnected', 'error');
      }
    };

    socket.on('connect', function () {
      connectedMessage();
      Object(src_backend__WEBPACK_IMPORTED_MODULE_1__["initBackend"])(bridge);
      socket.emit('vue-devtools-init');
    }); // Global disconnect handler. Fires in two cases:
    // - after calling above socket.disconnect()
    // - once devtools is closed (that's why we need socket.disconnect() here too, to prevent further polling)

    socket.on('disconnect', function (reason) {
      socket.disconnect();
      disconnectedMessage();
    }); // Disconnect socket once other client is connected

    socket.on('vue-devtools-disconnect-backend', function () {
      socket.disconnect();
    });
    var bridge = new src_bridge__WEBPACK_IMPORTED_MODULE_2__["default"]({
      listen: function listen(fn) {
        socket.on('vue-message', function (data) {
          return fn(data);
        });
      },
      send: function send(data) {
        socket.emit('vue-message', data);
      }
    });
    bridge.on('shutdown', function () {
      socket.disconnect();
      disconnectedMessage();
    });
    Object(src_backend_toast__WEBPACK_IMPORTED_MODULE_3__["installToast"])(src_devtools_env__WEBPACK_IMPORTED_MODULE_4__["target"]);
    /***/
  },

  /***/
  0:
  /*!********************!*\
    !*** ws (ignored) ***!
    \********************/

  /*! no static exports found */

  /***/
  function _(module, exports) {
    /* (ignored) */

    /***/
  }
  /******/

});

/***/ }),

/***/ "../node_modules/@vue/devtools/build/hook.js":
/***/ (function(module, exports) {

/******/
(function (modules) {
  // webpackBootstrap

  /******/
  // The module cache

  /******/
  var installedModules = {};
  /******/

  /******/
  // The require function

  /******/

  function __webpack_require__(moduleId) {
    /******/

    /******/
    // Check if module is in cache

    /******/
    if (installedModules[moduleId]) {
      /******/
      return installedModules[moduleId].exports;
      /******/
    }
    /******/
    // Create a new module (and put it into the cache)

    /******/


    var module = installedModules[moduleId] = {
      /******/
      i: moduleId,

      /******/
      l: false,

      /******/
      exports: {}
      /******/

    };
    /******/

    /******/
    // Execute the module function

    /******/

    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/

    /******/
    // Flag the module as loaded

    /******/

    module.l = true;
    /******/

    /******/
    // Return the exports of the module

    /******/

    return module.exports;
    /******/
  }
  /******/

  /******/

  /******/
  // expose the modules object (__webpack_modules__)

  /******/


  __webpack_require__.m = modules;
  /******/

  /******/
  // expose the module cache

  /******/

  __webpack_require__.c = installedModules;
  /******/

  /******/
  // define getter function for harmony exports

  /******/

  __webpack_require__.d = function (exports, name, getter) {
    /******/
    if (!__webpack_require__.o(exports, name)) {
      /******/
      Object.defineProperty(exports, name, {
        enumerable: true,
        get: getter
      });
      /******/
    }
    /******/

  };
  /******/

  /******/
  // define __esModule on exports

  /******/


  __webpack_require__.r = function (exports) {
    /******/
    if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
      /******/
      Object.defineProperty(exports, Symbol.toStringTag, {
        value: 'Module'
      });
      /******/
    }
    /******/


    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    /******/
  };
  /******/

  /******/
  // create a fake namespace object

  /******/
  // mode & 1: value is a module id, require it

  /******/
  // mode & 2: merge all properties of value into the ns

  /******/
  // mode & 4: return value when already ns object

  /******/
  // mode & 8|1: behave like require

  /******/


  __webpack_require__.t = function (value, mode) {
    /******/
    if (mode & 1) value = __webpack_require__(value);
    /******/

    if (mode & 8) return value;
    /******/

    if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;
    /******/

    var ns = Object.create(null);
    /******/

    __webpack_require__.r(ns);
    /******/


    Object.defineProperty(ns, 'default', {
      enumerable: true,
      value: value
    });
    /******/

    if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {
      return value[key];
    }.bind(null, key));
    /******/

    return ns;
    /******/
  };
  /******/

  /******/
  // getDefaultExport function for compatibility with non-harmony modules

  /******/


  __webpack_require__.n = function (module) {
    /******/
    var getter = module && module.__esModule ?
    /******/
    function getDefault() {
      return module['default'];
    } :
    /******/
    function getModuleExports() {
      return module;
    };
    /******/

    __webpack_require__.d(getter, 'a', getter);
    /******/


    return getter;
    /******/
  };
  /******/

  /******/
  // Object.prototype.hasOwnProperty.call

  /******/


  __webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/

  /******/
  // __webpack_public_path__

  /******/


  __webpack_require__.p = "/build/";
  /******/

  /******/

  /******/
  // Load entry module and return exports

  /******/

  return __webpack_require__(__webpack_require__.s = "./src/hook.js");
  /******/
})(
/************************************************************************/

/******/
{
  /***/
  "../../src/backend/hook.js":
  /*!*************************************************************!*\
    !*** /home/akryum/Projets/vue-devtools/src/backend/hook.js ***!
    \*************************************************************/

  /*! exports provided: installHook */

  /***/
  function srcBackendHookJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* WEBPACK VAR INJECTION */


    (function (Buffer) {
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "installHook", function () {
        return installHook;
      }); // this script is injected into every page.

      /**
       * Install the hook on window, which is an event emitter.
       * Note because Chrome content scripts cannot directly modify the window object,
       * we are evaling this function by inserting a script tag. That's why we have
       * to inline the whole event emitter implementation here.
       *
       * @param {Window|global} target
       */


      function installHook(target) {
        var listeners = {};

        if (target.hasOwnProperty('__VUE_DEVTOOLS_GLOBAL_HOOK__')) {
          return;
        }

        var hook = {
          Vue: null,
          _buffer: [],
          _replayBuffer: function _replayBuffer(event) {
            var this$1 = this;
            var buffer = this._buffer;
            this._buffer = [];

            for (var i = 0, l = buffer.length; i < l; i++) {
              var allArgs = buffer[i];
              allArgs[0] === event ? this$1.emit.apply(this$1, allArgs) : this$1._buffer.push(allArgs);
            }
          },
          on: function on(event, fn) {
            var $event = '$' + event;

            if (listeners[$event]) {
              listeners[$event].push(fn);
            } else {
              listeners[$event] = [fn];

              this._replayBuffer(event);
            }
          },
          once: function once(event, fn) {
            function on() {
              this.off(event, on);
              fn.apply(this, arguments);
            }

            this.on(event, on);
          },
          off: function off(event, fn) {
            event = '$' + event;

            if (!arguments.length) {
              listeners = {};
            } else {
              var cbs = listeners[event];

              if (cbs) {
                if (!fn) {
                  listeners[event] = null;
                } else {
                  for (var i = 0, l = cbs.length; i < l; i++) {
                    var cb = cbs[i];

                    if (cb === fn || cb.fn === fn) {
                      cbs.splice(i, 1);
                      break;
                    }
                  }
                }
              }
            }
          },
          emit: function emit(event) {
            var this$1 = this;
            var $event = '$' + event;
            var cbs = listeners[$event];

            if (cbs) {
              var eventArgs = [].slice.call(arguments, 1);
              cbs = cbs.slice();

              for (var i = 0, l = cbs.length; i < l; i++) {
                cbs[i].apply(this$1, eventArgs);
              }
            } else {
              var allArgs = [].slice.call(arguments);

              this._buffer.push(allArgs);
            }
          }
        };
        hook.once('init', function (Vue) {
          hook.Vue = Vue;

          Vue.prototype.$inspect = function () {
            var fn = target.__VUE_DEVTOOLS_INSPECT__;
            fn && fn(this);
          };
        });
        hook.once('vuex:init', function (store) {
          hook.store = store;
          hook.initialStore = clone(store);
        });
        Object.defineProperty(target, '__VUE_DEVTOOLS_GLOBAL_HOOK__', {
          get: function get() {
            return hook;
          }
        }); // Clone deep utility for cloning initial state of the store
        // REFERENCE: https://github.com/buunguyen/node-clone/commit/63afda9de9d94b9332586e34a646a13e8d719244

        function clone(parent, circular, depth, prototype) {
          if (typeof circular === 'object') {
            depth = circular.depth;
            prototype = circular.prototype;
            circular = circular.circular;
          } // maintain two arrays for circular references, where corresponding parents
          // and children have the same index


          var allParents = [];
          var allChildren = [];
          var useBuffer = typeof Buffer !== 'undefined';

          if (typeof circular === 'undefined') {
            circular = true;
          }

          if (typeof depth === 'undefined') {
            depth = Infinity;
          } // recurse this function so we don't reset allParents and allChildren


          function _clone(parent, depth) {
            // cloning null always returns null
            if (parent === null) {
              return null;
            }

            if (depth === 0) {
              return parent;
            }

            var child;
            var proto;

            if (typeof parent !== 'object') {
              return parent;
            }

            if (parent instanceof Map) {
              child = new Map();
            } else if (parent instanceof Set) {
              child = new Set();
            } else if (parent instanceof Promise) {
              child = new Promise(function (resolve, reject) {
                parent.then(function (value) {
                  resolve(_clone(value, depth - 1));
                }, function (err) {
                  reject(_clone(err, depth - 1));
                });
              });
            } else if (_isArray(parent)) {
              child = [];
            } else if (_isRegExp(parent)) {
              child = new RegExp(parent.source, _getRegExpFlags(parent));

              if (parent.lastIndex) {
                child.lastIndex = parent.lastIndex;
              }
            } else if (_isDate(parent)) {
              child = new Date(parent.getTime());
            } else if (useBuffer && Buffer.isBuffer(parent)) {
              child = Buffer.alloc(parent.length);
              parent.copy(child);
              return child;
            } else if (parent instanceof Error) {
              child = Object.create(parent);
            } else {
              if (typeof prototype === 'undefined') {
                proto = Object.getPrototypeOf(parent);
                child = Object.create(proto);
              } else {
                child = Object.create(prototype);
                proto = prototype;
              }
            }

            if (circular) {
              var index = allParents.indexOf(parent);

              if (index !== -1) {
                return allChildren[index];
              }

              allParents.push(parent);
              allChildren.push(child);
            }

            if (parent instanceof Map) {
              var keyIterator = parent.keys();

              while (true) {
                var next = keyIterator.next();

                if (next.done) {
                  break;
                }

                var keyChild = _clone(next.value, depth - 1);

                var valueChild = _clone(parent.get(next.value), depth - 1);

                child.set(keyChild, valueChild);
              }
            }

            if (parent instanceof Set) {
              var iterator = parent.keys();

              while (true) {
                var next$1 = iterator.next();

                if (next$1.done) {
                  break;
                }

                var entryChild = _clone(next$1.value, depth - 1);

                child.add(entryChild);
              }
            }

            for (var i in parent) {
              var attrs;

              if (proto) {
                attrs = Object.getOwnPropertyDescriptor(proto, i);
              }

              if (attrs && attrs.set == null) {
                continue;
              }

              child[i] = _clone(parent[i], depth - 1);
            }

            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(parent);

              for (var i$1 = 0; i$1 < symbols.length; i$1++) {
                // Don't need to worry about cloning a symbol because it is a primitive,
                // like a number or string.
                var symbol = symbols[i$1];
                var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);

                if (descriptor && !descriptor.enumerable) {
                  continue;
                }

                child[symbol] = _clone(parent[symbol], depth - 1);
              }
            }

            return child;
          }

          return _clone(parent, depth);
        } // private utility functions


        function _objToStr(o) {
          return Object.prototype.toString.call(o);
        }

        function _isDate(o) {
          return typeof o === 'object' && _objToStr(o) === '[object Date]';
        }

        function _isArray(o) {
          return typeof o === 'object' && _objToStr(o) === '[object Array]';
        }

        function _isRegExp(o) {
          return typeof o === 'object' && _objToStr(o) === '[object RegExp]';
        }

        function _getRegExpFlags(re) {
          var flags = '';

          if (re.global) {
            flags += 'g';
          }

          if (re.ignoreCase) {
            flags += 'i';
          }

          if (re.multiline) {
            flags += 'm';
          }

          return flags;
        }
      }
      /* WEBPACK VAR INJECTION */

    }).call(this, __webpack_require__(
    /*! ./../../shells/electron/node_modules/buffer/index.js */
    "./node_modules/buffer/index.js").Buffer);
    /***/
  },

  /***/
  "../../src/devtools/env.js":
  /*!*************************************************************!*\
    !*** /home/akryum/Projets/vue-devtools/src/devtools/env.js ***!
    \*************************************************************/

  /*! exports provided: isBrowser, target, isChrome, isFirefox, isWindows, isMac, isLinux, keys, initEnv */

  /***/
  function srcDevtoolsEnvJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* WEBPACK VAR INJECTION */


    (function (global) {
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "isBrowser", function () {
        return isBrowser;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "target", function () {
        return target;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isChrome", function () {
        return isChrome;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isFirefox", function () {
        return isFirefox;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isWindows", function () {
        return isWindows;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isMac", function () {
        return isMac;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isLinux", function () {
        return isLinux;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "keys", function () {
        return keys;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "initEnv", function () {
        return initEnv;
      });

      var isBrowser = typeof navigator !== 'undefined';
      var target = isBrowser ? window : typeof global !== 'undefined' ? global : {};
      var isChrome = typeof chrome !== 'undefined' && !!chrome.devtools;
      var isFirefox = isBrowser && navigator.userAgent.indexOf('Firefox') > -1;
      var isWindows = isBrowser && navigator.platform.indexOf('Win') === 0;
      var isMac = isBrowser && navigator.platform === 'MacIntel';
      var isLinux = isBrowser && navigator.platform.indexOf('Linux') === 0;
      var keys = {
        ctrl: isMac ? '&#8984;' : 'Ctrl',
        shift: 'Shift',
        alt: isMac ? '&#8997;' : 'Alt',
        del: 'Del',
        enter: 'Enter',
        esc: 'Esc'
      };

      function initEnv(Vue) {
        if (Vue.prototype.hasOwnProperty('$isChrome')) {
          return;
        }

        Object.defineProperties(Vue.prototype, {
          '$isChrome': {
            get: function get() {
              return isChrome;
            }
          },
          '$isFirefox': {
            get: function get() {
              return isFirefox;
            }
          },
          '$isWindows': {
            get: function get() {
              return isWindows;
            }
          },
          '$isMac': {
            get: function get() {
              return isMac;
            }
          },
          '$isLinux': {
            get: function get() {
              return isLinux;
            }
          },
          '$keys': {
            get: function get() {
              return keys;
            }
          }
        });

        if (isWindows) {
          document.body.classList.add('platform-windows');
        }

        if (isMac) {
          document.body.classList.add('platform-mac');
        }

        if (isLinux) {
          document.body.classList.add('platform-linux');
        }
      }
      /* WEBPACK VAR INJECTION */

    }).call(this, __webpack_require__(
    /*! ./../../shells/electron/node_modules/webpack/buildin/global.js */
    "./node_modules/webpack/buildin/global.js"));
    /***/
  },

  /***/
  "./node_modules/base64-js/index.js":
  /*!*****************************************!*\
    !*** ./node_modules/base64-js/index.js ***!
    \*****************************************/

  /*! no static exports found */

  /***/
  function node_modulesBase64JsIndexJs(module, exports, __webpack_require__) {
    "use strict";

    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    } // Support decoding URL-safe base64 strings, as Node.js does.
    // See: https://en.wikipedia.org/wiki/Base64#URL_applications


    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;

    function getLens(b64) {
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4');
      } // Trim off extra bytes after placeholder bytes are found
      // See: https://github.com/beatgammit/base64-js/issues/42


      var validLen = b64.indexOf('=');
      if (validLen === -1) validLen = len;
      var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    } // base64 is 4/3 + up to two characters of the original data


    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }

    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }

    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars

      var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

      for (var i = 0; i < len; i += 4) {
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      return arr;
    }

    function tripletToBase64(num) {
      return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
    }

    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];

      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
      }

      return output.join('');
    }

    function fromByteArray(uint8) {
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3
      // go through the array every three bytes, we'll deal with trailing stuff later

      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
      } // pad the end with zeros, but make sure to not forget the extra bytes


      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
      }

      return parts.join('');
    }
    /***/

  },

  /***/
  "./node_modules/buffer/index.js":
  /*!**************************************!*\
    !*** ./node_modules/buffer/index.js ***!
    \**************************************/

  /*! no static exports found */

  /***/
  function node_modulesBufferIndexJs(module, exports, __webpack_require__) {
    "use strict";
    /* WEBPACK VAR INJECTION */

    (function (global) {
      /*!
      * The buffer module from node.js, for the browser.
      *
      * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
      * @license  MIT
      */

      /* eslint-disable no-proto */
      var base64 = __webpack_require__(
      /*! base64-js */
      "./node_modules/base64-js/index.js");

      var ieee754 = __webpack_require__(
      /*! ieee754 */
      "./node_modules/ieee754/index.js");

      var isArray = __webpack_require__(
      /*! isarray */
      "./node_modules/isarray/index.js");

      exports.Buffer = Buffer;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      /**
       * If `Buffer.TYPED_ARRAY_SUPPORT`:
       *   === true    Use Uint8Array implementation (fastest)
       *   === false   Use Object implementation (most compatible, even IE6)
       *
       * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
       * Opera 11.6+, iOS 4.2+.
       *
       * Due to various browser bugs, sometimes the Object implementation will be used even
       * when the browser supports typed arrays.
       *
       * Note:
       *
       *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
       *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
       *
       *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
       *
       *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
       *     incorrect length in some situations.
      
       * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
       * get the Object implementation, which is slower but behaves correctly.
       */

      Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
      /*
       * Export kMaxLength after typed array support is determined.
       */

      exports.kMaxLength = kMaxLength();

      function typedArraySupport() {
        try {
          var arr = new Uint8Array(1);
          arr.__proto__ = {
            __proto__: Uint8Array.prototype,
            foo: function foo() {
              return 42;
            }
          };
          return arr.foo() === 42 && // typed array instances can be augmented
          typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
          arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
        } catch (e) {
          return false;
        }
      }

      function kMaxLength() {
        return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
      }

      function createBuffer(that, length) {
        if (kMaxLength() < length) {
          throw new RangeError('Invalid typed array length');
        }

        if (Buffer.TYPED_ARRAY_SUPPORT) {
          // Return an augmented `Uint8Array` instance, for best performance
          that = new Uint8Array(length);
          that.__proto__ = Buffer.prototype;
        } else {
          // Fallback: Return an object instance of the Buffer class
          if (that === null) {
            that = new Buffer(length);
          }

          that.length = length;
        }

        return that;
      }
      /**
       * The Buffer constructor returns instances of `Uint8Array` that have their
       * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
       * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
       * and the `Uint8Array` methods. Square bracket notation works as expected -- it
       * returns a single octet.
       *
       * The `Uint8Array` prototype remains unmodified.
       */


      function Buffer(arg, encodingOrOffset, length) {
        if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
          return new Buffer(arg, encodingOrOffset, length);
        } // Common case.


        if (typeof arg === 'number') {
          if (typeof encodingOrOffset === 'string') {
            throw new Error('If encoding is specified then the first argument must be a string');
          }

          return allocUnsafe(this, arg);
        }

        return from(this, arg, encodingOrOffset, length);
      }

      Buffer.poolSize = 8192; // not used by this implementation
      // TODO: Legacy, not needed anymore. Remove in next major version.

      Buffer._augment = function (arr) {
        arr.__proto__ = Buffer.prototype;
        return arr;
      };

      function from(that, value, encodingOrOffset, length) {
        if (typeof value === 'number') {
          throw new TypeError('"value" argument must not be a number');
        }

        if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
          return fromArrayBuffer(that, value, encodingOrOffset, length);
        }

        if (typeof value === 'string') {
          return fromString(that, value, encodingOrOffset);
        }

        return fromObject(that, value);
      }
      /**
       * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
       * if value is a number.
       * Buffer.from(str[, encoding])
       * Buffer.from(array)
       * Buffer.from(buffer)
       * Buffer.from(arrayBuffer[, byteOffset[, length]])
       **/


      Buffer.from = function (value, encodingOrOffset, length) {
        return from(null, value, encodingOrOffset, length);
      };

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        Buffer.prototype.__proto__ = Uint8Array.prototype;
        Buffer.__proto__ = Uint8Array;

        if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
          // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
          Object.defineProperty(Buffer, Symbol.species, {
            value: null,
            configurable: true
          });
        }
      }

      function assertSize(size) {
        if (typeof size !== 'number') {
          throw new TypeError('"size" argument must be a number');
        } else if (size < 0) {
          throw new RangeError('"size" argument must not be negative');
        }
      }

      function alloc(that, size, fill, encoding) {
        assertSize(size);

        if (size <= 0) {
          return createBuffer(that, size);
        }

        if (fill !== undefined) {
          // Only pay attention to encoding if it's a string. This
          // prevents accidentally sending in a number that would
          // be interpretted as a start offset.
          return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
        }

        return createBuffer(that, size);
      }
      /**
       * Creates a new filled Buffer instance.
       * alloc(size[, fill[, encoding]])
       **/


      Buffer.alloc = function (size, fill, encoding) {
        return alloc(null, size, fill, encoding);
      };

      function allocUnsafe(that, size) {
        assertSize(size);
        that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

        if (!Buffer.TYPED_ARRAY_SUPPORT) {
          for (var i = 0; i < size; ++i) {
            that[i] = 0;
          }
        }

        return that;
      }
      /**
       * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
       * */


      Buffer.allocUnsafe = function (size) {
        return allocUnsafe(null, size);
      };
      /**
       * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
       */


      Buffer.allocUnsafeSlow = function (size) {
        return allocUnsafe(null, size);
      };

      function fromString(that, string, encoding) {
        if (typeof encoding !== 'string' || encoding === '') {
          encoding = 'utf8';
        }

        if (!Buffer.isEncoding(encoding)) {
          throw new TypeError('"encoding" must be a valid string encoding');
        }

        var length = byteLength(string, encoding) | 0;
        that = createBuffer(that, length);
        var actual = that.write(string, encoding);

        if (actual !== length) {
          // Writing a hex string, for example, that contains invalid characters will
          // cause everything after the first invalid character to be ignored. (e.g.
          // 'abxxcd' will be treated as 'ab')
          that = that.slice(0, actual);
        }

        return that;
      }

      function fromArrayLike(that, array) {
        var length = array.length < 0 ? 0 : checked(array.length) | 0;
        that = createBuffer(that, length);

        for (var i = 0; i < length; i += 1) {
          that[i] = array[i] & 255;
        }

        return that;
      }

      function fromArrayBuffer(that, array, byteOffset, length) {
        array.byteLength; // this throws if `array` is not a valid ArrayBuffer

        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('\'offset\' is out of bounds');
        }

        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('\'length\' is out of bounds');
        }

        if (byteOffset === undefined && length === undefined) {
          array = new Uint8Array(array);
        } else if (length === undefined) {
          array = new Uint8Array(array, byteOffset);
        } else {
          array = new Uint8Array(array, byteOffset, length);
        }

        if (Buffer.TYPED_ARRAY_SUPPORT) {
          // Return an augmented `Uint8Array` instance, for best performance
          that = array;
          that.__proto__ = Buffer.prototype;
        } else {
          // Fallback: Return an object instance of the Buffer class
          that = fromArrayLike(that, array);
        }

        return that;
      }

      function fromObject(that, obj) {
        if (Buffer.isBuffer(obj)) {
          var len = checked(obj.length) | 0;
          that = createBuffer(that, len);

          if (that.length === 0) {
            return that;
          }

          obj.copy(that, 0, 0, len);
          return that;
        }

        if (obj) {
          if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
            if (typeof obj.length !== 'number' || isnan(obj.length)) {
              return createBuffer(that, 0);
            }

            return fromArrayLike(that, obj);
          }

          if (obj.type === 'Buffer' && isArray(obj.data)) {
            return fromArrayLike(that, obj.data);
          }
        }

        throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
      }

      function checked(length) {
        // Note: cannot use `length < kMaxLength()` here because that fails when
        // length is NaN (which is otherwise coerced to zero.)
        if (length >= kMaxLength()) {
          throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
        }

        return length | 0;
      }

      function SlowBuffer(length) {
        if (+length != length) {
          // eslint-disable-line eqeqeq
          length = 0;
        }

        return Buffer.alloc(+length);
      }

      Buffer.isBuffer = function isBuffer(b) {
        return !!(b != null && b._isBuffer);
      };

      Buffer.compare = function compare(a, b) {
        if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
          throw new TypeError('Arguments must be Buffers');
        }

        if (a === b) return 0;
        var x = a.length;
        var y = b.length;

        for (var i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }

        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };

      Buffer.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case 'hex':
          case 'utf8':
          case 'utf-8':
          case 'ascii':
          case 'latin1':
          case 'binary':
          case 'base64':
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return true;

          default:
            return false;
        }
      };

      Buffer.concat = function concat(list, length) {
        if (!isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }

        if (list.length === 0) {
          return Buffer.alloc(0);
        }

        var i;

        if (length === undefined) {
          length = 0;

          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }

        var buffer = Buffer.allocUnsafe(length);
        var pos = 0;

        for (i = 0; i < list.length; ++i) {
          var buf = list[i];

          if (!Buffer.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          }

          buf.copy(buffer, pos);
          pos += buf.length;
        }

        return buffer;
      };

      function byteLength(string, encoding) {
        if (Buffer.isBuffer(string)) {
          return string.length;
        }

        if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
          return string.byteLength;
        }

        if (typeof string !== 'string') {
          string = '' + string;
        }

        var len = string.length;
        if (len === 0) return 0; // Use a for loop to avoid recursion

        var loweredCase = false;

        for (;;) {
          switch (encoding) {
            case 'ascii':
            case 'latin1':
            case 'binary':
              return len;

            case 'utf8':
            case 'utf-8':
            case undefined:
              return utf8ToBytes(string).length;

            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return len * 2;

            case 'hex':
              return len >>> 1;

            case 'base64':
              return base64ToBytes(string).length;

            default:
              if (loweredCase) return utf8ToBytes(string).length; // assume utf8

              encoding = ('' + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }

      Buffer.byteLength = byteLength;

      function slowToString(encoding, start, end) {
        var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
        // property of a typed array.
        // This behaves neither like String nor Uint8Array in that we set start/end
        // to their upper/lower bounds if the value passed is out of range.
        // undefined is handled specially as per ECMA-262 6th Edition,
        // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

        if (start === undefined || start < 0) {
          start = 0;
        } // Return early if start > this.length. Done here to prevent potential uint32
        // coercion fail below.


        if (start > this.length) {
          return '';
        }

        if (end === undefined || end > this.length) {
          end = this.length;
        }

        if (end <= 0) {
          return '';
        } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


        end >>>= 0;
        start >>>= 0;

        if (end <= start) {
          return '';
        }

        if (!encoding) encoding = 'utf8';

        while (true) {
          switch (encoding) {
            case 'hex':
              return hexSlice(this, start, end);

            case 'utf8':
            case 'utf-8':
              return utf8Slice(this, start, end);

            case 'ascii':
              return asciiSlice(this, start, end);

            case 'latin1':
            case 'binary':
              return latin1Slice(this, start, end);

            case 'base64':
              return base64Slice(this, start, end);

            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return utf16leSlice(this, start, end);

            default:
              if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
              encoding = (encoding + '').toLowerCase();
              loweredCase = true;
          }
        }
      } // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
      // Buffer instances.


      Buffer.prototype._isBuffer = true;

      function swap(b, n, m) {
        var i = b[n];
        b[n] = b[m];
        b[m] = i;
      }

      Buffer.prototype.swap16 = function swap16() {
        var len = this.length;

        if (len % 2 !== 0) {
          throw new RangeError('Buffer size must be a multiple of 16-bits');
        }

        for (var i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }

        return this;
      };

      Buffer.prototype.swap32 = function swap32() {
        var len = this.length;

        if (len % 4 !== 0) {
          throw new RangeError('Buffer size must be a multiple of 32-bits');
        }

        for (var i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }

        return this;
      };

      Buffer.prototype.swap64 = function swap64() {
        var len = this.length;

        if (len % 8 !== 0) {
          throw new RangeError('Buffer size must be a multiple of 64-bits');
        }

        for (var i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }

        return this;
      };

      Buffer.prototype.toString = function toString() {
        var length = this.length | 0;
        if (length === 0) return '';
        if (arguments.length === 0) return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };

      Buffer.prototype.equals = function equals(b) {
        if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
        if (this === b) return true;
        return Buffer.compare(this, b) === 0;
      };

      Buffer.prototype.inspect = function inspect() {
        var str = '';
        var max = exports.INSPECT_MAX_BYTES;

        if (this.length > 0) {
          str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
          if (this.length > max) str += ' ... ';
        }

        return '<Buffer ' + str + '>';
      };

      Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (!Buffer.isBuffer(target)) {
          throw new TypeError('Argument must be a Buffer');
        }

        if (start === undefined) {
          start = 0;
        }

        if (end === undefined) {
          end = target ? target.length : 0;
        }

        if (thisStart === undefined) {
          thisStart = 0;
        }

        if (thisEnd === undefined) {
          thisEnd = this.length;
        }

        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError('out of range index');
        }

        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }

        if (thisStart >= thisEnd) {
          return -1;
        }

        if (start >= end) {
          return 1;
        }

        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target) return 0;
        var x = thisEnd - thisStart;
        var y = end - start;
        var len = Math.min(x, y);
        var thisCopy = this.slice(thisStart, thisEnd);
        var targetCopy = target.slice(start, end);

        for (var i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }

        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
      // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
      //
      // Arguments:
      // - buffer - a Buffer to search
      // - val - a string, Buffer, or number
      // - byteOffset - an index into `buffer`; will be clamped to an int32
      // - encoding - an optional encoding, relevant is val is a string
      // - dir - true for indexOf, false for lastIndexOf


      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        // Empty buffer means no match
        if (buffer.length === 0) return -1; // Normalize byteOffset

        if (typeof byteOffset === 'string') {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 0x7fffffff) {
          byteOffset = 0x7fffffff;
        } else if (byteOffset < -0x80000000) {
          byteOffset = -0x80000000;
        }

        byteOffset = +byteOffset; // Coerce to Number.

        if (isNaN(byteOffset)) {
          // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
          byteOffset = dir ? 0 : buffer.length - 1;
        } // Normalize byteOffset: negative offsets start from the end of the buffer


        if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

        if (byteOffset >= buffer.length) {
          if (dir) return -1;else byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir) byteOffset = 0;else return -1;
        } // Normalize val


        if (typeof val === 'string') {
          val = Buffer.from(val, encoding);
        } // Finally, search either indexOf (if dir is true) or lastIndexOf


        if (Buffer.isBuffer(val)) {
          // Special case: looking for empty string/buffer always fails
          if (val.length === 0) {
            return -1;
          }

          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === 'number') {
          val = val & 0xFF; // Search for a byte value [0-255]

          if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) {
              return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }

          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }

        throw new TypeError('val must be string, number or Buffer');
      }

      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        var indexSize = 1;
        var arrLength = arr.length;
        var valLength = val.length;

        if (encoding !== undefined) {
          encoding = String(encoding).toLowerCase();

          if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }

            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }

        function read(buf, i) {
          if (indexSize === 1) {
            return buf[i];
          } else {
            return buf.readUInt16BE(i * indexSize);
          }
        }

        var i;

        if (dir) {
          var foundIndex = -1;

          for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1) foundIndex = i;
              if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1) i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

          for (i = byteOffset; i >= 0; i--) {
            var found = true;

            for (var j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }

            if (found) return i;
          }
        }

        return -1;
      }

      Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };

      Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };

      Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };

      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        var remaining = buf.length - offset;

        if (!length) {
          length = remaining;
        } else {
          length = Number(length);

          if (length > remaining) {
            length = remaining;
          }
        } // must be an even number of digits


        var strLen = string.length;
        if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

        if (length > strLen / 2) {
          length = strLen / 2;
        }

        for (var i = 0; i < length; ++i) {
          var parsed = parseInt(string.substr(i * 2, 2), 16);
          if (isNaN(parsed)) return i;
          buf[offset + i] = parsed;
        }

        return i;
      }

      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }

      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }

      function latin1Write(buf, string, offset, length) {
        return asciiWrite(buf, string, offset, length);
      }

      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }

      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }

      Buffer.prototype.write = function write(string, offset, length, encoding) {
        // Buffer#write(string)
        if (offset === undefined) {
          encoding = 'utf8';
          length = this.length;
          offset = 0; // Buffer#write(string, encoding)
        } else if (length === undefined && typeof offset === 'string') {
          encoding = offset;
          length = this.length;
          offset = 0; // Buffer#write(string, offset[, length][, encoding])
        } else if (isFinite(offset)) {
          offset = offset | 0;

          if (isFinite(length)) {
            length = length | 0;
            if (encoding === undefined) encoding = 'utf8';
          } else {
            encoding = length;
            length = undefined;
          } // legacy write(string, encoding, offset, length) - remove in v0.13

        } else {
          throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
        }

        var remaining = this.length - offset;
        if (length === undefined || length > remaining) length = remaining;

        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError('Attempt to write outside buffer bounds');
        }

        if (!encoding) encoding = 'utf8';
        var loweredCase = false;

        for (;;) {
          switch (encoding) {
            case 'hex':
              return hexWrite(this, string, offset, length);

            case 'utf8':
            case 'utf-8':
              return utf8Write(this, string, offset, length);

            case 'ascii':
              return asciiWrite(this, string, offset, length);

            case 'latin1':
            case 'binary':
              return latin1Write(this, string, offset, length);

            case 'base64':
              // Warning: maxLength not taken into account in base64Write
              return base64Write(this, string, offset, length);

            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return ucs2Write(this, string, offset, length);

            default:
              if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
              encoding = ('' + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };

      Buffer.prototype.toJSON = function toJSON() {
        return {
          type: 'Buffer',
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };

      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }

      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        var res = [];
        var i = start;

        while (i < end) {
          var firstByte = buf[i];
          var codePoint = null;
          var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

          if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;

            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 0x80) {
                  codePoint = firstByte;
                }

                break;

              case 2:
                secondByte = buf[i + 1];

                if ((secondByte & 0xC0) === 0x80) {
                  tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

                  if (tempCodePoint > 0x7F) {
                    codePoint = tempCodePoint;
                  }
                }

                break;

              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];

                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                  tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

                  if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                    codePoint = tempCodePoint;
                  }
                }

                break;

              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];

                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                  tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

                  if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                    codePoint = tempCodePoint;
                  }
                }

            }
          }

          if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
          } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
          }

          res.push(codePoint);
          i += bytesPerSequence;
        }

        return decodeCodePointsArray(res);
      } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
      // the lowest limit is Chrome, with 0x10000 args.
      // We go 1 magnitude less, for safety


      var MAX_ARGUMENTS_LENGTH = 0x1000;

      function decodeCodePointsArray(codePoints) {
        var len = codePoints.length;

        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
        } // Decode in chunks to avoid "call stack size exceeded".


        var res = '';
        var i = 0;

        while (i < len) {
          res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
        }

        return res;
      }

      function asciiSlice(buf, start, end) {
        var ret = '';
        end = Math.min(buf.length, end);

        for (var i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 0x7F);
        }

        return ret;
      }

      function latin1Slice(buf, start, end) {
        var ret = '';
        end = Math.min(buf.length, end);

        for (var i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }

        return ret;
      }

      function hexSlice(buf, start, end) {
        var len = buf.length;
        if (!start || start < 0) start = 0;
        if (!end || end < 0 || end > len) end = len;
        var out = '';

        for (var i = start; i < end; ++i) {
          out += toHex(buf[i]);
        }

        return out;
      }

      function utf16leSlice(buf, start, end) {
        var bytes = buf.slice(start, end);
        var res = '';

        for (var i = 0; i < bytes.length; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }

        return res;
      }

      Buffer.prototype.slice = function slice(start, end) {
        var len = this.length;
        start = ~~start;
        end = end === undefined ? len : ~~end;

        if (start < 0) {
          start += len;
          if (start < 0) start = 0;
        } else if (start > len) {
          start = len;
        }

        if (end < 0) {
          end += len;
          if (end < 0) end = 0;
        } else if (end > len) {
          end = len;
        }

        if (end < start) end = start;
        var newBuf;

        if (Buffer.TYPED_ARRAY_SUPPORT) {
          newBuf = this.subarray(start, end);
          newBuf.__proto__ = Buffer.prototype;
        } else {
          var sliceLen = end - start;
          newBuf = new Buffer(sliceLen, undefined);

          for (var i = 0; i < sliceLen; ++i) {
            newBuf[i] = this[i + start];
          }
        }

        return newBuf;
      };
      /*
       * Need to make sure that buffer isn't trying to write out of bounds.
       */


      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
        if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
      }

      Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
        offset = offset | 0;
        byteLength = byteLength | 0;
        if (!noAssert) checkOffset(offset, byteLength, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;

        while (++i < byteLength && (mul *= 0x100)) {
          val += this[offset + i] * mul;
        }

        return val;
      };

      Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
        offset = offset | 0;
        byteLength = byteLength | 0;

        if (!noAssert) {
          checkOffset(offset, byteLength, this.length);
        }

        var val = this[offset + --byteLength];
        var mul = 1;

        while (byteLength > 0 && (mul *= 0x100)) {
          val += this[offset + --byteLength] * mul;
        }

        return val;
      };

      Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 1, this.length);
        return this[offset];
      };

      Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };

      Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };

      Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
      };

      Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);
        return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };

      Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
        offset = offset | 0;
        byteLength = byteLength | 0;
        if (!noAssert) checkOffset(offset, byteLength, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;

        while (++i < byteLength && (mul *= 0x100)) {
          val += this[offset + i] * mul;
        }

        mul *= 0x80;
        if (val >= mul) val -= Math.pow(2, 8 * byteLength);
        return val;
      };

      Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
        offset = offset | 0;
        byteLength = byteLength | 0;
        if (!noAssert) checkOffset(offset, byteLength, this.length);
        var i = byteLength;
        var mul = 1;
        var val = this[offset + --i];

        while (i > 0 && (mul *= 0x100)) {
          val += this[offset + --i] * mul;
        }

        mul *= 0x80;
        if (val >= mul) val -= Math.pow(2, 8 * byteLength);
        return val;
      };

      Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 1, this.length);
        if (!(this[offset] & 0x80)) return this[offset];
        return (0xff - this[offset] + 1) * -1;
      };

      Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length);
        var val = this[offset] | this[offset + 1] << 8;
        return val & 0x8000 ? val | 0xFFFF0000 : val;
      };

      Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length);
        var val = this[offset + 1] | this[offset] << 8;
        return val & 0x8000 ? val | 0xFFFF0000 : val;
      };

      Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };

      Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };

      Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };

      Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };

      Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };

      Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };

      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length) throw new RangeError('Index out of range');
      }

      Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
        value = +value;
        offset = offset | 0;
        byteLength = byteLength | 0;

        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1;
          checkInt(this, value, offset, byteLength, maxBytes, 0);
        }

        var mul = 1;
        var i = 0;
        this[offset] = value & 0xFF;

        while (++i < byteLength && (mul *= 0x100)) {
          this[offset + i] = value / mul & 0xFF;
        }

        return offset + byteLength;
      };

      Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
        value = +value;
        offset = offset | 0;
        byteLength = byteLength | 0;

        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1;
          checkInt(this, value, offset, byteLength, maxBytes, 0);
        }

        var i = byteLength - 1;
        var mul = 1;
        this[offset + i] = value & 0xFF;

        while (--i >= 0 && (mul *= 0x100)) {
          this[offset + i] = value / mul & 0xFF;
        }

        return offset + byteLength;
      };

      Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
        if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
        this[offset] = value & 0xff;
        return offset + 1;
      };

      function objectWriteUInt16(buf, value, offset, littleEndian) {
        if (value < 0) value = 0xffff + value + 1;

        for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
          buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
        }
      }

      Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value & 0xff;
          this[offset + 1] = value >>> 8;
        } else {
          objectWriteUInt16(this, value, offset, true);
        }

        return offset + 2;
      };

      Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 8;
          this[offset + 1] = value & 0xff;
        } else {
          objectWriteUInt16(this, value, offset, false);
        }

        return offset + 2;
      };

      function objectWriteUInt32(buf, value, offset, littleEndian) {
        if (value < 0) value = 0xffffffff + value + 1;

        for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
          buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
        }
      }

      Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset + 3] = value >>> 24;
          this[offset + 2] = value >>> 16;
          this[offset + 1] = value >>> 8;
          this[offset] = value & 0xff;
        } else {
          objectWriteUInt32(this, value, offset, true);
        }

        return offset + 4;
      };

      Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = value & 0xff;
        } else {
          objectWriteUInt32(this, value, offset, false);
        }

        return offset + 4;
      };

      Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
        value = +value;
        offset = offset | 0;

        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1);
          checkInt(this, value, offset, byteLength, limit - 1, -limit);
        }

        var i = 0;
        var mul = 1;
        var sub = 0;
        this[offset] = value & 0xFF;

        while (++i < byteLength && (mul *= 0x100)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }

          this[offset + i] = (value / mul >> 0) - sub & 0xFF;
        }

        return offset + byteLength;
      };

      Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
        value = +value;
        offset = offset | 0;

        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1);
          checkInt(this, value, offset, byteLength, limit - 1, -limit);
        }

        var i = byteLength - 1;
        var mul = 1;
        var sub = 0;
        this[offset + i] = value & 0xFF;

        while (--i >= 0 && (mul *= 0x100)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }

          this[offset + i] = (value / mul >> 0) - sub & 0xFF;
        }

        return offset + byteLength;
      };

      Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
        if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
        if (value < 0) value = 0xff + value + 1;
        this[offset] = value & 0xff;
        return offset + 1;
      };

      Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value & 0xff;
          this[offset + 1] = value >>> 8;
        } else {
          objectWriteUInt16(this, value, offset, true);
        }

        return offset + 2;
      };

      Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 8;
          this[offset + 1] = value & 0xff;
        } else {
          objectWriteUInt16(this, value, offset, false);
        }

        return offset + 2;
      };

      Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value & 0xff;
          this[offset + 1] = value >>> 8;
          this[offset + 2] = value >>> 16;
          this[offset + 3] = value >>> 24;
        } else {
          objectWriteUInt32(this, value, offset, true);
        }

        return offset + 4;
      };

      Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset | 0;
        if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
        if (value < 0) value = 0xffffffff + value + 1;

        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = value & 0xff;
        } else {
          objectWriteUInt32(this, value, offset, false);
        }

        return offset + 4;
      };

      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length) throw new RangeError('Index out of range');
        if (offset < 0) throw new RangeError('Index out of range');
      }

      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
        }

        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }

      Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };

      Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };

      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
        }

        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }

      Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };

      Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


      Buffer.prototype.copy = function copy(target, targetStart, start, end) {
        if (!start) start = 0;
        if (!end && end !== 0) end = this.length;
        if (targetStart >= target.length) targetStart = target.length;
        if (!targetStart) targetStart = 0;
        if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

        if (end === start) return 0;
        if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

        if (targetStart < 0) {
          throw new RangeError('targetStart out of bounds');
        }

        if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
        if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

        if (end > this.length) end = this.length;

        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }

        var len = end - start;
        var i;

        if (this === target && start < targetStart && targetStart < end) {
          // descending copy from end
          for (i = len - 1; i >= 0; --i) {
            target[i + targetStart] = this[i + start];
          }
        } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
          // ascending copy from start
          for (i = 0; i < len; ++i) {
            target[i + targetStart] = this[i + start];
          }
        } else {
          Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
        }

        return len;
      }; // Usage:
      //    buffer.fill(number[, offset[, end]])
      //    buffer.fill(buffer[, offset[, end]])
      //    buffer.fill(string[, offset[, end]][, encoding])


      Buffer.prototype.fill = function fill(val, start, end, encoding) {
        // Handle string cases:
        if (typeof val === 'string') {
          if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
          }

          if (val.length === 1) {
            var code = val.charCodeAt(0);

            if (code < 256) {
              val = code;
            }
          }

          if (encoding !== undefined && typeof encoding !== 'string') {
            throw new TypeError('encoding must be a string');
          }

          if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
            throw new TypeError('Unknown encoding: ' + encoding);
          }
        } else if (typeof val === 'number') {
          val = val & 255;
        } // Invalid ranges are not set to a default, so can range check early.


        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError('Out of range index');
        }

        if (end <= start) {
          return this;
        }

        start = start >>> 0;
        end = end === undefined ? this.length : end >>> 0;
        if (!val) val = 0;
        var i;

        if (typeof val === 'number') {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
          var len = bytes.length;

          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }

        return this;
      }; // HELPER FUNCTIONS
      // ================


      var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

      function base64clean(str) {
        // Node strips out invalid characters like \n and \t from the string, base64-js does not
        str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

        if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

        while (str.length % 4 !== 0) {
          str = str + '=';
        }

        return str;
      }

      function stringtrim(str) {
        if (str.trim) return str.trim();
        return str.replace(/^\s+|\s+$/g, '');
      }

      function toHex(n) {
        if (n < 16) return '0' + n.toString(16);
        return n.toString(16);
      }

      function utf8ToBytes(string, units) {
        units = units || Infinity;
        var codePoint;
        var length = string.length;
        var leadSurrogate = null;
        var bytes = [];

        for (var i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i); // is surrogate component

          if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
              // no lead yet
              if (codePoint > 0xDBFF) {
                // unexpected trail
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                continue;
              } else if (i + 1 === length) {
                // unpaired lead
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                continue;
              } // valid lead


              leadSurrogate = codePoint;
              continue;
            } // 2 leads in a row


            if (codePoint < 0xDC00) {
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              leadSurrogate = codePoint;
              continue;
            } // valid surrogate pair


            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
          } else if (leadSurrogate) {
            // valid bmp char, but last char was a lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          }

          leadSurrogate = null; // encode utf8

          if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
          } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
          } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
          } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
          } else {
            throw new Error('Invalid code point');
          }
        }

        return bytes;
      }

      function asciiToBytes(str) {
        var byteArray = [];

        for (var i = 0; i < str.length; ++i) {
          // Node's code seems to be doing this and not & 0x7F..
          byteArray.push(str.charCodeAt(i) & 0xFF);
        }

        return byteArray;
      }

      function utf16leToBytes(str, units) {
        var c, hi, lo;
        var byteArray = [];

        for (var i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0) break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }

        return byteArray;
      }

      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }

      function blitBuffer(src, dst, offset, length) {
        for (var i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length) break;
          dst[i + offset] = src[i];
        }

        return i;
      }

      function isnan(val) {
        return val !== val; // eslint-disable-line no-self-compare
      }
      /* WEBPACK VAR INJECTION */

    }).call(this, __webpack_require__(
    /*! ./../webpack/buildin/global.js */
    "./node_modules/webpack/buildin/global.js"));
    /***/
  },

  /***/
  "./node_modules/ieee754/index.js":
  /*!***************************************!*\
    !*** ./node_modules/ieee754/index.js ***!
    \***************************************/

  /*! no static exports found */

  /***/
  function node_modulesIeee754IndexJs(module, exports) {
    exports.read = function (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];
      i += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;

      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;

      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }

      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    };

    exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);

        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }

        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }

        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = e << mLen | m;
      eLen += mLen;

      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    };
    /***/

  },

  /***/
  "./node_modules/isarray/index.js":
  /*!***************************************!*\
    !*** ./node_modules/isarray/index.js ***!
    \***************************************/

  /*! no static exports found */

  /***/
  function node_modulesIsarrayIndexJs(module, exports) {
    var toString = {}.toString;

    module.exports = Array.isArray || function (arr) {
      return toString.call(arr) == '[object Array]';
    };
    /***/

  },

  /***/
  "./node_modules/webpack/buildin/global.js":
  /*!***********************************!*\
    !*** (webpack)/buildin/global.js ***!
    \***********************************/

  /*! no static exports found */

  /***/
  function node_modulesWebpackBuildinGlobalJs(module, exports) {
    var g; // This works in non-strict mode

    g = function () {
      return this;
    }();

    try {
      // This works if eval is allowed (see CSP)
      g = g || Function("return this")() || (1, eval)("this");
    } catch (e) {
      // This works if the window reference is available
      if (typeof window === "object") g = window;
    } // g can still be undefined, but nothing to do about it...
    // We return undefined, instead of nothing here, so it's
    // easier to handle this case. if(!global) { ...}


    module.exports = g;
    /***/
  },

  /***/
  "./src/hook.js":
  /*!*********************!*\
    !*** ./src/hook.js ***!
    \*********************/

  /*! no exports provided */

  /***/
  function srcHookJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony import */


    var src_backend_hook__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! src/backend/hook */
    "../../src/backend/hook.js");
    /* harmony import */


    var src_devtools_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! src/devtools/env */
    "../../src/devtools/env.js");

    Object(src_backend_hook__WEBPACK_IMPORTED_MODULE_0__["installHook"])(src_devtools_env__WEBPACK_IMPORTED_MODULE_1__["target"]);
    /***/
  }
  /******/

});

/***/ }),

/***/ "../node_modules/@vue/devtools/index.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {__webpack_require__("../node_modules/@vue/devtools/build/hook.js");

const target = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {};
module.exports = {
  connect: function connect(host, port) {
    let _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        io = _ref.io,
        showToast = _ref.showToast,
        app = _ref.app;

    target.__VUE_DEVTOOLS_HOST__ = host;
    target.__VUE_DEVTOOLS_PORT__ = port;
    if (io) target.__VUE_DEVTOOLS_SOCKET__ = io;
    if (showToast) target.__VUE_DEVTOOLS_TOAST__ = showToast;
    if (app) target.__VUE_ROOT_INSTANCES__ = Array.isArray(app) ? app : [app];

    __webpack_require__("../node_modules/@vue/devtools/build/backend.js");
  },
  init: Vue => {
    const tools = target.__VUE_DEVTOOLS_GLOBAL_HOOK__;
    tools.emit('init', Vue);
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/css-loader/lib/css-base.js":
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media " + item[2] + "{" + content + "}";
      } else {
        return content;
      }
    }).join("");
  }; // import a list of modules into the list


  list.i = function (modules, mediaQuery) {
    if (typeof modules === "string") modules = [[null, modules, ""]];
    var alreadyImportedModules = {};

    for (var i = 0; i < this.length; i++) {
      var id = this[i][0];
      if (typeof id === "number") alreadyImportedModules[id] = true;
    }

    for (i = 0; i < modules.length; i++) {
      var item = modules[i]; // skip already imported module
      // this implementation is not 100% perfect for weird media query combinations
      //  when a module is imported multiple times with different media queries.
      //  I hope this will never occur (Hey this way we have smaller bundles)

      if (typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
        if (mediaQuery && !item[2]) {
          item[2] = mediaQuery;
        } else if (mediaQuery) {
          item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
        }

        list.push(item);
      }
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || '';
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;
  return '/*# ' + data + ' */';
}

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/load-application-css-regular.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const loadCss = __webpack_require__("../node_modules/nativescript-dev-webpack/load-application-css.js");

module.exports = function () {
  loadCss(function () {
    const appCssContext = __webpack_require__("./ sync ^\\.\\/app\\.(css|scss|less|sass)$");

    global.registerWebpackModules(appCssContext);
  });
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/load-application-css.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = function (loadModuleFn) {
  const application = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

  __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-scope.js");

  loadModuleFn();
  application.loadAppCss();
};

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js":
/***/ (function(module, exports) {

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if (typeof window === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ "../node_modules/nativescript-socket.io/helpers.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var JSONObject = org.json.JSONObject;
var JSONArray = org.json.JSONArray;
var JSONException = org.json.JSONException;

function serialize(data) {
  var node;

  switch (typeof data) {
    case 'string':
    case 'boolean':
    case 'number':
      return data;

    case 'object':
      if (data instanceof Date) {
        return data.toJSON();
      }

      if (!data) {
        return null;
      }

      if (Array.isArray(data)) {
        node = new JSONArray();
        data.forEach(function (v) {
          node.put(serialize(v));
        });
        return node;
      }

      node = new JSONObject();
      Object.keys(data).forEach(function (key) {
        var v = data[key];
        node.put(key, serialize(v));
      });
      return node;

    default:
      return null;
  }
}

exports.serialize = serialize;

function deserialize(nativeData) {
  if (nativeData === null || typeof nativeData !== 'object') {
    return nativeData;
  }

  switch (nativeData.getClass().getName()) {
    case 'java.lang.String':
      return String(nativeData);

    case 'java.lang.Boolean':
      return String(nativeData) === 'true';

    case 'java.lang.Integer':
    case 'java.lang.Long':
    case 'java.lang.Double':
      return Number(String(nativeData));

    case 'org.json.JSONArray':
      var array = [];

      for (var i = 0, l = nativeData.length(); i < l; i++) {
        array[i] = deserialize(nativeData.get(i));
      }

      return array;

    case 'org.json.JSONObject':
      var dict = {};
      var iterator = nativeData.keys();

      while (iterator.hasNext()) {
        var key = iterator.next();
        dict[key] = deserialize(nativeData.get(key));
      }

      return dict;

    default:
      return null;
  }
}

exports.deserialize = deserialize;

/***/ }),

/***/ "../node_modules/nativescript-socket.io/socketio.common.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var Common = function () {
  function Common() {
    this._listeners = new WeakMap();
  }

  Object.defineProperty(Common.prototype, "disconnected", {
    get: function get() {
      return !this.connected;
    },
    enumerable: true,
    configurable: true
  });

  Common.prototype.open = function () {
    this.connect();
  };

  Common.prototype.close = function () {
    this.disconnect();
  };

  Common.prototype.addEventListener = function (event, callback) {
    return this.on(event, callback);
  };

  Common.prototype.removeListener = function (event, callback) {
    return this.off(event, callback);
  };

  Common.prototype.removeEventListener = function (event, callback) {
    return this.off(event, callback);
  };

  return Common;
}();

exports.Common = Common;

exports.debugNop = function () {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
};

function debugDefault() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  args = args.map(function (value) {
    if (typeof value === 'object' && value) {
      try {
        value = JSON.stringify(value);
      } catch (e) {
        value = value.toString();
      }
    }

    return value;
  });
  args.unshift('nativescript-socket.io');
  console.log.apply(console, args);
}

exports.debugDefault = debugDefault;
var _debug = exports.debugNop;

function debug() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  _debug.apply(null, args);
}

exports.debug = debug;

function enableDebug(debugFn) {
  if (debugFn === void 0) {
    debugFn = debugDefault;
  }

  _debug = debugFn;
}

exports.enableDebug = enableDebug;

function disableDebug() {
  _debug = exports.debugNop;
}

exports.disableDebug = disableDebug;

/***/ }),

/***/ "../node_modules/nativescript-socket.io/socketio.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
  var extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var socketio_common_1 = __webpack_require__("../node_modules/nativescript-socket.io/socketio.common.js");

exports.enableDebug = socketio_common_1.enableDebug;
exports.disableDebug = socketio_common_1.disableDebug;

var helpers_1 = __webpack_require__("../node_modules/nativescript-socket.io/helpers.js");

var _Emitter = io.socket.emitter.Emitter;
var _IO = io.socket.client.IO;
var _Socket = io.socket.client.Socket;
var _Ack = io.socket.client.Ack;
var SOCKET_CLASS = 'io.socket.client.Socket';

var SocketIO = function (_super) {
  __extends(SocketIO, _super);

  function SocketIO(uri, options) {
    if (options === void 0) {
      options = {};
    }

    var _this = _super.call(this) || this;

    var _options = new _IO.Options();

    if (options.query) {
      if (typeof options.query === 'string') {
        _options.query = options.query;
      } else {
        _options.query = Object.keys(options.query).map(function (key) {
          return encodeURIComponent(key) + '=' + encodeURIComponent(options.query[key]);
        }).join('&');
      }
    }

    if (options.android) {
      Object.keys(options.android).forEach(function (prop) {
        _options[prop] = options.android[prop];
      });
    }

    _this.android = _IO.socket(uri, _options);
    return _this;
  }

  Object.defineProperty(SocketIO.prototype, "connected", {
    get: function get() {
      return this.android && this.android.connected();
    },
    enumerable: true,
    configurable: true
  });

  SocketIO.prototype.connect = function () {
    this.android.connect();
  };

  SocketIO.prototype.disconnect = function () {
    this.android.disconnect();
  };

  SocketIO.prototype.on = function (event, callback) {
    var listener = function listener(args) {
      var payload = Array.prototype.slice.call(args);
      var ack = payload.pop();

      if (typeof ack === 'undefined') {
        ack = null;
      } else if (typeof ack === 'object' && ack && !(ack.getClass().getName().indexOf(SOCKET_CLASS) === 0 && ack.call)) {
        payload.push(ack);
        ack = null;
      }

      payload = payload.map(helpers_1.deserialize);
      socketio_common_1.debug('on', event, payload, ack ? 'ack' : '');

      if (ack) {
        var _ack = function _ack() {
          var args = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }

          socketio_common_1.debug('on', event, 'ack', args);
          args = args.map(helpers_1.serialize);
          ack.call(args);
        };

        payload.push(_ack);
      }

      callback.apply(null, payload);
    };

    listener = new _Emitter.Listener({
      call: listener
    });

    this._listeners.set(callback, listener);

    this.android.on(event, listener);
    return this;
  };

  SocketIO.prototype.once = function (event, callback) {
    var listener = function listener(args) {
      var payload = Array.prototype.slice.call(args);
      var ack = payload.pop();

      if (typeof ack === 'undefined') {
        ack = null;
      } else if (typeof ack === 'object' && ack && !(ack.getClass().getName().indexOf(SOCKET_CLASS) === 0 && ack.call)) {
        payload.push(ack);
        ack = null;
      }

      payload = payload.map(helpers_1.deserialize);
      socketio_common_1.debug('once', event, payload, ack ? 'ack' : '');

      if (ack) {
        var _ack = function _ack() {
          var args = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }

          socketio_common_1.debug('once', event, 'ack', args);
          args = args.map(helpers_1.serialize);
          ack.call(args);
        };

        payload.push(_ack);
      }

      callback.apply(null, payload);
    };

    listener = new _Emitter.Listener({
      call: listener
    });

    this._listeners.set(callback, listener);

    this.android.once(event, listener);
    return this;
  };

  SocketIO.prototype.off = function (event, callback) {
    socketio_common_1.debug('off', event, callback);

    if (callback) {
      var listener = this._listeners.get(callback);

      if (listener) {
        this.android.off(event, listener);

        this._listeners.delete(callback);
      }
    } else {
      this.android.off(event);
    }

    return this;
  };

  SocketIO.prototype.emit = function (event) {
    var payload = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      payload[_i - 1] = arguments[_i];
    }

    var ack = payload.pop();

    if (typeof ack === 'undefined') {
      ack = null;
    } else if (typeof ack !== 'function') {
      payload.push(ack);
      ack = null;
    }

    socketio_common_1.debug('emit', event, payload, ack ? 'ack' : '');
    payload = payload.map(helpers_1.serialize);

    if (ack) {
      var _ack = function _ack(args) {
        args = Array.prototype.slice.call(args).map(helpers_1.deserialize);
        socketio_common_1.debug('emit', event, 'ack', args);
        ack.apply(null, args);
      };

      _ack = new _Ack({
        call: _ack
      });
      payload.push(_ack);
    }

    this.android.emit(event, payload);
    return this;
  };

  SocketIO.prototype.removeAllListeners = function () {
    this.android.off();
    return this;
  };

  return SocketIO;
}(socketio_common_1.Common);

exports.SocketIO = SocketIO;

function connect(uri, options) {
  var socketio = new SocketIO(uri, options || {});
  socketio.connect();
  return socketio;
}

exports.connect = connect;

/***/ }),

/***/ "../node_modules/nativescript-toast/toast.js":
/***/ (function(module, exports, __webpack_require__) {

/*global require, exports, android*/
var application = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

function makeText(text, duration) {
  "use strict";

  var Toast = android.widget.Toast;

  if (typeof text !== "string") {
    throw new Error("The `text` parameter is missing.");
  }

  var d = typeof duration === "string" && duration[0] === "l" ? Toast.LENGTH_LONG : Toast.LENGTH_SHORT;
  var centeredText = new android.text.SpannableString(text);
  centeredText.setSpan(new android.text.style.AlignmentSpan.Standard(android.text.Layout.Alignment.ALIGN_CENTER), 0, text.length - 1, android.text.Spannable.SPAN_INCLUSIVE_INCLUSIVE);
  return Toast.makeText(application.android.context, centeredText, d);
}

exports.makeText = makeText;

/***/ }),

/***/ "../node_modules/nativescript-vue-devtools/index.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const devtools = __webpack_require__("../node_modules/@vue/devtools/index.js");

const _require = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js"),
      isAndroid = _require.isAndroid;

if (!global.performance) {
  global.performance = {};
}

if (!global.performance.now) {
  const nowOffset = Date.now();

  global.performance.now = function now() {
    return Date.now() - nowOffset;
  };
}

if (!global.requestAnimationFrame) {
  global.requestAnimationFrame = function raf(cb) {
    return setTimeout(cb, 1000 / 60);
  };
}
/**
 * Returns the correct address for the host machine when running on emulator
 * @param host
 * @param port
 * @returns {string}
 */


function getServerIpAddress(host, port) {
  if (host) {
    return `${host}:${port}`;
  }

  if (isAndroid) {
    const FINGERPRINT = android.os.Build.FINGERPRINT;

    if (FINGERPRINT.includes("vbox")) {
      // running on genymotion
      return `10.0.3.2:${port}`;
    } else if (FINGERPRINT.includes("generic")) {
      // running on android emulator
      return `10.0.2.2:${port}`;
    }
  } // ios simulator uses localhost


  return `127.0.0.1:${port}`;
}

module.exports = function install(Vue) {
  let _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$debug = _ref.debug,
      debug = _ref$debug === void 0 ? false : _ref$debug,
      _ref$host = _ref.host,
      host = _ref$host === void 0 ? null : _ref$host,
      _ref$port = _ref.port,
      port = _ref$port === void 0 ? 8098 : _ref$port;

  const startApp = Vue.prototype.$start;

  Vue.prototype.$start = function () {
    const setupDevtools = () => {
      devtools.connect('ws://localhost', port, {
        app: this,
        showToast: message => __webpack_require__("../node_modules/nativescript-toast/toast.js").makeText(message).show(),

        io() {
          const address = `http://${getServerIpAddress(host, port)}`;

          const SocketIO = __webpack_require__("../node_modules/nativescript-socket.io/socketio.js");

          debug && SocketIO.enableDebug();
          return SocketIO.connect(address);
        }

      });
      devtools.init(Vue);
    };

    if (isAndroid) {
      setupDevtools();
    } else {
      // on ios we need to delay the call because the socket connection is not established
      // if called too early in the application startup process
      // we might need to add a delay to the setTimeout in the future
      setTimeout(setupDevtools);
    }

    return startApp.call(this);
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/nativescript-vue/dist/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * NativeScript-Vue v2.0.2
 * (Using Vue v2.5.17)
 * (c) 2017-2018 rigor789
 * Released under the MIT license.
 */


function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var platform = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var layoutBase = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js");

var contentView = __webpack_require__("../node_modules/tns-core-modules/ui/content-view/content-view.js");

var view = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var types = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var xml = __webpack_require__("../node_modules/tns-core-modules/xml/xml.js");

var application = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

var application__default = _interopDefault(application);

var frame = __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame.js");

var arrayMap = function arrayMap(xs, f) {
  if (xs.map) {
    return xs.map(f);
  }

  var res = [];

  for (var i = 0; i < xs.length; i++) {
    var x = xs[i];

    if (hasOwn.call(xs, i)) {
      res.push(f(x, i, xs));
    }
  }

  return res;
};

var hasOwn = Object.prototype.hasOwnProperty;
var indexOf = [].indexOf;

var indexof = function indexof(arr, obj) {
  if (indexOf) {
    return arr.indexOf(obj);
  }

  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) {
      return i;
    }
  }

  return -1;
};

var isarray = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

var hasOwn$1 = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

var foreach = function forEach(obj, fn, ctx) {
  if (toString.call(fn) !== '[object Function]') {
    throw new TypeError('iterator must be a function');
  }

  var l = obj.length;

  if (l === +l) {
    for (var i = 0; i < l; i++) {
      fn.call(ctx, obj[i], i, obj);
    }
  } else {
    for (var k in obj) {
      if (hasOwn$1.call(obj, k)) {
        fn.call(ctx, obj[k], k, obj);
      }
    }
  }
};

var hasOwn$2 = Object.prototype.hasOwnProperty;

var arrayReduce = function arrayReduce(xs, f, acc) {
  var hasAcc = arguments.length >= 3;

  if (hasAcc && xs.reduce) {
    return xs.reduce(f, acc);
  }

  if (xs.reduce) {
    return xs.reduce(f);
  }

  for (var i = 0; i < xs.length; i++) {
    if (!hasOwn$2.call(xs, i)) {
      continue;
    }

    if (!hasAcc) {
      acc = xs[i];
      hasAcc = true;
      continue;
    }

    acc = f(acc, xs[i], i);
  }

  return acc;
};

var hasOwn$3 = Object.prototype.hasOwnProperty;
var toString$1 = Object.prototype.toString;

var isFunction = function isFunction(fn) {
  return typeof fn === 'function' && !(fn instanceof RegExp) || toString$1.call(fn) === '[object Function]';
};

var foreach$1 = function forEach(obj, fn) {
  if (!isFunction(fn)) {
    throw new TypeError('iterator must be a function');
  }

  var i,
      k,
      isString = typeof obj === 'string',
      l = obj.length,
      context = arguments.length > 2 ? arguments[2] : null;

  if (l === +l) {
    for (i = 0; i < l; i++) {
      if (context === null) {
        fn(isString ? obj.charAt(i) : obj[i], i, obj);
      } else {
        fn.call(context, isString ? obj.charAt(i) : obj[i], i, obj);
      }
    }
  } else {
    for (k in obj) {
      if (hasOwn$3.call(obj, k)) {
        if (context === null) {
          fn(obj[k], k, obj);
        } else {
          fn.call(context, obj[k], k, obj);
        }
      }
    }
  }
};

var toString$2 = Object.prototype.toString;

var isArguments = function isArguments(value) {
  var str = toString$2.call(value);
  var isArguments = str === '[object Arguments]';

  if (!isArguments) {
    isArguments = str !== '[object Array]' && value !== null && typeof value === 'object' && typeof value.length === 'number' && value.length >= 0 && toString$2.call(value.callee) === '[object Function]';
  }

  return isArguments;
}; // modified from https://github.com/es-shims/es5-shim


var has = Object.prototype.hasOwnProperty,
    toString$3 = Object.prototype.toString,
    hasDontEnumBug = !{
  'toString': null
}.propertyIsEnumerable('toString'),
    hasProtoEnumBug = function () {}.propertyIsEnumerable('prototype'),
    dontEnums = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"];

var keysShim = function keys(object) {
  var isObject = object !== null && typeof object === 'object',
      isFunction = toString$3.call(object) === '[object Function]',
      isArguments$$1 = isArguments(object),
      theKeys = [];

  if (!isObject && !isFunction && !isArguments$$1) {
    throw new TypeError("Object.keys called on a non-object");
  }

  if (isArguments$$1) {
    foreach$1(object, function (value, index) {
      theKeys.push(index);
    });
  } else {
    var name,
        skipProto = hasProtoEnumBug && isFunction;

    for (name in object) {
      if (!(skipProto && name === 'prototype') && has.call(object, name)) {
        theKeys.push(name);
      }
    }
  }

  if (hasDontEnumBug) {
    var ctor = object.constructor,
        skipConstructor = ctor && ctor.prototype === object;
    foreach$1(dontEnums, function (dontEnum) {
      if (!(skipConstructor && dontEnum === 'constructor') && has.call(object, dontEnum)) {
        theKeys.push(dontEnum);
      }
    });
  }

  return theKeys;
};

keysShim.shim = function shimObjectKeys() {
  if (!Object.keys) {
    Object.keys = keysShim;
  }

  return Object.keys || keysShim;
};

var objectKeys = keysShim;
var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, module) {
  return module = {
    exports: {}
  }, fn(module, module.exports), module.exports;
}

var json3 = createCommonjsModule(function (module, exports) {
  (function (root) {
    // Detect the `define` function exposed by asynchronous module loaders. The
    // strict `define` check is necessary for compatibility with `r.js`.
    var isLoader = typeof undefined === "function"; // Use the `global` object exposed by Node (including Browserify via
    // `insert-module-globals`), Narwhal, and Ringo as the default context.
    // Rhino exports a `global` function instead.

    var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal;

    if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal)) {
      root = freeGlobal;
    } // Public: Initializes JSON 3 using the given `context` object, attaching the
    // `stringify` and `parse` functions to the specified `exports` object.


    function runInContext(context, exports) {
      context || (context = root["Object"]());
      exports || (exports = root["Object"]()); // Native constructor aliases.

      var Number = context["Number"] || root["Number"],
          String = context["String"] || root["String"],
          Object = context["Object"] || root["Object"],
          Date = context["Date"] || root["Date"],
          SyntaxError = context["SyntaxError"] || root["SyntaxError"],
          TypeError = context["TypeError"] || root["TypeError"],
          Math = context["Math"] || root["Math"],
          nativeJSON = context["JSON"] || root["JSON"]; // Delegate to the native `stringify` and `parse` implementations.

      if (typeof nativeJSON == "object" && nativeJSON) {
        exports.stringify = nativeJSON.stringify;
        exports.parse = nativeJSON.parse;
      } // Convenience aliases.


      var objectProto = Object.prototype,
          getClass = objectProto.toString,
          _isProperty,
          _forEach,
          undef; // Test the `Date#getUTC*` methods. Based on work by @Yaffle.


      var isExtended = new Date(-3509827334573292);

      try {
        // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
        // results for certain dates in Opera >= 10.53.
        isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 && // Safari < 2.0.2 stores the internal millisecond time value correctly,
        // but clips the values returned by the date methods to the range of
        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
      } catch (exception) {} // Internal: Determines whether the native `JSON.stringify` and `parse`
      // implementations are spec-compliant. Based on work by Ken Snyder.


      function has(name) {
        if (has[name] !== undef) {
          // Return cached feature test result.
          return has[name];
        }

        var isSupported;

        if (name == "bug-string-char-index") {
          // IE <= 7 doesn't support accessing string characters using square
          // bracket notation. IE 8 only supports this for primitives.
          isSupported = "a"[0] != "a";
        } else if (name == "json") {
          // Indicates whether both `JSON.stringify` and `JSON.parse` are
          // supported.
          isSupported = has("json-stringify") && has("json-parse");
        } else {
          var value,
              serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}'; // Test `JSON.stringify`.

          if (name == "json-stringify") {
            var stringify = exports.stringify,
                stringifySupported = typeof stringify == "function" && isExtended;

            if (stringifySupported) {
              // A test function object with a custom `toJSON` method.
              (value = function value() {
                return 1;
              }).toJSON = value;

              try {
                stringifySupported = // Firefox 3.1b1 and b2 serialize string, number, and boolean
                // primitives as object literals.
                stringify(0) === "0" && // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
                // literals.
                stringify(new Number()) === "0" && stringify(new String()) == '""' && // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
                // does not define a canonical JSON representation (this applies to
                // objects with `toJSON` properties as well, *unless* they are nested
                // within an object or array).
                stringify(getClass) === undef && // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
                // FF 3.1b3 pass this test.
                stringify(undef) === undef && // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
                // respectively, if the value is omitted entirely.
                stringify() === undef && // FF 3.1b1, 2 throw an error if the given value is not a number,
                // string, array, object, Boolean, or `null` literal. This applies to
                // objects with custom `toJSON` methods as well, unless they are nested
                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
                // methods entirely.
                stringify(value) === "1" && stringify([value]) == "[1]" && // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
                // `"[null]"`.
                stringify([undef]) == "[null]" && // YUI 3.0.0b1 fails to serialize `null` literals.
                stringify(null) == "null" && // FF 3.1b1, 2 halts serialization if an array contains a function:
                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
                // elides non-JSON values from objects and arrays, unless they
                // define custom `toJSON` methods.
                stringify([undef, getClass, null]) == "[null,null,null]" && // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
                // where character escape codes are expected (e.g., `\b` => `\u0008`).
                stringify({
                  "a": [value, true, false, null, "\x00\b\n\f\r\t"]
                }) == serialized && // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
                stringify(null, value) === "1" && stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" && // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
                // serialize extended years.
                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' && // The milliseconds are optional in ES 5, but required in 5.1.
                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' && // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
                // four-digit years instead of six-digit years. Credits: @Yaffle.
                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' && // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
                // values less than 1000. Credits: @Yaffle.
                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
              } catch (exception) {
                stringifySupported = false;
              }
            }

            isSupported = stringifySupported;
          } // Test `JSON.parse`.


          if (name == "json-parse") {
            var parse = exports.parse;

            if (typeof parse == "function") {
              try {
                // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
                // Conforming implementations should also coerce the initial argument to
                // a string prior to parsing.
                if (parse("0") === 0 && !parse(false)) {
                  // Simple parsing test.
                  value = parse(serialized);
                  var parseSupported = value["a"].length == 5 && value["a"][0] === 1;

                  if (parseSupported) {
                    try {
                      // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                      parseSupported = !parse('"\t"');
                    } catch (exception) {}

                    if (parseSupported) {
                      try {
                        // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                        // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                        // certain octal literals.
                        parseSupported = parse("01") !== 1;
                      } catch (exception) {}
                    }

                    if (parseSupported) {
                      try {
                        // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                        // points. These environments, along with FF 3.1b1 and 2,
                        // also allow trailing commas in JSON objects and arrays.
                        parseSupported = parse("1.") !== 1;
                      } catch (exception) {}
                    }
                  }
                }
              } catch (exception) {
                parseSupported = false;
              }
            }

            isSupported = parseSupported;
          }
        }

        return has[name] = !!isSupported;
      }

      if (!has("json")) {
        // Common `[[Class]]` name aliases.
        var functionClass = "[object Function]",
            dateClass = "[object Date]",
            numberClass = "[object Number]",
            stringClass = "[object String]",
            arrayClass = "[object Array]",
            booleanClass = "[object Boolean]"; // Detect incomplete support for accessing string characters by index.

        var charIndexBuggy = has("bug-string-char-index"); // Define additional utility methods if the `Date` methods are buggy.

        if (!isExtended) {
          var floor = Math.floor; // A mapping between the months of the year and the number of days between
          // January 1st and the first of the respective month.

          var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]; // Internal: Calculates the number of days between the Unix epoch and the
          // first day of the given month.

          var getDay = function getDay(year, month) {
            return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
          };
        } // Internal: Determines if a property is a direct property of the given
        // object. Delegates to the native `Object#hasOwnProperty` method.


        if (!(_isProperty = objectProto.hasOwnProperty)) {
          _isProperty = function isProperty(property) {
            var members = {},
                constructor;

            if ((members.__proto__ = null, members.__proto__ = {
              // The *proto* property cannot be set multiple times in recent
              // versions of Firefox and SeaMonkey.
              "toString": 1
            }, members).toString != getClass) {
              // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
              // supports the mutable *proto* property.
              _isProperty = function isProperty(property) {
                // Capture and break the objectgs prototype chain (see section 8.6.2
                // of the ES 5.1 spec). The parenthesized expression prevents an
                // unsafe transformation by the Closure Compiler.
                var original = this.__proto__,
                    result = property in (this.__proto__ = null, this); // Restore the original prototype chain.

                this.__proto__ = original;
                return result;
              };
            } else {
              // Capture a reference to the top-level `Object` constructor.
              constructor = members.constructor; // Use the `constructor` property to simulate `Object#hasOwnProperty` in
              // other environments.

              _isProperty = function isProperty(property) {
                var parent = (this.constructor || constructor).prototype;
                return property in this && !(property in parent && this[property] === parent[property]);
              };
            }

            members = null;
            return _isProperty.call(this, property);
          };
        } // Internal: A set of primitive types used by `isHostType`.


        var PrimitiveTypes = {
          "boolean": 1,
          "number": 1,
          "string": 1,
          "undefined": 1
        }; // Internal: Determines if the given object `property` value is a
        // non-primitive.

        var isHostType = function isHostType(object, property) {
          var type = typeof object[property];
          return type == "object" ? !!object[property] : !PrimitiveTypes[type];
        }; // Internal: Normalizes the `for...in` iteration algorithm across
        // environments. Each enumerated key is yielded to a `callback` function.


        _forEach = function forEach(object, callback) {
          var size = 0,
              Properties,
              members,
              property; // Tests for bugs in the current environment's `for...in` algorithm. The
          // `valueOf` property inherits the non-enumerable flag from
          // `Object.prototype` in older versions of IE, Netscape, and Mozilla.

          (Properties = function Properties() {
            this.valueOf = 0;
          }).prototype.valueOf = 0; // Iterate over a new instance of the `Properties` class.

          members = new Properties();

          for (property in members) {
            // Ignore all properties inherited from `Object.prototype`.
            if (_isProperty.call(members, property)) {
              size++;
            }
          }

          Properties = members = null; // Normalize the iteration algorithm.

          if (!size) {
            // A list of non-enumerable properties inherited from `Object.prototype`.
            members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"]; // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
            // properties.

            _forEach = function forEach(object, callback) {
              var isFunction = getClass.call(object) == functionClass,
                  property,
                  length;
              var hasProperty = !isFunction && typeof object.constructor != "function" && isHostType(object, "hasOwnProperty") ? object.hasOwnProperty : _isProperty;

              for (property in object) {
                // Gecko <= 1.0 enumerates the `prototype` property of functions under
                // certain conditions; IE does not.
                if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                  callback(property);
                }
              } // Manually invoke the callback for each non-enumerable property.


              for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property)) {}
            };
          } else if (size == 2) {
            // Safari <= 2.0.4 enumerates shadowed properties twice.
            _forEach = function forEach(object, callback) {
              // Create a set of iterated properties.
              var members = {},
                  isFunction = getClass.call(object) == functionClass,
                  property;

              for (property in object) {
                // Store each property name to prevent double enumeration. The
                // `prototype` property of functions is not enumerated due to cross-
                // environment inconsistencies.
                if (!(isFunction && property == "prototype") && !_isProperty.call(members, property) && (members[property] = 1) && _isProperty.call(object, property)) {
                  callback(property);
                }
              }
            };
          } else {
            // No bugs detected; use the standard `for...in` algorithm.
            _forEach = function forEach(object, callback) {
              var isFunction = getClass.call(object) == functionClass,
                  property,
                  isConstructor;

              for (property in object) {
                if (!(isFunction && property == "prototype") && _isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                  callback(property);
                }
              } // Manually invoke the callback for the `constructor` property due to
              // cross-environment inconsistencies.


              if (isConstructor || _isProperty.call(object, property = "constructor")) {
                callback(property);
              }
            };
          }

          return _forEach(object, callback);
        }; // Public: Serializes a JavaScript `value` as a JSON string. The optional
        // `filter` argument may specify either a function that alters how object and
        // array members are serialized, or an array of strings and numbers that
        // indicates which properties should be serialized. The optional `width`
        // argument may be either a string or number that specifies the indentation
        // level of the output.


        if (!has("json-stringify")) {
          // Internal: A map of control characters and their escaped equivalents.
          var Escapes = {
            92: "\\\\",
            34: '\\"',
            8: "\\b",
            12: "\\f",
            10: "\\n",
            13: "\\r",
            9: "\\t"
          }; // Internal: Converts `value` into a zero-padded string such that its
          // length is at least equal to `width`. The `width` must be <= 6.

          var leadingZeroes = "000000";

          var toPaddedString = function toPaddedString(width, value) {
            // The `|| 0` expression is necessary to work around a bug in
            // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
            return (leadingZeroes + (value || 0)).slice(-width);
          }; // Internal: Double-quotes a string `value`, replacing all ASCII control
          // characters (characters with code unit values between 0 and 31) with
          // their escaped equivalents. This is an implementation of the
          // `Quote(value)` operation defined in ES 5.1 section 15.12.3.


          var unicodePrefix = "\\u00";

          var quote = function quote(value) {
            var result = '"',
                index = 0,
                length = value.length,
                useCharIndex = !charIndexBuggy || length > 10;
            var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);

            for (; index < length; index++) {
              var charCode = value.charCodeAt(index); // If the character is a control character, append its Unicode or
              // shorthand escape sequence; otherwise, append the character as-is.

              switch (charCode) {
                case 8:
                case 9:
                case 10:
                case 12:
                case 13:
                case 34:
                case 92:
                  result += Escapes[charCode];
                  break;

                default:
                  if (charCode < 32) {
                    result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                    break;
                  }

                  result += useCharIndex ? symbols[index] : value.charAt(index);
              }
            }

            return result + '"';
          }; // Internal: Recursively serializes an object. Implements the
          // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.


          var serialize = function serialize(property, object, callback, properties, whitespace, indentation, stack) {
            var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;

            try {
              // Necessary for host object support.
              value = object[property];
            } catch (exception) {}

            if (typeof value == "object" && value) {
              className = getClass.call(value);

              if (className == dateClass && !_isProperty.call(value, "toJSON")) {
                if (value > -1 / 0 && value < 1 / 0) {
                  // Dates are serialized according to the `Date#toJSON` method
                  // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
                  // for the ISO 8601 date time string format.
                  if (getDay) {
                    // Manually compute the year, month, date, hours, minutes,
                    // seconds, and milliseconds if the `getUTC*` methods are
                    // buggy. Adapted from @Yaffle's `date-shim` project.
                    date = floor(value / 864e5);

                    for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++) {}

                    for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++) {}

                    date = 1 + date - getDay(year, month); // The `time` value specifies the time within the day (see ES
                    // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                    // to compute `A modulo B`, as the `%` operator does not
                    // correspond to the `modulo` operation for negative numbers.

                    time = (value % 864e5 + 864e5) % 864e5; // The hours, minutes, seconds, and milliseconds are obtained by
                    // decomposing the time within the day. See section 15.9.1.10.

                    hours = floor(time / 36e5) % 24;
                    minutes = floor(time / 6e4) % 60;
                    seconds = floor(time / 1e3) % 60;
                    milliseconds = time % 1e3;
                  } else {
                    year = value.getUTCFullYear();
                    month = value.getUTCMonth();
                    date = value.getUTCDate();
                    hours = value.getUTCHours();
                    minutes = value.getUTCMinutes();
                    seconds = value.getUTCSeconds();
                    milliseconds = value.getUTCMilliseconds();
                  } // Serialize extended years correctly.


                  value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) + "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) + // Months, dates, hours, minutes, and seconds should have two
                  // digits; milliseconds should have three.
                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) + // Milliseconds are optional in ES 5.0, but required in 5.1.
                  "." + toPaddedString(3, milliseconds) + "Z";
                } else {
                  value = null;
                }
              } else if (typeof value.toJSON == "function" && (className != numberClass && className != stringClass && className != arrayClass || _isProperty.call(value, "toJSON"))) {
                // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
                // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
                // ignores all `toJSON` methods on these objects unless they are
                // defined directly on an instance.
                value = value.toJSON(property);
              }
            }

            if (callback) {
              // If a replacement function was provided, call it to obtain the value
              // for serialization.
              value = callback.call(object, property, value);
            }

            if (value === null) {
              return "null";
            }

            className = getClass.call(value);

            if (className == booleanClass) {
              // Booleans are represented literally.
              return "" + value;
            } else if (className == numberClass) {
              // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
              // `"null"`.
              return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
            } else if (className == stringClass) {
              // Strings are double-quoted and escaped.
              return quote("" + value);
            } // Recursively serialize objects and arrays.


            if (typeof value == "object") {
              // Check for cyclic structures. This is a linear search; performance
              // is inversely proportional to the number of unique nested objects.
              for (length = stack.length; length--;) {
                if (stack[length] === value) {
                  // Cyclic structures cannot be serialized by `JSON.stringify`.
                  throw TypeError();
                }
              } // Add the object to the stack of traversed objects.


              stack.push(value);
              results = []; // Save the current indentation level and indent one additional level.

              prefix = indentation;
              indentation += whitespace;

              if (className == arrayClass) {
                // Recursively serialize array elements.
                for (index = 0, length = value.length; index < length; index++) {
                  element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                  results.push(element === undef ? "null" : element);
                }

                result = results.length ? whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : "[" + results.join(",") + "]" : "[]";
              } else {
                // Recursively serialize object members. Members are selected from
                // either a user-specified list of property names, or the object
                // itself.
                _forEach(properties || value, function (property) {
                  var element = serialize(property, value, callback, properties, whitespace, indentation, stack);

                  if (element !== undef) {
                    // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                    // is not the empty string, let `member` {quote(property) + ":"}
                    // be the concatenation of `member` and the `space` character."
                    // The "`space` character" refers to the literal space
                    // character, not the `space` {width} argument provided to
                    // `JSON.stringify`.
                    results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                  }
                });

                result = results.length ? whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : "{" + results.join(",") + "}" : "{}";
              } // Remove the object from the traversed object stack.


              stack.pop();
              return result;
            }
          }; // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.


          exports.stringify = function (source, filter, width) {
            var whitespace, callback, properties, className;

            if (typeof filter == "function" || typeof filter == "object" && filter) {
              if ((className = getClass.call(filter)) == functionClass) {
                callback = filter;
              } else if (className == arrayClass) {
                // Convert the property names array into a makeshift set.
                properties = {};

                for (var index = 0, length = filter.length, value; index < length; value = filter[index++], (className = getClass.call(value), className == stringClass || className == numberClass) && (properties[value] = 1)) {}
              }
            }

            if (width) {
              if ((className = getClass.call(width)) == numberClass) {
                // Convert the `width` to an integer and create a string containing
                // `width` number of space characters.
                if ((width -= width % 1) > 0) {
                  for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ") {}
                }
              } else if (className == stringClass) {
                whitespace = width.length <= 10 ? width : width.slice(0, 10);
              }
            } // Opera <= 7.54u2 discards the values associated with empty string keys
            // (`""`) only if they are used directly within an object member list
            // (e.g., `!("" in { "": 1})`).


            return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
          };
        } // Public: Parses a JSON source string.


        if (!has("json-parse")) {
          var fromCharCode = String.fromCharCode; // Internal: A map of escaped control characters and their unescaped
          // equivalents.

          var Unescapes = {
            92: "\\",
            34: '"',
            47: "/",
            98: "\b",
            116: "\t",
            110: "\n",
            102: "\f",
            114: "\r"
          }; // Internal: Stores the parser state.

          var Index, Source; // Internal: Resets the parser state and throws a `SyntaxError`.

          var abort = function abort() {
            Index = Source = null;
            throw SyntaxError();
          }; // Internal: Returns the next token, or `"$"` if the parser has reached
          // the end of the source string. A token may be a string, number, `null`
          // literal, or Boolean literal.


          var lex = function lex() {
            var source = Source,
                length = source.length,
                value,
                begin,
                position,
                isSigned,
                charCode;

            while (Index < length) {
              charCode = source.charCodeAt(Index);

              switch (charCode) {
                case 9:
                case 10:
                case 13:
                case 32:
                  // Skip whitespace tokens, including tabs, carriage returns, line
                  // feeds, and space characters.
                  Index++;
                  break;

                case 123:
                case 125:
                case 91:
                case 93:
                case 58:
                case 44:
                  // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
                  // the current position.
                  value = charIndexBuggy ? source.charAt(Index) : source[Index];
                  Index++;
                  return value;

                case 34:
                  // `"` delimits a JSON string; advance to the next character and
                  // begin parsing the string. String tokens are prefixed with the
                  // sentinel `@` character to distinguish them from punctuators and
                  // end-of-string tokens.
                  for (value = "@", Index++; Index < length;) {
                    charCode = source.charCodeAt(Index);

                    if (charCode < 32) {
                      // Unescaped ASCII control characters (those with a code unit
                      // less than the space character) are not permitted.
                      abort();
                    } else if (charCode == 92) {
                      // A reverse solidus (`\`) marks the beginning of an escaped
                      // control character (including `"`, `\`, and `/`) or Unicode
                      // escape sequence.
                      charCode = source.charCodeAt(++Index);

                      switch (charCode) {
                        case 92:
                        case 34:
                        case 47:
                        case 98:
                        case 116:
                        case 110:
                        case 102:
                        case 114:
                          // Revive escaped control characters.
                          value += Unescapes[charCode];
                          Index++;
                          break;

                        case 117:
                          // `\u` marks the beginning of a Unicode escape sequence.
                          // Advance to the first character and validate the
                          // four-digit code point.
                          begin = ++Index;

                          for (position = Index + 4; Index < position; Index++) {
                            charCode = source.charCodeAt(Index); // A valid sequence comprises four hexdigits (case-
                            // insensitive) that form a single hexadecimal value.

                            if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                              // Invalid Unicode escape sequence.
                              abort();
                            }
                          } // Revive the escaped character.


                          value += fromCharCode("0x" + source.slice(begin, Index));
                          break;

                        default:
                          // Invalid escape sequence.
                          abort();
                      }
                    } else {
                      if (charCode == 34) {
                        // An unescaped double-quote character marks the end of the
                        // string.
                        break;
                      }

                      charCode = source.charCodeAt(Index);
                      begin = Index; // Optimize for the common case where a string is valid.

                      while (charCode >= 32 && charCode != 92 && charCode != 34) {
                        charCode = source.charCodeAt(++Index);
                      } // Append the string as-is.


                      value += source.slice(begin, Index);
                    }
                  }

                  if (source.charCodeAt(Index) == 34) {
                    // Advance to the next character and return the revived string.
                    Index++;
                    return value;
                  } // Unterminated string.


                  abort();

                default:
                  // Parse numbers and literals.
                  begin = Index; // Advance past the negative sign, if one is specified.

                  if (charCode == 45) {
                    isSigned = true;
                    charCode = source.charCodeAt(++Index);
                  } // Parse an integer or floating-point value.


                  if (charCode >= 48 && charCode <= 57) {
                    // Leading zeroes are interpreted as octal literals.
                    if (charCode == 48 && (charCode = source.charCodeAt(Index + 1), charCode >= 48 && charCode <= 57)) {
                      // Illegal octal literal.
                      abort();
                    }

                    isSigned = false; // Parse the integer component.

                    for (; Index < length && (charCode = source.charCodeAt(Index), charCode >= 48 && charCode <= 57); Index++) {} // Floats cannot contain a leading decimal point; however, this
                    // case is already accounted for by the parser.


                    if (source.charCodeAt(Index) == 46) {
                      position = ++Index; // Parse the decimal component.

                      for (; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++) {}

                      if (position == Index) {
                        // Illegal trailing decimal.
                        abort();
                      }

                      Index = position;
                    } // Parse exponents. The `e` denoting the exponent is
                    // case-insensitive.


                    charCode = source.charCodeAt(Index);

                    if (charCode == 101 || charCode == 69) {
                      charCode = source.charCodeAt(++Index); // Skip past the sign following the exponent, if one is
                      // specified.

                      if (charCode == 43 || charCode == 45) {
                        Index++;
                      } // Parse the exponential component.


                      for (position = Index; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++) {}

                      if (position == Index) {
                        // Illegal empty exponent.
                        abort();
                      }

                      Index = position;
                    } // Coerce the parsed value to a JavaScript number.


                    return +source.slice(begin, Index);
                  } // A negative sign may only precede numbers.


                  if (isSigned) {
                    abort();
                  } // `true`, `false`, and `null` literals.


                  if (source.slice(Index, Index + 4) == "true") {
                    Index += 4;
                    return true;
                  } else if (source.slice(Index, Index + 5) == "false") {
                    Index += 5;
                    return false;
                  } else if (source.slice(Index, Index + 4) == "null") {
                    Index += 4;
                    return null;
                  } // Unrecognized token.


                  abort();
              }
            } // Return the sentinel `$` character if the parser has reached the end
            // of the source string.


            return "$";
          }; // Internal: Parses a JSON `value` token.


          var get = function get(value) {
            var results, hasMembers;

            if (value == "$") {
              // Unexpected end of input.
              abort();
            }

            if (typeof value == "string") {
              if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
                // Remove the sentinel `@` character.
                return value.slice(1);
              } // Parse object and array literals.


              if (value == "[") {
                // Parses a JSON array, returning a new JavaScript array.
                results = [];

                for (;; hasMembers || (hasMembers = true)) {
                  value = lex(); // A closing square bracket marks the end of the array literal.

                  if (value == "]") {
                    break;
                  } // If the array literal contains elements, the current token
                  // should be a comma separating the previous element from the
                  // next.


                  if (hasMembers) {
                    if (value == ",") {
                      value = lex();

                      if (value == "]") {
                        // Unexpected trailing `,` in array literal.
                        abort();
                      }
                    } else {
                      // A `,` must separate each array element.
                      abort();
                    }
                  } // Elisions and leading commas are not permitted.


                  if (value == ",") {
                    abort();
                  }

                  results.push(get(value));
                }

                return results;
              } else if (value == "{") {
                // Parses a JSON object, returning a new JavaScript object.
                results = {};

                for (;; hasMembers || (hasMembers = true)) {
                  value = lex(); // A closing curly brace marks the end of the object literal.

                  if (value == "}") {
                    break;
                  } // If the object literal contains members, the current token
                  // should be a comma separator.


                  if (hasMembers) {
                    if (value == ",") {
                      value = lex();

                      if (value == "}") {
                        // Unexpected trailing `,` in object literal.
                        abort();
                      }
                    } else {
                      // A `,` must separate each object member.
                      abort();
                    }
                  } // Leading commas are not permitted, object property names must be
                  // double-quoted strings, and a `:` must separate each property
                  // name and value.


                  if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                    abort();
                  }

                  results[value.slice(1)] = get(lex());
                }

                return results;
              } // Unexpected token encountered.


              abort();
            }

            return value;
          }; // Internal: Updates a traversed object member.


          var update = function update(source, property, callback) {
            var element = walk(source, property, callback);

            if (element === undef) {
              delete source[property];
            } else {
              source[property] = element;
            }
          }; // Internal: Recursively traverses a parsed JSON object, invoking the
          // `callback` function for each value. This is an implementation of the
          // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.


          var walk = function walk(source, property, callback) {
            var value = source[property],
                length;

            if (typeof value == "object" && value) {
              // `forEach` can't be used to traverse an array in Opera <= 8.54
              // because its `Object#hasOwnProperty` implementation returns `false`
              // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
              if (getClass.call(value) == arrayClass) {
                for (length = value.length; length--;) {
                  update(value, length, callback);
                }
              } else {
                _forEach(value, function (property) {
                  update(value, property, callback);
                });
              }
            }

            return callback.call(source, property, value);
          }; // Public: `JSON.parse`. See ES 5.1 section 15.12.2.


          exports.parse = function (source, callback) {
            var result, value;
            Index = 0;
            Source = "" + source;
            result = get(lex()); // If a JSON string contains multiple tokens, it is invalid.

            if (lex() != "$") {
              abort();
            } // Reset the parser state.


            Index = Source = null;
            return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
          };
        }
      }

      exports["runInContext"] = runInContext;
      return exports;
    }

    if (exports && !exports.nodeType && !isLoader) {
      // Export for CommonJS environments.
      runInContext(root, exports);
    } else {
      // Export for web browsers and JavaScript engines.
      var nativeJSON = root.JSON;
      var JSON3 = runInContext(root, root["JSON3"] = {
        // Public: Restores the original value of the global `JSON` object and
        // returns a reference to the `JSON3` object.
        "noConflict": function noConflict() {
          root.JSON = nativeJSON;
          return JSON3;
        }
      });
      root.JSON = {
        "parse": JSON3.parse,
        "stringify": JSON3.stringify
      };
    }
  })(commonjsGlobal);
});
/**
 * Module dependencies.
 */

/**
 * Make sure `Object.keys` work for `undefined`
 * values that are still there, like `document.all`.
 * http://lists.w3.org/Archives/Public/public-html/2009Jun/0546.html
 *
 * @api private
 */

function objectKeys$1(val) {
  if (Object.keys) {
    return Object.keys(val);
  }

  return objectKeys(val);
}
/**
 * Module exports.
 */


var utilInspect = inspect;
/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 * @license MIT (© Joyent)
 */

/* legacy: obj, showHidden, depth, colors*/

function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  }; // legacy...

  if (arguments.length >= 3) {
    ctx.depth = arguments[2];
  }

  if (arguments.length >= 4) {
    ctx.colors = arguments[3];
  }

  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    _extend(ctx, opts);
  } // set default options


  if (isUndefined(ctx.showHidden)) {
    ctx.showHidden = false;
  }

  if (isUndefined(ctx.depth)) {
    ctx.depth = 2;
  }

  if (isUndefined(ctx.colors)) {
    ctx.colors = false;
  }

  if (isUndefined(ctx.customInspect)) {
    ctx.customInspect = true;
  }

  if (ctx.colors) {
    ctx.stylize = stylizeWithColor;
  }

  return formatValue(ctx, obj, ctx.depth);
} // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics


inspect.colors = {
  'bold': [1, 22],
  'italic': [3, 23],
  'underline': [4, 24],
  'inverse': [7, 27],
  'white': [37, 39],
  'grey': [90, 39],
  'black': [30, 39],
  'blue': [34, 39],
  'cyan': [36, 39],
  'green': [32, 39],
  'magenta': [35, 39],
  'red': [31, 39],
  'yellow': [33, 39]
}; // Don't use 'blue' not visible on cmd.exe

inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};

function stylizeNoColor(str, styleType) {
  return str;
}

function isBoolean(arg) {
  return typeof arg === 'boolean';
}

function isUndefined(arg) {
  return arg === void 0;
}

function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}

function isFunction$1(arg) {
  return typeof arg === 'function';
}

function isString(arg) {
  return typeof arg === 'string';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isNull(arg) {
  return arg === null;
}

function hasOwn$4(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isError(e) {
  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
}

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

function arrayToHash(array) {
  var hash = {};
  foreach(array, function (val, idx) {
    hash[val] = true;
  });
  return hash;
}

function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];

  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwn$4(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    } else {
      output.push('');
    }
  }

  foreach(keys, function (key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    }
  });
  return output;
}

function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect && value && isFunction$1(value.inspect) && // Filter out the util module, it's inspect function is special
  value.inspect !== inspect && // Also filter out any prototype objects using the circular check.
  !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);

    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }

    return ret;
  } // Primitive types cannot have properties


  var primitive = formatPrimitive(ctx, value);

  if (primitive) {
    return primitive;
  } // Look up the keys of the object.


  var keys = objectKeys$1(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden && Object.getOwnPropertyNames) {
    keys = Object.getOwnPropertyNames(value);
  } // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


  if (isError(value) && (indexof(keys, 'message') >= 0 || indexof(keys, 'description') >= 0)) {
    return formatError(value);
  } // Some type of object without properties can be shortcutted.


  if (keys.length === 0) {
    if (isFunction$1(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }

    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }

    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }

    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '',
      array = false,
      braces = ['{', '}']; // Make Array say that they are Array

  if (isarray(value)) {
    array = true;
    braces = ['[', ']'];
  } // Make functions say that they are functions


  if (isFunction$1(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  } // Make RegExps say that they are RegExps


  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  } // Make dates with properties first say the date


  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  } // Make error with message first say the error


  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);
  var output;

  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = arrayMap(keys, function (key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();
  return reduceToSingleString(output, base, braces);
}

function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = {
    value: value[key]
  };

  if (Object.getOwnPropertyDescriptor) {
    desc = Object.getOwnPropertyDescriptor(value, key) || desc;
  }

  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }

  if (!hasOwn$4(visibleKeys, key)) {
    name = '[' + key + ']';
  }

  if (!str) {
    if (indexof(ctx.seen, desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }

      if (str.indexOf('\n') > -1) {
        if (array) {
          str = arrayMap(str.split('\n'), function (line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + arrayMap(str.split('\n'), function (line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }

  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }

    name = json3.stringify('' + key);

    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}

function formatPrimitive(ctx, value) {
  if (isUndefined(value)) {
    return ctx.stylize('undefined', 'undefined');
  }

  if (isString(value)) {
    var simple = '\'' + json3.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }

  if (isNumber(value)) {
    return ctx.stylize('' + value, 'number');
  }

  if (isBoolean(value)) {
    return ctx.stylize('' + value, 'boolean');
  } // For some reason typeof null is "object", so special case here.


  if (isNull(value)) {
    return ctx.stylize('null', 'null');
  }
}

function reduceToSingleString(output, base, braces) {
  var length = arrayReduce(output, function (prev, cur) {
    if (cur.indexOf('\n') >= 0) ;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

function _extend(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) {
    return origin;
  }

  var keys = objectKeys$1(add);
  var i = keys.length;

  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }

  return origin;
}
/*  */


var emptyObject = Object.freeze({}); // these helpers produces better vm code in JS engines due to their
// explicitness and function inlining

function isUndef(v) {
  return v === undefined || v === null;
}

function isDef(v) {
  return v !== undefined && v !== null;
}

function isTrue(v) {
  return v === true;
}

function isFalse(v) {
  return v === false;
}
/**
 * Check if value is primitive
 */


function isPrimitive(value) {
  return typeof value === 'string' || typeof value === 'number' || // $flow-disable-line
  typeof value === 'symbol' || typeof value === 'boolean';
}
/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */


function isObject$1(obj) {
  return obj !== null && typeof obj === 'object';
}
/**
 * Get the raw type string of a value e.g. [object Object]
 */


var _toString = Object.prototype.toString;

function toRawType(value) {
  return _toString.call(value).slice(8, -1);
}
/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */


function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function isRegExp$1(v) {
  return _toString.call(v) === '[object RegExp]';
}
/**
 * Check if val is a valid array index.
 */


function isValidArrayIndex(val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}
/**
 * Convert a value to a string that is actually rendered.
 */


function toString$4(val) {
  return val == null ? '' : typeof val === 'object' ? JSON.stringify(val, null, 2) : String(val);
}
/**
 * Convert a input value to a number for persistence.
 * If the conversion fails, return original string.
 */


function toNumber(val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n;
}
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */


function makeMap(str, expectsLowerCase) {
  var map = Object.create(null);
  var list = str.split(',');

  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }

  return expectsLowerCase ? function (val) {
    return map[val.toLowerCase()];
  } : function (val) {
    return map[val];
  };
}
/**
 * Check if a tag is a built-in tag.
 */


var isBuiltInTag = makeMap('slot,component', true);
/**
 * Check if a attribute is a reserved attribute.
 */

var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');
/**
 * Remove an item from an array
 */

function remove(arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);

    if (index > -1) {
      return arr.splice(index, 1);
    }
  }
}
/**
 * Check whether the object has the property.
 */


var hasOwnProperty = Object.prototype.hasOwnProperty;

function hasOwn$5(obj, key) {
  return hasOwnProperty.call(obj, key);
}
/**
 * Create a cached version of a pure function.
 */


function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}
/**
 * Camelize a hyphen-delimited string.
 */


var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {
    return c ? c.toUpperCase() : '';
  });
});
/**
 * Capitalize a string.
 */

var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
/**
 * Hyphenate a camelCase string.
 */

var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase();
});
/**
 * Simple bind polyfill for environments that do not support it... e.g.
 * PhantomJS 1.x. Technically we don't need this anymore since native bind is
 * now more performant in most browsers, but removing it would be breaking for
 * code that was able to run in PhantomJS 1.x, so this must be kept for
 * backwards compatibility.
 */

/* istanbul ignore next */

function polyfillBind(fn, ctx) {
  function boundFn(a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
  }

  boundFn._length = fn.length;
  return boundFn;
}

function nativeBind(fn, ctx) {
  return fn.bind(ctx);
}

var bind = Function.prototype.bind ? nativeBind : polyfillBind;
/**
 * Convert an Array-like object to a real Array.
 */

function toArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);

  while (i--) {
    ret[i] = list[i + start];
  }

  return ret;
}
/**
 * Mix properties into target object.
 */


function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }

  return to;
}
/**
 * Merge an Array of Objects into a single Object.
 */


function toObject(arr) {
  var res = {};

  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }

  return res;
}
/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)
 */


function noop(a, b, c) {}
/**
 * Always return false.
 */


var no = function no(a, b, c) {
  return false;
};
/**
 * Return same value
 */


var identity = function identity(_) {
  return _;
};
/**
 * Generate a static keys string from compiler modules.
 */


function genStaticKeys(modules) {
  return modules.reduce(function (keys, m) {
    return keys.concat(m.staticKeys || []);
  }, []).join(',');
}
/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */


function looseEqual(a, b) {
  if (a === b) {
    return true;
  }

  var isObjectA = isObject$1(a);
  var isObjectB = isObject$1(b);

  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);

      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        /* istanbul ignore next */
        return false;
      }
    } catch (e) {
      /* istanbul ignore next */
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}

function looseIndexOf(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) {
      return i;
    }
  }

  return -1;
}
/**
 * Ensure a function is called only once.
 */


function once(fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}
/*  */

/**
 * Check if a string starts with $ or _
 */


function isReserved(str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F;
}
/**
 * Define a property.
 */


function def(obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}
/**
 * Parse simple path.
 */


var bailRE = /[^\w.$]/;

function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }

  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) {
        return;
      }

      obj = obj[segments[i]];
    }

    return obj;
  };
}
/*  */
// can we use __proto__?


var hasProto = '__proto__' in {}; // Browser environment sniffing

var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0 || weexPlatform === 'android';
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === 'ios';
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge; // Firefox has a "watch" function on Object.prototype...

var nativeWatch = {}.watch;

if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', {
      get: function get() {}
    }); // https://github.com/facebook/flow/issues/285

    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
} // this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV


var _isServer = false;

var isServerRendering = function isServerRendering() {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }

  return _isServer;
}; // detect devtools


var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
/* istanbul ignore next */

function isNative(Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
}

var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */
// $flow-disable-line


if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = function () {
    function Set() {
      this.set = Object.create(null);
    }

    Set.prototype.has = function has(key) {
      return this.set[key] === true;
    };

    Set.prototype.add = function add(key) {
      this.set[key] = true;
    };

    Set.prototype.clear = function clear() {
      this.set = Object.create(null);
    };

    return Set;
  }();
}

var SSR_ATTR = 'data-server-rendered';
var ASSET_TYPES = ['component', 'directive', 'filter'];
var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated', 'errorCaptured'];
/*  */

var config = {
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: 'development' !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: 'development' !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
};
/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = noop; // work around flow check

var formatComponentName = noop;
{
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;

  var classify = function classify(str) {
    return str.replace(classifyRE, function (c) {
      return c.toUpperCase();
    }).replace(/[-_]/g, '');
  };

  warn = function warn(msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (hasConsole && !config.silent) {
      console.error("[Vue warn]: " + msg + trace);
    }
  };

  tip = function tip(msg, vm) {
    if (hasConsole && !config.silent) {
      console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
    }
  };

  formatComponentName = function formatComponentName(vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>';
    }

    var options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm || {};
    var name = options.name || options._componentTag;
    var file = options.__file;

    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
  };

  var repeat = function repeat(str, n) {
    var res = '';

    while (n) {
      if (n % 2 === 1) {
        res += str;
      }

      if (n > 1) {
        str += str;
      }

      n >>= 1;
    }

    return res;
  };

  generateComponentTrace = function generateComponentTrace(vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;

      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];

          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue;
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }

        tree.push(vm);
        vm = vm.$parent;
      }

      return '\n\nfound in\n\n' + tree.map(function (vm, i) {
        return "" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
      }).join('\n');
    } else {
      return "\n\n(found in " + formatComponentName(vm) + ")";
    }
  };
}
/*  */

var uid = 0;
/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */

var Dep = function Dep() {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub(sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub(sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend() {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify() {
  // stabilize the subscriber list first
  var subs = this.subs.slice();

  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
}; // the current target watcher being evaluated.
// this is globally unique because there could be only one
// watcher being evaluated at any time.


Dep.target = null;
var targetStack = [];

function pushTarget(_target) {
  if (Dep.target) {
    targetStack.push(Dep.target);
  }

  Dep.target = _target;
}

function popTarget() {
  Dep.target = targetStack.pop();
}
/*  */


var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = {
  child: {
    configurable: true
  }
}; // DEPRECATED: alias for componentInstance for backwards compat.

/* istanbul ignore next */

prototypeAccessors.child.get = function () {
  return this.componentInstance;
};

Object.defineProperties(VNode.prototype, prototypeAccessors);

var createEmptyVNode = function createEmptyVNode(text) {
  if (text === void 0) text = '';
  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node;
};

function createTextVNode(val) {
  return new VNode(undefined, undefined, undefined, String(val));
} // optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.


function cloneVNode(vnode) {
  var cloned = new VNode(vnode.tag, vnode.data, vnode.children, vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.isCloned = true;
  return cloned;
}
/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */


var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);
var methodsToPatch = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];
/**
 * Intercept mutating methods and emit events
 */

methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator() {
    var args = [],
        len = arguments.length;

    while (len--) args[len] = arguments[len];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;

    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break;

      case 'splice':
        inserted = args.slice(2);
        break;
    }

    if (inserted) {
      ob.observeArray(inserted);
    } // notify change


    ob.dep.notify();
    return result;
  });
});
/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */

var shouldObserve = true;

function toggleObserving(value) {
  shouldObserve = value;
}
/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */


var Observer = function Observer(value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);

  if (Array.isArray(value)) {
    var augment = hasProto ? protoAugment : copyAugment;
    augment(value, arrayMethods, arrayKeys);
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};
/**
 * Walk through each property and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */


Observer.prototype.walk = function walk(obj) {
  var keys = Object.keys(obj);

  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};
/**
 * Observe a list of Array items.
 */


Observer.prototype.observeArray = function observeArray(items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
}; // helpers

/**
 * Augment an target Object or Array by intercepting
 * the prototype chain using __proto__
 */


function protoAugment(target, src, keys) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}
/**
 * Augment an target Object or Array by defining
 * hidden properties.
 */

/* istanbul ignore next */


function copyAugment(target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}
/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */


function observe(value, asRootData) {
  if (!isObject$1(value) || value instanceof VNode) {
    return;
  }

  var ob;

  if (hasOwn$5(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
    ob = new Observer(value);
  }

  if (asRootData && ob) {
    ob.vmCount++;
  }

  return ob;
}
/**
 * Define a reactive property on an Object.
 */


function defineReactive$$1(obj, key, val, customSetter, shallow) {
  var dep = new Dep();
  var property = Object.getOwnPropertyDescriptor(obj, key);

  if (property && property.configurable === false) {
    return;
  } // cater for pre-defined getter/setters


  var getter = property && property.get;

  if (!getter && arguments.length === 2) {
    val = obj[key];
  }

  var setter = property && property.set;
  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value = getter ? getter.call(obj) : val;

      if (Dep.target) {
        dep.depend();

        if (childOb) {
          childOb.dep.depend();

          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }

      return value;
    },
    set: function reactiveSetter(newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */

      if (newVal === value || newVal !== newVal && value !== value) {
        return;
      }
      /* eslint-enable no-self-compare */


      if (customSetter) {
        customSetter();
      }

      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }

      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}
/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */


function set(target, key, val) {
  if (isUndef(target) || isPrimitive(target)) {
    warn("Cannot set reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }

  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
    warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
    return val;
  }

  if (!ob) {
    target[key] = val;
    return val;
  }

  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val;
}
/**
 * Delete a property and trigger change if necessary.
 */


function del(target, key) {
  if (isUndef(target) || isPrimitive(target)) {
    warn("Cannot delete reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
    warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
    return;
  }

  if (!hasOwn$5(target, key)) {
    return;
  }

  delete target[key];

  if (!ob) {
    return;
  }

  ob.dep.notify();
}
/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */


function dependArray(value) {
  for (var e = void 0, i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();

    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}
/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */


var strats = config.optionMergeStrategies;
/**
 * Options with restrictions
 */

{
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
    }

    return defaultStrat(parent, child);
  };
}
/**
 * Helper that recursively merges two data objects together.
 */

function mergeData(to, from) {
  if (!from) {
    return to;
  }

  var key, toVal, fromVal;
  var keys = Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    toVal = to[key];
    fromVal = from[key];

    if (!hasOwn$5(to, key)) {
      set(to, key, fromVal);
    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }

  return to;
}
/**
 * Data
 */


function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal;
    }

    if (!parentVal) {
      return childVal;
    } // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.


    return function mergedDataFn() {
      return mergeData(typeof childVal === 'function' ? childVal.call(this, this) : childVal, typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal);
    };
  } else {
    return function mergedInstanceDataFn() {
      // instance merge
      var instanceData = typeof childVal === 'function' ? childVal.call(vm, vm) : childVal;
      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm, vm) : parentVal;

      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}

strats.data = function (parentVal, childVal, vm) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
      return parentVal;
    }

    return mergeDataOrFn(parentVal, childVal);
  }

  return mergeDataOrFn(parentVal, childVal, vm);
};
/**
 * Hooks and props are merged as arrays.
 */


function mergeHook(parentVal, childVal) {
  return childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});
/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */

function mergeAssets(parentVal, childVal, vm, key) {
  var res = Object.create(parentVal || null);

  if (childVal) {
    assertObjectType(key, childVal, vm);
    return extend(res, childVal);
  } else {
    return res;
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});
/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */

strats.watch = function (parentVal, childVal, vm, key) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) {
    parentVal = undefined;
  }

  if (childVal === nativeWatch) {
    childVal = undefined;
  }
  /* istanbul ignore if */


  if (!childVal) {
    return Object.create(parentVal || null);
  }

  {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = {};
  extend(ret, parentVal);

  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];

    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }

    ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
  }

  return ret;
};
/**
 * Other object hashes.
 */


strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal, vm, key) {
  if (childVal && 'development' !== 'production') {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = Object.create(null);
  extend(ret, parentVal);

  if (childVal) {
    extend(ret, childVal);
  }

  return ret;
};

strats.provide = mergeDataOrFn;
/**
 * Default strategy.
 */

var defaultStrat = function defaultStrat(parentVal, childVal) {
  return childVal === undefined ? parentVal : childVal;
};
/**
 * Validate component names
 */


function checkComponents(options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName(name) {
  if (!/^[a-zA-Z][\w-]*$/.test(name)) {
    warn('Invalid component name: "' + name + '". Component names ' + 'can only contain alphanumeric characters and the hyphen, ' + 'and must start with a letter.');
  }

  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + name);
  }
}
/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */


function normalizeProps(options, vm) {
  var props = options.props;

  if (!props) {
    return;
  }

  var res = {};
  var i, val, name;

  if (Array.isArray(props)) {
    i = props.length;

    while (i--) {
      val = props[i];

      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = {
          type: null
        };
      } else {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val) ? val : {
        type: val
      };
    }
  } else {
    warn("Invalid value for option \"props\": expected an Array or an Object, " + "but got " + toRawType(props) + ".", vm);
  }

  options.props = res;
}
/**
 * Normalize all injections into Object-based format
 */


function normalizeInject(options, vm) {
  var inject = options.inject;

  if (!inject) {
    return;
  }

  var normalized = options.inject = {};

  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = {
        from: inject[i]
      };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val) ? extend({
        from: key
      }, val) : {
        from: val
      };
    }
  } else {
    warn("Invalid value for option \"inject\": expected an Array or an Object, " + "but got " + toRawType(inject) + ".", vm);
  }
}
/**
 * Normalize raw function directives into object format.
 */


function normalizeDirectives(options) {
  var dirs = options.directives;

  if (dirs) {
    for (var key in dirs) {
      var def = dirs[key];

      if (typeof def === 'function') {
        dirs[key] = {
          bind: def,
          update: def
        };
      }
    }
  }
}

function assertObjectType(name, value, vm) {
  if (!isPlainObject(value)) {
    warn("Invalid value for option \"" + name + "\": expected an Object, " + "but got " + toRawType(value) + ".", vm);
  }
}
/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */


function mergeOptions(parent, child, vm) {
  {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);
  var extendsFrom = child.extends;

  if (extendsFrom) {
    parent = mergeOptions(parent, extendsFrom, vm);
  }

  if (child.mixins) {
    for (var i = 0, l = child.mixins.length; i < l; i++) {
      parent = mergeOptions(parent, child.mixins[i], vm);
    }
  }

  var options = {};
  var key;

  for (key in parent) {
    mergeField(key);
  }

  for (key in child) {
    if (!hasOwn$5(parent, key)) {
      mergeField(key);
    }
  }

  function mergeField(key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }

  return options;
}
/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */


function resolveAsset(options, type, id, warnMissing) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return;
  }

  var assets = options[type]; // check local registration variations first

  if (hasOwn$5(assets, id)) {
    return assets[id];
  }

  var camelizedId = camelize(id);

  if (hasOwn$5(assets, camelizedId)) {
    return assets[camelizedId];
  }

  var PascalCaseId = capitalize(camelizedId);

  if (hasOwn$5(assets, PascalCaseId)) {
    return assets[PascalCaseId];
  } // fallback to prototype chain


  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];

  if (warnMissing && !res) {
    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
  }

  return res;
}
/*  */


function validateProp(key, propOptions, propsData, vm) {
  var prop = propOptions[key];
  var absent = !hasOwn$5(propsData, key);
  var value = propsData[key]; // boolean casting

  var booleanIndex = getTypeIndex(Boolean, prop.type);

  if (booleanIndex > -1) {
    if (absent && !hasOwn$5(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);

      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  } // check default value


  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key); // since the default value is a fresh copy,
    // make sure to observe it.

    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }

  {
    assertProp(prop, key, value, vm, absent);
  }
  return value;
}
/**
 * Get the default value of a prop.
 */


function getPropDefaultValue(vm, prop, key) {
  // no default, return undefined
  if (!hasOwn$5(prop, 'default')) {
    return undefined;
  }

  var def = prop.default; // warn against non-factory defaults for Object & Array

  if (isObject$1(def)) {
    warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
  } // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger


  if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
    return vm._props[key];
  } // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context


  return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
}
/**
 * Assert whether a prop is valid.
 */


function assertProp(prop, name, value, vm, absent) {
  if (prop.required && absent) {
    warn('Missing required prop: "' + name + '"', vm);
    return;
  }

  if (value == null && !prop.required) {
    return;
  }

  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];

  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }

    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn("Invalid prop: type check failed for prop \"" + name + "\"." + " Expected " + expectedTypes.map(capitalize).join(', ') + ", got " + toRawType(value) + ".", vm);
    return;
  }

  var validator = prop.validator;

  if (validator) {
    if (!validator(value)) {
      warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType(value, type) {
  var valid;
  var expectedType = getType(type);

  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase(); // for primitive wrapper objects

    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }

  return {
    valid: valid,
    expectedType: expectedType
  };
}
/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */


function getType(fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : '';
}

function isSameType(a, b) {
  return getType(a) === getType(b);
}

function getTypeIndex(type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }

  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i;
    }
  }

  return -1;
}
/*  */


function handleError(err, vm, info) {
  if (vm) {
    var cur = vm;

    while (cur = cur.$parent) {
      var hooks = cur.$options.errorCaptured;

      if (hooks) {
        for (var i = 0; i < hooks.length; i++) {
          try {
            var capture = hooks[i].call(cur, err, vm, info) === false;

            if (capture) {
              return;
            }
          } catch (e) {
            globalHandleError(e, cur, 'errorCaptured hook');
          }
        }
      }
    }
  }

  globalHandleError(err, vm, info);
}

function globalHandleError(err, vm, info) {
  logError(err, vm, info);
}

function logError(err, vm, info) {
  {
    warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
  }
  /* istanbul ignore else */

  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err;
  }
}
/*  */


var callbacks = [];
var pending = false;

function flushCallbacks() {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;

  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
} // Here we have async deferring wrappers using both microtasks and (macro) tasks.
// In < 2.4 we used microtasks everywhere, but there are some scenarios where
// microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690) or even between bubbling of the same
// event (#6566). However, using (macro) tasks everywhere also has subtle problems
// when state is changed right before repaint (e.g. #6813, out-in transitions).
// Here we use microtask by default, but expose a way to force (macro) task when
// needed (e.g. in event handlers attached by v-on).


var microTimerFunc;
var macroTimerFunc;
var useMacroTask = false; // Determine (macro) task defer implementation.
// Technically setImmediate should be the ideal choice, but it's only available
// in IE. The only polyfill that consistently queues the callback after all DOM
// events triggered in the same loop is by using MessageChannel.

/* istanbul ignore if */

if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  macroTimerFunc = function macroTimerFunc() {
    setImmediate(flushCallbacks);
  };
} else if (typeof MessageChannel !== 'undefined' && (isNative(MessageChannel) || // PhantomJS
MessageChannel.toString() === '[object MessageChannelConstructor]')) {
  var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = flushCallbacks;

  macroTimerFunc = function macroTimerFunc() {
    port.postMessage(1);
  };
} else {
  /* istanbul ignore next */
  macroTimerFunc = function macroTimerFunc() {
    setTimeout(flushCallbacks, 0);
  };
} // Determine microtask defer implementation.

/* istanbul ignore next, $flow-disable-line */


if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();

  microTimerFunc = function microTimerFunc() {
    p.then(flushCallbacks); // in problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.

    if (isIOS) {
      setTimeout(noop);
    }
  };
} else {
  // fallback to macro
  microTimerFunc = macroTimerFunc;
}

function nextTick(cb, ctx) {
  var _resolve;

  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });

  if (!pending) {
    pending = true;

    if (useMacroTask) {
      macroTimerFunc();
    } else {
      microTimerFunc();
    }
  } // $flow-disable-line


  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    });
  }
}
/*  */

/*  */


var ref = {
  create: function create(_, vnode) {
    registerRef(vnode);
  },
  update: function update(oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy(vnode) {
    registerRef(vnode, true);
  }
};

function registerRef(vnode, isRemoval) {
  var key = vnode.data.ref;

  if (!isDef(key)) {
    return;
  }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;

  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}
/*  */


var seenObjects = new _Set();
/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */

function traverse(val) {
  _traverse(val, seenObjects);

  seenObjects.clear();
}

function _traverse(val, seen) {
  var i, keys;
  var isA = Array.isArray(val);

  if (!isA && !isObject$1(val) || Object.isFrozen(val) || val instanceof VNode) {
    return;
  }

  if (val.__ob__) {
    var depId = val.__ob__.dep.id;

    if (seen.has(depId)) {
      return;
    }

    seen.add(depId);
  }

  if (isA) {
    i = val.length;

    while (i--) {
      _traverse(val[i], seen);
    }
  } else {
    keys = Object.keys(val);
    i = keys.length;

    while (i--) {
      _traverse(val[keys[i]], seen);
    }
  }
}
/*  */


var MAX_UPDATE_COUNT = 100;
var queue = [];
var activatedChildren = [];
var has$1 = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;
/**
 * Reset the scheduler's state.
 */

function resetSchedulerState() {
  index = queue.length = activatedChildren.length = 0;
  has$1 = {};
  {
    circular = {};
  }
  waiting = flushing = false;
}
/**
 * Flush both queues and run the watchers.
 */


function flushSchedulerQueue() {
  flushing = true;
  var watcher, id; // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.

  queue.sort(function (a, b) {
    return a.id - b.id;
  }); // do not cache length because more watchers might be pushed
  // as we run existing watchers

  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    id = watcher.id;
    has$1[id] = null;
    watcher.run(); // in dev build, check and stop circular updates.

    if (has$1[id] != null) {
      circular[id] = (circular[id] || 0) + 1;

      if (circular[id] > MAX_UPDATE_COUNT) {
        warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
        break;
      }
    }
  } // keep copies of post queues before resetting state


  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();
  resetSchedulerState(); // call component updated and activated hooks

  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue); // devtool hook

  /* istanbul ignore if */

  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks(queue) {
  var i = queue.length;

  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;

    if (vm._watcher === watcher && vm._isMounted) {
      callHook(vm, 'updated');
    }
  }
}
/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */


function queueActivatedComponent(vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks(queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true
    /* true */
    );
  }
}
/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */


function queueWatcher(watcher) {
  var id = watcher.id;

  if (has$1[id] == null) {
    has$1[id] = true;

    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;

      while (i > index && queue[i].id > watcher.id) {
        i--;
      }

      queue.splice(i + 1, 0, watcher);
    } // queue the flush


    if (!waiting) {
      waiting = true;
      nextTick(flushSchedulerQueue);
    }
  }
}
/*  */


var uid$1 = 0;
/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */

var Watcher = function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {
  this.vm = vm;

  if (isRenderWatcher) {
    vm._watcher = this;
  }

  vm._watchers.push(this); // options


  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }

  this.cb = cb;
  this.id = ++uid$1; // uid for batching

  this.active = true;
  this.dirty = this.lazy; // for lazy watchers

  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = expOrFn.toString(); // parse expression for getter

  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);

    if (!this.getter) {
      this.getter = function () {};

      warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
    }
  }

  this.value = this.lazy ? undefined : this.get();
};
/**
 * Evaluate the getter, and re-collect dependencies.
 */


Watcher.prototype.get = function get() {
  pushTarget(this);
  var value;
  var vm = this.vm;

  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
    } else {
      throw e;
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }

    popTarget();
    this.cleanupDeps();
  }

  return value;
};
/**
 * Add a dependency to this directive.
 */


Watcher.prototype.addDep = function addDep(dep) {
  var id = dep.id;

  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);

    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};
/**
 * Clean up for dependency collection.
 */


Watcher.prototype.cleanupDeps = function cleanupDeps() {
  var this$1 = this;
  var i = this.deps.length;

  while (i--) {
    var dep = this$1.deps[i];

    if (!this$1.newDepIds.has(dep.id)) {
      dep.removeSub(this$1);
    }
  }

  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};
/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */


Watcher.prototype.update = function update() {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};
/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */


Watcher.prototype.run = function run() {
  if (this.active) {
    var value = this.get();

    if (value !== this.value || // Deep watchers and watchers on Object/Arrays should fire even
    // when the value is the same, because the value may
    // have mutated.
    isObject$1(value) || this.deep) {
      // set new value
      var oldValue = this.value;
      this.value = value;

      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, "callback for watcher \"" + this.expression + "\"");
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};
/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */


Watcher.prototype.evaluate = function evaluate() {
  this.value = this.get();
  this.dirty = false;
};
/**
 * Depend on all deps collected by this watcher.
 */


Watcher.prototype.depend = function depend() {
  var this$1 = this;
  var i = this.deps.length;

  while (i--) {
    this$1.deps[i].depend();
  }
};
/**
 * Remove self from all dependencies' subscriber list.
 */


Watcher.prototype.teardown = function teardown() {
  var this$1 = this;

  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }

    var i = this.deps.length;

    while (i--) {
      this$1.deps[i].removeSub(this$1);
    }

    this.active = false;
  }
};

{
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */

  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) ;
}
/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first

  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  };
});

function createFnInvoker(fns) {
  function invoker() {
    var arguments$1 = arguments;
    var fns = invoker.fns;

    if (Array.isArray(fns)) {
      var cloned = fns.slice();

      for (var i = 0; i < cloned.length; i++) {
        cloned[i].apply(null, arguments$1);
      }
    } else {
      // return handler return value for single handlers
      return fns.apply(null, arguments);
    }
  }

  invoker.fns = fns;
  return invoker;
}

function updateListeners(on, oldOn, add, remove$$1, vm) {
  var name, def$$1, cur, old, event;

  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);

    if (isUndef(cur)) {
      warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur);
      }

      add(event.name, cur, event.once, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }

  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}
/*  */


function mergeVNodeHook(def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }

  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook() {
    hook.apply(this, arguments); // important: remove merged hook to ensure it's called only once
    // and prevent memory leak

    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}
/*  */


function extractPropsFromVNodeData(data, Ctor, tag) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;

  if (isUndef(propOptions)) {
    return;
  }

  var res = {};
  var attrs = data.attrs;
  var props = data.props;

  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      {
        var keyInLowerCase = key.toLowerCase();

        if (key !== keyInLowerCase && attrs && hasOwn$5(attrs, keyInLowerCase)) {
          tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
        }
      }
      checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
    }
  }

  return res;
}

function checkProp(res, hash, key, altKey, preserve) {
  if (isDef(hash)) {
    if (hasOwn$5(hash, key)) {
      res[key] = hash[key];

      if (!preserve) {
        delete hash[key];
      }

      return true;
    } else if (hasOwn$5(hash, altKey)) {
      res[key] = hash[altKey];

      if (!preserve) {
        delete hash[altKey];
      }

      return true;
    }
  }

  return false;
}
/*  */
// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:
// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.


function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }

  return children;
} // 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.


function normalizeChildren(children) {
  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
}

function isTextNode(node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}

function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;

  for (i = 0; i < children.length; i++) {
    c = children[i];

    if (isUndef(c) || typeof c === 'boolean') {
      continue;
    }

    lastIndex = res.length - 1;
    last = res[lastIndex]; //  nested

    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, (nestedIndex || '') + "_" + i); // merge adjacent text nodes

        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + c[0].text);
          c.shift();
        }

        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }

        res.push(c);
      }
    }
  }

  return res;
}
/*  */


function ensureCtor(comp, base) {
  if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === 'Module') {
    comp = comp.default;
  }

  return isObject$1(comp) ? base.extend(comp) : comp;
}

function createAsyncPlaceholder(factory, data, context, children, tag) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = {
    data: data,
    context: context,
    children: children,
    tag: tag
  };
  return node;
}

function resolveAsyncComponent(factory, baseCtor, context) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp;
  }

  if (isDef(factory.resolved)) {
    return factory.resolved;
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp;
  }

  if (isDef(factory.contexts)) {
    // already pending
    factory.contexts.push(context);
  } else {
    var contexts = factory.contexts = [context];
    var sync = true;

    var forceRender = function forceRender() {
      for (var i = 0, l = contexts.length; i < l; i++) {
        contexts[i].$forceUpdate();
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor); // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)

      if (!sync) {
        forceRender();
      }
    });
    var reject = once(function (reason) {
      warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));

      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender();
      }
    });
    var res = factory(resolve, reject);

    if (isObject$1(res)) {
      if (typeof res.then === 'function') {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isDef(res.component) && typeof res.component.then === 'function') {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);

          if (res.delay === 0) {
            factory.loading = true;
          } else {
            setTimeout(function () {
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender();
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          setTimeout(function () {
            if (isUndef(factory.resolved)) {
              reject("timeout (" + res.timeout + "ms)");
            }
          }, res.timeout);
        }
      }
    }

    sync = false; // return in case resolved synchronously

    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}
/*  */


function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}
/*  */


function getFirstComponentChild(children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];

      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c;
      }
    }
  }
}
/*  */

/*  */


function initEvents(vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false; // init parent attached events

  var listeners = vm.$options._parentListeners;

  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add(event, fn, once$$1) {
  if (once$$1) {
    target.$once(event, fn);
  } else {
    target.$on(event, fn);
  }
}

function remove$1(event, fn) {
  target.$off(event, fn);
}

function updateComponentListeners(vm, listeners, oldListeners) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);
  target = undefined;
}

function eventsMixin(Vue) {
  var hookRE = /^hook:/;

  Vue.prototype.$on = function (event, fn) {
    var this$1 = this;
    var vm = this;

    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        this$1.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn); // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup

      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }

    return vm;
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;

    function on() {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }

    on.fn = fn;
    vm.$on(event, on);
    return vm;
  };

  Vue.prototype.$off = function (event, fn) {
    var this$1 = this;
    var vm = this; // all

    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm;
    } // array of events


    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        this$1.$off(event[i], fn);
      }

      return vm;
    } // specific event


    var cbs = vm._events[event];

    if (!cbs) {
      return vm;
    }

    if (!fn) {
      vm._events[event] = null;
      return vm;
    }

    if (fn) {
      // specific handler
      var cb;
      var i$1 = cbs.length;

      while (i$1--) {
        cb = cbs[i$1];

        if (cb === fn || cb.fn === fn) {
          cbs.splice(i$1, 1);
          break;
        }
      }
    }

    return vm;
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    {
      var lowerCaseEvent = event.toLowerCase();

      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
      }
    }
    var cbs = vm._events[event];

    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);

      for (var i = 0, l = cbs.length; i < l; i++) {
        try {
          cbs[i].apply(vm, args);
        } catch (e) {
          handleError(e, vm, "event handler for \"" + event + "\"");
        }
      }
    }

    return vm;
  };
}
/*  */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */


function resolveSlots(children, context) {
  var slots = {};

  if (!children) {
    return slots;
  }

  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data; // remove slot attribute if the node is resolved as a Vue slot node

    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    } // named slots should only be respected if the vnode was rendered in the
    // same context.


    if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
      var name = data.slot;
      var slot = slots[name] || (slots[name] = []);

      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  } // ignore slots that contains only whitespace


  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }

  return slots;
}

function isWhitespace(node) {
  return node.isComment && !node.asyncFactory || node.text === ' ';
}

function resolveScopedSlots(fns, // see flow/vnode
res) {
  res = res || {};

  for (var i = 0; i < fns.length; i++) {
    if (Array.isArray(fns[i])) {
      resolveScopedSlots(fns[i], res);
    } else {
      res[fns[i].key] = fns[i].fn;
    }
  }

  return res;
}
/*  */


var activeInstance = null;
var isUpdatingChildComponent = false;

function initLifecycle(vm) {
  var options = vm.$options; // locate first non-abstract parent

  var parent = options.parent;

  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }

    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;
  vm.$children = [];
  vm.$refs = {};
  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin(Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;

    if (vm._isMounted) {
      callHook(vm, 'beforeUpdate');
    }

    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var prevActiveInstance = activeInstance;
    activeInstance = vm;
    vm._vnode = vnode; // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.

    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false
      /* removeOnly */
      , vm.$options._parentElm, vm.$options._refElm); // no need for the ref nodes after initial patch
      // this prevents keeping a detached DOM tree in memory (#5851)

      vm.$options._parentElm = vm.$options._refElm = null;
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }

    activeInstance = prevActiveInstance; // update __vue__ reference

    if (prevEl) {
      prevEl.__vue__ = null;
    }

    if (vm.$el) {
      vm.$el.__vue__ = vm;
    } // if parent is an HOC, update its $el as well


    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    } // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.

  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;

    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;

    if (vm._isBeingDestroyed) {
      return;
    }

    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true; // remove self from parent

    var parent = vm.$parent;

    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    } // teardown watchers


    if (vm._watcher) {
      vm._watcher.teardown();
    }

    var i = vm._watchers.length;

    while (i--) {
      vm._watchers[i].teardown();
    } // remove reference from data ob
    // frozen object may not have observer.


    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    } // call the last hook...


    vm._isDestroyed = true; // invoke destroy hooks on current rendered tree

    vm.__patch__(vm._vnode, null); // fire destroyed hook


    callHook(vm, 'destroyed'); // turn off all instance listeners.

    vm.$off(); // remove __vue__ reference

    if (vm.$el) {
      vm.$el.__vue__ = null;
    } // release circular reference (#6759)


    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent(vm, el, hydrating) {
  vm.$el = el;

  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    {
      /* istanbul ignore if */
      if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
        warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
      } else {
        warn('Failed to mount component: template or render function not defined.', vm);
      }
    }
  }

  callHook(vm, 'beforeMount');
  var updateComponent;
  /* istanbul ignore if */

  {
    updateComponent = function updateComponent() {
      vm._update(vm._render(), hydrating);
    };
  } // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined

  new Watcher(vm, updateComponent, noop, null, true
  /* isRenderWatcher */
  );
  hydrating = false; // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook

  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }

  return vm;
}

function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  {
    isUpdatingChildComponent = true;
  } // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren

  var hasChildren = !!(renderChildren || // has new static slots
  vm.$options._renderChildren || // has old static slots
  parentVnode.data.scopedSlots || // has new scoped slots
  vm.$scopedSlots !== emptyObject // has old scoped slots
  );
  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) {
    // update child tree's parent
    vm._vnode.parent = parentVnode;
  }

  vm.$options._renderChildren = renderChildren; // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render

  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject; // update props

  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];

    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?

      props[key] = validateProp(key, propOptions, propsData, vm);
    }

    toggleObserving(true); // keep a copy of raw propsData

    vm.$options.propsData = propsData;
  } // update listeners


  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners); // resolve slots + force update if has children

  if (hasChildren) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) {
      return true;
    }
  }

  return false;
}

function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;

    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }

  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;

    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'activated');
  }
}

function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;

    if (isInInactiveTree(vm)) {
      return;
    }
  }

  if (!vm._inactive) {
    vm._inactive = true;

    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'deactivated');
  }
}

function callHook(vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];

  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      try {
        handlers[i].call(vm);
      } catch (e) {
        handleError(e, vm, hook + " hook");
      }
    }
  }

  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }

  popTarget();
}
/*  */


var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot'); // this map is intentionally selective, only covering SVG elements that may
// contain child elements.

var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);
var isTextInputType = makeMap('text,number,password,search,email,tel,url');
/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);
var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode(a, b) {
  return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
}

function sameInputType(a, b) {
  if (a.tag !== 'input') {
    return true;
  }

  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
}

function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};

  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;

    if (isDef(key)) {
      map[key] = i;
    }
  }

  return map;
}

function createPatchFunction(backend) {
  var i, j;
  var cbs = {};
  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];

    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt(elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
  }

  function createRmCb(childElm, listeners) {
    function remove$$1() {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }

    remove$$1.listeners = listeners;
    return remove$$1;
  }

  function removeNode(el) {
    var parent = nodeOps.parentNode(el); // element may have already been removed due to v-html / v-text

    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1(vnode, inVPre) {
    return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some(function (ignore) {
      return isRegExp$1(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
    })) && config.isUnknownElement(vnode.tag);
  }

  var creatingElmInVPre = 0;

  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check

    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;

    if (isDef(tag)) {
      {
        if (data && data.pre) {
          creatingElmInVPre++;
        }

        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
        }
      }
      vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
      setScope(vnode);
      /* istanbul ignore if */

      {
        createChildren(vnode, children, insertedVnodeQueue);

        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }

        insert(parentElm, vnode.elm, refElm);
      }

      if (data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;

    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;

      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false
        /* hydrating */
        , parentElm, refElm);
      } // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.


      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);

        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }

        return true;
      }
    }
  }

  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }

    vnode.elm = vnode.componentInstance.$el;

    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode); // make sure to invoke the insert hook

      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i; // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.

    var innerNode = vnode;

    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;

      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }

        insertedVnodeQueue.push(innerNode);
        break;
      }
    } // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself


    insert(parentElm, vnode.elm, refElm);
  }

  function insert(parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (ref$$1.parentNode === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren(vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      {
        checkDuplicateKeys(children);
      }

      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }

    return isDef(vnode.tag);
  }

  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }

    i = vnode.data.hook; // Reuse variable

    if (isDef(i)) {
      if (isDef(i.create)) {
        i.create(emptyNode, vnode);
      }

      if (isDef(i.insert)) {
        insertedVnodeQueue.push(vnode);
      }
    }
  } // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.


  function setScope(vnode) {
    var i;

    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;

      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }

        ancestor = ancestor.parent;
      }
    } // for slot content they should also get the scopeId from the host instance.


    if (isDef(i = activeInstance) && i !== vnode.context && i !== vnode.fnContext && isDef(i = i.$options._scopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook(vnode) {
    var i, j;
    var data = vnode.data;

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) {
        i(vnode);
      }

      for (i = 0; i < cbs.destroy.length; ++i) {
        cbs.destroy[i](vnode);
      }
    }

    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];

      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;

      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      } // recursively invoke hooks on child component root node


      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }

      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }

      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm; // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions

    var canMove = !removeOnly;
    {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) {
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        }

        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);

        if (isUndef(idxInOld)) {
          // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];

          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }

        newStartVnode = newCh[++newStartIdx];
      }
    }

    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys(children) {
    var seenKeys = {};

    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;

      if (isDef(key)) {
        if (seenKeys[key]) {
          warn("Duplicate keys detected: '" + key + "'. This may cause an update error.", vnode.context);
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld(node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];

      if (isDef(c) && sameVnode(node, c)) {
        return i;
      }
    }
  }

  function patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }

      return;
    } // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.


    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }

    var i;
    var data = vnode.data;

    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;

    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) {
        cbs.update[i](oldVnode, vnode);
      }

      if (isDef(i = data.hook) && isDef(i = i.update)) {
        i(oldVnode, vnode);
      }
    }

    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) {
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
        }
      } else if (isDef(ch)) {
        if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }

        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
        i(oldVnode, vnode);
      }
    }
  }

  function invokeInsertHook(vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false; // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).

  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key'); // Note: this is a browser-only function so we can assume elms are DOM nodes.

  function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || data && data.pre;
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true;
    } // assert node match


    {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false;
      }
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) {
        i(vnode, true
        /* hydrating */
        );
      }

      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }

    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }

              return false;
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;

            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break;
              }

              childNode = childNode.nextSibling;
            } // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.


            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }

              return false;
            }
          }
        }
      }

      if (isDef(data)) {
        var fullInvoke = false;

        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }

        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }

    return true;
  }

  function assertNodeMatch(node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || !isUnknownElement$$1(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3);
    }
  }

  return function patch(oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) {
        invokeDestroyHook(oldVnode);
      }

      return;
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue, parentElm, refElm);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);

      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }

          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            } else {
              warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
            }
          } // either not server-rendered, or hydration failed.
          // create an empty node and replace it


          oldVnode = emptyNodeAt(oldVnode);
        } // replacing existing element


        var oldElm = oldVnode.elm;
        var parentElm$1 = nodeOps.parentNode(oldElm); // create new node

        createElm(vnode, insertedVnodeQueue, // extremely rare edge case: do not insert if old element is in a
        // leaving transition. Only happens when combining transition +
        // keep-alive + HOCs. (#4590)
        oldElm._leaveCb ? null : parentElm$1, nodeOps.nextSibling(oldElm)); // update parent placeholder node element, recursively

        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);

          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }

            ancestor.elm = vnode.elm;

            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              } // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.


              var insert = ancestor.data.hook.insert;

              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }

            ancestor = ancestor.parent;
          }
        } // destroy old node


        if (isDef(parentElm$1)) {
          removeVnodes(parentElm$1, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}
/*  */


var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives(vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update(oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
  var dirsWithInsert = [];
  var dirsWithPostpatch = [];
  var key, oldDir, dir;

  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];

    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);

      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      callHook$1(dir, 'update', vnode, oldVnode);

      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function callInsert() {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };

    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1(dirs, vm) {
  var res = Object.create(null);

  if (!dirs) {
    // $flow-disable-line
    return res;
  }

  var i, dir;

  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];

    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }

    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  } // $flow-disable-line


  return res;
}

function getRawDirName(dir) {
  return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
}

function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];

  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
    }
  }
}

var baseModules = [ref, directives];

function updateAttrs(oldVnode, vnode) {
  if (!oldVnode.data.attrs && !vnode.data.attrs) {
    return;
  }

  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {}; // clone observed objects, as the user probably wants to mutate it

  if (attrs.__ob__) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];

    if (old !== cur) {
      elm.setAttribute(key, cur);
    }
  }

  for (key in oldAttrs) {
    if (attrs[key] == null) {
      elm.setAttribute(key);
    }
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};
/*  */
// these are reserved for web because they are directly compiled away
// during template compilation

var isReservedAttr = makeMap('style,class'); // attributes that should be using props for binding

var acceptValue = makeMap('input,textarea,option,select,progress');
var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');
var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');
/*  */

function genClassForVnode(vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;

  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;

    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }

  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }

  return renderClass(data.staticClass, data.class);
}

function mergeClassData(child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class) ? [child.class, parent.class] : parent.class
  };
}

function renderClass(staticClass, dynamicClass) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  /* istanbul ignore next */


  return '';
}

function concat(a, b) {
  return a ? b ? a + ' ' + b : a : b || '';
}

function stringifyClass(value) {
  if (Array.isArray(value)) {
    return stringifyArray(value);
  }

  if (isObject$1(value)) {
    return stringifyObject(value);
  }

  if (typeof value === 'string') {
    return value;
  }
  /* istanbul ignore next */


  return '';
}

function stringifyArray(value) {
  var res = '';
  var stringified;

  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) {
        res += ' ';
      }

      res += stringified;
    }
  }

  return res;
}

function stringifyObject(value) {
  var res = '';

  for (var key in value) {
    if (value[key]) {
      if (res) {
        res += ' ';
      }

      res += key;
    }
  }

  return res;
}
/*  */


function updateClass(oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (!data.staticClass && !data.class && (!oldData || !oldData.staticClass && !oldData.class)) {
    return;
  }

  var cls = genClassForVnode(vnode); // handle transition classes

  var transitionClass = el._transitionClasses;

  if (transitionClass) {
    cls = concat(cls, stringifyClass(transitionClass));
  } // set the class


  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var class_ = {
  create: updateClass,
  update: updateClass
};
var target$1;

function add$1(event, handler, once, capture) {
  if (capture) {
    console.log('bubble phase not supported');
    return;
  }

  if (once) {
    var oldHandler = handler;

    handler = function handler() {
      var args = [],
          len = arguments.length;

      while (len--) args[len] = arguments[len];

      var res = oldHandler.call.apply(oldHandler, [null].concat(args));

      if (res !== null) {
        remove$2(event, null, null, target$1);
      }
    };
  }

  target$1.addEventListener(event, handler);
}

function remove$2(event, handler, capture, _target) {
  if (_target === void 0) _target = target$1;

  _target.removeEventListener(event);
}

function updateDOMListeners(oldVnode, vnode) {
  if (!oldVnode.data.on && !vnode.data.on) {
    return;
  }

  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  updateListeners(on, oldOn, add$1, remove$2, vnode.context);
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};
var normalize = cached(camelize);

function createStyle(oldVnode, vnode) {
  // console.log(`\t\t ===> createStyle(${oldVnode}, ${vnode})`)
  if (!vnode.data.staticStyle) {
    updateStyle(oldVnode, vnode);
    return;
  }

  var elm = vnode.elm;
  var staticStyle = vnode.data.staticStyle;

  for (var name in staticStyle) {
    if (staticStyle[name]) {
      elm.setStyle(normalize(name), staticStyle[name]);
    }
  }

  updateStyle(oldVnode, vnode);
}

function updateStyle(oldVnode, vnode) {
  if (!oldVnode.data.style && !vnode.data.style) {
    return;
  }

  var cur, name;
  var elm = vnode.elm;
  var oldStyle = oldVnode.data.style || {};
  var style = vnode.data.style || {};
  var needClone = style.__ob__; // handle array syntax

  if (Array.isArray(style)) {
    style = vnode.data.style = toObject$1(style);
  } // clone the style for future updates,
  // in case the user mutates the style object in-place.


  if (needClone) {
    style = vnode.data.style = extend({}, style);
  }

  for (name in oldStyle) {
    if (!style[name]) {
      elm.setStyle(normalize(name), '');
    }
  }

  for (name in style) {
    cur = style[name];
    elm.setStyle(normalize(name), cur);
  }
}

function toObject$1(arr) {
  var res = {};

  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }

  return res;
}

var style = {
  create: createStyle,
  update: updateStyle
};
/*  */

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */

function addClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";

    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}
/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */


function removeClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }

    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';

    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }

    cur = cur.trim();

    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}
/*  */


function resolveTransition(def$$1) {
  if (!def$$1) {
    return;
  }
  /* istanbul ignore else */


  if (typeof def$$1 === 'object') {
    var res = {};

    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }

    extend(res, def$$1);
    return res;
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1);
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: name + "-enter",
    enterToClass: name + "-enter-to",
    enterActiveClass: name + "-enter-active",
    leaveClass: name + "-leave",
    leaveToClass: name + "-leave-to",
    leaveActiveClass: name + "-leave-active"
  };
});
var hasTransition = inBrowser && !isIE9;

if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) ;
  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) ;
} // binding to window is necessary to make hot reload work in IE in strict mode


var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout :
/* istanbul ignore next */
function (fn) {
  return fn();
};

function nextFrame(fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass(el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);

  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }

  removeClass(el, cls);
}

function enter(vnode, toggleDisplay) {
  var el = vnode.elm; // call leave callback now

  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;

    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data)) {
    return;
  }
  /* istanbul ignore if */


  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration; // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.

  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;

  while (transitionNode && transitionNode.parent) {
    transitionNode = transitionNode.parent;
    context = transitionNode.context;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return;
  }

  var startClass = isAppear && appearClass ? appearClass : enterClass;
  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
  var explicitEnterDuration = toNumber(isObject$1(duration) ? duration.enter : duration);

  if (explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false;
  var userWantsControl = getHookArgumentsLength(enterHook);
  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }

      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }

    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];

      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }

      enterHook && enterHook(el, cb);
    });
  } // start enter transition


  beforeEnterHook && beforeEnterHook(el);

  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);

      if (!cb.cancelled) {
        addTransitionClass(el, toClass);

        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave(vnode, rm) {
  var el = vnode.elm; // call enter callback now

  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;

    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data) || el.nodeType !== 1) {
    return rm();
  }
  /* istanbul ignore if */


  if (isDef(el._leaveCb)) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;
  var expectsCSS = css !== false;
  var userWantsControl = getHookArgumentsLength(leave);
  var explicitLeaveDuration = toNumber(isObject$1(duration) ? duration.leave : duration);

  if (isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }

    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }

      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }

    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave() {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return;
    } // record leaving element


    if (!vnode.data.show) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }

    beforeLeave && beforeLeave(el);

    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);

        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);

          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            }
          }
        }
      });
    }

    leave && leave(el, cb);

    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
} // only used in dev mode


function checkDuration(val, name, vnode) {
  if (typeof val !== 'number') {
    warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
  } else if (isNaN(val)) {
    warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
  }
}

function isValidDuration(val) {
  return typeof val === 'number' && !isNaN(val);
}
/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */


function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }

  var invokerFns = fn.fns;

  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}

function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = {
  create: _enter,
  activate: _enter,
  remove: function remove$$1(vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
};
var platformModules = [attrs, class_, events, style, transition];
var actionBar = {
  template: "\n    <NativeActionBar ~actionBar v-bind=\"$attrs\" v-on=\"$listeners\">\n      <slot />\n    </NativeActionBar>\n  "
};

var ref$1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var isAndroid$1 = ref$1.isAndroid;
var android = {
  functional: true,
  render: function render(h, ref) {
    var children = ref.children;

    if (isAndroid$1) {
      return children;
    }
  }
};
var frames = new Map();

function setFrame(id, frame$$1) {
  return frames.set(id, frame$$1);
}

function getFrame(id) {
  return frames.get(id);
}

function deleteFrame(id) {
  return frames.delete(id);
}

var idCounter = 1;
var frame$1 = {
  props: {
    id: {
      default: 'default'
    },
    transition: {
      type: [String, Object],
      required: false,
      default: null
    },
    'ios:transition': {
      type: [String, Object],
      required: false,
      default: null
    },
    'android:transition': {
      type: [String, Object],
      required: false,
      default: null
    },
    // injected by the template compiler
    hasRouterView: {
      default: false
    }
  },
  data: function data() {
    return {
      properties: {}
    };
  },
  created: function created() {
    var properties = {};

    if (getFrame(this.$props.id)) {
      properties.id = this.$props.id + idCounter++;
    }

    this.properties = Object.assign({}, this.$attrs, this.$props, properties);
    setFrame(this.properties.id, this);
  },
  destroyed: function destroyed() {
    deleteFrame(this.properties.id);
  },
  render: function render(h) {
    return h('NativeFrame', {
      attrs: this.properties,
      on: this.$listeners
    }, this.$slots.default);
  },
  methods: {
    _getFrame: function _getFrame() {
      return this.$el.nativeView;
    },
    _ensureTransitionObject: function _ensureTransitionObject(transition) {
      if (typeof transition === 'string') {
        return {
          name: transition
        };
      }

      return transition;
    },
    _composeTransition: function _composeTransition(entry) {
      var platformEntryProp = "transition" + (platform.isAndroid ? 'Android' : 'iOS');
      var entryProp = entry[platformEntryProp] ? platformEntryProp : 'transition';
      var platformProp = (platform.isAndroid ? 'android' : 'ios') + ":transition";
      var prop = this[platformProp] ? platformProp : 'transition';

      if (entry[entryProp]) {
        entry[entryProp] = this._ensureTransitionObject(entry[entryProp]);
      } else if (this[prop]) {
        entry[entryProp] = this._ensureTransitionObject(this[prop]);
      }

      return entry;
    },
    notifyPageMounted: function notifyPageMounted(pageVm) {
      var this$1 = this;
      this.$nextTick(function () {
        this$1.navigate({
          create: function create() {
            return pageVm.$el.nativeView;
          }
        });
      });
    },
    navigate: function navigate(entry, back) {
      var this$1 = this;
      if (back === void 0) back = false;

      var frame$$1 = this._getFrame();

      if (back) {
        return frame$$1.goBack(entry);
      } // resolve the page from the entry and attach a navigatedTo listener
      // to fire the frame events


      var page = entry.create();
      page.once('navigatedTo', function () {
        this$1.$emit('navigated', entry);
      });

      var handler = function handler(args) {
        if (args.isBackNavigation) {
          page.off('navigatedFrom', handler);
          this$1.$emit('navigatedBack', entry);
        }
      };

      page.on('navigatedFrom', handler);

      entry.create = function () {
        return page;
      };

      this._composeTransition(entry);

      frame$$1.navigate(entry);
    },
    back: function back(backstackEntry) {
      if (backstackEntry === void 0) backstackEntry = null;
      this.navigate(backstackEntry, true);
    }
  }
};

var ref$2 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var isIOS$1 = ref$2.isIOS;
var ios = {
  functional: true,
  render: function render(h, ref) {
    var children = ref.children;

    if (isIOS$1) {
      return children;
    }
  }
};
var VUE_VIEW = '__vueVNodeRef__';
var tid = 0;
var vTemplate = {
  props: {
    name: {
      type: String
    },
    if: {
      type: String
    }
  },
  mounted: function mounted() {
    if (!this.$scopedSlots.default) {
      return;
    }

    this.$templates = this.$el.parentNode.$templates = this.$parent.$templates = this.$parent.$templates || new TemplateBag();
    this.$templates.registerTemplate(this.$props.name || (this.$props.if ? "v-template-" + tid++ : 'default'), this.$props.if, this.$scopedSlots.default);
  },
  render: function render(h) {}
};

var TemplateBag = function TemplateBag() {
  this._templateMap = new Map();
};

var prototypeAccessors$1 = {
  selectorFn: {
    configurable: true
  }
};

TemplateBag.prototype.registerTemplate = function registerTemplate(name, condition, scopedFn) {
  this._templateMap.set(name, {
    scopedFn: scopedFn,
    conditionFn: this.getConditionFn(condition),
    keyedTemplate: new VueKeyedTemplate(name, scopedFn)
  });
};

prototypeAccessors$1.selectorFn.get = function () {
  var self = this;
  return function templateSelectorFn(item) {
    var iterator = self._templateMap.entries();

    var curr;

    while (curr = iterator.next().value) {
      var name = curr[0];
      var conditionFn = curr[1].conditionFn;

      try {
        if (conditionFn(item)) {
          return name;
        }
      } catch (err) {}
    }

    return 'default';
  };
};

TemplateBag.prototype.getConditionFn = function getConditionFn(condition) {
  return new Function('ctx', "with(ctx) { return !!(" + condition + ") }");
};

TemplateBag.prototype.getKeyedTemplate = function getKeyedTemplate(name) {
  return this._templateMap.get(name).keyedTemplate;
};

TemplateBag.prototype.patchTemplate = function patchTemplate(name, context, oldVnode) {
  var vnode = this._templateMap.get(name).scopedFn(context);

  var nativeView = patch(oldVnode, vnode).nativeView;
  nativeView[VUE_VIEW] = vnode;
  return nativeView;
};

TemplateBag.prototype.getAvailable = function getAvailable() {
  return Array.from(this._templateMap.keys());
};

TemplateBag.prototype.getKeyedTemplates = function getKeyedTemplates() {
  return Array.from(this._templateMap.values()).map(function (ref) {
    var keyedTemplate = ref.keyedTemplate;
    return keyedTemplate;
  });
};

Object.defineProperties(TemplateBag.prototype, prototypeAccessors$1);

var VueKeyedTemplate = function VueKeyedTemplate(key, scopedFn) {
  this._key = key;
  this._scopedFn = scopedFn;
};

var prototypeAccessors$1$1 = {
  key: {
    configurable: true
  }
};

prototypeAccessors$1$1.key.get = function () {
  return this._key;
};

VueKeyedTemplate.prototype.createView = function createView() {
  // we are returning null because we don't have the data here
  // the view will be created in the `patchTemplate` method above.
  // see https://github.com/nativescript-vue/nativescript-vue/issues/229#issuecomment-390330474
  return null;
};

Object.defineProperties(VueKeyedTemplate.prototype, prototypeAccessors$1$1);
var listView = {
  props: {
    items: {
      type: Array,
      required: true
    },
    '+alias': {
      type: String,
      default: 'item'
    },
    '+index': {
      type: String
    }
  },
  template: "\n    <NativeListView\n      ref=\"listView\"\n      :items=\"items\"\n      v-bind=\"$attrs\"\n      v-on=\"listeners\"\n      @itemTap=\"onItemTap\"\n      @itemLoading=\"onItemLoading\"\n    >\n      <slot />\n    </NativeListView>\n  ",
  watch: {
    items: {
      handler: function handler(newVal) {
        this.$refs.listView.setAttribute('items', newVal);
        this.refresh();
      },
      deep: true
    }
  },
  created: function created() {
    // we need to remove the itemTap handler from a clone of the $listeners
    // object because we are emitting the event ourselves with added data.
    var listeners = extend({}, this.$listeners);
    delete listeners.itemTap;
    this.listeners = listeners;
    this.getItemContext = getItemContext.bind(this);
  },
  mounted: function mounted() {
    var this$1 = this;
    this.$refs.listView.setAttribute('_itemTemplatesInternal', this.$templates.getKeyedTemplates());
    this.$refs.listView.setAttribute('_itemTemplateSelector', function (item, index) {
      return this$1.$templates.selectorFn(this$1.getItemContext(item, index));
    });
  },
  methods: {
    onItemTap: function onItemTap(args) {
      this.$emit('itemTap', extend({
        item: this.items[args.index]
      }, args));
    },
    onItemLoading: function onItemLoading(args) {
      var index = args.index;
      var items = args.object.items;
      var currentItem = typeof items.getItem === 'function' ? items.getItem(index) : items[index];

      var name = args.object._itemTemplateSelector(currentItem, index, items);

      var context = this.getItemContext(currentItem, index);
      var oldVnode = args.view && args.view[VUE_VIEW];
      args.view = this.$templates.patchTemplate(name, context, oldVnode);
    },
    refresh: function refresh() {
      this.$refs.listView.nativeView.refresh();
    }
  }
};

function getItemContext(item, index, alias, index_alias) {
  var obj;
  if (alias === void 0) alias = this.$props['+alias'];
  if (index_alias === void 0) index_alias = this.$props['+index'];
  return obj = {}, obj[alias] = item, obj[index_alias || '$index'] = index, obj.$even = index % 2 === 0, obj.$odd = index % 2 !== 0, obj;
}

var PAGE_REF = '__vuePageRef__';
var page = {
  render: function render(h) {
    return h('NativePage', {
      attrs: this.$attrs,
      on: this.$listeners
    }, this.$slots.default);
  },
  mounted: function mounted() {
    var this$1 = this;
    this.$el.nativeView[PAGE_REF] = this;

    var frame$$1 = this._findParentFrame();

    if (frame$$1) {
      frame$$1.notifyPageMounted(this);
    }

    var handler = function handler(e) {
      if (e.isBackNavigation) {
        this$1.$el.nativeView.off('navigatedFrom', handler);
        this$1.$parent.$destroy();
      }
    };

    this.$el.nativeView.on('navigatedFrom', handler); // ensure that the parent vue instance is destroyed when the
    // page is disposed (clearHistory: true for example)

    var dispose = this.$el.nativeView.disposeNativeView;

    this.$el.nativeView.disposeNativeView = function () {
      var args = [],
          len = arguments.length;

      while (len--) args[len] = arguments[len];

      this$1.$parent.$destroy();
      dispose.call(this$1.$el.nativeView, args);
    };
  },
  methods: {
    _findParentFrame: function _findParentFrame() {
      var frame$$1 = this.$parent;

      while (frame$$1 && frame$$1.$options.name !== 'Frame') {
        frame$$1 = frame$$1.$parent;
      }

      return frame$$1;
    }
  }
};
var tabView = {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  },
  render: function render(h) {
    return h('NativeTabView', {
      on: this.$listeners,
      attrs: this.$attrs
    }, this.$slots.default);
  },
  methods: {
    registerTab: function registerTab(tabView) {
      var items = this.$el.nativeView.items || [];
      this.$el.setAttribute('items', items.concat([tabView]));
    }
  }
};
var tabViewItem = {
  template: "<NativeTabViewItem><slot /></NativeTabViewItem>",
  mounted: function mounted() {
    if (this.$el.childNodes.length > 1) {
      warn('TabViewItem should contain only 1 root element', this);
    }

    var _nativeView = this.$el.nativeView;
    _nativeView.view = this.$el.childNodes[0].nativeView;
    this.$parent.registerTab(_nativeView);
  }
};
/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
}; // in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered

function getRealChild(vnode) {
  var compOptions = vnode && vnode.componentOptions;

  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}

function extractTransitionData(comp) {
  var data = {};
  var options = comp.$options; // props

  for (var key in options.propsData) {
    data[key] = comp[key];
  } // events.
  // extract listeners and pass them directly to the transition methods


  var listeners = options._parentListeners;

  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }

  return data;
}

function placeholder(h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    });
  }
}

function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}

function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,
  render: function render(h) {
    var this$1 = this;
    var children = this.$slots.default;

    if (!children) {
      return;
    } // filter out text nodes (possible whitespaces)


    children = children.filter(function (c) {
      return c.tag || isAsyncPlaceholder(c);
    });
    /* istanbul ignore if */

    if (!children.length) {
      return;
    } // warn multiple elements


    if (children.length > 1) {
      warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
    }

    var mode = this.mode; // warn invalid mode

    if (mode && mode !== 'in-out' && mode !== 'out-in') {
      warn('invalid <transition> mode: ' + mode, this.$parent);
    }

    var rawChild = children[0]; // if this is a component root node and the component's
    // parent container node also has transition, skip.

    if (hasParentTransition(this.$vnode)) {
      return rawChild;
    } // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive


    var child = getRealChild(rawChild);
    /* istanbul ignore if */

    if (!child) {
      return rawChild;
    }

    if (this._leaving) {
      return placeholder(h, rawChild);
    } // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.


    var id = "__transition-" + this._uid + "-";
    child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild); // mark v-show
    // so that the transition module can hand over the control to the directive

    if (child.data.directives && child.data.directives.some(function (d) {
      return d.name === 'show';
    })) {
      child.data.show = true;
    }

    if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && // #6687 component root is a comment node
    !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data); // handle transition mode

      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild);
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild;
        }

        var delayedLeave;

        var performLeave = function performLeave() {
          delayedLeave();
        };

        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) {
          delayedLeave = leave;
        });
      }
    }

    return rawChild;
  }
};
var elementMap = {};
var nativeRegExp = /Native/gi;
var dashRegExp = /-/g;
var defaultViewMeta = {
  skipAddToDom: false,
  isUnaryTag: false,
  tagNamespace: '',
  canBeLeftOpenTag: false,
  model: null,
  component: null
};

function normalizeElementName(elementName) {
  return "native" + elementName.replace(nativeRegExp, '').replace(dashRegExp, '').toLowerCase();
}

function registerElement(elementName, resolver, meta) {
  var normalizedName = normalizeElementName(elementName);
  meta = Object.assign({}, defaultViewMeta, meta);

  if (elementMap[normalizedName]) {
    throw new Error("Element for " + elementName + " already registered.");
  }

  if (!meta.component) {
    // if no Vue component is passed, wrap the simpler vue component
    // which bind the events and attributes to the NS one
    meta.component = {
      functional: true,
      model: meta.model,
      render: function render(h, ref) {
        var data = ref.data;
        var children = ref.children;
        return h(normalizedName, data, children);
      }
    };
  }

  meta.component.name = elementName;
  var entry = {
    resolver: resolver,
    meta: meta
  };
  elementMap[normalizedName] = entry;
}

function getElementMap() {
  return elementMap;
}

function getViewClass(elementName) {
  var normalizedName = normalizeElementName(elementName);
  var entry = elementMap[normalizedName];

  if (!entry) {
    throw new TypeError("No known component for element " + elementName + ".");
  }

  try {
    return entry.resolver();
  } catch (e) {
    throw new TypeError("Could not load view for: " + elementName + ". " + e);
  }
}

function getViewMeta(elementName) {
  var normalizedName = normalizeElementName(elementName);
  var meta = defaultViewMeta;
  var entry = elementMap[normalizedName];

  if (entry && entry.meta) {
    meta = entry.meta;
  }

  return meta;
}

function isKnownView(elementName) {
  return elementMap[normalizeElementName(elementName)];
}

registerElement('ActionBar', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/action-bar/action-bar.js").ActionBar;
}, {
  removeChild: function removeChild(parent, child) {
    try {
      parent.nativeView._removeView(child.nativeView);
    } catch (e) {// ignore exception - child is likely already removed/replaced
      // fixes #76
    }
  },
  component: actionBar
});
registerElement('ActionItem', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/action-bar/action-bar.js").ActionItem;
});
registerElement('android', null, {
  component: android
});
registerElement('ios', null, {
  component: ios
});
registerElement('ListView', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/list-view/list-view.js").ListView;
}, {
  component: listView
});
registerElement('NavigationButton', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/action-bar/action-bar.js").NavigationButton;
});
registerElement('TabView', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/tab-view/tab-view.js").TabView;
}, {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  },
  component: tabView
});
registerElement('TabViewItem', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/tab-view/tab-view.js").TabViewItem;
}, {
  skipAddToDom: true,
  component: tabViewItem
});
registerElement('transition', null, {
  component: Transition
});
registerElement('v-template', null, {
  component: vTemplate
}); // NS components which uses the automatic registerElement Vue wrapper
// as they do not need any special logic

registerElement('Label', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/label/label.js").Label;
}, {
  model: {
    prop: 'text',
    event: 'textChange'
  }
});
registerElement('DatePicker', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/date-picker/date-picker.js").DatePicker;
}, {
  model: {
    prop: 'date',
    event: 'dateChange'
  }
});
registerElement('AbsoluteLayout', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/absolute-layout/absolute-layout.js").AbsoluteLayout;
});
registerElement('ActivityIndicator', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/activity-indicator/activity-indicator.js").ActivityIndicator;
});
registerElement('Border', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/border/border.js").Border;
});
registerElement('Button', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/button/button.js").Button;
});
registerElement('ContentView', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/content-view/content-view.js").ContentView;
});
registerElement('DockLayout', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/dock-layout/dock-layout.js").DockLayout;
});
registerElement('GridLayout', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/grid-layout/grid-layout.js").GridLayout;
});
registerElement('HtmlView', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/html-view/html-view.js").HtmlView;
});
registerElement('Image', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/image/image.js").Image;
});
registerElement('img', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/image/image.js").Image;
});
registerElement('ListPicker', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/list-picker/list-picker.js").ListPicker;
}, {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  }
});
registerElement('Page', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/page/page.js").Page;
}, {
  skipAddToDom: true,
  component: page
});
registerElement('Placeholder', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/placeholder/placeholder.js").Placeholder;
});
registerElement('Progress', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/progress/progress.js").Progress;
}, {
  model: {
    prop: 'value',
    event: 'valueChange'
  }
});
registerElement('ProxyViewContainer', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/proxy-view-container/proxy-view-container.js").ProxyViewContainer;
}); // registerElement(
//   'Repeater',
//   () => require('tns-core-modules/ui/repeater').Repeater
// )

registerElement('ScrollView', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/scroll-view/scroll-view.js").ScrollView;
});
registerElement('SearchBar', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/search-bar/search-bar.js").SearchBar;
}, {
  model: {
    prop: 'text',
    event: 'textChange'
  }
});
registerElement('SegmentedBar', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/segmented-bar/segmented-bar.js").SegmentedBar;
}, {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  }
});
registerElement('SegmentedBarItem', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/segmented-bar/segmented-bar.js").SegmentedBarItem;
});
registerElement('Slider', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/slider/slider.js").Slider;
}, {
  model: {
    prop: 'value',
    event: 'valueChange'
  }
});
registerElement('StackLayout', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout.js").StackLayout;
});
registerElement('FlexboxLayout', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout.js").FlexboxLayout;
});
registerElement('Switch', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/switch/switch.js").Switch;
}, {
  model: {
    prop: 'checked',
    event: 'checkedChange'
  }
});
registerElement('TextField', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/text-field/text-field.js").TextField;
}, {
  model: {
    prop: 'text',
    event: 'textChange'
  }
});
registerElement('TextView', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/text-view/text-view.js").TextView;
}, {
  model: {
    prop: 'text',
    event: 'textChange'
  }
});
registerElement('TimePicker', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/time-picker/time-picker.js").TimePicker;
}, {
  model: {
    prop: 'time',
    event: 'timeChange'
  }
});
registerElement('WebView', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/web-view/web-view.js").WebView;
});
registerElement('WrapLayout', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/wrap-layout/wrap-layout.js").WrapLayout;
});
registerElement('FormattedString', function () {
  return __webpack_require__("../node_modules/tns-core-modules/text/formatted-string.js").FormattedString;
});
registerElement('Span', function () {
  return __webpack_require__("../node_modules/tns-core-modules/text/span.js").Span;
});
registerElement('DetachedContainer', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/proxy-view-container/proxy-view-container.js").ProxyViewContainer;
}, {
  skipAddToDom: true
});
registerElement('DetachedText', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/placeholder/placeholder.js").Placeholder;
}, {
  skipAddToDom: true
});
registerElement('Comment', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/placeholder/placeholder.js").Placeholder;
});
registerElement('Document', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/proxy-view-container/proxy-view-container.js").ProxyViewContainer;
}, {
  skipAddToDom: true
});
registerElement('Frame', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame.js").Frame;
}, {
  insertChild: function insertChild(parentNode, childNode, atIndex) {// if (normalizeElementName(childNode.tagName) === 'nativepage') {
    // parentNode.nativeView.navigate({ create: () => childNode.nativeView })
    // }
  },
  component: frame$1
});
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

var isobject = function isObject(val) {
  return val != null && typeof val === 'object' && Array.isArray(val) === false;
};

function isObjectObject(o) {
  return isobject(o) === true && Object.prototype.toString.call(o) === '[object Object]';
}

var isPlainObject$1 = function isPlainObject(o) {
  var ctor, prot;

  if (isObjectObject(o) === false) {
    return false;
  } // If has modified constructor


  ctor = o.constructor;

  if (typeof ctor !== 'function') {
    return false;
  } // If has modified prototype


  prot = ctor.prototype;

  if (isObjectObject(prot) === false) {
    return false;
  } // If constructor does not have an Object-specific method


  if (prot.hasOwnProperty('isPrototypeOf') === false) {
    return false;
  } // Most likely a plain Object


  return true;
};

var isExtendable = function isExtendable(val) {
  return isPlainObject$1(val) || typeof val === 'function' || Array.isArray(val);
};
/*!
 * assign-symbols <https://github.com/jonschlinkert/assign-symbols>
 *
 * Copyright (c) 2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */


var assignSymbols = function assignSymbols(receiver, objects) {
  var arguments$1 = arguments;

  if (receiver === null || typeof receiver === 'undefined') {
    throw new TypeError('expected first argument to be an object.');
  }

  if (typeof objects === 'undefined' || typeof Symbol === 'undefined') {
    return receiver;
  }

  if (typeof Object.getOwnPropertySymbols !== 'function') {
    return receiver;
  }

  var isEnumerable = Object.prototype.propertyIsEnumerable;
  var target = Object(receiver);
  var len = arguments.length,
      i = 0;

  while (++i < len) {
    var provider = Object(arguments$1[i]);
    var names = Object.getOwnPropertySymbols(provider);

    for (var j = 0; j < names.length; j++) {
      var key = names[j];

      if (isEnumerable.call(provider, key)) {
        target[key] = provider[key];
      }
    }
  }

  return target;
};

var extendShallow = Object.assign || function (obj
/*, objects*/
) {
  var arguments$1 = arguments;

  if (obj === null || typeof obj === 'undefined') {
    throw new TypeError('Cannot convert undefined or null to object');
  }

  if (!isObject$2(obj)) {
    obj = {};
  }

  for (var i = 1; i < arguments.length; i++) {
    var val = arguments$1[i];

    if (isString$1(val)) {
      val = toObject$2(val);
    }

    if (isObject$2(val)) {
      assign(obj, val);
      assignSymbols(obj, val);
    }
  }

  return obj;
};

function assign(a, b) {
  for (var key in b) {
    if (hasOwn$6(b, key)) {
      a[key] = b[key];
    }
  }
}

function isString$1(val) {
  return val && typeof val === 'string';
}

function toObject$2(str) {
  var obj = {};

  for (var i in str) {
    obj[i] = str[i];
  }

  return obj;
}

function isObject$2(val) {
  return val && typeof val === 'object' || isExtendable(val);
}
/**
 * Returns true if the given `key` is an own property of `obj`.
 */


function hasOwn$6(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

var splitString = function splitString(str, options, fn) {
  if (typeof str !== 'string') {
    throw new TypeError('expected a string');
  }

  if (typeof options === 'function') {
    fn = options;
    options = null;
  } // allow separator to be defined as a string


  if (typeof options === 'string') {
    options = {
      sep: options
    };
  }

  var opts = extendShallow({
    sep: '.'
  }, options);
  var quotes = opts.quotes || ['"', "'", '`'];
  var brackets;

  if (opts.brackets === true) {
    brackets = {
      '<': '>',
      '(': ')',
      '[': ']',
      '{': '}'
    };
  } else if (opts.brackets) {
    brackets = opts.brackets;
  }

  var tokens = [];
  var stack = [];
  var arr = [''];
  var sep = opts.sep;
  var len = str.length;
  var idx = -1;
  var closeIdx;

  function expected() {
    if (brackets && stack.length) {
      return brackets[stack[stack.length - 1]];
    }
  }

  while (++idx < len) {
    var ch = str[idx];
    var next = str[idx + 1];
    var tok = {
      val: ch,
      idx: idx,
      arr: arr,
      str: str
    };
    tokens.push(tok);

    if (ch === '\\') {
      tok.val = keepEscaping(opts, str, idx) === true ? ch + next : next;
      tok.escaped = true;

      if (typeof fn === 'function') {
        fn(tok);
      }

      arr[arr.length - 1] += tok.val;
      idx++;
      continue;
    }

    if (brackets && brackets[ch]) {
      stack.push(ch);
      var e = expected();
      var i = idx + 1;

      if (str.indexOf(e, i + 1) !== -1) {
        while (stack.length && i < len) {
          var s = str[++i];

          if (s === '\\') {
            s++;
            continue;
          }

          if (quotes.indexOf(s) !== -1) {
            i = getClosingQuote(str, s, i + 1);
            continue;
          }

          e = expected();

          if (stack.length && str.indexOf(e, i + 1) === -1) {
            break;
          }

          if (brackets[s]) {
            stack.push(s);
            continue;
          }

          if (e === s) {
            stack.pop();
          }
        }
      }

      closeIdx = i;

      if (closeIdx === -1) {
        arr[arr.length - 1] += ch;
        continue;
      }

      ch = str.slice(idx, closeIdx + 1);
      tok.val = ch;
      tok.idx = idx = closeIdx;
    }

    if (quotes.indexOf(ch) !== -1) {
      closeIdx = getClosingQuote(str, ch, idx + 1);

      if (closeIdx === -1) {
        arr[arr.length - 1] += ch;
        continue;
      }

      if (keepQuotes(ch, opts) === true) {
        ch = str.slice(idx, closeIdx + 1);
      } else {
        ch = str.slice(idx + 1, closeIdx);
      }

      tok.val = ch;
      tok.idx = idx = closeIdx;
    }

    if (typeof fn === 'function') {
      fn(tok, tokens);
      ch = tok.val;
      idx = tok.idx;
    }

    if (tok.val === sep && tok.split !== false) {
      arr.push('');
      continue;
    }

    arr[arr.length - 1] += tok.val;
  }

  return arr;
};

function getClosingQuote(str, ch, i, brackets) {
  var idx = str.indexOf(ch, i);

  if (str.charAt(idx - 1) === '\\') {
    return getClosingQuote(str, ch, idx + 1);
  }

  return idx;
}

function keepQuotes(ch, opts) {
  if (opts.keepDoubleQuotes === true && ch === '"') {
    return true;
  }

  if (opts.keepSingleQuotes === true && ch === "'") {
    return true;
  }

  return opts.keepQuotes;
}

function keepEscaping(opts, str, idx) {
  if (typeof opts.keepEscaping === 'function') {
    return opts.keepEscaping(str, idx);
  }

  return opts.keepEscaping === true || str[idx + 1] === '\\';
}
/*!
 * is-extendable <https://github.com/jonschlinkert/is-extendable>
 *
 * Copyright (c) 2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */


var isExtendable$1 = function isExtendable(val) {
  return typeof val !== 'undefined' && val !== null && (typeof val === 'object' || typeof val === 'function');
};

var extendShallow$1 = function extend(o
/*, objects*/
) {
  var arguments$1 = arguments;

  if (!isExtendable$1(o)) {
    o = {};
  }

  var len = arguments.length;

  for (var i = 1; i < len; i++) {
    var obj = arguments$1[i];

    if (isExtendable$1(obj)) {
      assign$1(o, obj);
    }
  }

  return o;
};

function assign$1(a, b) {
  for (var key in b) {
    if (hasOwn$7(b, key)) {
      a[key] = b[key];
    }
  }
}
/**
 * Returns true if the given `key` is an own property of `obj`.
 */


function hasOwn$7(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

var setValue = function setValue(obj, prop, val) {
  if (!isExtendable$1(obj)) {
    return obj;
  }

  if (Array.isArray(prop)) {
    prop = [].concat.apply([], prop).join('.');
  }

  if (typeof prop !== 'string') {
    return obj;
  }

  var keys = splitString(prop, {
    sep: '.',
    brackets: true
  });
  var len = keys.length;
  var idx = -1;
  var current = obj;

  while (++idx < len) {
    var key = keys[idx];

    if (idx !== len - 1) {
      if (!isExtendable$1(current[key])) {
        current[key] = {};
      }

      current = current[key];
      continue;
    }

    if (isPlainObject$1(current[key]) && isPlainObject$1(val)) {
      current[key] = extendShallow$1({}, current[key], val);
    } else {
      current[key] = val;
    }
  }

  return obj;
};

function isView(view$$1) {
  return view$$1 instanceof view.View;
}

function isLayout(view$$1) {
  return view$$1 instanceof layoutBase.LayoutBase;
}

function isContentView(view$$1) {
  return view$$1 instanceof contentView.ContentView;
}

function insertChild(parentNode, childNode, atIndex) {
  if (atIndex === void 0) atIndex = -1;

  if (!parentNode) {
    return;
  }

  if (parentNode.meta && typeof parentNode.meta.insertChild === 'function') {
    return parentNode.meta.insertChild(parentNode, childNode, atIndex);
  }

  if (childNode.meta.skipAddToDom) {
    return;
  }

  var parentView = parentNode.nativeView;
  var childView = childNode.nativeView;

  if (isLayout(parentView)) {
    if (childView.parent === parentView) {
      var index = parentView.getChildIndex(childView);

      if (index !== -1) {
        parentView.removeChild(childView);
      }
    }

    if (atIndex !== -1) {
      parentView.insertChild(childView, atIndex);
    } else {
      parentView.addChild(childView);
    }
  } else if (isContentView(parentView)) {
    if (childNode.nodeType === 8) {
      parentView._addView(childView, atIndex);
    } else {
      parentView.content = childView;
    }
  } else if (parentView && parentView._addChildFromBuilder) {
    parentView._addChildFromBuilder(childNode._nativeView.constructor.name, childView);
  }
}

function removeChild(parentNode, childNode) {
  if (!parentNode) {
    return;
  }

  if (parentNode.meta && typeof parentNode.meta.removeChild === 'function') {
    return parentNode.meta.removeChild(parentNode, childNode);
  }

  if (childNode.meta.skipAddToDom) {
    return;
  }

  var parentView = parentNode.nativeView;
  var childView = childNode.nativeView;

  if (isLayout(parentView)) {
    parentView.removeChild(childView);
  } else if (isContentView(parentView)) {
    if (parentView.content === childView) {
      parentView.content = null;
    }

    if (childNode.nodeType === 8) {
      parentView._removeView(childView);
    }
  } else if (isView(parentView)) {
    parentView._removeView(childView);
  }
}

var XML_ATTRIBUTES = Object.freeze(['style', 'rows', 'columns', 'fontAttributes']);

var ViewNode = function ViewNode() {
  this.nodeType = null;
  this._tagName = null;
  this.parentNode = null;
  this.childNodes = [];
  this.prevSibling = null;
  this.nextSibling = null;
  this._ownerDocument = null;
  this._nativeView = null;
  this._meta = null;
  /* istanbul ignore next
       * make vue happy :)
       */

  this.hasAttribute = this.removeAttribute = function () {
    return false;
  };
};

var prototypeAccessors$2 = {
  tagName: {
    configurable: true
  },
  firstChild: {
    configurable: true
  },
  lastChild: {
    configurable: true
  },
  nativeView: {
    configurable: true
  },
  meta: {
    configurable: true
  },
  ownerDocument: {
    configurable: true
  }
};
/* istanbul ignore next */

ViewNode.prototype.toString = function toString() {
  return this.constructor.name + "(" + this.tagName + ")";
};

prototypeAccessors$2.tagName.set = function (name) {
  this._tagName = normalizeElementName(name);
};

prototypeAccessors$2.tagName.get = function () {
  return this._tagName;
};

prototypeAccessors$2.firstChild.get = function () {
  return this.childNodes.length ? this.childNodes[0] : null;
};

prototypeAccessors$2.lastChild.get = function () {
  return this.childNodes.length ? this.childNodes[this.childNodes.length - 1] : null;
};

prototypeAccessors$2.nativeView.get = function () {
  return this._nativeView;
};

prototypeAccessors$2.nativeView.set = function (view$$1) {
  if (this._nativeView) {
    throw new Error("Can't override native view.");
  }

  this._nativeView = view$$1;
};

prototypeAccessors$2.meta.get = function () {
  if (this._meta) {
    return this._meta;
  }

  return this._meta = getViewMeta(this.tagName);
};
/* istanbul ignore next */


prototypeAccessors$2.ownerDocument.get = function () {
  if (this._ownerDocument) {
    return this._ownerDocument;
  }

  var el = this;

  while ((el = el.parentNode).nodeType !== 9) {// do nothing
  }

  return this._ownerDocument = el;
};

ViewNode.prototype.getAttribute = function getAttribute(key) {
  return this.nativeView[key];
};
/* istanbul ignore next */


ViewNode.prototype.setAttribute = function setAttribute(key, value) {
  var nv = this.nativeView;

  try {
    if (XML_ATTRIBUTES.indexOf(key) !== -1) {
      nv[key] = value;
    } else {
      // detect expandable attrs for boolean values
      // See https://vuejs.org/v2/guide/components-props.html#Passing-a-Boolean
      if (types.isBoolean(nv[key]) && value === '') {
        value = true;
      }

      if (platform.isAndroid && key.startsWith('android:')) {
        setValue(nv, key.substr(8), value);
      } else if (platform.isIOS && key.startsWith('ios:')) {
        setValue(nv, key.substr(4), value);
      } else if (key.endsWith('.decode')) {
        setValue(nv, key.slice(0, -7), xml.XmlParser._dereferenceEntities(value));
      } else {
        setValue(nv, key, value);
      }
    }
  } catch (e) {// ignore
  }
};
/* istanbul ignore next */


ViewNode.prototype.setStyle = function setStyle(property, value) {
  if (!(value = value.trim()).length) {
    return;
  }

  if (property.endsWith('Align')) {
    // NativeScript uses Alignment instead of Align, this ensures that text-align works
    property += 'ment';
  }

  this.nativeView.style[property] = value;
};
/* istanbul ignore next */


ViewNode.prototype.setText = function setText(text) {
  if (this.nodeType === 3) {
    this.parentNode.setText(text);
  } else {
    this.setAttribute('text', text);
  }
};
/* istanbul ignore next */


ViewNode.prototype.addEventListener = function addEventListener(event, handler) {
  this.nativeView.on(event, handler);
};
/* istanbul ignore next */


ViewNode.prototype.removeEventListener = function removeEventListener(event) {
  this.nativeView.off(event);
};

ViewNode.prototype.insertBefore = function insertBefore(childNode, referenceNode) {
  if (!childNode) {
    throw new Error("Can't insert child.");
  } // in some rare cases insertBefore is called with a null referenceNode
  // this makes sure that it get's appended as the last child


  if (!referenceNode) {
    return this.appendChild(childNode);
  }

  if (referenceNode.parentNode !== this) {
    throw new Error("Can't insert child, because the reference node has a different parent.");
  }

  if (childNode.parentNode && childNode.parentNode !== this) {
    throw new Error("Can't insert child, because it already has a different parent.");
  }

  if (childNode.parentNode === this) ;
  var index = this.childNodes.indexOf(referenceNode);
  childNode.parentNode = this;
  childNode.nextSibling = referenceNode;
  childNode.prevSibling = this.childNodes[index - 1];
  referenceNode.prevSibling = childNode;
  this.childNodes.splice(index, 0, childNode);
  insertChild(this, childNode, index);
};

ViewNode.prototype.appendChild = function appendChild(childNode) {
  if (!childNode) {
    throw new Error("Can't append child.");
  }

  if (childNode.parentNode && childNode.parentNode !== this) {
    throw new Error("Can't append child, because it already has a different parent.");
  }

  if (childNode.parentNode === this) ;
  childNode.parentNode = this;

  if (this.lastChild) {
    childNode.prevSibling = this.lastChild;
    this.lastChild.nextSibling = childNode;
  }

  this.childNodes.push(childNode);
  insertChild(this, childNode, this.childNodes.length - 1);
};

ViewNode.prototype.removeChild = function removeChild$$1(childNode) {
  if (!childNode) {
    throw new Error("Can't remove child.");
  }

  if (!childNode.parentNode) {
    throw new Error("Can't remove child, because it has no parent.");
  }

  if (childNode.parentNode !== this) {
    throw new Error("Can't remove child, because it has a different parent.");
  }

  childNode.parentNode = null;

  if (childNode.prevSibling) {
    childNode.prevSibling.nextSibling = childNode.nextSibling;
  }

  if (childNode.nextSibling) {
    childNode.nextSibling.prevSibling = childNode.prevSibling;
  } // reset the prevSibling and nextSibling. If not, a keep-alived component will
  // still have a filled nextSibling attribute so vue will not
  // insert the node again to the parent. See #220


  childNode.prevSibling = null;
  childNode.nextSibling = null;
  this.childNodes = this.childNodes.filter(function (node) {
    return node !== childNode;
  });
  removeChild(this, childNode);
};

Object.defineProperties(ViewNode.prototype, prototypeAccessors$2);
var VUE_ELEMENT_REF = '__vue_element_ref__';

var ElementNode = function (ViewNode$$1) {
  function ElementNode(tagName) {
    ViewNode$$1.call(this);
    this.nodeType = 1;
    this.tagName = tagName;
    var viewClass = getViewClass(tagName);
    this._nativeView = new viewClass();
    this._nativeView[VUE_ELEMENT_REF] = this;
  }

  if (ViewNode$$1) ElementNode.__proto__ = ViewNode$$1;
  ElementNode.prototype = Object.create(ViewNode$$1 && ViewNode$$1.prototype);
  ElementNode.prototype.constructor = ElementNode;

  ElementNode.prototype.appendChild = function appendChild(childNode) {
    ViewNode$$1.prototype.appendChild.call(this, childNode);

    if (childNode.nodeType === 3) {
      this.setText(childNode.text);
    }
  };

  ElementNode.prototype.insertBefore = function insertBefore(childNode, referenceNode) {
    ViewNode$$1.prototype.insertBefore.call(this, childNode, referenceNode);

    if (childNode.nodeType === 3) {
      this.setText(childNode.text);
    }
  };

  ElementNode.prototype.removeChild = function removeChild(childNode) {
    ViewNode$$1.prototype.removeChild.call(this, childNode);

    if (childNode.nodeType === 3) {
      this.setText('');
    }
  };

  return ElementNode;
}(ViewNode);

var CommentNode = function (ElementNode$$1) {
  function CommentNode(text) {
    ElementNode$$1.call(this, 'comment');
    this.nodeType = 8;
    this.text = text;
  }

  if (ElementNode$$1) CommentNode.__proto__ = ElementNode$$1;
  CommentNode.prototype = Object.create(ElementNode$$1 && ElementNode$$1.prototype);
  CommentNode.prototype.constructor = CommentNode;
  return CommentNode;
}(ElementNode);

var TextNode = function (ViewNode$$1) {
  function TextNode(text) {
    ViewNode$$1.call(this);
    this.nodeType = 3;
    this.text = text;
    this._meta = {
      skipAddToDom: true
    };
  }

  if (ViewNode$$1) TextNode.__proto__ = ViewNode$$1;
  TextNode.prototype = Object.create(ViewNode$$1 && ViewNode$$1.prototype);
  TextNode.prototype.constructor = TextNode;

  TextNode.prototype.setText = function setText(text) {
    this.text = text;
    this.parentNode.setText(text);
  };

  return TextNode;
}(ViewNode);

var DocumentNode = function (ViewNode$$1) {
  function DocumentNode() {
    ViewNode$$1.call(this);
    this.nodeType = 9;
    this.documentElement = new ElementNode('document'); // make static methods accessible via this

    this.createComment = this.constructor.createComment;
    this.createElement = this.constructor.createElement;
    this.createElementNS = this.constructor.createElementNS;
    this.createTextNode = this.constructor.createTextNode;
  }

  if (ViewNode$$1) DocumentNode.__proto__ = ViewNode$$1;
  DocumentNode.prototype = Object.create(ViewNode$$1 && ViewNode$$1.prototype);
  DocumentNode.prototype.constructor = DocumentNode;

  DocumentNode.createComment = function createComment(text) {
    return new CommentNode(text);
  };

  DocumentNode.createElement = function createElement(tagName) {
    return new ElementNode(tagName);
  };

  DocumentNode.createElementNS = function createElementNS(namespace, tagName) {
    return new ElementNode(namespace + ':' + tagName);
  };

  DocumentNode.createTextNode = function createTextNode(text) {
    return new TextNode(text);
  };

  return DocumentNode;
}(ViewNode);

var isReservedTag$1 = makeMap('template', true);

var _Vue;

function setVue(Vue$$1) {
  _Vue = Vue$$1;
}

var canBeLeftOpenTag = function canBeLeftOpenTag(el) {
  return getViewMeta(el).canBeLeftOpenTag;
};

var isUnaryTag = function isUnaryTag(el) {
  return getViewMeta(el).isUnaryTag;
};

function mustUseProp$1() {// console.log('mustUseProp')
}

function getTagNamespace$1(el) {
  return getViewMeta(el).tagNamespace;
}

function isUnknownElement$1(el) {
  return !isKnownView(el);
}

var VUE_VERSION = '2.5.17';
var NS_VUE_VERSION = '2.0.2';
var infoTrace = once(function () {
  console.log("NativeScript-Vue has \"Vue.config.silent\" set to true, to see output logs set it to false.");
});

function trace(message) {
  if (_Vue && _Vue.config.silent) {
    return infoTrace();
  }

  console.log("{NSVue (Vue: " + VUE_VERSION + " | NSVue: " + NS_VUE_VERSION + ")} -> " + message);
}

var namespaceMap$1 = {};

function createElement(tagName, vnode) {
  trace("CreateElement(" + tagName + ")");
  return DocumentNode.createElement(tagName);
}

function createElementNS(namespace, tagName) {
  trace("CreateElementNS(" + namespace + "#" + tagName + ")");
  return DocumentNode.createElementNS(namespace, tagName);
}

function createTextNode(text) {
  trace("CreateTextNode(" + text + ")");
  return DocumentNode.createTextNode(text);
}

function createComment(text) {
  trace("CreateComment(" + text + ")");
  return DocumentNode.createComment(text);
}

function insertBefore(parentNode, newNode, referenceNode) {
  trace("InsertBefore(" + parentNode + ", " + newNode + ", " + referenceNode + ")");
  return parentNode.insertBefore(newNode, referenceNode);
}

function removeChild$1(node, child) {
  trace("RemoveChild(" + node + ", " + child + ")");
  return node.removeChild(child);
}

function appendChild(node, child) {
  trace("AppendChild(" + node + ", " + child + ")");
  return node.appendChild(child);
}

function parentNode(node) {
  trace("ParentNode(" + node + ") -> " + node.parentNode);
  return node.parentNode;
}

function nextSibling(node) {
  trace("NextSibling(" + node + ") -> " + node.nextSibling);
  return node.nextSibling;
}

function tagName(elementNode) {
  trace("TagName(" + elementNode + ") -> " + elementNode.tagName);
  return elementNode.tagName;
}

function setTextContent(node, text) {
  trace("SetTextContent(" + node + ", " + text + ")");
  node.setText(text);
}

function setAttribute(node, key, val) {
  trace("SetAttribute(" + node + ", " + key + ", " + val + ")");
  node.setAttribute(key, val);
}

function setStyleScope(node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps =
/*#__PURE__*/
Object.freeze({
  namespaceMap: namespaceMap$1,
  createElement: createElement,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild$1,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setAttribute: setAttribute,
  setStyleScope: setStyleScope
});
var modules = platformModules.concat(baseModules);
var patch = createPatchFunction({
  nodeOps: nodeOps,
  modules: modules
});
var he = {
  decode: decode
};

function decode(html) {
  // todo?
  return html;
}
/*  */


var isUnaryTag$1 = makeMap('area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' + 'link,meta,param,source,track,wbr'); // Elements that you can, intentionally, leave open
// (and which close themselves)

var canBeLeftOpenTag$1 = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'); // HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content

var isNonPhrasingTag = makeMap('address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' + 'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' + 'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' + 'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' + 'title,tr,track');
/**
 * Not type-checking this file because it's mostly vendor code.
 */
// Regular Expressions for parsing tags and attributes

var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/; // could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName
// but for Vue templates we can enforce a simple charset

var ncname = '[a-zA-Z_][\\w\\-\\.]*';
var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
var startTagOpen = new RegExp("^<" + qnameCapture);
var startTagClose = /^\s*(\/?)>/;
var endTag = new RegExp("^<\\/" + qnameCapture + "[^>]*>");
var doctype = /^<!DOCTYPE [^>]+>/i; // #7298: escape - to avoid being pased as HTML comment when inlined in page

var comment = /^<!\--/;
var conditionalComment = /^<!\[/;
var IS_REGEX_CAPTURING_BROKEN = false;
'x'.replace(/x(.)?/g, function (m, g) {
  IS_REGEX_CAPTURING_BROKEN = g === '';
}); // Special Elements (can contain anything)

var isPlainTextElement = makeMap('script,style,textarea', true);
var reCache = {};
var decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n',
  '&#9;': '\t'
};
var encodedAttr = /&(?:lt|gt|quot|amp);/g;
var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10|#9);/g; // #5992

var isIgnoreNewlineTag = makeMap('pre,textarea', true);

var shouldIgnoreFirstNewline = function shouldIgnoreFirstNewline(tag, html) {
  return tag && isIgnoreNewlineTag(tag) && html[0] === '\n';
};

function decodeAttr(value, shouldDecodeNewlines) {
  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, function (match) {
    return decodingMap[match];
  });
}

function parseHTML(html, options) {
  var stack = [];
  var expectHTML = options.expectHTML;
  var isUnaryTag = options.isUnaryTag || no;
  var canBeLeftOpenTag = options.canBeLeftOpenTag || no;
  var index = 0;
  var last, lastTag;

  while (html) {
    last = html; // Make sure we're not in a plaintext content element like script/style

    if (!lastTag || !isPlainTextElement(lastTag)) {
      var textEnd = html.indexOf('<');

      if (textEnd === 0) {
        // Comment:
        if (comment.test(html)) {
          var commentEnd = html.indexOf('-->');

          if (commentEnd >= 0) {
            if (options.shouldKeepComment) {
              options.comment(html.substring(4, commentEnd));
            }

            advance(commentEnd + 3);
            continue;
          }
        } // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment


        if (conditionalComment.test(html)) {
          var conditionalEnd = html.indexOf(']>');

          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue;
          }
        } // Doctype:


        var doctypeMatch = html.match(doctype);

        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue;
        } // End tag:


        var endTagMatch = html.match(endTag);

        if (endTagMatch) {
          var curIndex = index;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index);
          continue;
        } // Start tag:


        var startTagMatch = parseStartTag();

        if (startTagMatch) {
          handleStartTag(startTagMatch);

          if (shouldIgnoreFirstNewline(lastTag, html)) {
            advance(1);
          }

          continue;
        }
      }

      var text = void 0,
          rest = void 0,
          next = void 0;

      if (textEnd >= 0) {
        rest = html.slice(textEnd);

        while (!endTag.test(rest) && !startTagOpen.test(rest) && !comment.test(rest) && !conditionalComment.test(rest)) {
          // < in plain text, be forgiving and treat it as text
          next = rest.indexOf('<', 1);

          if (next < 0) {
            break;
          }

          textEnd += next;
          rest = html.slice(textEnd);
        }

        text = html.substring(0, textEnd);
        advance(textEnd);
      }

      if (textEnd < 0) {
        text = html;
        html = '';
      }

      if (options.chars && text) {
        options.chars(text);
      }
    } else {
      var endTagLength = 0;
      var stackedTag = lastTag.toLowerCase();
      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
        endTagLength = endTag.length;

        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
          text = text.replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
          .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
        }

        if (shouldIgnoreFirstNewline(stackedTag, text)) {
          text = text.slice(1);
        }

        if (options.chars) {
          options.chars(text);
        }

        return '';
      });
      index += html.length - rest$1.length;
      html = rest$1;
      parseEndTag(stackedTag, index - endTagLength, index);
    }

    if (html === last) {
      options.chars && options.chars(html);

      if (!stack.length && options.warn) {
        options.warn("Mal-formatted tag at end of template: \"" + html + "\"");
      }

      break;
    }
  } // Clean up any remaining tags


  parseEndTag();

  function advance(n) {
    index += n;
    html = html.substring(n);
  }

  function parseStartTag() {
    var start = html.match(startTagOpen);

    if (start) {
      var match = {
        tagName: start[1],
        attrs: [],
        start: index
      };
      advance(start[0].length);
      var end, attr;

      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {
        advance(attr[0].length);
        match.attrs.push(attr);
      }

      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index;
        return match;
      }
    }
  }

  function handleStartTag(match) {
    var tagName = match.tagName;
    var unarySlash = match.unarySlash;

    if (expectHTML) {
      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
        parseEndTag(lastTag);
      }

      if (canBeLeftOpenTag(tagName) && lastTag === tagName) {
        parseEndTag(tagName);
      }
    }

    var unary = isUnaryTag(tagName) || !!unarySlash;
    var l = match.attrs.length;
    var attrs = new Array(l);

    for (var i = 0; i < l; i++) {
      var args = match.attrs[i]; // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778

      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('""') === -1) {
        if (args[3] === '') {
          delete args[3];
        }

        if (args[4] === '') {
          delete args[4];
        }

        if (args[5] === '') {
          delete args[5];
        }
      }

      var value = args[3] || args[4] || args[5] || '';
      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href' ? options.shouldDecodeNewlinesForHref : options.shouldDecodeNewlines;
      attrs[i] = {
        name: args[1],
        value: decodeAttr(value, shouldDecodeNewlines)
      };
    }

    if (!unary) {
      stack.push({
        tag: tagName,
        lowerCasedTag: tagName.toLowerCase(),
        attrs: attrs
      });
      lastTag = tagName;
    }

    if (options.start) {
      options.start(tagName, attrs, unary, match.start, match.end);
    }
  }

  function parseEndTag(tagName, start, end) {
    var pos, lowerCasedTagName;

    if (start == null) {
      start = index;
    }

    if (end == null) {
      end = index;
    }

    if (tagName) {
      lowerCasedTagName = tagName.toLowerCase();
    } // Find the closest opened tag of the same type


    if (tagName) {
      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break;
        }
      }
    } else {
      // If no tag name is provided, clean shop
      pos = 0;
    }

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (var i = stack.length - 1; i >= pos; i--) {
        if (i > pos || !tagName && options.warn) {
          options.warn("tag <" + stack[i].tag + "> has no matching end tag.");
        }

        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      } // Remove the open elements from the stack


      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === 'br') {
      if (options.start) {
        options.start(tagName, [], true, start, end);
      }
    } else if (lowerCasedTagName === 'p') {
      if (options.start) {
        options.start(tagName, [], false, start, end);
      }

      if (options.end) {
        options.end(tagName, start, end);
      }
    }
  }
}
/*  */


var validDivisionCharRE = /[\w).+\-_$\]]/;

function parseFilters(exp) {
  var inSingle = false;
  var inDouble = false;
  var inTemplateString = false;
  var inRegex = false;
  var curly = 0;
  var square = 0;
  var paren = 0;
  var lastFilterIndex = 0;
  var c, prev, i, expression, filters;

  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);

    if (inSingle) {
      if (c === 0x27 && prev !== 0x5C) {
        inSingle = false;
      }
    } else if (inDouble) {
      if (c === 0x22 && prev !== 0x5C) {
        inDouble = false;
      }
    } else if (inTemplateString) {
      if (c === 0x60 && prev !== 0x5C) {
        inTemplateString = false;
      }
    } else if (inRegex) {
      if (c === 0x2f && prev !== 0x5C) {
        inRegex = false;
      }
    } else if (c === 0x7C && // pipe
    exp.charCodeAt(i + 1) !== 0x7C && exp.charCodeAt(i - 1) !== 0x7C && !curly && !square && !paren) {
      if (expression === undefined) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22:
          inDouble = true;
          break;
        // "

        case 0x27:
          inSingle = true;
          break;
        // '

        case 0x60:
          inTemplateString = true;
          break;
        // `

        case 0x28:
          paren++;
          break;
        // (

        case 0x29:
          paren--;
          break;
        // )

        case 0x5B:
          square++;
          break;
        // [

        case 0x5D:
          square--;
          break;
        // ]

        case 0x7B:
          curly++;
          break;
        // {

        case 0x7D:
          curly--;
          break;
        // }
      }

      if (c === 0x2f) {
        // /
        var j = i - 1;
        var p = void 0; // find first non-whitespace prev char

        for (; j >= 0; j--) {
          p = exp.charAt(j);

          if (p !== ' ') {
            break;
          }
        }

        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }

  if (expression === undefined) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  function pushFilter() {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }

  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }

  return expression;
}

function wrapFilter(exp, filter) {
  var i = filter.indexOf('(');

  if (i < 0) {
    // _f: resolveFilter
    return "_f(\"" + filter + "\")(" + exp + ")";
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return "_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args);
  }
}
/*  */


var defaultTagRE = /\{\{((?:.|\n)+?)\}\}/g;
var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;
var buildRegex = cached(function (delimiters) {
  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g');
});

function parseText(text, delimiters) {
  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;

  if (!tagRE.test(text)) {
    return;
  }

  var tokens = [];
  var rawTokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index, tokenValue;

  while (match = tagRE.exec(text)) {
    index = match.index; // push text token

    if (index > lastIndex) {
      rawTokens.push(tokenValue = text.slice(lastIndex, index));
      tokens.push(JSON.stringify(tokenValue));
    } // tag token


    var exp = parseFilters(match[1].trim());
    tokens.push("_s(" + exp + ")");
    rawTokens.push({
      '@binding': exp
    });
    lastIndex = index + match[0].length;
  }

  if (lastIndex < text.length) {
    rawTokens.push(tokenValue = text.slice(lastIndex));
    tokens.push(JSON.stringify(tokenValue));
  }

  return {
    expression: tokens.join('+'),
    tokens: rawTokens
  };
}
/*  */

/**
 * Cross-platform code generation for component v-model
 */


function genComponentModel(el, value, modifiers) {
  var ref = modifiers || {};
  var number = ref.number;
  var trim = ref.trim;
  var baseValueExpression = '$$v';
  var valueExpression = baseValueExpression;

  if (trim) {
    valueExpression = "(typeof " + baseValueExpression + " === 'string'" + "? " + baseValueExpression + ".trim()" + ": " + baseValueExpression + ")";
  }

  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var assignment = genAssignmentCode(value, valueExpression);
  el.model = {
    value: "(" + value + ")",
    expression: "\"" + value + "\"",
    callback: "function (" + baseValueExpression + ") {" + assignment + "}"
  };
}
/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */


function genAssignmentCode(value, assignment) {
  var res = parseModel(value);

  if (res.key === null) {
    return value + "=" + assignment;
  } else {
    return "$set(" + res.exp + ", " + res.key + ", " + assignment + ")";
  }
}
/**
 * Parse a v-model expression into a base path and a final key segment.
 * Handles both dot-path and possible square brackets.
 *
 * Possible cases:
 *
 * - test
 * - test[key]
 * - test[test1[key]]
 * - test["a"][key]
 * - xxx.test[a[a].test1[key]]
 * - test.xxx.a["asa"][test1[key]]
 *
 */


var len, str, chr, index$1, expressionPos, expressionEndPos;

function parseModel(val) {
  // Fix https://github.com/vuejs/vue/pull/7730
  // allow v-model="obj.val " (trailing whitespace)
  val = val.trim();
  len = val.length;

  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
    index$1 = val.lastIndexOf('.');

    if (index$1 > -1) {
      return {
        exp: val.slice(0, index$1),
        key: '"' + val.slice(index$1 + 1) + '"'
      };
    } else {
      return {
        exp: val,
        key: null
      };
    }
  }

  str = val;
  index$1 = expressionPos = expressionEndPos = 0;

  while (!eof()) {
    chr = next();
    /* istanbul ignore if */

    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 0x5B) {
      parseBracket(chr);
    }
  }

  return {
    exp: val.slice(0, expressionPos),
    key: val.slice(expressionPos + 1, expressionEndPos)
  };
}

function next() {
  return str.charCodeAt(++index$1);
}

function eof() {
  return index$1 >= len;
}

function isStringStart(chr) {
  return chr === 0x22 || chr === 0x27;
}

function parseBracket(chr) {
  var inBracket = 1;
  expressionPos = index$1;

  while (!eof()) {
    chr = next();

    if (isStringStart(chr)) {
      parseString(chr);
      continue;
    }

    if (chr === 0x5B) {
      inBracket++;
    }

    if (chr === 0x5D) {
      inBracket--;
    }

    if (inBracket === 0) {
      expressionEndPos = index$1;
      break;
    }
  }
}

function parseString(chr) {
  var stringQuote = chr;

  while (!eof()) {
    chr = next();

    if (chr === stringQuote) {
      break;
    }
  }
}
/*  */


function baseWarn(msg) {
  console.error("[Vue compiler]: " + msg);
}

function pluckModuleFunction(modules, key) {
  return modules ? modules.map(function (m) {
    return m[key];
  }).filter(function (_) {
    return _;
  }) : [];
}

function addProp(el, name, value) {
  (el.props || (el.props = [])).push({
    name: name,
    value: value
  });
  el.plain = false;
}

function addAttr(el, name, value) {
  (el.attrs || (el.attrs = [])).push({
    name: name,
    value: value
  });
  el.plain = false;
} // add a raw attr (use this in preTransforms)


function addRawAttr(el, name, value) {
  el.attrsMap[name] = value;
  el.attrsList.push({
    name: name,
    value: value
  });
}

function addDirective(el, name, rawName, value, arg, modifiers) {
  (el.directives || (el.directives = [])).push({
    name: name,
    rawName: rawName,
    value: value,
    arg: arg,
    modifiers: modifiers
  });
  el.plain = false;
}

function addHandler(el, name, value, modifiers, important, warn) {
  modifiers = modifiers || emptyObject; // warn prevent and passive modifier

  /* istanbul ignore if */

  if (warn && modifiers.prevent && modifiers.passive) {
    warn('passive and prevent can\'t be used together. ' + 'Passive handler can\'t prevent default event.');
  } // check capture modifier


  if (modifiers.capture) {
    delete modifiers.capture;
    name = '!' + name; // mark the event as captured
  }

  if (modifiers.once) {
    delete modifiers.once;
    name = '~' + name; // mark the event as once
  }
  /* istanbul ignore if */


  if (modifiers.passive) {
    delete modifiers.passive;
    name = '&' + name; // mark the event as passive
  } // normalize click.right and click.middle since they don't actually fire
  // this is technically browser-specific, but at least for now browsers are
  // the only target envs that have right/middle clicks.


  if (name === 'click') {
    if (modifiers.right) {
      name = 'contextmenu';
      delete modifiers.right;
    } else if (modifiers.middle) {
      name = 'mouseup';
    }
  }

  var events;

  if (modifiers.native) {
    delete modifiers.native;
    events = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events = el.events || (el.events = {});
  }

  var newHandler = {
    value: value.trim()
  };

  if (modifiers !== emptyObject) {
    newHandler.modifiers = modifiers;
  }

  var handlers = events[name];
  /* istanbul ignore if */

  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events[name] = newHandler;
  }

  el.plain = false;
}

function getBindingAttr(el, name, getStatic) {
  var dynamicValue = getAndRemoveAttr(el, ':' + name) || getAndRemoveAttr(el, 'v-bind:' + name);

  if (dynamicValue != null) {
    return parseFilters(dynamicValue);
  } else if (getStatic !== false) {
    var staticValue = getAndRemoveAttr(el, name);

    if (staticValue != null) {
      return JSON.stringify(staticValue);
    }
  }
} // note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.


function getAndRemoveAttr(el, name, removeFromMap) {
  var val;

  if ((val = el.attrsMap[name]) != null) {
    var list = el.attrsList;

    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break;
      }
    }
  }

  if (removeFromMap) {
    delete el.attrsMap[name];
  }

  return val;
}
/*  */


var onRE = /^@|^v-on:/;
var dirRE = /^v-|^@|^:/;
var forAliasRE = /([^]*?)\s+(?:in|of)\s+([^]*)/;
var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
var stripParensRE = /^\(|\)$/g;
var argRE = /:(.*)$/;
var bindRE = /^:|^v-bind:/;
var modifierRE = /\.[^.]+/g;
var decodeHTMLCached = cached(he.decode); // configurable state

var warn$1;
var delimiters;
var transforms;
var preTransforms;
var postTransforms;
var platformIsPreTag;
var platformMustUseProp;
var platformGetTagNamespace;

function createASTElement(tag, attrs, parent) {
  return {
    type: 1,
    tag: tag,
    attrsList: attrs,
    attrsMap: makeAttrsMap(attrs),
    parent: parent,
    children: []
  };
}
/**
 * Convert HTML string to AST.
 */


function parse(template, options) {
  warn$1 = options.warn || baseWarn;
  platformIsPreTag = options.isPreTag || no;
  platformMustUseProp = options.mustUseProp || no;
  platformGetTagNamespace = options.getTagNamespace || no;
  transforms = pluckModuleFunction(options.modules, 'transformNode');
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');
  delimiters = options.delimiters;
  var stack = [];
  var preserveWhitespace = options.preserveWhitespace !== false;
  var root;
  var currentParent;
  var inVPre = false;
  var inPre = false;
  var warned = false;

  function warnOnce(msg) {
    if (!warned) {
      warned = true;
      warn$1(msg);
    }
  }

  function closeElement(element) {
    // check pre state
    if (element.pre) {
      inVPre = false;
    }

    if (platformIsPreTag(element.tag)) {
      inPre = false;
    } // apply post-transforms


    for (var i = 0; i < postTransforms.length; i++) {
      postTransforms[i](element, options);
    }
  }

  parseHTML(template, {
    warn: warn$1,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
    shouldKeepComment: options.comments,
    start: function start(tag, attrs, unary) {
      // check namespace.
      // inherit parent ns if there is one
      var ns = currentParent && currentParent.ns || platformGetTagNamespace(tag); // handle IE svg bug

      /* istanbul ignore if */

      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs);
      }

      var element = createASTElement(tag, attrs, currentParent);

      if (ns) {
        element.ns = ns;
      }

      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
        warn$1('Templates should only be responsible for mapping the state to the ' + 'UI. Avoid placing tags with side-effects in your templates, such as ' + "<" + tag + ">" + ', as they will not be parsed.');
      } // apply pre-transforms


      for (var i = 0; i < preTransforms.length; i++) {
        element = preTransforms[i](element, options) || element;
      }

      if (!inVPre) {
        processPre(element);

        if (element.pre) {
          inVPre = true;
        }
      }

      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }

      if (inVPre) {
        processRawAttrs(element);
      } else if (!element.processed) {
        // structural directives
        processFor(element);
        processIf(element);
        processOnce(element); // element-scope stuff

        processElement(element, options);
      }

      function checkRootConstraints(el) {
        {
          if (el.tag === 'slot' || el.tag === 'template') {
            warnOnce("Cannot use <" + el.tag + "> as component root element because it may " + 'contain multiple nodes.');
          }

          if (el.attrsMap.hasOwnProperty('v-for')) {
            warnOnce('Cannot use v-for on stateful component root element because ' + 'it renders multiple elements.');
          }
        }
      } // tree management


      if (!root) {
        root = element;
        checkRootConstraints(root);
      } else if (!stack.length) {
        // allow root elements with v-if, v-else-if and v-else
        if (root.if && (element.elseif || element.else)) {
          checkRootConstraints(element);
          addIfCondition(root, {
            exp: element.elseif,
            block: element
          });
        } else {
          warnOnce("Component template should contain exactly one root element. " + "If you are using v-if on multiple elements, " + "use v-else-if to chain them instead.");
        }
      }

      if (currentParent && !element.forbidden) {
        if (element.elseif || element.else) {
          processIfConditions(element, currentParent);
        } else if (element.slotScope) {
          // scoped slot
          currentParent.plain = false;
          var name = element.slotTarget || '"default"';
          (currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        } else {
          currentParent.children.push(element);
          element.parent = currentParent;
        }
      }

      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        closeElement(element);
      }
    },
    end: function end() {
      // remove trailing whitespace
      var element = stack[stack.length - 1];
      var lastNode = element.children[element.children.length - 1];

      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {
        element.children.pop();
      } // pop stack


      stack.length -= 1;
      currentParent = stack[stack.length - 1];
      closeElement(element);
    },
    chars: function chars(text) {
      if (!currentParent) {
        {
          if (text === template) {
            warnOnce('Component template requires a root element, rather than just text.');
          } else if (text = text.trim()) {
            warnOnce("text \"" + text + "\" outside root element will be ignored.");
          }
        }
        return;
      } // IE textarea placeholder bug

      /* istanbul ignore if */


      if (isIE && currentParent.tag === 'textarea' && currentParent.attrsMap.placeholder === text) {
        return;
      }

      var children = currentParent.children;
      text = inPre || text.trim() ? isTextTag(currentParent) ? text : decodeHTMLCached(text) // only preserve whitespace if its not right after a starting tag
      : preserveWhitespace && children.length ? ' ' : '';

      if (text) {
        var res;

        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
          children.push({
            type: 2,
            expression: res.expression,
            tokens: res.tokens,
            text: text
          });
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          children.push({
            type: 3,
            text: text
          });
        }
      }
    },
    comment: function comment(text) {
      currentParent.children.push({
        type: 3,
        text: text,
        isComment: true
      });
    }
  });
  return root;
}

function processPre(el) {
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true;
  }
}

function processRawAttrs(el) {
  var l = el.attrsList.length;

  if (l) {
    var attrs = el.attrs = new Array(l);

    for (var i = 0; i < l; i++) {
      attrs[i] = {
        name: el.attrsList[i].name,
        value: JSON.stringify(el.attrsList[i].value)
      };
    }
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    el.plain = true;
  }
}

function processElement(element, options) {
  processKey(element); // determine whether this is a plain element after
  // removing structural attributes

  element.plain = !element.key && !element.attrsList.length;
  processRef(element);
  processSlot(element);
  processComponent(element);

  for (var i = 0; i < transforms.length; i++) {
    element = transforms[i](element, options) || element;
  }

  processAttrs(element);
}

function processKey(el) {
  var exp = getBindingAttr(el, 'key');

  if (exp) {
    if (el.tag === 'template') {
      warn$1("<template> cannot be keyed. Place the key on real elements instead.");
    }

    el.key = exp;
  }
}

function processRef(el) {
  var ref = getBindingAttr(el, 'ref');

  if (ref) {
    el.ref = ref;
    el.refInFor = checkInFor(el);
  }
}

function processFor(el) {
  var exp;

  if (exp = getAndRemoveAttr(el, 'v-for')) {
    var res = parseFor(exp);

    if (res) {
      extend(el, res);
    } else {
      warn$1("Invalid v-for expression: " + exp);
    }
  }
}

function parseFor(exp) {
  var inMatch = exp.match(forAliasRE);

  if (!inMatch) {
    return;
  }

  var res = {};
  res.for = inMatch[2].trim();
  var alias = inMatch[1].trim().replace(stripParensRE, '');
  var iteratorMatch = alias.match(forIteratorRE);

  if (iteratorMatch) {
    res.alias = alias.replace(forIteratorRE, '');
    res.iterator1 = iteratorMatch[1].trim();

    if (iteratorMatch[2]) {
      res.iterator2 = iteratorMatch[2].trim();
    }
  } else {
    res.alias = alias;
  }

  return res;
}

function processIf(el) {
  var exp = getAndRemoveAttr(el, 'v-if');

  if (exp) {
    el.if = exp;
    addIfCondition(el, {
      exp: exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el.else = true;
    }

    var elseif = getAndRemoveAttr(el, 'v-else-if');

    if (elseif) {
      el.elseif = elseif;
    }
  }
}

function processIfConditions(el, parent) {
  var prev = findPrevElement(parent.children);

  if (prev && prev.if) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else {
    warn$1("v-" + (el.elseif ? 'else-if="' + el.elseif + '"' : 'else') + " " + "used on element <" + el.tag + "> without corresponding v-if.");
  }
}

function findPrevElement(children) {
  var i = children.length;

  while (i--) {
    if (children[i].type === 1) {
      return children[i];
    } else {
      if (children[i].text !== ' ') {
        warn$1("text \"" + children[i].text.trim() + "\" between v-if and v-else(-if) " + "will be ignored.");
      }

      children.pop();
    }
  }
}

function addIfCondition(el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }

  el.ifConditions.push(condition);
}

function processOnce(el) {
  var once$$1 = getAndRemoveAttr(el, 'v-once');

  if (once$$1 != null) {
    el.once = true;
  }
}

function processSlot(el) {
  if (el.tag === 'slot') {
    el.slotName = getBindingAttr(el, 'name');

    if (el.key) {
      warn$1("`key` does not work on <slot> because slots are abstract outlets " + "and can possibly expand into multiple elements. " + "Use the key on a wrapping element instead.");
    }
  } else {
    var slotScope;

    if (el.tag === 'template') {
      slotScope = getAndRemoveAttr(el, 'scope');
      /* istanbul ignore if */

      if (slotScope) {
        warn$1("the \"scope\" attribute for scoped slots have been deprecated and " + "replaced by \"slot-scope\" since 2.5. The new \"slot-scope\" attribute " + "can also be used on plain elements in addition to <template> to " + "denote scoped slots.", true);
      }

      el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
    } else if (slotScope = getAndRemoveAttr(el, 'slot-scope')) {
      /* istanbul ignore if */
      if (el.attrsMap['v-for']) {
        warn$1("Ambiguous combined usage of slot-scope and v-for on <" + el.tag + "> " + "(v-for takes higher priority). Use a wrapper <template> for the " + "scoped slot to make it clearer.", true);
      }

      el.slotScope = slotScope;
    }

    var slotTarget = getBindingAttr(el, 'slot');

    if (slotTarget) {
      el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget; // preserve slot as an attribute for native shadow DOM compat
      // only for non-scoped slots.

      if (el.tag !== 'template' && !el.slotScope) {
        addAttr(el, 'slot', slotTarget);
      }
    }
  }
}

function processComponent(el) {
  var binding;

  if (binding = getBindingAttr(el, 'is')) {
    el.component = binding;
  }

  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true;
  }
}

function processAttrs(el) {
  var list = el.attrsList;
  var i, l, name, rawName, value, modifiers, isProp;

  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;

    if (dirRE.test(name)) {
      // mark element as dynamic
      el.hasBindings = true; // modifiers

      modifiers = parseModifiers(name);

      if (modifiers) {
        name = name.replace(modifierRE, '');
      }

      if (bindRE.test(name)) {
        // v-bind
        name = name.replace(bindRE, '');
        value = parseFilters(value);
        isProp = false;

        if (modifiers) {
          if (modifiers.prop) {
            isProp = true;
            name = camelize(name);

            if (name === 'innerHtml') {
              name = 'innerHTML';
            }
          }

          if (modifiers.camel) {
            name = camelize(name);
          }

          if (modifiers.sync) {
            addHandler(el, "update:" + camelize(name), genAssignmentCode(value, "$event"));
          }
        }

        if (isProp || !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
          addProp(el, name, value);
        } else {
          addAttr(el, name, value);
        }
      } else if (onRE.test(name)) {
        // v-on
        name = name.replace(onRE, '');
        addHandler(el, name, value, modifiers, false, warn$1);
      } else {
        // normal directives
        name = name.replace(dirRE, ''); // parse arg

        var argMatch = name.match(argRE);
        var arg = argMatch && argMatch[1];

        if (arg) {
          name = name.slice(0, -(arg.length + 1));
        }

        addDirective(el, name, rawName, value, arg, modifiers);

        if (name === 'model') {
          checkForAliasModel(el, value);
        }
      }
    } else {
      // literal attribute
      {
        var res = parseText(value, delimiters);

        if (res) {
          warn$1(name + "=\"" + value + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div id="{{ val }}">, use <div :id="val">.');
        }
      }
      addAttr(el, name, JSON.stringify(value)); // #6887 firefox doesn't update muted state if set via attribute
      // even immediately after element creation

      if (!el.component && name === 'muted' && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
        addProp(el, name, 'true');
      }
    }
  }
}

function checkInFor(el) {
  var parent = el;

  while (parent) {
    if (parent.for !== undefined) {
      return true;
    }

    parent = parent.parent;
  }

  return false;
}

function parseModifiers(name) {
  var match = name.match(modifierRE);

  if (match) {
    var ret = {};
    match.forEach(function (m) {
      ret[m.slice(1)] = true;
    });
    return ret;
  }
}

function makeAttrsMap(attrs) {
  var map = {};

  for (var i = 0, l = attrs.length; i < l; i++) {
    if (map[attrs[i].name] && !isIE && !isEdge) {
      warn$1('duplicate attribute: ' + attrs[i].name);
    }

    map[attrs[i].name] = attrs[i].value;
  }

  return map;
} // for script (e.g. type="x/template") or style, do not decode content


function isTextTag(el) {
  return el.tag === 'script' || el.tag === 'style';
}

function isForbiddenTag(el) {
  return el.tag === 'style' || el.tag === 'script' && (!el.attrsMap.type || el.attrsMap.type === 'text/javascript');
}

var ieNSBug = /^xmlns:NS\d+/;
var ieNSPrefix = /^NS\d+:/;
/* istanbul ignore next */

function guardIESVGBug(attrs) {
  var res = [];

  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];

    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '');
      res.push(attr);
    }
  }

  return res;
}

function checkForAliasModel(el, value) {
  var _el = el;

  while (_el) {
    if (_el.for && _el.alias === value) {
      warn$1("<" + el.tag + " v-model=\"" + value + "\">: " + "You are binding v-model directly to a v-for iteration alias. " + "This will not be able to modify the v-for source array because " + "writing to the alias is like modifying a function local variable. " + "Consider using an array of objects and use v-model on an object property instead.");
    }

    _el = _el.parent;
  }
}
/*  */


var isStaticKey;
var isPlatformReservedTag;
var genStaticKeysCached = cached(genStaticKeys$1);
/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */

function optimize(root, options) {
  if (!root) {
    return;
  }

  isStaticKey = genStaticKeysCached(options.staticKeys || '');
  isPlatformReservedTag = options.isReservedTag || no; // first pass: mark all non-static nodes.

  markStatic(root); // second pass: mark static roots.

  markStaticRoots(root, false);
}

function genStaticKeys$1(keys) {
  return makeMap('type,tag,attrsList,attrsMap,plain,parent,children,attrs' + (keys ? ',' + keys : ''));
}

function markStatic(node) {
  node.static = isStatic(node);

  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 1. components not able to mutate slot nodes
    // 2. static slot content fails for hot-reloading
    if (!isPlatformReservedTag(node.tag) && node.tag !== 'slot' && node.attrsMap['inline-template'] == null) {
      return;
    }

    for (var i = 0, l = node.children.length; i < l; i++) {
      var child = node.children[i];
      markStatic(child);

      if (!child.static) {
        node.static = false;
      }
    }

    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        var block = node.ifConditions[i$1].block;
        markStatic(block);

        if (!block.static) {
          node.static = false;
        }
      }
    }
  }
}

function markStaticRoots(node, isInFor) {
  if (node.type === 1) {
    if (node.static || node.once) {
      node.staticInFor = isInFor;
    } // For a node to qualify as a static root, it should have children that
    // are not just static text. Otherwise the cost of hoisting out will
    // outweigh the benefits and it's better off to just always render it fresh.


    if (node.static && node.children.length && !(node.children.length === 1 && node.children[0].type === 3)) {
      node.staticRoot = true;
      return;
    } else {
      node.staticRoot = false;
    }

    if (node.children) {
      for (var i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node.for);
      }
    }

    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        markStaticRoots(node.ifConditions[i$1].block, isInFor);
      }
    }
  }
}

function isStatic(node) {
  if (node.type === 2) {
    // expression
    return false;
  }

  if (node.type === 3) {
    // text
    return true;
  }

  return !!(node.pre || !node.hasBindings && // no dynamic bindings
  !node.if && !node.for && // not v-if or v-for or v-else
  !isBuiltInTag(node.tag) && // not a built-in
  isPlatformReservedTag(node.tag) && // not a component
  !isDirectChildOfTemplateFor(node) && Object.keys(node).every(isStaticKey));
}

function isDirectChildOfTemplateFor(node) {
  while (node.parent) {
    node = node.parent;

    if (node.tag !== 'template') {
      return false;
    }

    if (node.for) {
      return true;
    }
  }

  return false;
}
/*  */


var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/;
var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/; // KeyboardEvent.keyCode aliases

var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
}; // KeyboardEvent.key aliases

var keyNames = {
  esc: 'Escape',
  tab: 'Tab',
  enter: 'Enter',
  space: ' ',
  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
  up: ['Up', 'ArrowUp'],
  left: ['Left', 'ArrowLeft'],
  right: ['Right', 'ArrowRight'],
  down: ['Down', 'ArrowDown'],
  'delete': ['Backspace', 'Delete']
}; // #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once

var genGuard = function genGuard(condition) {
  return "if(" + condition + ")return null;";
};

var modifierCode = {
  stop: '$event.stopPropagation();',
  prevent: '$event.preventDefault();',
  self: genGuard("$event.target !== $event.currentTarget"),
  ctrl: genGuard("!$event.ctrlKey"),
  shift: genGuard("!$event.shiftKey"),
  alt: genGuard("!$event.altKey"),
  meta: genGuard("!$event.metaKey"),
  left: genGuard("'button' in $event && $event.button !== 0"),
  middle: genGuard("'button' in $event && $event.button !== 1"),
  right: genGuard("'button' in $event && $event.button !== 2")
};

function genHandlers(events, isNative, warn) {
  var res = isNative ? 'nativeOn:{' : 'on:{';

  for (var name in events) {
    res += "\"" + name + "\":" + genHandler(name, events[name]) + ",";
  }

  return res.slice(0, -1) + '}';
}

function genHandler(name, handler) {
  if (!handler) {
    return 'function(){}';
  }

  if (Array.isArray(handler)) {
    return "[" + handler.map(function (handler) {
      return genHandler(name, handler);
    }).join(',') + "]";
  }

  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);

  if (!handler.modifiers) {
    if (isMethodPath || isFunctionExpression) {
      return handler.value;
    }

    return "function($event){" + handler.value + "}"; // inline statement
  } else {
    var code = '';
    var genModifierCode = '';
    var keys = [];

    for (var key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key]; // left/right

        if (keyCodes[key]) {
          keys.push(key);
        }
      } else if (key === 'exact') {
        var modifiers = handler.modifiers;
        genModifierCode += genGuard(['ctrl', 'shift', 'alt', 'meta'].filter(function (keyModifier) {
          return !modifiers[keyModifier];
        }).map(function (keyModifier) {
          return "$event." + keyModifier + "Key";
        }).join('||'));
      } else {
        keys.push(key);
      }
    }

    if (keys.length) {
      code += genKeyFilter(keys);
    } // Make sure modifiers like prevent and stop get executed after key filtering


    if (genModifierCode) {
      code += genModifierCode;
    }

    var handlerCode = isMethodPath ? "return " + handler.value + "($event)" : isFunctionExpression ? "return (" + handler.value + ")($event)" : handler.value;
    return "function($event){" + code + handlerCode + "}";
  }
}

function genKeyFilter(keys) {
  return "if(!('button' in $event)&&" + keys.map(genFilterCode).join('&&') + ")return null;";
}

function genFilterCode(key) {
  var keyVal = parseInt(key, 10);

  if (keyVal) {
    return "$event.keyCode!==" + keyVal;
  }

  var keyCode = keyCodes[key];
  var keyName = keyNames[key];
  return "_k($event.keyCode," + JSON.stringify(key) + "," + JSON.stringify(keyCode) + "," + "$event.key," + "" + JSON.stringify(keyName) + ")";
}
/*  */


function on(el, dir) {
  if (dir.modifiers) {
    warn("v-on without argument does not support modifiers.");
  }

  el.wrapListeners = function (code) {
    return "_g(" + code + "," + dir.value + ")";
  };
}
/*  */


function bind$1(el, dir) {
  el.wrapData = function (code) {
    return "_b(" + code + ",'" + el.tag + "'," + dir.value + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")";
  };
}
/*  */


var baseDirectives = {
  on: on,
  bind: bind$1,
  cloak: noop
};
/*  */

var CodegenState = function CodegenState(options) {
  this.options = options;
  this.warn = options.warn || baseWarn;
  this.transforms = pluckModuleFunction(options.modules, 'transformCode');
  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
  this.directives = extend(extend({}, baseDirectives), options.directives);
  var isReservedTag = options.isReservedTag || no;

  this.maybeComponent = function (el) {
    return !isReservedTag(el.tag);
  };

  this.onceId = 0;
  this.staticRenderFns = [];
};

function generate(ast, options) {
  var state = new CodegenState(options);
  var code = ast ? genElement(ast, state) : '_c("div")';
  return {
    render: "with(this){return " + code + "}",
    staticRenderFns: state.staticRenderFns
  };
}

function genElement(el, state) {
  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el, state);
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el, state);
  } else if (el.for && !el.forProcessed) {
    return genFor(el, state);
  } else if (el.if && !el.ifProcessed) {
    return genIf(el, state);
  } else if (el.tag === 'template' && !el.slotTarget) {
    return genChildren(el, state) || 'void 0';
  } else if (el.tag === 'slot') {
    return genSlot(el, state);
  } else {
    // component or element
    var code;

    if (el.component) {
      code = genComponent(el.component, el, state);
    } else {
      var data = el.plain ? undefined : genData(el, state);
      var children = el.inlineTemplate ? null : genChildren(el, state, true);
      code = "_c('" + el.tag + "'" + (data ? "," + data : '') + (children ? "," + children : '') + ")";
    } // module transforms


    for (var i = 0; i < state.transforms.length; i++) {
      code = state.transforms[i](el, code);
    }

    return code;
  }
} // hoist static sub-trees out


function genStatic(el, state) {
  el.staticProcessed = true;
  state.staticRenderFns.push("with(this){return " + genElement(el, state) + "}");
  return "_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")";
} // v-once


function genOnce(el, state) {
  el.onceProcessed = true;

  if (el.if && !el.ifProcessed) {
    return genIf(el, state);
  } else if (el.staticInFor) {
    var key = '';
    var parent = el.parent;

    while (parent) {
      if (parent.for) {
        key = parent.key;
        break;
      }

      parent = parent.parent;
    }

    if (!key) {
      state.warn("v-once can only be used inside v-for that is keyed. ");
      return genElement(el, state);
    }

    return "_o(" + genElement(el, state) + "," + state.onceId++ + "," + key + ")";
  } else {
    return genStatic(el, state);
  }
}

function genIf(el, state, altGen, altEmpty) {
  el.ifProcessed = true; // avoid recursion

  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty);
}

function genIfConditions(conditions, state, altGen, altEmpty) {
  if (!conditions.length) {
    return altEmpty || '_e()';
  }

  var condition = conditions.shift();

  if (condition.exp) {
    return "(" + condition.exp + ")?" + genTernaryExp(condition.block) + ":" + genIfConditions(conditions, state, altGen, altEmpty);
  } else {
    return "" + genTernaryExp(condition.block);
  } // v-if with v-once should generate code like (a)?_m(0):_m(1)


  function genTernaryExp(el) {
    return altGen ? altGen(el, state) : el.once ? genOnce(el, state) : genElement(el, state);
  }
}

function genFor(el, state, altGen, altHelper) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? "," + el.iterator1 : '';
  var iterator2 = el.iterator2 ? "," + el.iterator2 : '';

  if (state.maybeComponent(el) && el.tag !== 'slot' && el.tag !== 'template' && !el.key) {
    state.warn("<" + el.tag + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " + "v-for should have explicit keys. " + "See https://vuejs.org/guide/list.html#key for more info.", true
    /* tip */
    );
  }

  el.forProcessed = true; // avoid recursion

  return (altHelper || '_l') + "((" + exp + ")," + "function(" + alias + iterator1 + iterator2 + "){" + "return " + (altGen || genElement)(el, state) + '})';
}

function genData(el, state) {
  var data = '{'; // directives first.
  // directives may mutate the el's other properties before they are generated.

  var dirs = genDirectives(el, state);

  if (dirs) {
    data += dirs + ',';
  } // key


  if (el.key) {
    data += "key:" + el.key + ",";
  } // ref


  if (el.ref) {
    data += "ref:" + el.ref + ",";
  }

  if (el.refInFor) {
    data += "refInFor:true,";
  } // pre


  if (el.pre) {
    data += "pre:true,";
  } // record original tag name for components using "is" attribute


  if (el.component) {
    data += "tag:\"" + el.tag + "\",";
  } // module data generation functions


  for (var i = 0; i < state.dataGenFns.length; i++) {
    data += state.dataGenFns[i](el);
  } // attributes


  if (el.attrs) {
    data += "attrs:{" + genProps(el.attrs) + "},";
  } // DOM props


  if (el.props) {
    data += "domProps:{" + genProps(el.props) + "},";
  } // event handlers


  if (el.events) {
    data += genHandlers(el.events, false, state.warn) + ",";
  }

  if (el.nativeEvents) {
    data += genHandlers(el.nativeEvents, true, state.warn) + ",";
  } // slot target
  // only for non-scoped slots


  if (el.slotTarget && !el.slotScope) {
    data += "slot:" + el.slotTarget + ",";
  } // scoped slots


  if (el.scopedSlots) {
    data += genScopedSlots(el.scopedSlots, state) + ",";
  } // component v-model


  if (el.model) {
    data += "model:{value:" + el.model.value + ",callback:" + el.model.callback + ",expression:" + el.model.expression + "},";
  } // inline-template


  if (el.inlineTemplate) {
    var inlineTemplate = genInlineTemplate(el, state);

    if (inlineTemplate) {
      data += inlineTemplate + ",";
    }
  }

  data = data.replace(/,$/, '') + '}'; // v-bind data wrap

  if (el.wrapData) {
    data = el.wrapData(data);
  } // v-on data wrap


  if (el.wrapListeners) {
    data = el.wrapListeners(data);
  }

  return data;
}

function genDirectives(el, state) {
  var dirs = el.directives;

  if (!dirs) {
    return;
  }

  var res = 'directives:[';
  var hasRuntime = false;
  var i, l, dir, needRuntime;

  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    var gen = state.directives[dir.name];

    if (gen) {
      // compile-time directive that manipulates AST.
      // returns true if it also needs a runtime counterpart.
      needRuntime = !!gen(el, dir, state.warn);
    }

    if (needRuntime) {
      hasRuntime = true;
      res += "{name:\"" + dir.name + "\",rawName:\"" + dir.rawName + "\"" + (dir.value ? ",value:(" + dir.value + "),expression:" + JSON.stringify(dir.value) : '') + (dir.arg ? ",arg:\"" + dir.arg + "\"" : '') + (dir.modifiers ? ",modifiers:" + JSON.stringify(dir.modifiers) : '') + "},";
    }
  }

  if (hasRuntime) {
    return res.slice(0, -1) + ']';
  }
}

function genInlineTemplate(el, state) {
  var ast = el.children[0];

  if (el.children.length !== 1 || ast.type !== 1) {
    state.warn('Inline-template components must have exactly one child element.');
  }

  if (ast.type === 1) {
    var inlineRenderFns = generate(ast, state.options);
    return "inlineTemplate:{render:function(){" + inlineRenderFns.render + "},staticRenderFns:[" + inlineRenderFns.staticRenderFns.map(function (code) {
      return "function(){" + code + "}";
    }).join(',') + "]}";
  }
}

function genScopedSlots(slots, state) {
  return "scopedSlots:_u([" + Object.keys(slots).map(function (key) {
    return genScopedSlot(key, slots[key], state);
  }).join(',') + "])";
}

function genScopedSlot(key, el, state) {
  if (el.for && !el.forProcessed) {
    return genForScopedSlot(key, el, state);
  }

  var fn = "function(" + String(el.slotScope) + "){" + "return " + (el.tag === 'template' ? el.if ? el.if + "?" + (genChildren(el, state) || 'undefined') + ":undefined" : genChildren(el, state) || 'undefined' : genElement(el, state)) + "}";
  return "{key:" + key + ",fn:" + fn + "}";
}

function genForScopedSlot(key, el, state) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? "," + el.iterator1 : '';
  var iterator2 = el.iterator2 ? "," + el.iterator2 : '';
  el.forProcessed = true; // avoid recursion

  return "_l((" + exp + ")," + "function(" + alias + iterator1 + iterator2 + "){" + "return " + genScopedSlot(key, el, state) + '})';
}

function genChildren(el, state, checkSkip, altGenElement, altGenNode) {
  var children = el.children;

  if (children.length) {
    var el$1 = children[0]; // optimize single v-for

    if (children.length === 1 && el$1.for && el$1.tag !== 'template' && el$1.tag !== 'slot') {
      return (altGenElement || genElement)(el$1, state);
    }

    var normalizationType = checkSkip ? getNormalizationType(children, state.maybeComponent) : 0;
    var gen = altGenNode || genNode;
    return "[" + children.map(function (c) {
      return gen(c, state);
    }).join(',') + "]" + (normalizationType ? "," + normalizationType : '');
  }
} // determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed


function getNormalizationType(children, maybeComponent) {
  var res = 0;

  for (var i = 0; i < children.length; i++) {
    var el = children[i];

    if (el.type !== 1) {
      continue;
    }

    if (needsNormalization(el) || el.ifConditions && el.ifConditions.some(function (c) {
      return needsNormalization(c.block);
    })) {
      res = 2;
      break;
    }

    if (maybeComponent(el) || el.ifConditions && el.ifConditions.some(function (c) {
      return maybeComponent(c.block);
    })) {
      res = 1;
    }
  }

  return res;
}

function needsNormalization(el) {
  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot';
}

function genNode(node, state) {
  if (node.type === 1) {
    return genElement(node, state);
  }

  if (node.type === 3 && node.isComment) {
    return genComment(node);
  } else {
    return genText(node);
  }
}

function genText(text) {
  return "_v(" + (text.type === 2 ? text.expression // no need for () because already wrapped in _s()
  : transformSpecialNewlines(JSON.stringify(text.text))) + ")";
}

function genComment(comment) {
  return "_e(" + JSON.stringify(comment.text) + ")";
}

function genSlot(el, state) {
  var slotName = el.slotName || '"default"';
  var children = genChildren(el, state);
  var res = "_t(" + slotName + (children ? "," + children : '');
  var attrs = el.attrs && "{" + el.attrs.map(function (a) {
    return camelize(a.name) + ":" + a.value;
  }).join(',') + "}";
  var bind$$1 = el.attrsMap['v-bind'];

  if ((attrs || bind$$1) && !children) {
    res += ",null";
  }

  if (attrs) {
    res += "," + attrs;
  }

  if (bind$$1) {
    res += (attrs ? '' : ',null') + "," + bind$$1;
  }

  return res + ')';
} // componentName is el.component, take it as argument to shun flow's pessimistic refinement


function genComponent(componentName, el, state) {
  var children = el.inlineTemplate ? null : genChildren(el, state, true);
  return "_c(" + componentName + "," + genData(el, state) + (children ? "," + children : '') + ")";
}

function genProps(props) {
  var res = '';

  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    /* istanbul ignore if */

    {
      res += "\"" + prop.name + "\":" + transformSpecialNewlines(prop.value) + ",";
    }
  }

  return res.slice(0, -1);
} // #3895, #4268


function transformSpecialNewlines(text) {
  return text.replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');
}
/*  */
// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed


var prohibitedKeywordRE = new RegExp('\\b' + ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' + 'super,throw,while,yield,delete,export,import,return,switch,default,' + 'extends,finally,continue,debugger,function,arguments').split(',').join('\\b|\\b') + '\\b'); // these unary operators should not be used as property/method names

var unaryOperatorsRE = new RegExp('\\b' + 'delete,typeof,void'.split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)'); // strip strings in expressions

var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g; // detect problematic expressions in a template

function detectErrors(ast) {
  var errors = [];

  if (ast) {
    checkNode(ast, errors);
  }

  return errors;
}

function checkNode(node, errors) {
  if (node.type === 1) {
    for (var name in node.attrsMap) {
      if (dirRE.test(name)) {
        var value = node.attrsMap[name];

        if (value) {
          if (name === 'v-for') {
            checkFor(node, "v-for=\"" + value + "\"", errors);
          } else if (onRE.test(name)) {
            checkEvent(value, name + "=\"" + value + "\"", errors);
          } else {
            checkExpression(value, name + "=\"" + value + "\"", errors);
          }
        }
      }
    }

    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], errors);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, errors);
  }
}

function checkEvent(exp, text, errors) {
  var stipped = exp.replace(stripStringRE, '');
  var keywordMatch = stipped.match(unaryOperatorsRE);

  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {
    errors.push("avoid using JavaScript unary operator as property name: " + "\"" + keywordMatch[0] + "\" in expression " + text.trim());
  }

  checkExpression(exp, text, errors);
}

function checkFor(node, text, errors) {
  checkExpression(node.for || '', text, errors);
  checkIdentifier(node.alias, 'v-for alias', text, errors);
  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);
  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);
}

function checkIdentifier(ident, type, text, errors) {
  if (typeof ident === 'string') {
    try {
      new Function("var " + ident + "=_");
    } catch (e) {
      errors.push("invalid " + type + " \"" + ident + "\" in expression: " + text.trim());
    }
  }
}

function checkExpression(exp, text, errors) {
  try {
    new Function("return " + exp);
  } catch (e) {
    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);

    if (keywordMatch) {
      errors.push("avoid using JavaScript keyword as property name: " + "\"" + keywordMatch[0] + "\"\n  Raw expression: " + text.trim());
    } else {
      errors.push("invalid expression: " + e.message + " in\n\n" + "    " + exp + "\n\n" + "  Raw expression: " + text.trim() + "\n");
    }
  }
}
/*  */


function createFunction(code, errors) {
  try {
    return new Function(code);
  } catch (err) {
    errors.push({
      err: err,
      code: code
    });
    return noop;
  }
}

function createCompileToFunctionFn(compile) {
  var cache = Object.create(null);
  return function compileToFunctions(template, options, vm) {
    options = extend({}, options);
    var warn$$1 = options.warn || warn;
    delete options.warn;
    /* istanbul ignore if */

    {
      // detect possible CSP restriction
      try {
        new Function('return 1');
      } catch (e) {
        if (e.toString().match(/unsafe-eval|CSP/)) {
          warn$$1('It seems you are using the standalone build of Vue.js in an ' + 'environment with Content Security Policy that prohibits unsafe-eval. ' + 'The template compiler cannot work in this environment. Consider ' + 'relaxing the policy to allow unsafe-eval or pre-compiling your ' + 'templates into render functions.');
        }
      }
    } // check cache

    var key = options.delimiters ? String(options.delimiters) + template : template;

    if (cache[key]) {
      return cache[key];
    } // compile


    var compiled = compile(template, options); // check compilation errors/tips

    {
      if (compiled.errors && compiled.errors.length) {
        warn$$1("Error compiling template:\n\n" + template + "\n\n" + compiled.errors.map(function (e) {
          return "- " + e;
        }).join('\n') + '\n', vm);
      }

      if (compiled.tips && compiled.tips.length) {
        compiled.tips.forEach(function (msg) {
          return tip(msg, vm);
        });
      }
    } // turn code into functions

    var res = {};
    var fnGenErrors = [];
    res.render = createFunction(compiled.render, fnGenErrors);
    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
      return createFunction(code, fnGenErrors);
    }); // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use

    /* istanbul ignore if */

    {
      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
        warn$$1("Failed to generate render function:\n\n" + fnGenErrors.map(function (ref) {
          var err = ref.err;
          var code = ref.code;
          return err.toString() + " in\n\n" + code + "\n";
        }).join('\n'), vm);
      }
    }
    return cache[key] = res;
  };
}
/*  */


function createCompilerCreator(baseCompile) {
  return function createCompiler(baseOptions) {
    function compile(template, options) {
      var finalOptions = Object.create(baseOptions);
      var errors = [];
      var tips = [];

      finalOptions.warn = function (msg, tip) {
        (tip ? tips : errors).push(msg);
      };

      if (options) {
        // merge custom modules
        if (options.modules) {
          finalOptions.modules = (baseOptions.modules || []).concat(options.modules);
        } // merge custom directives


        if (options.directives) {
          finalOptions.directives = extend(Object.create(baseOptions.directives || null), options.directives);
        } // copy other options


        for (var key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key];
          }
        }
      }

      var compiled = baseCompile(template, finalOptions);
      {
        errors.push.apply(errors, detectErrors(compiled.ast));
      }
      compiled.errors = errors;
      compiled.tips = tips;
      return compiled;
    }

    return {
      compile: compile,
      compileToFunctions: createCompileToFunctionFn(compile)
    };
  };
}
/*  */
// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.


var createCompiler = createCompilerCreator(function baseCompile(template, options) {
  var ast = parse(template.trim(), options);

  if (options.optimize !== false) {
    optimize(ast, options);
  }

  var code = generate(ast, options);
  return {
    ast: ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  };
});

function transformNode(el, options) {
  var warn = options.warn || baseWarn;
  var staticClass = getAndRemoveAttr(el, 'class');

  if (staticClass) {
    var expression = parseText(staticClass, options.delimiters);

    if (expression) {
      warn("class=\"" + staticClass + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div class="{{ val }}">, use <div :class="val">.');
    }
  }

  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }

  var classBinding = getBindingAttr(el, 'class', false
  /* getStatic */
  );

  if (classBinding) {
    el.classBinding = classBinding;
  }
}

function genData$1(el) {
  var data = '';

  if (el.staticClass) {
    data += "staticClass:" + el.staticClass + ",";
  }

  if (el.classBinding) {
    data += "class:" + el.classBinding + ",";
  }

  return data;
}

var class_$1 = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData$1
};
var normalize$1 = cached(camelize);

function transformNode$1(el, options) {
  var warn = options.warn || baseWarn;
  var staticStyle = getAndRemoveAttr(el, 'style');
  var ref = parseStaticStyle(staticStyle, options);
  var dynamic = ref.dynamic;
  var styleResult = ref.styleResult;

  if (dynamic) {
    warn("style=\"" + String(staticStyle) + "\": " + 'Interpolation inside attributes has been deprecated. ' + 'Use v-bind or the colon shorthand instead.');
  }

  if (!dynamic && styleResult) {
    el.staticStyle = styleResult;
  }

  var styleBinding = getBindingAttr(el, 'style', false
  /* getStatic */
  );

  if (styleBinding) {
    el.styleBinding = styleBinding;
  } else if (dynamic) {
    el.styleBinding = styleResult;
  }
}

function genData$2(el) {
  var data = '';

  if (el.staticStyle) {
    data += "staticStyle:" + el.staticStyle + ",";
  }

  if (el.styleBinding) {
    data += "style:" + el.styleBinding + ",";
  }

  return data;
}

function parseStaticStyle(staticStyle, options) {
  // "width: 200px; height: 200px;" -> {width: 200, height: 200}
  // "width: 200px; height: {{y}}" -> {width: 200, height: y}
  var dynamic = false;
  var styleResult = '';

  if (staticStyle) {
    var styleList = staticStyle.trim().split(';').map(function (style) {
      var result = style.trim().split(':');

      if (result.length !== 2) {
        return;
      }

      var key = normalize$1(result[0].trim());
      var value = result[1].trim();
      var dynamicValue = parseText(value, options.delimiters);

      if (dynamicValue) {
        dynamic = true;
        return key + ':' + dynamicValue;
      }

      return key + ':' + JSON.stringify(value);
    }).filter(function (result) {
      return result;
    });

    if (styleList.length) {
      styleResult = '{' + styleList.join(',') + '}';
    }
  }

  return {
    dynamic: dynamic,
    styleResult: styleResult
  };
}

var style$1 = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode$1,
  genData: genData$2
};

function preTransformNode(el) {
  var vfor;

  if (normalizeElementName(el.tag) === 'nativelistview') {
    vfor = getAndRemoveAttr(el, 'v-for');
    delete el.attrsMap['v-for'];

    if (vfor) {
      warn("The v-for directive is not supported on a " + el.tag + ", " + 'Use the "for" attribute instead. For example, instead of ' + "<" + el.tag + " v-for=\"" + vfor + "\"> use <" + el.tag + " for=\"" + vfor + "\">.");
    }
  }

  var exp = getAndRemoveAttr(el, 'for') || vfor;

  if (!exp) {
    return;
  }

  var res = parseFor(exp);

  if (!res) {
    {
      warn("Invalid for expression: " + exp);
    }
    return;
  }

  addRawAttr(el, ':items', res.for);
  addRawAttr(el, '+alias', res.alias);

  if (res.iterator1) {
    addRawAttr(el, '+index', res.iterator1);
  }
}

var for_ = {
  preTransformNode: preTransformNode
};

function preTransformNode$1(el) {
  if (el.tag !== 'router-view') {
    return;
  }

  if (normalizeElementName(el.parent.tag) === 'nativeframe') {
    addAttr(el.parent, 'hasRouterView', 'true');
  }
}

var router = {
  preTransformNode: preTransformNode$1
};

function preTransformNode$2(el) {
  if (el.parent && el.parent.tag === 'v-template') {
    var alias = el.parent.parent.attrsMap['+alias'] || 'item';
    var index = el.parent.parent.attrsMap['+index'] || '$index';
    el.slotScope = buildScopeString(alias, index);
  }
}

var vTemplate$1 = {
  preTransformNode: preTransformNode$2
};

function buildScopeString(alias, index) {
  return "{ " + alias + ", " + index + ", $even, $odd }";
} // transforms ~test -> v-view:test


function transformNode$2(el) {
  var attr = Object.keys(el.attrsMap).find(function (attr) {
    return attr.startsWith('~');
  });

  if (attr) {
    var attrName = attr.substr(1);
    var ref = attrName.split('.');
    var arg = ref[0];
    var modifiers = ref.slice(1);
    modifiers = modifiers.reduce(function (mods, mod) {
      mods[mod] = true;
      return mods;
    }, {});
    getAndRemoveAttr(el, attr);
    addDirective(el, 'view', "v-view:" + attrName, '', arg, modifiers);
  }
}

var view$1 = {
  transformNode: transformNode$2
};
var modules$1 = [class_$1, style$1, vTemplate$1, for_, router, view$1];

function model(el, dir) {
  if (el.type === 1 && isKnownView(el.tag)) {
    genDefaultModel(el, dir.value, dir.modifiers);
  } else {
    genComponentModel(el, dir.value, dir.modifiers);
  }
}

function genDefaultModel(el, value, modifiers) {
  var ref = modifiers || {};
  var trim = ref.trim;
  var number = ref.number;
  var ref$1 = getViewMeta(el.tag).model;
  var prop = ref$1.prop;
  var event = ref$1.event;
  var valueExpression = "$event.value" + (trim ? '.trim()' : '');

  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var code = genAssignmentCode(value, valueExpression);
  addAttr(el, prop, "(" + value + ")");
  addHandler(el, event, code, null, true);
}

var directives$1 = {
  model: model
};
var baseOptions = {
  modules: modules$1,
  directives: directives$1,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp$1,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag$1,
  getTagNamespace: getTagNamespace$1,
  preserveWhitespace: false,
  staticKeys: genStaticKeys(modules$1)
};
var ref$3 = createCompiler(baseOptions);
var compile = ref$3.compile;
var compileToFunctions = ref$3.compileToFunctions;
/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;
{
  var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify
  );

  var warnNonPresent = function warnNonPresent(target, key) {
    warn("Property or method \"" + key + "\" is not defined on the instance but " + 'referenced during render. Make sure that this property is reactive, ' + 'either in the data option, or for class-based components, by ' + 'initializing the property. ' + 'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target);
  };

  var hasProxy = typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set(target, key, value) {
        if (isBuiltInModifier(key)) {
          warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
          return false;
        } else {
          target[key] = value;
          return true;
        }
      }
    });
  }

  var hasHandler = {
    has: function has(target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';

      if (!has && !isAllowed) {
        warnNonPresent(target, key);
      }

      return has || !isAllowed;
    }
  };
  var getHandler = {
    get: function get(target, key) {
      if (typeof key === 'string' && !(key in target)) {
        warnNonPresent(target, key);
      }

      return target[key];
    }
  };

  initProxy = function initProxy(vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}
/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy(target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };

  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState(vm) {
  vm._watchers = [];
  var opts = vm.$options;

  if (opts.props) {
    initProps(vm, opts.props);
  }

  if (opts.methods) {
    initMethods(vm, opts.methods);
  }

  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true
    /* asRootData */
    );
  }

  if (opts.computed) {
    initComputed(vm, opts.computed);
  }

  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps(vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {}; // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.

  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent; // root instance props should be converted

  if (!isRoot) {
    toggleObserving(false);
  }

  var loop = function loop(key) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */

    {
      var hyphenatedKey = hyphenate(key);

      if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {
        warn("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop.", vm);
      }

      defineReactive$$1(props, key, value, function () {
        if (vm.$parent && !isUpdatingChildComponent) {
          warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
        }
      });
    } // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.

    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop(key);

  toggleObserving(true);
}

function initData(vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};

  if (!isPlainObject(data)) {
    data = {};
    warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
  } // proxy data on instance


  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;

  while (i--) {
    var key = keys[i];
    {
      if (methods && hasOwn$5(methods, key)) {
        warn("Method \"" + key + "\" has already been defined as a data property.", vm);
      }
    }

    if (props && hasOwn$5(props, key)) {
      warn("The data property \"" + key + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  } // observe data


  observe(data, true
  /* asRootData */
  );
}

function getData(data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();

  try {
    return data.call(vm, vm);
  } catch (e) {
    handleError(e, vm, "data()");
    return {};
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = {
  lazy: true
};

function initComputed(vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null); // computed properties are just getters during SSR

  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;

    if (getter == null) {
      warn("Getter is missing for computed property \"" + key + "\".", vm);
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
    } // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.


    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else {
      if (key in vm.$data) {
        warn("The computed property \"" + key + "\" is already defined in data.", vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
      }
    }
  }
}

function defineComputed(target, key, userDef) {
  var shouldCache = !isServerRendering();

  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : userDef;
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : userDef.get : noop;
    sharedPropertyDefinition.set = userDef.set ? userDef.set : noop;
  }

  if (sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn("Computed property \"" + key + "\" was assigned to but it has no setter.", this);
    };
  }

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter(key) {
  return function computedGetter() {
    var watcher = this._computedWatchers && this._computedWatchers[key];

    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }

      if (Dep.target) {
        watcher.depend();
      }

      return watcher.value;
    }
  };
}

function initMethods(vm, methods) {
  var props = vm.$options.props;

  for (var key in methods) {
    {
      if (methods[key] == null) {
        warn("Method \"" + key + "\" has an undefined value in the component definition. " + "Did you reference the function correctly?", vm);
      }

      if (props && hasOwn$5(props, key)) {
        warn("Method \"" + key + "\" has already been defined as a prop.", vm);
      }

      if (key in vm && isReserved(key)) {
        warn("Method \"" + key + "\" conflicts with an existing Vue instance method. " + "Avoid defining component methods that start with _ or $.");
      }
    }
    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);
  }
}

function initWatch(vm, watch) {
  for (var key in watch) {
    var handler = watch[key];

    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher(vm, expOrFn, handler, options) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }

  if (typeof handler === 'string') {
    handler = vm[handler];
  }

  return vm.$watch(expOrFn, handler, options);
}

function stateMixin(Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};

  dataDef.get = function () {
    return this._data;
  };

  var propsDef = {};

  propsDef.get = function () {
    return this._props;
  };

  {
    dataDef.set = function (newData) {
      warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
    };

    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);
  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (expOrFn, cb, options) {
    var vm = this;

    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options);
    }

    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);

    if (options.immediate) {
      cb.call(vm, watcher.value);
    }

    return function unwatchFn() {
      watcher.teardown();
    };
  };
}
/*  */


function initProvide(vm) {
  var provide = vm.$options.provide;

  if (provide) {
    vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
  }
}

function initInjections(vm) {
  var result = resolveInject(vm.$options.inject, vm);

  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      {
        defineReactive$$1(vm, key, result[key], function () {
          warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
        });
      }
    });
    toggleObserving(true);
  }
}

function resolveInject(inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol ? Reflect.ownKeys(inject).filter(function (key) {
      /* istanbul ignore next */
      return Object.getOwnPropertyDescriptor(inject, key).enumerable;
    }) : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var provideKey = inject[key].from;
      var source = vm;

      while (source) {
        if (source._provided && hasOwn$5(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break;
        }

        source = source.$parent;
      }

      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function' ? provideDefault.call(vm) : provideDefault;
        } else {
          warn("Injection \"" + key + "\" not found", vm);
        }
      }
    }

    return result;
  }
}
/*  */

/**
 * Runtime helper for rendering v-for lists.
 */


function renderList(val, render) {
  var ret, i, l, keys, key;

  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);

    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);

    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject$1(val)) {
    keys = Object.keys(val);
    ret = new Array(keys.length);

    for (i = 0, l = keys.length; i < l; i++) {
      key = keys[i];
      ret[i] = render(val[key], key, i);
    }
  }

  if (isDef(ret)) {
    ret._isVList = true;
  }

  return ret;
}
/*  */

/**
 * Runtime helper for rendering <slot>
 */


function renderSlot(name, fallback, props, bindObject) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;

  if (scopedSlotFn) {
    // scoped slot
    props = props || {};

    if (bindObject) {
      if (!isObject$1(bindObject)) {
        warn('slot v-bind without argument expects an Object', this);
      }

      props = extend(extend({}, bindObject), props);
    }

    nodes = scopedSlotFn(props) || fallback;
  } else {
    var slotNodes = this.$slots[name]; // warn duplicate slot usage

    if (slotNodes) {
      if (slotNodes._rendered) {
        warn("Duplicate presence of slot \"" + name + "\" found in the same render tree " + "- this will likely cause render errors.", this);
      }

      slotNodes._rendered = true;
    }

    nodes = slotNodes || fallback;
  }

  var target = props && props.slot;

  if (target) {
    return this.$createElement('template', {
      slot: target
    }, nodes);
  } else {
    return nodes;
  }
}
/*  */

/**
 * Runtime helper for resolving filters
 */


function resolveFilter(id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity;
}
/*  */


function isKeyNotMatch(expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1;
  } else {
    return expect !== actual;
  }
}
/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */


function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;

  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName);
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode);
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key;
  }
}
/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */


function bindObjectProps(data, tag, value, asProp, isSync) {
  if (value) {
    if (!isObject$1(value)) {
      warn('v-bind without argument expects an Object or Array value', this);
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }

      var hash;

      var loop = function loop(key) {
        if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
        }

        if (!(key in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});

            on["update:" + key] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop(key);
    }
  }

  return data;
}
/*  */

/**
 * Runtime helper for rendering static trees.
 */


function renderStatic(index, isInFor) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index]; // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.

  if (tree && !isInFor) {
    return tree;
  } // otherwise, render a fresh tree.


  tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, null, this // for render fns generated for functional component templates
  );
  markStatic$1(tree, "__static__" + index, false);
  return tree;
}
/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */


function markOnce(tree, index, key) {
  markStatic$1(tree, "__once__" + index + (key ? "_" + key : ""), true);
  return tree;
}

function markStatic$1(tree, key, isOnce) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], key + "_" + i, isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}
/*  */


function bindObjectListeners(data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      warn('v-on without argument expects an Object value', this);
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};

      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }

  return data;
}
/*  */


function installRenderHelpers(target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString$4;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
}
/*  */


function FunctionalRenderContext(data, props, children, parent, Ctor) {
  var options = Ctor.options; // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check

  var contextVm;

  if (hasOwn$5(parent, '_uid')) {
    contextVm = Object.create(parent); // $flow-disable-line

    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent; // $flow-disable-line

    parent = parent._original;
  }

  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;
  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);

  this.slots = function () {
    return resolveSlots(children, parent);
  }; // support for compiled functional template


  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options; // pre-resolve slots for renderSlot()

    this.$slots = this.slots();
    this.$scopedSlots = data.scopedSlots || emptyObject;
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement$1(contextVm, a, b, c, d, needNormalization);

      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }

      return vnode;
    };
  } else {
    this._c = function (a, b, c, d) {
      return createElement$1(contextVm, a, b, c, d, needNormalization);
    };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;

  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) {
      mergeProps(props, data.attrs);
    }

    if (isDef(data.props)) {
      mergeProps(props, data.props);
    }
  }

  var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);
  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options);
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);

    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options);
    }

    return res;
  }
}

function cloneAndMarkFunctionalResult(vnode, data, contextVm, options) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;

  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }

  return clone;
}

function mergeProps(to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}
/*  */
// inline hooks to be invoked on component VNodes during patch


var componentVNodeHooks = {
  init: function init(vnode, hydrating, parentElm, refElm) {
    if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow

      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance, parentElm, refElm);
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },
  prepatch: function prepatch(oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(child, options.propsData, // updated props
    options.listeners, // updated listeners
    vnode, // new parent vnode
    options.children // new children
    );
  },
  insert: function insert(vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }

    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  },
  destroy: function destroy(vnode) {
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  }
};
var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent(Ctor, data, context, children, tag) {
  if (isUndef(Ctor)) {
    return;
  }

  var baseCtor = context.$options._base; // plain options object: turn it into a constructor

  if (isObject$1(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  } // if at this stage it's not a constructor or an async component factory,
  // reject.


  if (typeof Ctor !== 'function') {
    {
      warn("Invalid Component definition: " + String(Ctor), context);
    }
    return;
  } // async component


  var asyncFactory;

  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);

    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
    }
  }

  data = data || {}; // resolve constructor options in case global mixins are applied after
  // component constructor creation

  resolveConstructorOptions(Ctor); // transform component v-model data into props & events

  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  } // extract props


  var propsData = extractPropsFromVNodeData(data, Ctor, tag); // functional component

  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children);
  } // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners


  var listeners = data.on; // replace with listeners with .native modifier
  // so it gets processed during parent component patch.

  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot
    // work around flow
    var slot = data.slot;
    data = {};

    if (slot) {
      data.slot = slot;
    }
  } // install component management hooks onto the placeholder node


  installComponentHooks(data); // return a placeholder vnode

  var name = Ctor.options.name || tag;
  var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, {
    Ctor: Ctor,
    propsData: propsData,
    listeners: listeners,
    tag: tag,
    children: children
  }, asyncFactory);
  return vnode;
}

function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't
parent, // activeInstance in lifecycle state
parentElm, refElm) {
  var options = {
    _isComponent: true,
    parent: parent,
    _parentVnode: vnode,
    _parentElm: parentElm || null,
    _refElm: refElm || null
  }; // check inline-template render functions

  var inlineTemplate = vnode.data.inlineTemplate;

  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }

  return new vnode.componentOptions.Ctor(options);
}

function installComponentHooks(data) {
  var hooks = data.hook || (data.hook = {});

  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    hooks[key] = componentVNodeHooks[key];
  }
} // transform component v-model info (value and callback) into
// prop and event handler respectively.


function transformModel(options, data) {
  var prop = options.model && options.model.prop || 'value';
  var event = options.model && options.model.event || 'input';
  (data.props || (data.props = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});

  if (isDef(on[event])) {
    on[event] = [data.model.callback].concat(on[event]);
  } else {
    on[event] = data.model.callback;
  }
}
/*  */


var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2; // wrapper function for providing a more flexible interface
// without getting yelled at by flow

function createElement$1(context, tag, data, children, normalizationType, alwaysNormalize) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }

  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }

  return _createElement(context, tag, data, children, normalizationType);
}

function _createElement(context, tag, data, children, normalizationType) {
  if (isDef(data) && isDef(data.__ob__)) {
    warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
    return createEmptyVNode();
  } // object syntax in v-bind


  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }

  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode();
  } // warn against non-primitive key


  if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
    {
      warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);
    }
  } // support single function children as default scoped slot


  if (Array.isArray(children) && typeof children[0] === 'function') {
    data = data || {};
    data.scopedSlots = {
      default: children[0]
    };
    children.length = 0;
  }

  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }

  var vnode, ns;

  if (typeof tag === 'string') {
    var Ctor;
    ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);

    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(tag, data, children, undefined, undefined, context);
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }

  if (Array.isArray(vnode)) {
    return vnode;
  } else if (isDef(vnode)) {
    if (isDef(ns)) {
      applyNS(vnode, ns);
    }

    if (isDef(data)) {
      registerDeepBindings(data);
    }

    return vnode;
  } else {
    return createEmptyVNode();
  }
}

function applyNS(vnode, ns, force) {
  vnode.ns = ns;

  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }

  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];

      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== 'svg')) {
        applyNS(child, ns, force);
      }
    }
  }
} // ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes


function registerDeepBindings(data) {
  if (isObject$1(data.style)) {
    traverse(data.style);
  }

  if (isObject$1(data.class)) {
    traverse(data.class);
  }
}
/*  */


function initRender(vm) {
  vm._vnode = null; // the root of the child tree

  vm._staticTrees = null; // v-once cached trees

  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree

  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject; // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates

  vm._c = function (a, b, c, d) {
    return createElement$1(vm, a, b, c, d, false);
  }; // normalization is always applied for the public version, used in
  // user-written render functions.


  vm.$createElement = function (a, b, c, d) {
    return createElement$1(vm, a, b, c, d, true);
  }; // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated


  var parentData = parentVnode && parentVnode.data;
  /* istanbul ignore else */

  {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  }
}

function renderMixin(Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this);
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode; // reset _rendered flag on slots for duplicate slot check

    {
      for (var key in vm.$slots) {
        // $flow-disable-line
        vm.$slots[key]._rendered = false;
      }
    }

    if (_parentVnode) {
      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject;
    } // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.


    vm.$vnode = _parentVnode; // render self

    var vnode;

    try {
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render"); // return error render result,
      // or previous vnode to prevent render error causing blank component

      /* istanbul ignore else */

      {
        if (vm.$options.renderError) {
          try {
            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
          } catch (e) {
            handleError(e, vm, "renderError");
            vnode = vm._vnode;
          }
        } else {
          vnode = vm._vnode;
        }
      }
    } // return empty vnode in case the render function errored out


    if (!(vnode instanceof VNode)) {
      if (Array.isArray(vnode)) {
        warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
      }

      vnode = createEmptyVNode();
    } // set parent


    vnode.parent = _parentVnode;
    return vnode;
  };
}
/*  */


var uid$2 = 0;

function initMixin(Vue) {
  Vue.prototype._init = function (options) {
    var vm = this; // a uid

    vm._uid = uid$2++; // a flag to avoid this being observed

    vm._isVue = true; // merge options

    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
    }
    /* istanbul ignore else */


    {
      initProxy(vm);
    } // expose real self

    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props

    initState(vm);
    initProvide(vm); // resolve provide after data/props

    callHook(vm, 'created');

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent(vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options); // doing this because it's faster than dynamic enumeration.

  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  opts._parentElm = options._parentElm;
  opts._refElm = options._refElm;
  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions(Ctor) {
  var options = Ctor.options;

  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;

    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions; // check if there are any late-modified/attached options (#4976)

      var modifiedOptions = resolveModifiedOptions(Ctor); // update base extend options

      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }

      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);

      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }

  return options;
}

function resolveModifiedOptions(Ctor) {
  var modified;
  var latest = Ctor.options;
  var extended = Ctor.extendOptions;
  var sealed = Ctor.sealedOptions;

  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) {
        modified = {};
      }

      modified[key] = dedupe(latest[key], extended[key], sealed[key]);
    }
  }

  return modified;
}

function dedupe(latest, extended, sealed) {
  // compare latest and sealed to ensure lifecycle hooks won't be duplicated
  // between merges
  if (Array.isArray(latest)) {
    var res = [];
    sealed = Array.isArray(sealed) ? sealed : [sealed];
    extended = Array.isArray(extended) ? extended : [extended];

    for (var i = 0; i < latest.length; i++) {
      // push original options and not sealed options to exclude duplicated options
      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {
        res.push(latest[i]);
      }
    }

    return res;
  } else {
    return latest;
  }
}

function Vue(options) {
  if (!(this instanceof Vue)) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }

  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);
/*  */

function initUse(Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);

    if (installedPlugins.indexOf(plugin) > -1) {
      return this;
    } // additional parameters


    var args = toArray(arguments, 1);
    args.unshift(this);

    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }

    installedPlugins.push(plugin);
    return this;
  };
}
/*  */


function initMixin$1(Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this;
  };
}
/*  */


function initExtend(Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;
  /**
   * Class inheritance
   */

  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});

    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }

    var name = extendOptions.name || Super.options.name;

    if (name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent(options) {
      this._init(options);
    };

    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub['super'] = Super; // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.

    if (Sub.options.props) {
      initProps$1(Sub);
    }

    if (Sub.options.computed) {
      initComputed$1(Sub);
    } // allow further extension/mixin/plugin usage


    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use; // create asset registers, so extended classes
    // can have their private assets too.

    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    }); // enable recursive self-lookup

    if (name) {
      Sub.options.components[name] = Sub;
    } // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.


    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options); // cache constructor

    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}

function initProps$1(Comp) {
  var props = Comp.options.props;

  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1(Comp) {
  var computed = Comp.options.computed;

  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}
/*  */


function initAssetRegisters(Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (id, definition) {
      if (!definition) {
        return this.options[type + 's'][id];
      } else {
        /* istanbul ignore if */
        if (type === 'component') {
          validateComponentName(id);
        }

        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }

        if (type === 'directive' && typeof definition === 'function') {
          definition = {
            bind: definition,
            update: definition
          };
        }

        this.options[type + 's'][id] = definition;
        return definition;
      }
    };
  });
}
/*  */


function getComponentName(opts) {
  return opts && (opts.Ctor.options.name || opts.tag);
}

function matches(pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1;
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1;
  } else if (isRegExp$1(pattern)) {
    return pattern.test(name);
  }
  /* istanbul ignore next */


  return false;
}

function pruneCache(keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;

  for (var key in cache) {
    var cachedNode = cache[key];

    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);

      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry(cache, key, keys, current) {
  var cached$$1 = cache[key];

  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }

  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];
var KeepAlive = {
  name: 'keep-alive',
  abstract: true,
  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },
  created: function created() {
    this.cache = Object.create(null);
    this.keys = [];
  },
  destroyed: function destroyed() {
    var this$1 = this;

    for (var key in this$1.cache) {
      pruneCacheEntry(this$1.cache, key, this$1.keys);
    }
  },
  mounted: function mounted() {
    var this$1 = this;
    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) {
        return matches(val, name);
      });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) {
        return !matches(val, name);
      });
    });
  },
  render: function render() {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;

    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;

      if ( // not included
      include && (!name || !matches(include, name)) || // excluded
      exclude && name && matches(exclude, name)) {
        return vnode;
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null // same constructor may get registered as different local components
      // so cid alone is not enough (#3269)
      ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;

      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance; // make current key freshest

        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key); // prune oldest entry

        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }

    return vnode || slot && slot[0];
  }
};
var builtInComponents = {
  KeepAlive: KeepAlive
};
/*  */

function initGlobalAPI(Vue) {
  // config
  var configDef = {};

  configDef.get = function () {
    return config;
  };

  {
    configDef.set = function () {
      warn('Do not replace the Vue.config object, set individual fields instead.');
    };
  }
  Object.defineProperty(Vue, 'config', configDef); // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.

  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };
  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;
  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  }); // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.

  Vue.options._base = Vue;
  extend(Vue.options.components, builtInComponents);
  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);
Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});
Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get() {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext;
  }
}); // expose FunctionalRenderContext for ssr runtime helper installation

Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});
Vue.version = '2.5.17'; // recursively search for possible transition defined inside the component root

function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}

var show = {
  bind: function bind(el, ref, vnode) {
    var value = ref.value;
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalVisibility = el.__vOriginalVisibility = el.getAttribute('visibility') === 'none' ? '' : el.getAttribute('visibility');

    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.setAttribute('visibility', originalVisibility);
      });
    } else {
      el.setAttribute('visibility', value ? originalVisibility : 'collapsed');
    }
  },
  update: function update(el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;
    /* istanbul ignore if */

    if (!value === !oldValue) {
      return;
    }

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;

    if (transition$$1) {
      vnode.data.show = true;

      if (value) {
        enter(vnode, function () {
          el.setAttribute('visibility', el.__vOriginalVisibility);
        });
      } else {
        leave(vnode, function () {
          el.setAttribute('visibility', 'collapsed');
        });
      }
    } else {
      el.setAttribute('visibility', value ? el.__vOriginalVisibility : 'collapsed');
    }
  },
  unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
    if (!isDestroy) {
      el.setAttribute('visibility', el.__vOriginalVisibility);
    }
  }
};
var view$2 = {
  inserted: function inserted(el, ref) {
    var arg = ref.arg;
    var modifiers = ref.modifiers;
    var parent = el.parentNode.nativeView;

    if (parent) {
      if (modifiers.array) {
        parent[arg] = (parent[arg] || []).push(el.nativeView);
      } else {
        parent[arg] = el.nativeView;
      }
    }
  }
};
var platformDirectives = {
  show: show,
  view: view$2
};
Vue.config.mustUseProp = mustUseProp$1;
Vue.config.isReservedTag = isReservedTag$1;
Vue.config.isUnknownElement = isUnknownElement$1;
Vue.$document = Vue.prototype.$document = new DocumentNode();
Vue.compile = compileToFunctions;
Vue.registerElement = registerElement;
Object.assign(Vue.options.directives, platformDirectives);
Vue.prototype.__patch__ = patch;

Vue.prototype.$mount = function (el, hydrating) {
  var options = this.$options; // resolve template/el and convert to render function

  if (!options.render) {
    var template = options.template;

    if (template && typeof template !== 'string') {
      warn('invalid template option: ' + template, this);
      return this;
    }

    if (template) {
      var ref = compileToFunctions(template, {
        delimiters: options.delimiters,
        comments: options.comments
      }, this);
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      options.render = render;
      options.staticRenderFns = staticRenderFns;
    }
  }

  return mountComponent(this, el, hydrating);
};

Vue.prototype.$start = function () {
  var self = this;
  var AppConstructor = Vue.extend(this.$options); // register NS components into Vue

  Object.values(getElementMap()).forEach(function (entry) {
    Vue.component(entry.meta.component.name, entry.meta.component);
  });
  application.on(application.launchEvent, function (args) {
    if (self.$el) {
      self.$destroy();
      self = new AppConstructor();
    }

    self.$mount();
    args.root = self.$el.nativeView;
  });
  application.run();
}; // Define a `nativeView` getter in every NS vue instance


Object.defineProperty(Vue.prototype, 'nativeView', {
  get: function get() {
    return this.$el.nativeView;
  }
});

function _findParentModalEntry(vm) {
  if (!vm) {
    return false;
  }

  var entry = vm.$parent;

  while (entry && entry.$options.name !== 'ModalEntry') {
    entry = entry.$parent;
  }

  return entry;
}

var ModalPlugin = {
  install: function install(Vue) {
    Vue.mixin({
      created: function created() {
        var self = this;
        this.$modal = {
          close: function close(data) {
            var entry = _findParentModalEntry(self);

            if (entry) {
              entry.closeCb(data);
            }
          }
        };
      }
    });

    Vue.prototype.$showModal = function (component, options) {
      var this$1 = this;
      var defaultOptions = {
        fullscreen: false
      }; // build options object with defaults

      options = Object.assign({}, defaultOptions, options);
      return new Promise(function (resolve) {
        var resolved = false;

        var closeCb = function closeCb(data) {
          if (resolved) {
            return;
          }

          resolved = true;
          resolve(data);
          modalPage.closeModal(); // emitted to show up in devtools
          // for debugging purposes

          navEntryInstance.$emit('modal:close', data);
          navEntryInstance.$destroy();
        };

        var navEntryInstance = new Vue({
          name: 'ModalEntry',
          parent: this$1.$root,
          methods: {
            closeCb: closeCb
          },
          render: function render(h) {
            return h(component, {
              props: options.props
            });
          }
        });
        var modalPage = navEntryInstance.$mount().$el.nativeView;
        this$1.$el.nativeView.showModal(modalPage, null, closeCb, options.fullscreen);
      });
    };
  }
};

function getFrameInstance(frame$$1) {
  // get the frame that we need to navigate
  // this can be a frame id (String)
  // a Vue ref to a frame
  // a Frame ViewNode
  // or a Frame instance
  if (isObject$1(frame$$1) && isDef(frame$$1.$el)) {
    frame$$1 = frame$$1.$el.nativeView;
  } else if (isPrimitive(frame$$1)) {
    frame$$1 = frame.getFrameById(frame$$1);
  } else if (isDef(frame$$1.nativeView)) {
    frame$$1 = frame$$1.nativeView;
  } // finally get the component instance for this frame


  return getFrame(frame$$1.id);
}

function _findParentNavigationEntry(vm) {
  if (!vm) {
    return false;
  }

  var entry = vm.$parent;

  while (entry && entry.$options.name !== 'NavigationEntry') {
    entry = entry.$parent;
  }

  return entry;
}

var NavigatorPlugin = {
  install: function install(Vue) {
    Vue.prototype.$navigateBack = function (options, backstackEntry) {
      if (backstackEntry === void 0) backstackEntry = null;

      var navEntry = _findParentNavigationEntry(this);

      var defaultOptions = {
        frame: navEntry ? navEntry.$options.frame : 'default'
      };
      options = Object.assign({}, defaultOptions, options);
      var frame$$1 = getFrameInstance(options.frame);
      frame$$1.back(backstackEntry);
    };

    Vue.prototype.$navigateTo = function (component, options) {
      var this$1 = this;
      var defaultOptions = {
        frame: 'default'
      }; // build options object with defaults

      options = Object.assign({}, defaultOptions, options);
      return new Promise(function (resolve) {
        var frame$$1 = getFrameInstance(options.frame);
        var navEntryInstance = new Vue({
          name: 'NavigationEntry',
          parent: this$1.$root,
          frame: frame$$1,
          props: {
            frame: {
              default: frame$$1.id
            }
          },
          render: function render(h) {
            return h(component, {
              props: options.props
            });
          }
        });
        var page = navEntryInstance.$mount().$el.nativeView;

        var handler = function handler(args) {
          if (args.isBackNavigation) {
            page.off('navigatedFrom', handler);
            navEntryInstance.$destroy();
          }
        };

        page.on('navigatedFrom', handler); // ensure that the navEntryInstance vue instance is destroyed when the
        // page is disposed (clearHistory: true for example)

        var dispose = page.disposeNativeView;

        page.disposeNativeView = function () {
          var args = [],
              len = arguments.length;

          while (len--) args[len] = arguments[len];

          navEntryInstance.$destroy();
          dispose.call(page, args);
        };

        frame$$1.navigate(Object.assign({}, options, {
          create: function create() {
            return page;
          }
        }));
        resolve(page);
      });
    };
  }
}; // This is required because some of the third party plugins rely on this
// and cause errors since there is no process variable in {N}.

global.process = global.process || {};
global.process.env = global.process.env || {};
Vue.config.silent = true;
setVue(Vue);
Vue.use(ModalPlugin);
Vue.use(NavigatorPlugin);
var newLineRegExp = /\\n/g;

console.log = function (log, inspect, Vue$$1) {
  return function () {
    var args = [],
        len = arguments.length;

    while (len--) args[len] = arguments[len];

    return log.call.apply(log, [this].concat(Array.prototype.map.call(args, function (arg) {
      return inspect(arg, {
        depth: 2,
        colors: Vue$$1.config.debug,
        showHidden: true
      }).replace(newLineRegExp, '\n');
    })));
  };
}(console.log, utilInspect, Vue);

console.keys = function (object) {
  console.log(Object.keys(object));
}; // this fixes the issue of resuming the application
// however this might not be the desired functionality
// Todo: figure out if there is a better way to fix application resume.
// application.on(application.exitEvent, () => {
//   const frame = topmost()
//   if (frame) {
//     frame.eachChildView(child => {
//       const vm = child[VUE_VM_REF]
//
//       if (vm) {
//         console.log('DESTROYING ON APPEXITEVENT...')
//         vm.$destroy()
//       }
//       frame._removeView(child)
//     })
//   }
// })


global.__onLiveSyncCore = function () {
  var frame$$1 = frame.topmost();

  if (frame$$1) {
    if (frame$$1.currentPage && frame$$1.currentPage.modal) {
      frame$$1.currentPage.modal.closeModal();
    }

    if (frame$$1.currentPage) {
      frame$$1.currentPage.addCssFile(application__default.getCssFileName());
    }
  }
}; // Fix a rollup problem which does not define
// module.export.default = Vue
// so a `import Vue from 'nativescript-vue'` will
// fail from a Typescript file


Vue.default = Vue;
module.exports = Vue;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/application/application-common.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

__webpack_require__("../node_modules/tns-core-modules/globals/globals.js");

var observable_1 = __webpack_require__("../node_modules/tns-core-modules/data/observable/observable.js");

exports.Observable = observable_1.Observable;

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var events = new observable_1.Observable();
var launched = false;

function setLaunched() {
  launched = true;
  events.off("launch", setLaunched);
}

events.on("launch", setLaunched);

if (profiling_1.level() > 0) {
  events.on("displayed", function () {
    var duration = profiling_1.uptime();
    var end = profiling_1.time();
    var start = end - duration;
    profiling_1.trace("Displayed in " + duration.toFixed(2) + "ms", start, end);
  });
}

function hasLaunched() {
  return launched;
}

exports.hasLaunched = hasLaunched;
exports.launchEvent = "launch";
exports.suspendEvent = "suspend";
exports.displayedEvent = "displayed";
exports.resumeEvent = "resume";
exports.exitEvent = "exit";
exports.lowMemoryEvent = "lowMemory";
exports.uncaughtErrorEvent = "uncaughtError";
exports.orientationChangedEvent = "orientationChanged";
var cssFile = "./app.css";
var resources = {};

function getResources() {
  return resources;
}

exports.getResources = getResources;

function setResources(res) {
  resources = res;
}

exports.setResources = setResources;
exports.android = undefined;
exports.ios = undefined;
exports.on = events.on.bind(events);
exports.off = events.off.bind(events);
exports.notify = events.notify.bind(events);
exports.hasListeners = events.hasListeners.bind(events);
var app;

function setApplication(instance) {
  app = instance;
}

exports.setApplication = setApplication;

function livesync() {
  events.notify({
    eventName: "livesync",
    object: app
  });
  var liveSyncCore = global.__onLiveSyncCore;

  if (liveSyncCore) {
    liveSyncCore();
  }
}

exports.livesync = livesync;

function setCssFileName(cssFileName) {
  cssFile = cssFileName;
  events.notify({
    eventName: "cssChanged",
    object: app,
    cssFile: cssFileName
  });
}

exports.setCssFileName = setCssFileName;

function getCssFileName() {
  return cssFile;
}

exports.getCssFileName = getCssFileName;

function loadAppCss() {
  try {
    events.notify({
      eventName: "loadAppCss",
      object: app,
      cssFile: getCssFileName()
    });
  } catch (e) {
    throw new Error("The file " + getCssFileName() + " couldn't be loaded! " + "You may need to register it inside ./app/vendor.ts.");
  }
}

exports.loadAppCss = loadAppCss;

function addCss(cssText) {
  events.notify({
    eventName: "cssChanged",
    object: app,
    cssText: cssText
  });
}

exports.addCss = addCss;

global.__onUncaughtError = function (error) {
  events.notify({
    eventName: exports.uncaughtErrorEvent,
    object: app,
    android: error,
    ios: error,
    error: error
  });
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/application/application.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var application_common_1 = __webpack_require__("../node_modules/tns-core-modules/application/application-common.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/application/application-common.js"));

var ActivityCreated = "activityCreated";
var ActivityDestroyed = "activityDestroyed";
var ActivityStarted = "activityStarted";
var ActivityPaused = "activityPaused";
var ActivityResumed = "activityResumed";
var ActivityStopped = "activityStopped";
var SaveActivityState = "saveActivityState";
var ActivityResult = "activityResult";
var ActivityBackPressed = "activityBackPressed";
var ActivityRequestPermissions = "activityRequestPermissions";

var AndroidApplication = function (_super) {
  __extends(AndroidApplication, _super);

  function AndroidApplication() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.callbacks = {};
    _this._registeredReceivers = {};
    _this._pendingReceiverRegistrations = new Array();
    return _this;
  }

  Object.defineProperty(AndroidApplication.prototype, "currentContext", {
    get: function get() {
      return this.foregroundActivity;
    },
    enumerable: true,
    configurable: true
  });

  AndroidApplication.prototype.init = function (nativeApp) {
    if (this.nativeApp === nativeApp) {
      return;
    }

    if (this.nativeApp) {
      throw new Error("application.android already initialized.");
    }

    this.nativeApp = nativeApp;
    this.packageName = nativeApp.getPackageName();
    this.context = nativeApp.getApplicationContext();
    this.callbacks.lifecycleCallbacks = initLifecycleCallbacks();
    this.callbacks.componentCallbacks = initComponentCallbacks();
    this.nativeApp.registerActivityLifecycleCallbacks(this.callbacks.lifecycleCallbacks);
    this.nativeApp.registerComponentCallbacks(this.callbacks.componentCallbacks);

    this._registerPendingReceivers();
  };

  AndroidApplication.prototype._registerPendingReceivers = function () {
    var _this = this;

    this._pendingReceiverRegistrations.forEach(function (func) {
      return func(_this.context);
    });

    this._pendingReceiverRegistrations.length = 0;
  };

  AndroidApplication.prototype.registerBroadcastReceiver = function (intentFilter, onReceiveCallback) {
    ensureBroadCastReceiverClass();
    var that = this;

    var registerFunc = function registerFunc(context) {
      var receiver = new BroadcastReceiverClass(onReceiveCallback);
      context.registerReceiver(receiver, new android.content.IntentFilter(intentFilter));
      that._registeredReceivers[intentFilter] = receiver;
    };

    if (this.context) {
      registerFunc(this.context);
    } else {
      this._pendingReceiverRegistrations.push(registerFunc);
    }
  };

  AndroidApplication.prototype.unregisterBroadcastReceiver = function (intentFilter) {
    var receiver = this._registeredReceivers[intentFilter];

    if (receiver) {
      this.context.unregisterReceiver(receiver);
      this._registeredReceivers[intentFilter] = undefined;
      delete this._registeredReceivers[intentFilter];
    }
  };

  AndroidApplication.activityCreatedEvent = ActivityCreated;
  AndroidApplication.activityDestroyedEvent = ActivityDestroyed;
  AndroidApplication.activityStartedEvent = ActivityStarted;
  AndroidApplication.activityPausedEvent = ActivityPaused;
  AndroidApplication.activityResumedEvent = ActivityResumed;
  AndroidApplication.activityStoppedEvent = ActivityStopped;
  AndroidApplication.saveActivityStateEvent = SaveActivityState;
  AndroidApplication.activityResultEvent = ActivityResult;
  AndroidApplication.activityBackPressedEvent = ActivityBackPressed;
  AndroidApplication.activityRequestPermissionsEvent = ActivityRequestPermissions;
  return AndroidApplication;
}(application_common_1.Observable);

exports.AndroidApplication = AndroidApplication;
var androidApp = new AndroidApplication();
exports.android = androidApp;
application_common_1.setApplication(androidApp);
var mainEntry;
var started = false;
var createRootFrame = {
  value: true
};

function start(entry) {
  if (started) {
    throw new Error("Application is already started.");
  }

  started = true;
  mainEntry = typeof entry === "string" ? {
    moduleName: entry
  } : entry;

  if (!androidApp.nativeApp) {
    var nativeApp = getNativeApplication();
    androidApp.init(nativeApp);
  }
}

exports.start = start;

function shouldCreateRootFrame() {
  return createRootFrame.value;
}

exports.shouldCreateRootFrame = shouldCreateRootFrame;

function run(entry) {
  createRootFrame.value = false;
  start(entry);
}

exports.run = run;
var CALLBACKS = "_callbacks";

function _resetRootView(entry) {
  var activity = androidApp.foregroundActivity;

  if (!activity) {
    throw new Error("Cannot find android activity.");
  }

  createRootFrame.value = false;
  mainEntry = typeof entry === "string" ? {
    moduleName: entry
  } : entry;
  var callbacks = activity[CALLBACKS];
  callbacks.resetActivityContent(activity);
}

exports._resetRootView = _resetRootView;

function getMainEntry() {
  return mainEntry;
}

exports.getMainEntry = getMainEntry;

function getRootView() {
  var activity = androidApp.foregroundActivity || androidApp.startActivity;

  if (!activity) {
    return undefined;
  }

  var callbacks = activity[CALLBACKS];
  return callbacks ? callbacks.getRootView() : undefined;
}

exports.getRootView = getRootView;

function getNativeApplication() {
  var nativeApp = androidApp.nativeApp;

  if (!nativeApp) {
    if (!nativeApp && com.tns.NativeScriptApplication) {
      nativeApp = com.tns.NativeScriptApplication.getInstance();
    }

    if (!nativeApp) {
      var clazz = java.lang.Class.forName("android.app.ActivityThread");

      if (clazz) {
        var method = clazz.getMethod("currentApplication", null);

        if (method) {
          nativeApp = method.invoke(null, null);
        }
      }
    }

    if (!nativeApp) {
      throw new Error("Failed to retrieve native Android Application object. If you have a custom android.app.Application type implemented make sure that you've called the '<application-module>.android.init' method.");
    }
  }

  return nativeApp;
}

exports.getNativeApplication = getNativeApplication;

global.__onLiveSync = function () {
  if (androidApp && androidApp.paused) {
    return;
  }

  application_common_1.livesync();
};

function initLifecycleCallbacks() {
  var setThemeOnLaunch = profiling_1.profile("setThemeOnLaunch", function (activity) {
    var activityInfo = activity.getPackageManager().getActivityInfo(activity.getComponentName(), android.content.pm.PackageManager.GET_META_DATA);

    if (activityInfo.metaData) {
      var setThemeOnLaunch_1 = activityInfo.metaData.getInt("SET_THEME_ON_LAUNCH", -1);

      if (setThemeOnLaunch_1 !== -1) {
        activity.setTheme(setThemeOnLaunch_1);
      }
    }
  });
  var notifyActivityCreated = profiling_1.profile("notifyActivityCreated", function (activity, savedInstanceState) {
    androidApp.notify({
      eventName: ActivityCreated,
      object: androidApp,
      activity: activity,
      bundle: savedInstanceState
    });
  });
  var subscribeForGlobalLayout = profiling_1.profile("subscribeForGlobalLayout", function (activity) {
    var rootView = activity.getWindow().getDecorView().getRootView();
    this.onGlobalLayoutListener = new android.view.ViewTreeObserver.OnGlobalLayoutListener({
      onGlobalLayout: function onGlobalLayout() {
        application_common_1.notify({
          eventName: application_common_1.displayedEvent,
          object: androidApp,
          activity: activity
        });
        var viewTreeObserver = rootView.getViewTreeObserver();
        viewTreeObserver.removeOnGlobalLayoutListener(this.onGlobalLayoutListener);
      }
    });
    rootView.getViewTreeObserver().addOnGlobalLayoutListener(this.onGlobalLayoutListener);
  });
  var lifecycleCallbacks = new android.app.Application.ActivityLifecycleCallbacks({
    onActivityCreated: profiling_1.profile("onActivityCreated", function (activity, savedInstanceState) {
      setThemeOnLaunch(activity);

      if (!androidApp.startActivity) {
        androidApp.startActivity = activity;
      }

      notifyActivityCreated(activity, savedInstanceState);

      if (application_common_1.hasListeners(application_common_1.displayedEvent)) {
        subscribeForGlobalLayout(activity);
      }
    }),
    onActivityDestroyed: profiling_1.profile("onActivityDestroyed", function (activity) {
      if (activity === androidApp.foregroundActivity) {
        androidApp.foregroundActivity = undefined;
      }

      if (activity === androidApp.startActivity) {
        androidApp.startActivity = undefined;
      }

      androidApp.notify({
        eventName: ActivityDestroyed,
        object: androidApp,
        activity: activity
      });
      gc();
    }),
    onActivityPaused: profiling_1.profile("onActivityPaused", function (activity) {
      if (activity.isNativeScriptActivity) {
        androidApp.paused = true;
        application_common_1.notify({
          eventName: application_common_1.suspendEvent,
          object: androidApp,
          android: activity
        });
      }

      androidApp.notify({
        eventName: ActivityPaused,
        object: androidApp,
        activity: activity
      });
    }),
    onActivityResumed: profiling_1.profile("onActivityResumed", function (activity) {
      androidApp.foregroundActivity = activity;

      if (activity.isNativeScriptActivity) {
        application_common_1.notify({
          eventName: application_common_1.resumeEvent,
          object: androidApp,
          android: activity
        });
        androidApp.paused = false;
      }

      androidApp.notify({
        eventName: ActivityResumed,
        object: androidApp,
        activity: activity
      });
    }),
    onActivitySaveInstanceState: profiling_1.profile("onActivityResumed", function (activity, outState) {
      androidApp.notify({
        eventName: SaveActivityState,
        object: androidApp,
        activity: activity,
        bundle: outState
      });
    }),
    onActivityStarted: profiling_1.profile("onActivityStarted", function (activity) {
      androidApp.notify({
        eventName: ActivityStarted,
        object: androidApp,
        activity: activity
      });
    }),
    onActivityStopped: profiling_1.profile("onActivityStopped", function (activity) {
      androidApp.notify({
        eventName: ActivityStopped,
        object: androidApp,
        activity: activity
      });
    })
  });
  return lifecycleCallbacks;
}

var currentOrientation;

function initComponentCallbacks() {
  var componentCallbacks = new android.content.ComponentCallbacks2({
    onLowMemory: profiling_1.profile("onLowMemory", function () {
      gc();
      java.lang.System.gc();
      application_common_1.notify({
        eventName: application_common_1.lowMemoryEvent,
        object: this,
        android: this
      });
    }),
    onTrimMemory: profiling_1.profile("onTrimMemory", function (level) {}),
    onConfigurationChanged: profiling_1.profile("onConfigurationChanged", function (newConfig) {
      var newOrientation = newConfig.orientation;

      if (newOrientation === currentOrientation) {
        return;
      }

      currentOrientation = newOrientation;
      var newValue;

      switch (newOrientation) {
        case android.content.res.Configuration.ORIENTATION_LANDSCAPE:
          newValue = "landscape";
          break;

        case android.content.res.Configuration.ORIENTATION_PORTRAIT:
          newValue = "portrait";
          break;

        default:
          newValue = "unknown";
          break;
      }

      application_common_1.notify({
        eventName: application_common_1.orientationChangedEvent,
        android: androidApp.nativeApp,
        newValue: newValue,
        object: androidApp
      });
    })
  });
  return componentCallbacks;
}

var BroadcastReceiverClass;

function ensureBroadCastReceiverClass() {
  if (BroadcastReceiverClass) {
    return;
  }

  var BroadcastReceiver = function (_super) {
    __extends(BroadcastReceiver, _super);

    function BroadcastReceiver(onReceiveCallback) {
      var _this = _super.call(this) || this;

      _this._onReceiveCallback = onReceiveCallback;
      return global.__native(_this);
    }

    BroadcastReceiver.prototype.onReceive = function (context, intent) {
      if (this._onReceiveCallback) {
        this._onReceiveCallback(context, intent);
      }
    };

    return BroadcastReceiver;
  }(android.content.BroadcastReceiver);

  BroadcastReceiverClass = BroadcastReceiver;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/bundle-entry-points.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {if (true) {
  __webpack_require__("../node_modules/tns-core-modules/globals/globals.js");

  global.registerModule("text/formatted-string", function () {
    return __webpack_require__("../node_modules/tns-core-modules/text/formatted-string.js");
  });
  global.registerModule("text/span", function () {
    return __webpack_require__("../node_modules/tns-core-modules/text/span.js");
  });
  global.registerModule("ui/action-bar", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/action-bar/action-bar.js");
  });
  global.registerModule("ui/activity-indicator", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/activity-indicator/activity-indicator.js");
  });
  global.registerModule("ui/border", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/border/border.js");
  });
  global.registerModule("ui/button", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/button/button.js");
  });
  global.registerModule("ui/content-view", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/content-view/content-view.js");
  });
  global.registerModule("ui/date-picker", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/date-picker/date-picker.js");
  });
  global.registerModule("ui/frame", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame.js");
  });
  global.registerModule("ui/html-view", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/html-view/html-view.js");
  });
  global.registerModule("ui/image", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/image/image.js");
  });
  global.registerModule("ui/label", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/label/label.js");
  });
  global.registerModule("ui/layouts/absolute-layout", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/absolute-layout/absolute-layout.js");
  });
  global.registerModule("ui/layouts/dock-layout", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/dock-layout/dock-layout.js");
  });
  global.registerModule("ui/layouts/grid-layout", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/grid-layout/grid-layout.js");
  });
  global.registerModule("ui/layouts/stack-layout", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout.js");
  });
  global.registerModule("ui/layouts/flexbox-layout", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout.js");
  });
  global.registerModule("ui/layouts/wrap-layout", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/wrap-layout/wrap-layout.js");
  });
  global.registerModule("ui/list-picker", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/list-picker/list-picker.js");
  });
  global.registerModule("ui/page", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/page/page.js");
  });
  global.registerModule("ui/placeholder", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/placeholder/placeholder.js");
  });
  global.registerModule("ui/progress", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/progress/progress.js");
  });
  global.registerModule("ui/proxy-view-container", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/proxy-view-container/proxy-view-container.js");
  });
  global.registerModule("ui/repeater", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/repeater/repeater.js");
  });
  global.registerModule("ui/scroll-view", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/scroll-view/scroll-view.js");
  });
  global.registerModule("ui/search-bar", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/search-bar/search-bar.js");
  });
  global.registerModule("ui/segmented-bar", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/segmented-bar/segmented-bar.js");
  });
  global.registerModule("ui/slider", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/slider/slider.js");
  });
  global.registerModule("ui/switch", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/switch/switch.js");
  });
  global.registerModule("ui/tab-view", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/tab-view/tab-view.js");
  });
  global.registerModule("ui/web-view", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/web-view/web-view.js");
  });
  global.registerModule("ui/text-field", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/text-field/text-field.js");
  });
  global.registerModule("ui/text-view", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/text-view/text-view.js");
  });
  global.registerModule("ui/time-picker", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/time-picker/time-picker.js");
  });
  global.registerModule("ui/list-view", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/list-view/list-view.js");
  });
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/color/color-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var types = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var knownColors = __webpack_require__("../node_modules/tns-core-modules/color/known-colors.js");

var SHARP = "#";
var HEX_REGEX = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i;

var Color = function () {
  function Color() {
    if (arguments.length === 1) {
      var arg = arguments[0];

      if (types.isString(arg)) {
        if (isRgbOrRgba(arg)) {
          this._argb = argbFromRgbOrRgba(arg);
        } else if (knownColors.isKnownName(arg)) {
          var hex = knownColors.getKnownColor(arg);
          this._name = arg;
          this._argb = this._argbFromString(hex);
        } else if (HEX_REGEX.test(arg)) {
          var hex = this._normalizeHex(arg);

          this._argb = this._argbFromString(hex);
        } else {
          throw new Error("Invalid color: " + arg);
        }
      } else if (types.isNumber(arg)) {
        this._argb = arg >>> 0;
      } else {
        throw new Error("Expected 1 or 4 constructor parameters.");
      }
    } else if (arguments.length === 4) {
      this._argb = (arguments[0] & 0xFF) * 0x01000000 + (arguments[1] & 0xFF) * 0x00010000 + (arguments[2] & 0xFF) * 0x00000100 + (arguments[3] & 0xFF) * 0x00000001;
    } else {
      throw new Error("Expected 1 or 4 constructor parameters.");
    }
  }

  Object.defineProperty(Color.prototype, "a", {
    get: function get() {
      return this._argb / 0x01000000 & 0xFF;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "r", {
    get: function get() {
      return this._argb / 0x00010000 & 0xFF;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "g", {
    get: function get() {
      return this._argb / 0x00000100 & 0xFF;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "b", {
    get: function get() {
      return this._argb / 0x00000001 & 0xFF;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "argb", {
    get: function get() {
      return this._argb;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "hex", {
    get: function get() {
      if (this.a === 0xFF) {
        return ("#" + this._componentToHex(this.r) + this._componentToHex(this.g) + this._componentToHex(this.b)).toUpperCase();
      } else {
        return ("#" + this._componentToHex(this.a) + this._componentToHex(this.r) + this._componentToHex(this.g) + this._componentToHex(this.b)).toUpperCase();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "name", {
    get: function get() {
      return this._name;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "ios", {
    get: function get() {
      return undefined;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "android", {
    get: function get() {
      return undefined;
    },
    enumerable: true,
    configurable: true
  });

  Color.prototype._argbFromString = function (hex) {
    if (hex.charAt(0) === "#") {
      hex = hex.substr(1);
    }

    if (hex.length === 3) {
      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
    } else if (hex.length === 4) {
      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];
    }

    var intVal = parseInt(hex, 16);

    if (hex.length === 6) {
      intVal = (intVal & 0x00FFFFFF) + 0xFF000000;
    }

    return intVal;
  };

  Color.prototype.equals = function (value) {
    return value && this.argb === value.argb;
  };

  Color.equals = function (value1, value2) {
    if (!value1 && !value2) {
      return true;
    }

    if (!value1 || !value2) {
      return false;
    }

    return value1.equals(value2);
  };

  Color.isValid = function (value) {
    if (types.isNullOrUndefined(value) || value instanceof Color) {
      return true;
    }

    if (!types.isString(value)) {
      return false;
    }

    if (knownColors.isKnownName(value)) {
      return true;
    }

    return HEX_REGEX.test(value) || isRgbOrRgba(value);
  };

  Color.prototype._componentToHex = function (component) {
    var hex = component.toString(16);

    if (hex.length === 1) {
      hex = "0" + hex;
    }

    return hex;
  };

  Color.prototype._normalizeHex = function (hexStr) {
    if (hexStr.charAt(0) === SHARP && hexStr.length === 4) {
      hexStr = hexStr.charAt(0) + hexStr.charAt(1) + hexStr.charAt(1) + hexStr.charAt(2) + hexStr.charAt(2) + hexStr.charAt(3) + hexStr.charAt(3);
    }

    return hexStr;
  };

  Color.prototype.toString = function () {
    return this.hex;
  };

  return Color;
}();

exports.Color = Color;

function isRgbOrRgba(value) {
  var toLower = value.toLowerCase();
  return (toLower.indexOf("rgb(") === 0 || toLower.indexOf("rgba(") === 0) && toLower.indexOf(")") === toLower.length - 1;
}

function argbFromRgbOrRgba(value) {
  var toLower = value.toLowerCase();
  var parts = toLower.replace("rgba(", "").replace("rgb(", "").replace(")", "").trim().split(",");
  var r = 255;
  var g = 255;
  var b = 255;
  var a = 255;

  if (parts[0]) {
    r = parseInt(parts[0].trim());
  }

  if (parts[1]) {
    g = parseInt(parts[1].trim());
  }

  if (parts[2]) {
    b = parseInt(parts[2].trim());
  }

  if (parts[3]) {
    a = Math.round(parseFloat(parts[3].trim()) * 255);
  }

  return (a & 0xFF) * 0x01000000 + (r & 0xFF) * 0x00010000 + (g & 0xFF) * 0x00000100 + (b & 0xFF) * 0x00000001;
}

/***/ }),

/***/ "../node_modules/tns-core-modules/color/color.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var common = __webpack_require__("../node_modules/tns-core-modules/color/color-common.js");

var Color = function (_super) {
  __extends(Color, _super);

  function Color() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(Color.prototype, "android", {
    get: function get() {
      return this.argb >> 0;
    },
    enumerable: true,
    configurable: true
  });
  return Color;
}(common.Color);

exports.Color = Color;

/***/ }),

/***/ "../node_modules/tns-core-modules/color/known-colors.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Transparent = "#00000000";
exports.AliceBlue = "#F0F8FF";
exports.AntiqueWhite = "#FAEBD7";
exports.Aqua = "#00FFFF";
exports.Aquamarine = "#7FFFD4";
exports.Azure = "#F0FFFF";
exports.Beige = "#F5F5DC";
exports.Bisque = "#FFE4C4";
exports.Black = "#000000";
exports.BlanchedAlmond = "#FFEBCD";
exports.Blue = "#0000FF";
exports.BlueViolet = "#8A2BE2";
exports.Brown = "#A52A2A";
exports.BurlyWood = "#DEB887";
exports.CadetBlue = "#5F9EA0";
exports.Chartreuse = "#7FFF00";
exports.Chocolate = "#D2691E";
exports.Coral = "#FF7F50";
exports.CornflowerBlue = "#6495ED";
exports.Cornsilk = "#FFF8DC";
exports.Crimson = "#DC143C";
exports.Cyan = "#00FFFF";
exports.DarkBlue = "#00008B";
exports.DarkCyan = "#008B8B";
exports.DarkGoldenRod = "#B8860B";
exports.DarkGray = "#A9A9A9";
exports.DarkGreen = "#006400";
exports.DarkKhaki = "#BDB76B";
exports.DarkMagenta = "#8B008B";
exports.DarkOliveGreen = "#556B2F";
exports.DarkOrange = "#FF8C00";
exports.DarkOrchid = "#9932CC";
exports.DarkRed = "#8B0000";
exports.DarkSalmon = "#E9967A";
exports.DarkSeaGreen = "#8FBC8F";
exports.DarkSlateBlue = "#483D8B";
exports.DarkSlateGray = "#2F4F4F";
exports.DarkTurquoise = "#00CED1";
exports.DarkViolet = "#9400D3";
exports.DeepPink = "#FF1493";
exports.DeepSkyBlue = "#00BFFF";
exports.DimGray = "#696969";
exports.DodgerBlue = "#1E90FF";
exports.FireBrick = "#B22222";
exports.FloralWhite = "#FFFAF0";
exports.ForestGreen = "#228B22";
exports.Fuchsia = "#FF00FF";
exports.Gainsboro = "#DCDCDC";
exports.GhostWhite = "#F8F8FF";
exports.Gold = "#FFD700";
exports.GoldenRod = "#DAA520";
exports.Gray = "#808080";
exports.Green = "#008000";
exports.GreenYellow = "#ADFF2F";
exports.HoneyDew = "#F0FFF0";
exports.HotPink = "#FF69B4";
exports.IndianRed = "#CD5C5C";
exports.Indigo = "#4B0082";
exports.Ivory = "#FFFFF0";
exports.Khaki = "#F0E68C";
exports.Lavender = "#E6E6FA";
exports.LavenderBlush = "#FFF0F5";
exports.LawnGreen = "#7CFC00";
exports.LemonChiffon = "#FFFACD";
exports.LightBlue = "#ADD8E6";
exports.LightCoral = "#F08080";
exports.LightCyan = "#E0FFFF";
exports.LightGoldenRodYellow = "#FAFAD2";
exports.LightGray = "#D3D3D3";
exports.LightGreen = "#90EE90";
exports.LightPink = "#FFB6C1";
exports.LightSalmon = "#FFA07A";
exports.LightSeaGreen = "#20B2AA";
exports.LightSkyBlue = "#87CEFA";
exports.LightSlateGray = "#778899";
exports.LightSteelBlue = "#B0C4DE";
exports.LightYellow = "#FFFFE0";
exports.Lime = "#00FF00";
exports.LimeGreen = "#32CD32";
exports.Linen = "#FAF0E6";
exports.Magenta = "#FF00FF";
exports.Maroon = "#800000";
exports.MediumAquaMarine = "#66CDAA";
exports.MediumBlue = "#0000CD";
exports.MediumOrchid = "#BA55D3";
exports.MediumPurple = "#9370DB";
exports.MediumSeaGreen = "#3CB371";
exports.MediumSlateBlue = "#7B68EE";
exports.MediumSpringGreen = "#00FA9A";
exports.MediumTurquoise = "#48D1CC";
exports.MediumVioletRed = "#C71585";
exports.MidnightBlue = "#191970";
exports.MintCream = "#F5FFFA";
exports.MistyRose = "#FFE4E1";
exports.Moccasin = "#FFE4B5";
exports.NavajoWhite = "#FFDEAD";
exports.Navy = "#000080";
exports.OldLace = "#FDF5E6";
exports.Olive = "#808000";
exports.OliveDrab = "#6B8E23";
exports.Orange = "#FFA500";
exports.OrangeRed = "#FF4500";
exports.Orchid = "#DA70D6";
exports.PaleGoldenRod = "#EEE8AA";
exports.PaleGreen = "#98FB98";
exports.PaleTurquoise = "#AFEEEE";
exports.PaleVioletRed = "#DB7093";
exports.PapayaWhip = "#FFEFD5";
exports.PeachPuff = "#FFDAB9";
exports.Peru = "#CD853F";
exports.Pink = "#FFC0CB";
exports.Plum = "#DDA0DD";
exports.PowderBlue = "#B0E0E6";
exports.Purple = "#800080";
exports.Red = "#FF0000";
exports.RosyBrown = "#BC8F8F";
exports.RoyalBlue = "#4169E1";
exports.SaddleBrown = "#8B4513";
exports.Salmon = "#FA8072";
exports.SandyBrown = "#F4A460";
exports.SeaGreen = "#2E8B57";
exports.SeaShell = "#FFF5EE";
exports.Sienna = "#A0522D";
exports.Silver = "#C0C0C0";
exports.SkyBlue = "#87CEEB";
exports.SlateBlue = "#6A5ACD";
exports.SlateGray = "#708090";
exports.Snow = "#FFFAFA";
exports.SpringGreen = "#00FF7F";
exports.SteelBlue = "#4682B4";
exports.Tan = "#D2B48C";
exports.Teal = "#008080";
exports.Thistle = "#D8BFD8";
exports.Tomato = "#FF6347";
exports.Turquoise = "#40E0D0";
exports.Violet = "#EE82EE";
exports.Wheat = "#F5DEB3";
exports.White = "#FFFFFF";
exports.WhiteSmoke = "#F5F5F5";
exports.Yellow = "#FFFF00";
exports.YellowGreen = "#9ACD32";
var _allColors = {};

(function () {
  var name;
  var underscore = "_";

  for (var p in exports) {
    name = p;

    if (name.charAt(0) !== underscore) {
      _allColors[name.toLowerCase()] = exports[p];
    }
  }
})();

function isKnownName(name) {
  if (!name) {
    return undefined;
  }

  return name.toLowerCase() in _allColors;
}

exports.isKnownName = isKnownName;

function getKnownColor(name) {
  if (!name) {
    return undefined;
  }

  return _allColors[name.toLowerCase()];
}

exports.getKnownColor = getKnownColor;

/***/ }),

/***/ "../node_modules/tns-core-modules/console/console.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Console = function () {
  function Console() {}

  Console.prototype.time = function (reportName) {};

  Console.prototype.timeEnd = function (reportName) {};

  Console.prototype.assert = function (test, message) {};

  Console.prototype.info = function (message) {};

  Console.prototype.warn = function (message) {};

  Console.prototype.error = function (message) {};

  Console.prototype.log = function (message) {};

  Console.prototype.trace = function () {};

  Console.prototype.dir = function (obj) {};

  return Console;
}();

exports.Console = Console;

/***/ }),

/***/ "../node_modules/tns-core-modules/css-value/index.js":
/***/ (function(module, exports) {

exports.parse = parse;

function parse(str) {
  return new Parser(str).parse();
}

function Parser(str) {
  this.str = str;
}

Parser.prototype.skip = function (m) {
  this.str = this.str.slice(m[0].length);
};

Parser.prototype.comma = function () {
  var m = /^, */.exec(this.str);
  if (!m) return;
  this.skip(m);
  return {
    type: 'comma',
    string: ','
  };
};

Parser.prototype.ident = function () {
  var m = /^([\w-]+) */.exec(this.str);
  if (!m) return;
  this.skip(m);
  return {
    type: 'ident',
    string: m[1]
  };
};

Parser.prototype.int = function () {
  var m = /^(([-\+]?\d+)(\S+)?) */.exec(this.str);
  if (!m) return;
  this.skip(m);
  var n = ~~m[2];
  var u = m[3];
  return {
    type: 'number',
    string: m[1],
    unit: u || '',
    value: n
  };
};

Parser.prototype.float = function () {
  var m = /^(((?:[-\+]?\d+)?\.\d+)(\S+)?) */.exec(this.str);
  if (!m) return;
  this.skip(m);
  var n = parseFloat(m[2]);
  var u = m[3];
  return {
    type: 'number',
    string: m[1],
    unit: u || '',
    value: n
  };
};

Parser.prototype.number = function () {
  return this.float() || this.int();
};

Parser.prototype.double = function () {
  var m = /^"([^"]*)" */.exec(this.str);
  if (!m) return m;
  this.skip(m);
  return {
    type: 'string',
    quote: '"',
    string: '"' + m[1] + '"',
    value: m[1]
  };
};

Parser.prototype.single = function () {
  var m = /^'([^']*)' */.exec(this.str);
  if (!m) return m;
  this.skip(m);
  return {
    type: 'string',
    quote: "'",
    string: "'" + m[1] + "'",
    value: m[1]
  };
};

Parser.prototype.string = function () {
  return this.single() || this.double();
};

Parser.prototype.value = function () {
  return this.number() || this.ident() || this.string() || this.comma();
};

Parser.prototype.parse = function () {
  var vals = [];

  while (this.str.length) {
    var obj = this.value();
    if (!obj) throw new Error('failed to parse near `' + this.str.slice(0, 10) + '...`');
    vals.push(obj);
  }

  return vals;
};

/***/ }),

/***/ "../node_modules/tns-core-modules/css/index.js":
/***/ (function(module, exports, __webpack_require__) {

exports.parse = __webpack_require__("../node_modules/tns-core-modules/css/lib/parse/index.js");

/***/ }),

/***/ "../node_modules/tns-core-modules/css/lib/parse/index.js":
/***/ (function(module, exports) {

// http://www.w3.org/TR/CSS21/grammar.html
// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027
var commentre = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;

module.exports = function (css, options) {
  options = options || {};
  /**
   * Positional.
   */

  var lineno = 1;
  var column = 1;
  /**
   * Update lineno and column based on `str`.
   */

  function updatePosition(str) {
    var lines = str.match(/\n/g);
    if (lines) lineno += lines.length;
    var i = str.lastIndexOf('\n');
    column = ~i ? str.length - i : column + str.length;
  }
  /**
   * Mark position and patch `node.position`.
   */


  function position() {
    var start = {
      line: lineno,
      column: column
    };
    return function (node) {
      node.position = new Position(start);
      whitespace();
      return node;
    };
  }
  /**
   * Store position information for a node
   */


  function Position(start) {
    this.start = start;
    this.end = {
      line: lineno,
      column: column
    };
    this.source = options.source;
  }
  /**
   * Non-enumerable source string
   */


  Position.prototype.content = css;
  /**
   * Error `msg`.
   */

  var errorsList = [];

  function error(msg) {
    var err = new Error(options.source + ':' + lineno + ':' + column + ': ' + msg);
    err.reason = msg;
    err.filename = options.source;
    err.line = lineno;
    err.column = column;
    err.source = css;

    if (options.silent) {
      errorsList.push(err);
    } else {
      throw err;
    }
  }
  /**
   * Parse stylesheet.
   */


  function stylesheet() {
    var rulesList = rules();
    return {
      type: 'stylesheet',
      stylesheet: {
        rules: rulesList,
        parsingErrors: errorsList
      }
    };
  }
  /**
   * Opening brace.
   */


  function open() {
    return match(/^{\s*/);
  }
  /**
   * Closing brace.
   */


  function close() {
    return match(/^}/);
  }
  /**
   * Parse ruleset.
   */


  function rules() {
    var node;
    var rules = [];
    whitespace();
    comments(rules);

    while (css.length && css.charAt(0) != '}' && (node = atrule() || rule())) {
      if (node !== false) {
        rules.push(node);
        comments(rules);
      }
    }

    return rules;
  }
  /**
   * Match `re` and return captures.
   */


  function match(re) {
    var m = re.exec(css);
    if (!m) return;
    var str = m[0];
    updatePosition(str);
    css = css.slice(str.length);
    return m;
  }
  /**
   * Parse whitespace.
   */


  function whitespace() {
    match(/^\s*/);
  }
  /**
   * Parse comments;
   */


  function comments(rules) {
    var c;
    rules = rules || [];

    while (c = comment()) {
      if (c !== false) {
        rules.push(c);
      }
    }

    return rules;
  }
  /**
   * Parse comment.
   */


  function comment() {
    var pos = position();
    if ('/' != css.charAt(0) || '*' != css.charAt(1)) return;
    var i = 2;

    while ("" != css.charAt(i) && ('*' != css.charAt(i) || '/' != css.charAt(i + 1))) ++i;

    i += 2;

    if ("" === css.charAt(i - 1)) {
      return error('End of comment missing');
    }

    var str = css.slice(2, i - 2);
    column += 2;
    updatePosition(str);
    css = css.slice(i);
    column += 2;
    return pos({
      type: 'comment',
      comment: str
    });
  }
  /**
   * Parse selector.
   */


  function selector() {
    var m = match(/^([^{]+)/);
    if (!m) return;
    /* @fix Remove all comments from selectors
     * http://ostermiller.org/findcomment.html */

    return trim(m[0]).replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g, '').replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, function (m) {
      return m.replace(/,/g, '\u200C');
    }).split(/\s*(?![^(]*\)),\s*/).map(function (s) {
      return s.replace(/\u200C/g, ',');
    });
  }
  /**
   * Parse declaration.
   */


  function declaration() {
    var pos = position(); // prop

    var prop = match(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
    if (!prop) return;
    prop = trim(prop[0]); // :

    if (!match(/^:\s*/)) return error("property missing ':'"); // val

    var val = match(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/);
    var ret = pos({
      type: 'declaration',
      property: prop.replace(commentre, ''),
      value: val ? trim(val[0]).replace(commentre, '') : ''
    }); // ;

    match(/^[;\s]*/);
    return ret;
  }
  /**
   * Parse declarations.
   */


  function declarations() {
    var decls = [];
    if (!open()) return error("missing '{'");
    comments(decls); // declarations

    var decl;

    while (decl = declaration()) {
      if (decl !== false) {
        decls.push(decl);
        comments(decls);
      }
    }

    if (!close()) return error("missing '}'");
    return decls;
  }
  /**
   * Parse keyframe.
   */


  function keyframe() {
    var m;
    var vals = [];
    var pos = position();

    while (m = match(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/)) {
      vals.push(m[1]);
      match(/^,\s*/);
    }

    if (!vals.length) return;
    return pos({
      type: 'keyframe',
      values: vals,
      declarations: declarations()
    });
  }
  /**
   * Parse keyframes.
   */


  function atkeyframes() {
    var pos = position();
    var m = match(/^@([-\w]+)?keyframes\s*/);
    if (!m) return;
    var vendor = m[1]; // identifier

    var m = match(/^([-\w]+)\s*/);
    if (!m) return error("@keyframes missing name");
    var name = m[1];
    if (!open()) return error("@keyframes missing '{'");
    var frame;
    var frames = comments();

    while (frame = keyframe()) {
      frames.push(frame);
      frames = frames.concat(comments());
    }

    if (!close()) return error("@keyframes missing '}'");
    return pos({
      type: 'keyframes',
      name: name,
      vendor: vendor,
      keyframes: frames
    });
  }
  /**
   * Parse supports.
   */


  function atsupports() {
    var pos = position();
    var m = match(/^@supports *([^{]+)/);
    if (!m) return;
    var supports = trim(m[1]);
    if (!open()) return error("@supports missing '{'");
    var style = comments().concat(rules());
    if (!close()) return error("@supports missing '}'");
    return pos({
      type: 'supports',
      supports: supports,
      rules: style
    });
  }
  /**
   * Parse host.
   */


  function athost() {
    var pos = position();
    var m = match(/^@host\s*/);
    if (!m) return;
    if (!open()) return error("@host missing '{'");
    var style = comments().concat(rules());
    if (!close()) return error("@host missing '}'");
    return pos({
      type: 'host',
      rules: style
    });
  }
  /**
   * Parse media.
   */


  function atmedia() {
    var pos = position();
    var m = match(/^@media *([^{]+)/);
    if (!m) return;
    var media = trim(m[1]);
    if (!open()) return error("@media missing '{'");
    var style = comments().concat(rules());
    if (!close()) return error("@media missing '}'");
    return pos({
      type: 'media',
      media: media,
      rules: style
    });
  }
  /**
   * Parse custom-media.
   */


  function atcustommedia() {
    var pos = position();
    var m = match(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
    if (!m) return;
    return pos({
      type: 'custom-media',
      name: trim(m[1]),
      media: trim(m[2])
    });
  }
  /**
   * Parse paged media.
   */


  function atpage() {
    var pos = position();
    var m = match(/^@page */);
    if (!m) return;
    var sel = selector() || [];
    if (!open()) return error("@page missing '{'");
    var decls = comments(); // declarations

    var decl;

    while (decl = declaration()) {
      decls.push(decl);
      decls = decls.concat(comments());
    }

    if (!close()) return error("@page missing '}'");
    return pos({
      type: 'page',
      selectors: sel,
      declarations: decls
    });
  }
  /**
   * Parse document.
   */


  function atdocument() {
    var pos = position();
    var m = match(/^@([-\w]+)?document *([^{]+)/);
    if (!m) return;
    var vendor = trim(m[1]);
    var doc = trim(m[2]);
    if (!open()) return error("@document missing '{'");
    var style = comments().concat(rules());
    if (!close()) return error("@document missing '}'");
    return pos({
      type: 'document',
      document: doc,
      vendor: vendor,
      rules: style
    });
  }
  /**
   * Parse font-face.
   */


  function atfontface() {
    var pos = position();
    var m = match(/^@font-face\s*/);
    if (!m) return;
    if (!open()) return error("@font-face missing '{'");
    var decls = comments(); // declarations

    var decl;

    while (decl = declaration()) {
      decls.push(decl);
      decls = decls.concat(comments());
    }

    if (!close()) return error("@font-face missing '}'");
    return pos({
      type: 'font-face',
      declarations: decls
    });
  }
  /**
   * Parse import
   */


  var atimport = _compileAtrule('import');
  /**
   * Parse charset
   */


  var atcharset = _compileAtrule('charset');
  /**
   * Parse namespace
   */


  var atnamespace = _compileAtrule('namespace');
  /**
   * Parse non-block at-rules
   */


  function _compileAtrule(name) {
    var re = new RegExp('^@' + name + '\\s*([^;]+);');
    return function () {
      var pos = position();
      var m = match(re);
      if (!m) return;
      var ret = {
        type: name
      };
      ret[name] = m[1].trim();
      return pos(ret);
    };
  }
  /**
   * Parse at rule.
   */


  function atrule() {
    if (css[0] != '@') return;
    return atkeyframes() || atmedia() || atcustommedia() || atsupports() || atimport() || atcharset() || atnamespace() || atdocument() || atpage() || athost() || atfontface();
  }
  /**
   * Parse rule.
   */


  function rule() {
    var pos = position();
    var sel = selector();
    if (!sel) return error('selector missing');
    comments();
    return pos({
      type: 'rule',
      selectors: sel,
      declarations: declarations()
    });
  }

  return addParent(stylesheet());
};
/**
 * Trim `str`.
 */


function trim(str) {
  return str ? str.replace(/^\s+|\s+$/g, '') : '';
}
/**
 * Adds non-enumerable parent node reference to each node.
 */


function addParent(obj, parent) {
  var isNode = obj && typeof obj.type === 'string';
  var childParent = isNode ? obj : parent;

  for (var k in obj) {
    var value = obj[k];

    if (Array.isArray(value)) {
      value.forEach(function (v) {
        addParent(v, childParent);
      });
    } else if (value && typeof value === 'object') {
      addParent(value, childParent);
    }
  }

  if (isNode) {
    Object.defineProperty(obj, 'parent', {
      configurable: true,
      writable: true,
      enumerable: false,
      value: parent || null
    });
  }

  return obj;
}

/***/ }),

/***/ "../node_modules/tns-core-modules/css/parser.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var urlRegEx = /\s*url\((?:('|")([^\1]*)\1|([^\)]*))\)\s*/gy;

function parseURL(text, start) {
  if (start === void 0) {
    start = 0;
  }

  urlRegEx.lastIndex = start;
  var result = urlRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = urlRegEx.lastIndex;
  var value = result[2] || result[3];
  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseURL = parseURL;
var hexColorRegEx = /\s*#((?:[0-9A-F]{8})|(?:[0-9A-F]{6})|(?:[0-9A-F]{3}))\s*/giy;

function parseHexColor(text, start) {
  if (start === void 0) {
    start = 0;
  }

  hexColorRegEx.lastIndex = start;
  var result = hexColorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = hexColorRegEx.lastIndex;
  var hex = result[1];
  var argb;

  if (hex.length === 8) {
    argb = parseInt("0x" + hex);
  } else if (hex.length === 6) {
    argb = parseInt("0xFF" + hex);
  } else if (hex.length === 3) {
    argb = parseInt("0xFF" + hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2]);
  }

  return {
    start: start,
    end: end,
    value: argb
  };
}

exports.parseHexColor = parseHexColor;

function rgbaToArgbNumber(r, g, b, a) {
  if (a === void 0) {
    a = 1;
  }

  if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255 && a >= 0 && a <= 1) {
    return Math.round(a * 0xFF) * 0x01000000 + r * 0x010000 + g * 0x000100 + b * 0x000001;
  } else {
    return null;
  }
}

var rgbColorRegEx = /\s*(rgb\(\s*(\d*)\s*,\s*(\d*)\s*,\s*(\d*)\s*\))/gy;

function parseRGBColor(text, start) {
  if (start === void 0) {
    start = 0;
  }

  rgbColorRegEx.lastIndex = start;
  var result = rgbColorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = rgbColorRegEx.lastIndex;
  var value = result[1] && rgbaToArgbNumber(parseInt(result[2]), parseInt(result[3]), parseInt(result[4]));
  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseRGBColor = parseRGBColor;
var rgbaColorRegEx = /\s*(rgba\(\s*(\d*)\s*,\s*(\d*)\s*,\s*(\d*)\s*,\s*([01]?\.?\d*)\s*\))/gy;

function parseRGBAColor(text, start) {
  if (start === void 0) {
    start = 0;
  }

  rgbaColorRegEx.lastIndex = start;
  var result = rgbaColorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = rgbaColorRegEx.lastIndex;
  var value = rgbaToArgbNumber(parseInt(result[2]), parseInt(result[3]), parseInt(result[4]), parseFloat(result[5]));
  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseRGBAColor = parseRGBAColor;
var colors;

(function (colors) {
  colors[colors["transparent"] = 0] = "transparent";
  colors[colors["aliceblue"] = 4293982463] = "aliceblue";
  colors[colors["antiquewhite"] = 4294634455] = "antiquewhite";
  colors[colors["aqua"] = 4278255615] = "aqua";
  colors[colors["aquamarine"] = 4286578644] = "aquamarine";
  colors[colors["azure"] = 4293984255] = "azure";
  colors[colors["beige"] = 4294309340] = "beige";
  colors[colors["bisque"] = 4294960324] = "bisque";
  colors[colors["black"] = 4278190080] = "black";
  colors[colors["blanchedalmond"] = 4294962125] = "blanchedalmond";
  colors[colors["blue"] = 4278190335] = "blue";
  colors[colors["blueviolet"] = 4287245282] = "blueviolet";
  colors[colors["brown"] = 4289014314] = "brown";
  colors[colors["burlywood"] = 4292786311] = "burlywood";
  colors[colors["cadetblue"] = 4284456608] = "cadetblue";
  colors[colors["chartreuse"] = 4286578432] = "chartreuse";
  colors[colors["chocolate"] = 4291979550] = "chocolate";
  colors[colors["coral"] = 4294934352] = "coral";
  colors[colors["cornflowerblue"] = 4284782061] = "cornflowerblue";
  colors[colors["cornsilk"] = 4294965468] = "cornsilk";
  colors[colors["crimson"] = 4292613180] = "crimson";
  colors[colors["cyan"] = 4278255615] = "cyan";
  colors[colors["darkblue"] = 4278190219] = "darkblue";
  colors[colors["darkcyan"] = 4278225803] = "darkcyan";
  colors[colors["darkgoldenrod"] = 4290283019] = "darkgoldenrod";
  colors[colors["darkgray"] = 4289309097] = "darkgray";
  colors[colors["darkgreen"] = 4278215680] = "darkgreen";
  colors[colors["darkgrey"] = 4289309097] = "darkgrey";
  colors[colors["darkkhaki"] = 4290623339] = "darkkhaki";
  colors[colors["darkmagenta"] = 4287299723] = "darkmagenta";
  colors[colors["darkolivegreen"] = 4283788079] = "darkolivegreen";
  colors[colors["darkorange"] = 4294937600] = "darkorange";
  colors[colors["darkorchid"] = 4288230092] = "darkorchid";
  colors[colors["darkred"] = 4287299584] = "darkred";
  colors[colors["darksalmon"] = 4293498490] = "darksalmon";
  colors[colors["darkseagreen"] = 4287609999] = "darkseagreen";
  colors[colors["darkslateblue"] = 4282924427] = "darkslateblue";
  colors[colors["darkslategray"] = 4281290575] = "darkslategray";
  colors[colors["darkslategrey"] = 4281290575] = "darkslategrey";
  colors[colors["darkturquoise"] = 4278243025] = "darkturquoise";
  colors[colors["darkviolet"] = 4287889619] = "darkviolet";
  colors[colors["deeppink"] = 4294907027] = "deeppink";
  colors[colors["deepskyblue"] = 4278239231] = "deepskyblue";
  colors[colors["dimgray"] = 4285098345] = "dimgray";
  colors[colors["dimgrey"] = 4285098345] = "dimgrey";
  colors[colors["dodgerblue"] = 4280193279] = "dodgerblue";
  colors[colors["firebrick"] = 4289864226] = "firebrick";
  colors[colors["floralwhite"] = 4294966000] = "floralwhite";
  colors[colors["forestgreen"] = 4280453922] = "forestgreen";
  colors[colors["fuchsia"] = 4294902015] = "fuchsia";
  colors[colors["gainsboro"] = 4292664540] = "gainsboro";
  colors[colors["ghostwhite"] = 4294506751] = "ghostwhite";
  colors[colors["gold"] = 4294956800] = "gold";
  colors[colors["goldenrod"] = 4292519200] = "goldenrod";
  colors[colors["gray"] = 4286611584] = "gray";
  colors[colors["green"] = 4278222848] = "green";
  colors[colors["greenyellow"] = 4289593135] = "greenyellow";
  colors[colors["grey"] = 4286611584] = "grey";
  colors[colors["honeydew"] = 4293984240] = "honeydew";
  colors[colors["hotpink"] = 4294928820] = "hotpink";
  colors[colors["indianred"] = 4291648604] = "indianred";
  colors[colors["indigo"] = 4283105410] = "indigo";
  colors[colors["ivory"] = 4294967280] = "ivory";
  colors[colors["khaki"] = 4293977740] = "khaki";
  colors[colors["lavender"] = 4293322490] = "lavender";
  colors[colors["lavenderblush"] = 4294963445] = "lavenderblush";
  colors[colors["lawngreen"] = 4286381056] = "lawngreen";
  colors[colors["lemonchiffon"] = 4294965965] = "lemonchiffon";
  colors[colors["lightblue"] = 4289583334] = "lightblue";
  colors[colors["lightcoral"] = 4293951616] = "lightcoral";
  colors[colors["lightcyan"] = 4292935679] = "lightcyan";
  colors[colors["lightgoldenrodyellow"] = 4294638290] = "lightgoldenrodyellow";
  colors[colors["lightgray"] = 4292072403] = "lightgray";
  colors[colors["lightgreen"] = 4287688336] = "lightgreen";
  colors[colors["lightgrey"] = 4292072403] = "lightgrey";
  colors[colors["lightpink"] = 4294948545] = "lightpink";
  colors[colors["lightsalmon"] = 4294942842] = "lightsalmon";
  colors[colors["lightseagreen"] = 4280332970] = "lightseagreen";
  colors[colors["lightskyblue"] = 4287090426] = "lightskyblue";
  colors[colors["lightslategray"] = 4286023833] = "lightslategray";
  colors[colors["lightslategrey"] = 4286023833] = "lightslategrey";
  colors[colors["lightsteelblue"] = 4289774814] = "lightsteelblue";
  colors[colors["lightyellow"] = 4294967264] = "lightyellow";
  colors[colors["lime"] = 4278255360] = "lime";
  colors[colors["limegreen"] = 4281519410] = "limegreen";
  colors[colors["linen"] = 4294635750] = "linen";
  colors[colors["magenta"] = 4294902015] = "magenta";
  colors[colors["maroon"] = 4286578688] = "maroon";
  colors[colors["mediumaquamarine"] = 4284927402] = "mediumaquamarine";
  colors[colors["mediumblue"] = 4278190285] = "mediumblue";
  colors[colors["mediumorchid"] = 4290401747] = "mediumorchid";
  colors[colors["mediumpurple"] = 4287852763] = "mediumpurple";
  colors[colors["mediumseagreen"] = 4282168177] = "mediumseagreen";
  colors[colors["mediumslateblue"] = 4286277870] = "mediumslateblue";
  colors[colors["mediumspringgreen"] = 4278254234] = "mediumspringgreen";
  colors[colors["mediumturquoise"] = 4282962380] = "mediumturquoise";
  colors[colors["mediumvioletred"] = 4291237253] = "mediumvioletred";
  colors[colors["midnightblue"] = 4279834992] = "midnightblue";
  colors[colors["mintcream"] = 4294311930] = "mintcream";
  colors[colors["mistyrose"] = 4294960353] = "mistyrose";
  colors[colors["moccasin"] = 4294960309] = "moccasin";
  colors[colors["navajowhite"] = 4294958765] = "navajowhite";
  colors[colors["navy"] = 4278190208] = "navy";
  colors[colors["oldlace"] = 4294833638] = "oldlace";
  colors[colors["olive"] = 4286611456] = "olive";
  colors[colors["olivedrab"] = 4285238819] = "olivedrab";
  colors[colors["orange"] = 4294944000] = "orange";
  colors[colors["orangered"] = 4294919424] = "orangered";
  colors[colors["orchid"] = 4292505814] = "orchid";
  colors[colors["palegoldenrod"] = 4293847210] = "palegoldenrod";
  colors[colors["palegreen"] = 4288215960] = "palegreen";
  colors[colors["paleturquoise"] = 4289720046] = "paleturquoise";
  colors[colors["palevioletred"] = 4292571283] = "palevioletred";
  colors[colors["papayawhip"] = 4294963157] = "papayawhip";
  colors[colors["peachpuff"] = 4294957753] = "peachpuff";
  colors[colors["peru"] = 4291659071] = "peru";
  colors[colors["pink"] = 4294951115] = "pink";
  colors[colors["plum"] = 4292714717] = "plum";
  colors[colors["powderblue"] = 4289781990] = "powderblue";
  colors[colors["purple"] = 4286578816] = "purple";
  colors[colors["red"] = 4294901760] = "red";
  colors[colors["rosybrown"] = 4290547599] = "rosybrown";
  colors[colors["royalblue"] = 4282477025] = "royalblue";
  colors[colors["saddlebrown"] = 4287317267] = "saddlebrown";
  colors[colors["salmon"] = 4294606962] = "salmon";
  colors[colors["sandybrown"] = 4294222944] = "sandybrown";
  colors[colors["seagreen"] = 4281240407] = "seagreen";
  colors[colors["seashell"] = 4294964718] = "seashell";
  colors[colors["sienna"] = 4288696877] = "sienna";
  colors[colors["silver"] = 4290822336] = "silver";
  colors[colors["skyblue"] = 4287090411] = "skyblue";
  colors[colors["slateblue"] = 4285160141] = "slateblue";
  colors[colors["slategray"] = 4285563024] = "slategray";
  colors[colors["slategrey"] = 4285563024] = "slategrey";
  colors[colors["snow"] = 4294966010] = "snow";
  colors[colors["springgreen"] = 4278255487] = "springgreen";
  colors[colors["steelblue"] = 4282811060] = "steelblue";
  colors[colors["tan"] = 4291998860] = "tan";
  colors[colors["teal"] = 4278222976] = "teal";
  colors[colors["thistle"] = 4292394968] = "thistle";
  colors[colors["tomato"] = 4294927175] = "tomato";
  colors[colors["turquoise"] = 4282441936] = "turquoise";
  colors[colors["violet"] = 4293821166] = "violet";
  colors[colors["wheat"] = 4294303411] = "wheat";
  colors[colors["white"] = 4294967295] = "white";
  colors[colors["whitesmoke"] = 4294309365] = "whitesmoke";
  colors[colors["yellow"] = 4294967040] = "yellow";
  colors[colors["yellowgreen"] = 4288335154] = "yellowgreen";
})(colors = exports.colors || (exports.colors = {}));

;

function parseColorKeyword(value, start, keyword) {
  if (keyword === void 0) {
    keyword = parseKeyword(value, start);
  }

  if (keyword && keyword.value in colors) {
    var end = keyword.end;
    var value_1 = colors[keyword.value];
    return {
      start: start,
      end: end,
      value: value_1
    };
  }

  return null;
}

exports.parseColorKeyword = parseColorKeyword;

function parseColor(value, start, keyword) {
  if (start === void 0) {
    start = 0;
  }

  if (keyword === void 0) {
    keyword = parseKeyword(value, start);
  }

  return parseHexColor(value, start) || parseColorKeyword(value, start, keyword) || parseRGBColor(value, start) || parseRGBAColor(value, start);
}

exports.parseColor = parseColor;
var keywordRegEx = /\s*([a-z][\w\-]*)\s*/giy;

function parseKeyword(text, start) {
  if (start === void 0) {
    start = 0;
  }

  keywordRegEx.lastIndex = start;
  var result = keywordRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = keywordRegEx.lastIndex;
  var value = result[1];
  return {
    start: start,
    end: end,
    value: value
  };
}

var backgroundRepeatKeywords = new Set(["repeat", "repeat-x", "repeat-y", "no-repeat"]);

function parseRepeat(value, start, keyword) {
  if (start === void 0) {
    start = 0;
  }

  if (keyword === void 0) {
    keyword = parseKeyword(value, start);
  }

  if (keyword && backgroundRepeatKeywords.has(keyword.value)) {
    var end = keyword.end;
    var value_2 = keyword.value;
    return {
      start: start,
      end: end,
      value: value_2
    };
  }

  return null;
}

exports.parseRepeat = parseRepeat;
var unitRegEx = /\s*([\+\-]?(?:\d+\.\d+|\d+|\.\d+)(?:[eE][\+\-]?\d+)?)([a-zA-Z]+|%)?\s*/gy;

function parseUnit(text, start) {
  if (start === void 0) {
    start = 0;
  }

  unitRegEx.lastIndex = start;
  var result = unitRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = unitRegEx.lastIndex;
  var value = parseFloat(result[1]);
  var unit = result[2] || "dip";
  return {
    start: start,
    end: end,
    value: {
      value: value,
      unit: unit
    }
  };
}

exports.parseUnit = parseUnit;

function parsePercentageOrLength(text, start) {
  if (start === void 0) {
    start = 0;
  }

  var unitResult = parseUnit(text, start);

  if (unitResult) {
    var start_1 = unitResult.start,
        end = unitResult.end;
    var value = unitResult.value;

    if (value.unit === "%") {
      value.value /= 100;
    } else if (!value.unit) {
      value.unit = "dip";
    } else if (value.unit === "px" || value.unit === "dip") {} else {
      return null;
    }

    return {
      start: start_1,
      end: end,
      value: value
    };
  }

  return null;
}

exports.parsePercentageOrLength = parsePercentageOrLength;
var angleUnitsToRadMap = {
  "deg": function deg(start, end, _deg) {
    return {
      start: start,
      end: end,
      value: _deg / 180 * Math.PI
    };
  },
  "rad": function rad(start, end, _rad) {
    return {
      start: start,
      end: end,
      value: _rad
    };
  },
  "grad": function grad(start, end, _grad) {
    return {
      start: start,
      end: end,
      value: _grad / 200 * Math.PI
    };
  },
  "turn": function turn(start, end, _turn) {
    return {
      start: start,
      end: end,
      value: _turn * Math.PI * 2
    };
  }
};

function parseAngle(value, start) {
  if (start === void 0) {
    start = 0;
  }

  var angleResult = parseUnit(value, start);

  if (angleResult) {
    var start_2 = angleResult.start,
        end = angleResult.end,
        value_3 = angleResult.value;
    return (angleUnitsToRadMap[value_3.unit] || function (_, __, ___) {
      return null;
    })(start_2, end, value_3.value);
  }

  return null;
}

exports.parseAngle = parseAngle;
var backgroundSizeKeywords = new Set(["auto", "contain", "cover"]);

function parseBackgroundSize(value, start, keyword) {
  if (start === void 0) {
    start = 0;
  }

  if (keyword === void 0) {
    keyword = parseKeyword(value, start);
  }

  var end = start;

  if (keyword && backgroundSizeKeywords.has(keyword.value)) {
    end = keyword.end;
    var value_4 = keyword.value;
    return {
      start: start,
      end: end,
      value: value_4
    };
  }

  var firstLength = parsePercentageOrLength(value, end);

  if (firstLength) {
    end = firstLength.end;
    var secondLength = parsePercentageOrLength(value, firstLength.end);

    if (secondLength) {
      end = secondLength.end;
      return {
        start: start,
        end: end,
        value: {
          x: firstLength.value,
          y: secondLength.value
        }
      };
    } else {
      return {
        start: start,
        end: end,
        value: {
          x: firstLength.value,
          y: "auto"
        }
      };
    }
  }

  return null;
}

exports.parseBackgroundSize = parseBackgroundSize;
var backgroundPositionKeywords = Object.freeze(new Set(["left", "right", "top", "bottom", "center"]));
var backgroundPositionKeywordsDirection = {
  "left": "x",
  "right": "x",
  "center": "center",
  "top": "y",
  "bottom": "y"
};

function parseBackgroundPosition(text, start, keyword) {
  if (start === void 0) {
    start = 0;
  }

  if (keyword === void 0) {
    keyword = parseKeyword(text, start);
  }

  function formatH(align, offset) {
    if (align.value === "center") {
      return "center";
    }

    if (offset && offset.value.value !== 0) {
      return {
        align: align.value,
        offset: offset.value
      };
    }

    return align.value;
  }

  function formatV(align, offset) {
    if (align.value === "center") {
      return "center";
    }

    if (offset && offset.value.value !== 0) {
      return {
        align: align.value,
        offset: offset.value
      };
    }

    return align.value;
  }

  var end = start;

  if (keyword && backgroundPositionKeywords.has(keyword.value)) {
    end = keyword.end;
    var firstDirection = backgroundPositionKeywordsDirection[keyword.value];
    var firstLength = firstDirection !== "center" && parsePercentageOrLength(text, end);

    if (firstLength) {
      end = firstLength.end;
    }

    var secondKeyword = parseKeyword(text, end);

    if (secondKeyword && backgroundPositionKeywords.has(secondKeyword.value)) {
      end = secondKeyword.end;
      var secondDirection = backgroundPositionKeywordsDirection[secondKeyword.end];

      if (firstDirection === secondDirection && firstDirection !== "center") {
        return null;
      }

      var secondLength = secondDirection !== "center" && parsePercentageOrLength(text, end);

      if (secondLength) {
        end = secondLength.end;
      }

      if (firstDirection === secondDirection && secondDirection === "center" || firstDirection === "x" || secondDirection === "y") {
        return {
          start: start,
          end: end,
          value: {
            x: formatH(keyword, firstLength),
            y: formatV(secondKeyword, secondLength)
          }
        };
      } else {
        return {
          start: start,
          end: end,
          value: {
            x: formatH(secondKeyword, secondLength),
            y: formatV(keyword, firstLength)
          }
        };
      }
    } else {
      if (firstDirection === "center") {
        return {
          start: start,
          end: end,
          value: {
            x: "center",
            y: "center"
          }
        };
      } else if (firstDirection === "x") {
        return {
          start: start,
          end: end,
          value: {
            x: formatH(keyword, firstLength),
            y: "center"
          }
        };
      } else {
        return {
          start: start,
          end: end,
          value: {
            x: "center",
            y: formatV(keyword, firstLength)
          }
        };
      }
    }
  } else {
    var firstLength = parsePercentageOrLength(text, end);

    if (firstLength) {
      end = firstLength.end;
      var secondLength = parsePercentageOrLength(text, end);

      if (secondLength) {
        end = secondLength.end;
        return {
          start: start,
          end: end,
          value: {
            x: {
              align: "left",
              offset: firstLength.value
            },
            y: {
              align: "top",
              offset: secondLength.value
            }
          }
        };
      } else {
        return {
          start: start,
          end: end,
          value: {
            x: {
              align: "left",
              offset: firstLength.value
            },
            y: "center"
          }
        };
      }
    } else {
      return null;
    }
  }
}

exports.parseBackgroundPosition = parseBackgroundPosition;
var directionRegEx = /\s*to\s*(left|right|top|bottom)\s*(left|right|top|bottom)?\s*/gy;
var sideDirections = {
  top: Math.PI * 0 / 2,
  right: Math.PI * 1 / 2,
  bottom: Math.PI * 2 / 2,
  left: Math.PI * 3 / 2
};
var cornerDirections = {
  top: {
    right: Math.PI * 1 / 4,
    left: Math.PI * 7 / 4
  },
  right: {
    top: Math.PI * 1 / 4,
    bottom: Math.PI * 3 / 4
  },
  bottom: {
    right: Math.PI * 3 / 4,
    left: Math.PI * 5 / 4
  },
  left: {
    top: Math.PI * 7 / 4,
    bottom: Math.PI * 5 / 4
  }
};

function parseDirection(text, start) {
  if (start === void 0) {
    start = 0;
  }

  directionRegEx.lastIndex = start;
  var result = directionRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = directionRegEx.lastIndex;
  var firstDirection = result[1];

  if (result[2]) {
    var secondDirection = result[2];
    var value = cornerDirections[firstDirection][secondDirection];
    return value === undefined ? null : {
      start: start,
      end: end,
      value: value
    };
  } else {
    return {
      start: start,
      end: end,
      value: sideDirections[firstDirection]
    };
  }
}

var openingBracketRegEx = /\s*\(\s*/gy;
var closingBracketRegEx = /\s*\)\s*/gy;
var closingBracketOrCommaRegEx = /\s*(\)|,)\s*/gy;

function parseArgumentsList(text, start, argument) {
  openingBracketRegEx.lastIndex = start;
  var openingBracket = openingBracketRegEx.exec(text);

  if (!openingBracket) {
    return null;
  }

  var end = openingBracketRegEx.lastIndex;
  var value = [];
  closingBracketRegEx.lastIndex = end;
  var closingBracket = closingBracketRegEx.exec(text);

  if (closingBracket) {
    return {
      start: start,
      end: end,
      value: value
    };
  }

  for (var index = 0; true; index++) {
    var arg = argument(text, end, index);

    if (!arg) {
      return null;
    }

    end = arg.end;
    value.push(arg);
    closingBracketOrCommaRegEx.lastIndex = end;
    var closingBracketOrComma = closingBracketOrCommaRegEx.exec(text);

    if (closingBracketOrComma) {
      end = closingBracketOrCommaRegEx.lastIndex;

      if (closingBracketOrComma[1] === ",") {
        continue;
      } else if (closingBracketOrComma[1] === ")") {
        return {
          start: start,
          end: end,
          value: value
        };
      }
    } else {
      return null;
    }
  }
}

function parseColorStop(text, start) {
  if (start === void 0) {
    start = 0;
  }

  var color = parseColor(text, start);

  if (!color) {
    return null;
  }

  var end = color.end;
  var offset = parsePercentageOrLength(text, end);

  if (offset) {
    end = offset.end;
    return {
      start: start,
      end: end,
      value: {
        argb: color.value,
        offset: offset.value
      }
    };
  }

  return {
    start: start,
    end: end,
    value: {
      argb: color.value
    }
  };
}

exports.parseColorStop = parseColorStop;
var linearGradientStartRegEx = /\s*linear-gradient\s*/gy;

function parseLinearGradient(text, start) {
  if (start === void 0) {
    start = 0;
  }

  linearGradientStartRegEx.lastIndex = start;
  var lgs = linearGradientStartRegEx.exec(text);

  if (!lgs) {
    return null;
  }

  var end = linearGradientStartRegEx.lastIndex;
  var angle = Math.PI;
  var colors = [];
  var parsedArgs = parseArgumentsList(text, end, function (text, start, index) {
    if (index === 0) {
      var angleArg = parseAngle(text, start) || parseDirection(text, start);

      if (angleArg) {
        angle = angleArg.value;
        return angleArg;
      }
    }

    var colorStop = parseColorStop(text, start);

    if (colorStop) {
      colors.push(colorStop.value);
      return colorStop;
    }

    return null;
  });

  if (!parsedArgs) {
    return null;
  }

  end = parsedArgs.end;
  return {
    start: start,
    end: end,
    value: {
      angle: angle,
      colors: colors
    }
  };
}

exports.parseLinearGradient = parseLinearGradient;
var slashRegEx = /\s*(\/)\s*/gy;

function parseSlash(text, start) {
  slashRegEx.lastIndex = start;
  var slash = slashRegEx.exec(text);

  if (!slash) {
    return null;
  }

  var end = slashRegEx.lastIndex;
  return {
    start: start,
    end: end,
    value: "/"
  };
}

function parseBackground(text, start) {
  if (start === void 0) {
    start = 0;
  }

  var value = {};
  var end = start;

  while (end < text.length) {
    var keyword = parseKeyword(text, end);
    var color = parseColor(text, end, keyword);

    if (color) {
      value.color = color.value;
      end = color.end;
      continue;
    }

    var repeat = parseRepeat(text, end, keyword);

    if (repeat) {
      value.repeat = repeat.value;
      end = repeat.end;
      continue;
    }

    var position = parseBackgroundPosition(text, end, keyword);

    if (position) {
      position.value.text = text.substring(position.start, position.end);
      value.position = position.value;
      end = position.end;
      var slash = parseSlash(text, end);

      if (slash) {
        end = slash.end;
        var size = parseBackgroundSize(text, end);

        if (!size) {
          return null;
        }

        value.size = size.value;
        end = size.end;
      }

      continue;
    }

    var url = parseURL(text, end);

    if (url) {
      value.image = url.value;
      end = url.end;
      continue;
    }

    var gradient = parseLinearGradient(text, end);

    if (gradient) {
      value.image = gradient.value;
      end = gradient.end;
      continue;
    }

    return null;
  }

  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseBackground = parseBackground;
var universalSelectorRegEx = /\*/gy;

function parseUniversalSelector(text, start) {
  if (start === void 0) {
    start = 0;
  }

  universalSelectorRegEx.lastIndex = start;
  var result = universalSelectorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = universalSelectorRegEx.lastIndex;
  return {
    start: start,
    end: end,
    value: {
      type: "*"
    }
  };
}

exports.parseUniversalSelector = parseUniversalSelector;
var simpleIdentifierSelectorRegEx = /(#|\.|:|\b)([_-\w][_-\w\d]*)/gy;

function parseSimpleIdentifierSelector(text, start) {
  if (start === void 0) {
    start = 0;
  }

  simpleIdentifierSelectorRegEx.lastIndex = start;
  var result = simpleIdentifierSelectorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = simpleIdentifierSelectorRegEx.lastIndex;
  var type = result[1];
  var identifier = result[2];
  var value = {
    type: type,
    identifier: identifier
  };
  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseSimpleIdentifierSelector = parseSimpleIdentifierSelector;
var attributeSelectorRegEx = /\[\s*([_-\w][_-\w\d]*)\s*(?:(=|\^=|\$=|\*=|\~=|\|=)\s*(?:([_-\w][_-\w\d]*)|"((?:[^\\"]|\\(?:"|n|r|f|\\|0-9a-f))*)"|'((?:[^\\']|\\(?:'|n|r|f|\\|0-9a-f))*)')\s*)?\]/gy;

function parseAttributeSelector(text, start) {
  attributeSelectorRegEx.lastIndex = start;
  var result = attributeSelectorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = attributeSelectorRegEx.lastIndex;
  var property = result[1];

  if (result[2]) {
    var test_1 = result[2];
    var value = result[3] || result[4] || result[5];
    return {
      start: start,
      end: end,
      value: {
        type: "[]",
        property: property,
        test: test_1,
        value: value
      }
    };
  }

  return {
    start: start,
    end: end,
    value: {
      type: "[]",
      property: property
    }
  };
}

exports.parseAttributeSelector = parseAttributeSelector;

function parseSimpleSelector(text, start) {
  if (start === void 0) {
    start = 0;
  }

  return parseUniversalSelector(text, start) || parseSimpleIdentifierSelector(text, start) || parseAttributeSelector(text, start);
}

exports.parseSimpleSelector = parseSimpleSelector;

function parseSimpleSelectorSequence(text, start) {
  var simpleSelector = parseSimpleSelector(text, start);

  if (!simpleSelector) {
    return null;
  }

  var end = simpleSelector.end;
  var value = [];

  while (simpleSelector) {
    value.push(simpleSelector.value);
    end = simpleSelector.end;
    simpleSelector = parseSimpleSelector(text, end);
  }

  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseSimpleSelectorSequence = parseSimpleSelectorSequence;
var combinatorRegEx = /\s*(\+|~|>)?\s*/gy;

function parseCombinator(text, start) {
  if (start === void 0) {
    start = 0;
  }

  combinatorRegEx.lastIndex = start;
  var result = combinatorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = combinatorRegEx.lastIndex;
  var value = result[1] || " ";
  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseCombinator = parseCombinator;
var whiteSpaceRegEx = /\s*/gy;

function parseSelector(text, start) {
  if (start === void 0) {
    start = 0;
  }

  var end = start;
  whiteSpaceRegEx.lastIndex = end;
  var leadingWhiteSpace = whiteSpaceRegEx.exec(text);

  if (leadingWhiteSpace) {
    end = whiteSpaceRegEx.lastIndex;
  }

  var value = [];
  var combinator;
  var expectSimpleSelector = true;
  var pair;

  do {
    var simpleSelectorSequence = parseSimpleSelectorSequence(text, end);

    if (!simpleSelectorSequence) {
      if (expectSimpleSelector) {
        return null;
      } else {
        break;
      }
    }

    end = simpleSelectorSequence.end;

    if (combinator) {
      pair[1] = combinator.value;
    }

    pair = [simpleSelectorSequence.value, undefined];
    value.push(pair);
    combinator = parseCombinator(text, end);

    if (combinator) {
      end = combinator.end;
    }

    expectSimpleSelector = combinator && combinator.value !== " ";
  } while (combinator);

  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseSelector = parseSelector;
var whitespaceRegEx = /[\s\t\n\r\f]*/gym;
var singleQuoteStringRegEx = /'((?:[^\n\r\f\']|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))*)(:?'|$)/gym;
var doubleQuoteStringRegEx = /"((?:[^\n\r\f\"]|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))*)(:?"|$)/gym;
var commentRegEx = /(\/\*(?:[^\*]|\*[^\/])*\*\/)/gym;
var numberRegEx = /[\+\-]?(?:\d+\.\d+|\d+|\.\d+)(?:[eE][\+\-]?\d+)?/gym;
var nameRegEx = /-?(?:(?:[a-zA-Z_]|[^\x00-\x7F]|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))(?:[a-zA-Z_0-9\-]*|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))*)/gym;

var CSS3Parser = function () {
  function CSS3Parser(text) {
    this.text = text;
    this.nextInputCodePointIndex = 0;
  }

  CSS3Parser.prototype.tokenize = function () {
    var tokens = [];
    var inputToken;

    do {
      inputToken = this.consumeAToken();
      tokens.push(inputToken);
    } while (inputToken);

    return tokens;
  };

  CSS3Parser.prototype.consumeAToken = function () {
    if (this.reconsumedInputToken) {
      var result = this.reconsumedInputToken;
      this.reconsumedInputToken = null;
      return result;
    }

    var char = this.text[this.nextInputCodePointIndex];

    switch (char) {
      case "\"":
        return this.consumeAStringToken();

      case "'":
        return this.consumeAStringToken();

      case "(":
      case ")":
      case ",":
      case ":":
      case ";":
      case "[":
      case "]":
      case "{":
      case "}":
        this.nextInputCodePointIndex++;
        return char;

      case "#":
        return this.consumeAHashToken() || this.consumeADelimToken();

      case " ":
      case "\t":
      case "\n":
      case "\r":
      case "\f":
        return this.consumeAWhitespace();

      case "@":
        return this.consumeAtKeyword() || this.consumeADelimToken();

      case "\\":
        return this.consumeAnIdentLikeToken() || this.consumeADelimToken();

      case "0":
      case "1":
      case "2":
      case "3":
      case "4":
      case "5":
      case "6":
      case "7":
      case "8":
      case "9":
        return this.consumeANumericToken();

      case "u":
      case "U":
        if (this.text[this.nextInputCodePointIndex + 1] === "+") {
          var thirdChar = this.text[this.nextInputCodePointIndex + 2];

          if (thirdChar >= "0" && thirdChar <= "9" || thirdChar === "?") {
            throw new Error("Unicode tokens not supported!");
          }
        }

        return this.consumeAnIdentLikeToken() || this.consumeADelimToken();

      case "$":
      case "*":
      case "^":
      case "|":
      case "~":
        return this.consumeAMatchToken() || this.consumeADelimToken();

      case "-":
        return this.consumeANumericToken() || this.consumeAnIdentLikeToken() || this.consumeCDC() || this.consumeADelimToken();

      case "+":
      case ".":
        return this.consumeANumericToken() || this.consumeADelimToken();

      case "/":
        return this.consumeAComment() || this.consumeADelimToken();

      case "<":
        return this.consumeCDO() || this.consumeADelimToken();

      case undefined:
        return undefined;

      default:
        return this.consumeAnIdentLikeToken() || this.consumeADelimToken();
    }
  };

  CSS3Parser.prototype.consumeADelimToken = function () {
    return {
      type: 2,
      text: this.text[this.nextInputCodePointIndex++]
    };
  };

  CSS3Parser.prototype.consumeAWhitespace = function () {
    whitespaceRegEx.lastIndex = this.nextInputCodePointIndex;
    whitespaceRegEx.exec(this.text);
    this.nextInputCodePointIndex = whitespaceRegEx.lastIndex;
    return " ";
  };

  CSS3Parser.prototype.consumeAHashToken = function () {
    this.nextInputCodePointIndex++;
    var hashName = this.consumeAName();

    if (hashName) {
      return {
        type: 12,
        text: "#" + hashName.text
      };
    }

    this.nextInputCodePointIndex--;
    return null;
  };

  CSS3Parser.prototype.consumeCDO = function () {
    if (this.text.substr(this.nextInputCodePointIndex, 4) === "<!--") {
      this.nextInputCodePointIndex += 4;
      return "<!--";
    }

    return null;
  };

  CSS3Parser.prototype.consumeCDC = function () {
    if (this.text.substr(this.nextInputCodePointIndex, 3) === "-->") {
      this.nextInputCodePointIndex += 3;
      return "-->";
    }

    return null;
  };

  CSS3Parser.prototype.consumeAMatchToken = function () {
    if (this.text[this.nextInputCodePointIndex + 1] === "=") {
      var token = this.text.substr(this.nextInputCodePointIndex, 2);
      this.nextInputCodePointIndex += 2;
      return token;
    }

    return null;
  };

  CSS3Parser.prototype.consumeANumericToken = function () {
    numberRegEx.lastIndex = this.nextInputCodePointIndex;
    var result = numberRegEx.exec(this.text);

    if (!result) {
      return null;
    }

    this.nextInputCodePointIndex = numberRegEx.lastIndex;

    if (this.text[this.nextInputCodePointIndex] === "%") {
      return {
        type: 4,
        text: result[0]
      };
    }

    var name = this.consumeAName();

    if (name) {
      return {
        type: 5,
        text: result[0] + name.text
      };
    }

    return {
      type: 3,
      text: result[0]
    };
  };

  CSS3Parser.prototype.consumeAnIdentLikeToken = function () {
    var name = this.consumeAName();

    if (!name) {
      return null;
    }

    if (this.text[this.nextInputCodePointIndex] === "(") {
      this.nextInputCodePointIndex++;

      if (name.text.toLowerCase() === "url") {
        return this.consumeAURLToken();
      }

      return {
        type: 8,
        name: name.text,
        text: name.text + "("
      };
    }

    return name;
  };

  CSS3Parser.prototype.consumeAStringToken = function () {
    var char = this.text[this.nextInputCodePointIndex];
    var result;

    if (char === "'") {
      singleQuoteStringRegEx.lastIndex = this.nextInputCodePointIndex;
      result = singleQuoteStringRegEx.exec(this.text);

      if (!result) {
        return null;
      }

      this.nextInputCodePointIndex = singleQuoteStringRegEx.lastIndex;
    } else if (char === "\"") {
      doubleQuoteStringRegEx.lastIndex = this.nextInputCodePointIndex;
      result = doubleQuoteStringRegEx.exec(this.text);

      if (!result) {
        return null;
      }

      this.nextInputCodePointIndex = doubleQuoteStringRegEx.lastIndex;
    }

    return {
      type: 1,
      text: result[0]
    };
  };

  CSS3Parser.prototype.consumeAURLToken = function () {
    var start = this.nextInputCodePointIndex - 3 - 1;
    var urlToken = {
      type: 7,
      text: undefined
    };
    this.consumeAWhitespace();

    if (this.nextInputCodePointIndex >= this.text.length) {
      return urlToken;
    }

    var nextInputCodePoint = this.text[this.nextInputCodePointIndex];

    if (nextInputCodePoint === "\"" || nextInputCodePoint === "'") {
      var stringToken = this.consumeAStringToken();
      urlToken.text = stringToken.text;
      this.consumeAWhitespace();

      if (this.text[this.nextInputCodePointIndex] === ")" || this.nextInputCodePointIndex >= this.text.length) {
        this.nextInputCodePointIndex++;
        var end = this.nextInputCodePointIndex;
        urlToken.text = this.text.substring(start, end);
        return urlToken;
      } else {
        return null;
      }
    }

    while (this.nextInputCodePointIndex < this.text.length) {
      var char = this.text[this.nextInputCodePointIndex++];

      switch (char) {
        case ")":
          return urlToken;

        case " ":
        case "\t":
        case "\n":
        case "\r":
        case "\f":
          this.consumeAWhitespace();

          if (this.text[this.nextInputCodePointIndex] === ")") {
            this.nextInputCodePointIndex++;
            return urlToken;
          } else {
            return null;
          }

        case "\"":
        case "\'":
          return null;

        case "\\":
          throw new Error("Escaping not yet supported!");

        default:
          urlToken.text += char;
      }
    }

    return urlToken;
  };

  CSS3Parser.prototype.consumeAName = function () {
    nameRegEx.lastIndex = this.nextInputCodePointIndex;
    var result = nameRegEx.exec(this.text);

    if (!result) {
      return null;
    }

    this.nextInputCodePointIndex = nameRegEx.lastIndex;
    return {
      type: 6,
      text: result[0]
    };
  };

  CSS3Parser.prototype.consumeAtKeyword = function () {
    this.nextInputCodePointIndex++;
    var name = this.consumeAName();

    if (name) {
      return {
        type: 11,
        text: name.text
      };
    }

    this.nextInputCodePointIndex--;
    return null;
  };

  CSS3Parser.prototype.consumeAComment = function () {
    if (this.text[this.nextInputCodePointIndex + 1] === "*") {
      commentRegEx.lastIndex = this.nextInputCodePointIndex;
      var result = commentRegEx.exec(this.text);

      if (!result) {
        return null;
      }

      this.nextInputCodePointIndex = commentRegEx.lastIndex;
      return this.consumeAToken();
    }

    return null;
  };

  CSS3Parser.prototype.reconsumeTheCurrentInputToken = function (currentInputToken) {
    this.reconsumedInputToken = currentInputToken;
  };

  CSS3Parser.prototype.parseAStylesheet = function () {
    this.topLevelFlag = true;
    var stylesheet = {
      rules: this.consumeAListOfRules()
    };
    return stylesheet;
  };

  CSS3Parser.prototype.consumeAListOfRules = function () {
    var rules = [];
    var inputToken;

    while (inputToken = this.consumeAToken()) {
      switch (inputToken) {
        case " ":
          continue;

        case "<!--":
        case "-->":
          if (this.topLevelFlag) {
            continue;
          }

          this.reconsumeTheCurrentInputToken(inputToken);
          var atRule = this.consumeAnAtRule();

          if (atRule) {
            rules.push(atRule);
          }

          continue;
      }

      if (inputToken.type === 11) {
        this.reconsumeTheCurrentInputToken(inputToken);
        var atRule = this.consumeAnAtRule();

        if (atRule) {
          rules.push(atRule);
        }

        continue;
      }

      this.reconsumeTheCurrentInputToken(inputToken);
      var qualifiedRule = this.consumeAQualifiedRule();

      if (qualifiedRule) {
        rules.push(qualifiedRule);
      }
    }

    return rules;
  };

  CSS3Parser.prototype.consumeAnAtRule = function () {
    var inputToken = this.consumeAToken();
    var atRule = {
      type: "at-rule",
      name: inputToken.text,
      prelude: [],
      block: undefined
    };

    while (inputToken = this.consumeAToken()) {
      if (inputToken === ";") {
        return atRule;
      } else if (inputToken === "{") {
        atRule.block = this.consumeASimpleBlock(inputToken);
        return atRule;
      } else if (inputToken.type === 9 && inputToken.associatedToken === "{") {
        atRule.block = inputToken;
        return atRule;
      }

      this.reconsumeTheCurrentInputToken(inputToken);
      var component = this.consumeAComponentValue();

      if (component) {
        atRule.prelude.push(component);
      }
    }

    return atRule;
  };

  CSS3Parser.prototype.consumeAQualifiedRule = function () {
    var qualifiedRule = {
      type: "qualified-rule",
      prelude: [],
      block: undefined
    };
    var inputToken;

    while (inputToken = this.consumeAToken()) {
      if (inputToken === "{") {
        var block = this.consumeASimpleBlock(inputToken);
        qualifiedRule.block = block;
        return qualifiedRule;
      } else if (inputToken.type === 9) {
        var simpleBlock = inputToken;

        if (simpleBlock.associatedToken === "{") {
          qualifiedRule.block = simpleBlock;
          return qualifiedRule;
        }
      }

      this.reconsumeTheCurrentInputToken(inputToken);
      var componentValue = this.consumeAComponentValue();

      if (componentValue) {
        qualifiedRule.prelude.push(componentValue);
      }
    }

    return null;
  };

  CSS3Parser.prototype.consumeAComponentValue = function () {
    var inputToken = this.consumeAToken();

    switch (inputToken) {
      case "{":
      case "[":
      case "(":
        this.nextInputCodePointIndex++;
        return this.consumeASimpleBlock(inputToken);
    }

    if (typeof inputToken === "object" && inputToken.type === 8) {
      return this.consumeAFunction(inputToken.name);
    }

    return inputToken;
  };

  CSS3Parser.prototype.consumeASimpleBlock = function (associatedToken) {
    var endianToken = {
      "[": "]",
      "{": "}",
      "(": ")"
    }[associatedToken];
    var start = this.nextInputCodePointIndex - 1;
    var block = {
      type: 9,
      text: undefined,
      associatedToken: associatedToken,
      values: []
    };
    var nextInputToken;

    while (nextInputToken = this.text[this.nextInputCodePointIndex]) {
      if (nextInputToken === endianToken) {
        this.nextInputCodePointIndex++;
        var end = this.nextInputCodePointIndex;
        block.text = this.text.substring(start, end);
        return block;
      }

      var value = this.consumeAComponentValue();

      if (value) {
        block.values.push(value);
      }
    }

    block.text = this.text.substring(start);
    return block;
  };

  CSS3Parser.prototype.consumeAFunction = function (name) {
    var start = this.nextInputCodePointIndex;
    var funcToken = {
      type: 14,
      name: name,
      text: undefined,
      components: []
    };

    do {
      if (this.nextInputCodePointIndex >= this.text.length) {
        funcToken.text = name + "(" + this.text.substring(start);
        return funcToken;
      }

      var nextInputToken = this.text[this.nextInputCodePointIndex];

      switch (nextInputToken) {
        case ")":
          this.nextInputCodePointIndex++;
          var end = this.nextInputCodePointIndex;
          funcToken.text = name + "(" + this.text.substring(start, end);
          return funcToken;

        default:
          var component = this.consumeAComponentValue();

          if (component) {
            funcToken.components.push(component);
          }

      }
    } while (true);
  };

  return CSS3Parser;
}();

exports.CSS3Parser = CSS3Parser;

var CSSNativeScript = function () {
  function CSSNativeScript() {}

  CSSNativeScript.prototype.parseStylesheet = function (stylesheet) {
    return {
      type: "stylesheet",
      stylesheet: {
        rules: this.parseRules(stylesheet.rules)
      }
    };
  };

  CSSNativeScript.prototype.parseRules = function (rules) {
    var _this = this;

    return rules.map(function (rule) {
      return _this.parseRule(rule);
    });
  };

  CSSNativeScript.prototype.parseRule = function (rule) {
    if (rule.type === "at-rule") {
      return this.parseAtRule(rule);
    } else if (rule.type === "qualified-rule") {
      return this.parseQualifiedRule(rule);
    }
  };

  CSSNativeScript.prototype.parseAtRule = function (rule) {
    if (rule.name === "import") {
      return {
        import: rule.prelude.map(function (m) {
          return typeof m === "string" ? m : m.text;
        }).join("").trim(),
        type: "import"
      };
    }

    return;
  };

  CSSNativeScript.prototype.parseQualifiedRule = function (rule) {
    return {
      type: "rule",
      selectors: this.preludeToSelectorsStringArray(rule.prelude),
      declarations: this.ruleBlockToDeclarations(rule.block.values)
    };
  };

  CSSNativeScript.prototype.ruleBlockToDeclarations = function (declarationsInputTokens) {
    var declarations = [];
    var property = "";
    var value = "";
    var reading = "property";

    for (var i = 0; i < declarationsInputTokens.length; i++) {
      var inputToken = declarationsInputTokens[i];

      if (reading === "property") {
        if (inputToken === ":") {
          reading = "value";
        } else if (typeof inputToken === "string") {
          property += inputToken;
        } else {
          property += inputToken.text;
        }
      } else {
        if (inputToken === ";") {
          property = property.trim();
          value = value.trim();
          declarations.push({
            type: "declaration",
            property: property,
            value: value
          });
          property = "";
          value = "";
          reading = "property";
        } else if (typeof inputToken === "string") {
          value += inputToken;
        } else {
          value += inputToken.text;
        }
      }
    }

    property = property.trim();
    value = value.trim();

    if (property || value) {
      declarations.push({
        type: "declaration",
        property: property,
        value: value
      });
    }

    return declarations;
  };

  CSSNativeScript.prototype.preludeToSelectorsStringArray = function (prelude) {
    var selectors = [];
    var selector = "";
    prelude.forEach(function (inputToken) {
      if (typeof inputToken === "string") {
        if (inputToken === ",") {
          if (selector) {
            selectors.push(selector.trim());
          }

          selector = "";
        } else {
          selector += inputToken;
        }
      } else if (typeof inputToken === "object") {
        selector += inputToken.text;
      }
    });

    if (selector) {
      selectors.push(selector.trim());
    }

    return selectors;
  };

  return CSSNativeScript;
}();

exports.CSSNativeScript = CSSNativeScript;

/***/ }),

/***/ "../node_modules/tns-core-modules/data/observable-array/observable-array.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var observable = __webpack_require__("../node_modules/tns-core-modules/data/observable/observable.js");

var types = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var ChangeType = function () {
  function ChangeType() {}

  ChangeType.Add = "add";
  ChangeType.Delete = "delete";
  ChangeType.Update = "update";
  ChangeType.Splice = "splice";
  return ChangeType;
}();

exports.ChangeType = ChangeType;
var CHANGE = "change";

var ObservableArray = function (_super) {
  __extends(ObservableArray, _super);

  function ObservableArray() {
    var _this = _super.call(this) || this;

    if (arguments.length === 1 && Array.isArray(arguments[0])) {
      _this._array = arguments[0].slice();
    } else {
      _this._array = Array.apply(null, arguments);
    }

    _this._addArgs = {
      eventName: CHANGE,
      object: _this,
      action: ChangeType.Add,
      index: null,
      removed: new Array(),
      addedCount: 1
    };
    _this._deleteArgs = {
      eventName: CHANGE,
      object: _this,
      action: ChangeType.Delete,
      index: null,
      removed: null,
      addedCount: 0
    };
    return _this;
  }

  ObservableArray.prototype.getItem = function (index) {
    return this._array[index];
  };

  ObservableArray.prototype.setItem = function (index, value) {
    var oldValue = this._array[index];
    this._array[index] = value;
    this.notify({
      eventName: CHANGE,
      object: this,
      action: ChangeType.Update,
      index: index,
      removed: [oldValue],
      addedCount: 1
    });
  };

  Object.defineProperty(ObservableArray.prototype, "length", {
    get: function get() {
      return this._array.length;
    },
    set: function set(value) {
      if (types.isNumber(value) && this._array && this._array.length !== value) {
        this.splice(value, this._array.length - value);
      }
    },
    enumerable: true,
    configurable: true
  });

  ObservableArray.prototype.toString = function () {
    return this._array.toString();
  };

  ObservableArray.prototype.toLocaleString = function () {
    return this._array.toLocaleString();
  };

  ObservableArray.prototype.concat = function () {
    this._addArgs.index = this._array.length;

    var result = this._array.concat.apply(this._array, arguments);

    return result;
  };

  ObservableArray.prototype.join = function (separator) {
    return this._array.join(separator);
  };

  ObservableArray.prototype.pop = function () {
    this._deleteArgs.index = this._array.length - 1;

    var result = this._array.pop();

    this._deleteArgs.removed = [result];
    this.notify(this._deleteArgs);

    this._notifyLengthChange();

    return result;
  };

  ObservableArray.prototype.push = function () {
    this._addArgs.index = this._array.length;

    if (arguments.length === 1 && Array.isArray(arguments[0])) {
      var source = arguments[0];

      for (var i = 0, l = source.length; i < l; i++) {
        this._array.push(source[i]);
      }
    } else {
      this._array.push.apply(this._array, arguments);
    }

    this._addArgs.addedCount = this._array.length - this._addArgs.index;
    this.notify(this._addArgs);

    this._notifyLengthChange();

    return this._array.length;
  };

  ObservableArray.prototype._notifyLengthChange = function () {
    var lengthChangedData = this._createPropertyChangeData("length", this._array.length);

    this.notify(lengthChangedData);
  };

  ObservableArray.prototype.reverse = function () {
    return this._array.reverse();
  };

  ObservableArray.prototype.shift = function () {
    var result = this._array.shift();

    this._deleteArgs.index = 0;
    this._deleteArgs.removed = [result];
    this.notify(this._deleteArgs);

    this._notifyLengthChange();

    return result;
  };

  ObservableArray.prototype.slice = function (start, end) {
    return this._array.slice(start, end);
  };

  ObservableArray.prototype.sort = function (compareFn) {
    return this._array.sort(compareFn);
  };

  ObservableArray.prototype.splice = function (start, deleteCount) {
    var length = this._array.length;

    var result = this._array.splice.apply(this._array, arguments);

    this.notify({
      eventName: CHANGE,
      object: this,
      action: ChangeType.Splice,
      index: start,
      removed: result,
      addedCount: this._array.length > length ? this._array.length - length : 0
    });

    if (this._array.length !== length) {
      this._notifyLengthChange();
    }

    return result;
  };

  ObservableArray.prototype.unshift = function () {
    var length = this._array.length;

    var result = this._array.unshift.apply(this._array, arguments);

    this._addArgs.index = 0;
    this._addArgs.addedCount = result - length;
    this.notify(this._addArgs);

    this._notifyLengthChange();

    return result;
  };

  ObservableArray.prototype.indexOf = function (searchElement, fromIndex) {
    var index = fromIndex ? fromIndex : 0;

    for (var i = index, l = this._array.length; i < l; i++) {
      if (this._array[i] === searchElement) {
        return i;
      }
    }

    return -1;
  };

  ObservableArray.prototype.lastIndexOf = function (searchElement, fromIndex) {
    var index = fromIndex ? fromIndex : this._array.length - 1;

    for (var i = index; i >= 0; i--) {
      if (this._array[i] === searchElement) {
        return i;
      }
    }

    return -1;
  };

  ObservableArray.prototype.every = function (callbackfn, thisArg) {
    return this._array.every(callbackfn, thisArg);
  };

  ObservableArray.prototype.some = function (callbackfn, thisArg) {
    return this._array.some(callbackfn, thisArg);
  };

  ObservableArray.prototype.forEach = function (callbackfn, thisArg) {
    this._array.forEach(callbackfn, thisArg);
  };

  ObservableArray.prototype.map = function (callbackfn, thisArg) {
    return this._array.map(callbackfn, thisArg);
  };

  ObservableArray.prototype.filter = function (callbackfn, thisArg) {
    return this._array.filter(callbackfn, thisArg);
  };

  ObservableArray.prototype.reduce = function (callbackfn, initialValue) {
    return initialValue !== undefined ? this._array.reduce(callbackfn, initialValue) : this._array.reduce(callbackfn);
  };

  ObservableArray.prototype.reduceRight = function (callbackfn, initialValue) {
    return initialValue !== undefined ? this._array.reduceRight(callbackfn, initialValue) : this._array.reduceRight(callbackfn);
  };

  ObservableArray.changeEvent = CHANGE;
  return ObservableArray;
}(observable.Observable);

exports.ObservableArray = ObservableArray;

/***/ }),

/***/ "../node_modules/tns-core-modules/data/observable/observable.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _wrappedIndex = 0;

var WrappedValue = function () {
  function WrappedValue(wrapped) {
    this.wrapped = wrapped;
  }

  WrappedValue.unwrap = function (value) {
    return value && value.wrapped ? value.wrapped : value;
  };

  WrappedValue.wrap = function (value) {
    var w = _wrappedValues[_wrappedIndex++ % 5];
    w.wrapped = value;
    return w;
  };

  return WrappedValue;
}();

exports.WrappedValue = WrappedValue;
var _wrappedValues = [new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null)];

var Observable = function () {
  function Observable() {
    this._observers = {};
  }

  Observable.prototype.get = function (name) {
    return this[name];
  };

  Observable.prototype.set = function (name, value) {
    var oldValue = this[name];

    if (this[name] === value) {
      return;
    }

    var newValue = WrappedValue.unwrap(value);
    this[name] = newValue;
    this.notifyPropertyChange(name, newValue, oldValue);
  };

  Observable.prototype.on = function (eventNames, callback, thisArg) {
    this.addEventListener(eventNames, callback, thisArg);
  };

  Observable.prototype.once = function (event, callback, thisArg) {
    var list = this._getEventList(event, true);

    list.push({
      callback: callback,
      thisArg: thisArg,
      once: true
    });
  };

  Observable.prototype.off = function (eventNames, callback, thisArg) {
    this.removeEventListener(eventNames, callback, thisArg);
  };

  Observable.prototype.addEventListener = function (eventNames, callback, thisArg) {
    if (typeof eventNames !== "string") {
      throw new TypeError("Events name(s) must be string.");
    }

    if (typeof callback !== "function") {
      throw new TypeError("callback must be function.");
    }

    var events = eventNames.split(",");

    for (var i = 0, l = events.length; i < l; i++) {
      var event_1 = events[i].trim();

      var list = this._getEventList(event_1, true);

      list.push({
        callback: callback,
        thisArg: thisArg
      });
    }
  };

  Observable.prototype.removeEventListener = function (eventNames, callback, thisArg) {
    if (typeof eventNames !== "string") {
      throw new TypeError("Events name(s) must be string.");
    }

    if (callback && typeof callback !== "function") {
      throw new TypeError("callback must be function.");
    }

    var events = eventNames.split(",");

    for (var i = 0, l = events.length; i < l; i++) {
      var event_2 = events[i].trim();

      if (callback) {
        var list = this._getEventList(event_2, false);

        if (list) {
          var index_1 = this._indexOfListener(list, callback, thisArg);

          if (index_1 >= 0) {
            list.splice(index_1, 1);
          }

          if (list.length === 0) {
            delete this._observers[event_2];
          }
        }
      } else {
        this._observers[event_2] = undefined;
        delete this._observers[event_2];
      }
    }
  };

  Observable.prototype.notify = function (data) {
    var observers = this._observers[data.eventName];

    if (!observers) {
      return;
    }

    for (var i = observers.length - 1; i >= 0; i--) {
      var entry = observers[i];

      if (entry.once) {
        observers.splice(i, 1);
      }

      if (entry.thisArg) {
        entry.callback.apply(entry.thisArg, [data]);
      } else {
        entry.callback(data);
      }
    }
  };

  Observable.prototype.notifyPropertyChange = function (name, value, oldValue) {
    this.notify(this._createPropertyChangeData(name, value, oldValue));
  };

  Observable.prototype.hasListeners = function (eventName) {
    return eventName in this._observers;
  };

  Observable.prototype._createPropertyChangeData = function (propertyName, value, oldValue) {
    return {
      eventName: Observable.propertyChangeEvent,
      object: this,
      propertyName: propertyName,
      value: value,
      oldValue: oldValue
    };
  };

  Observable.prototype._emit = function (eventNames) {
    var events = eventNames.split(",");

    for (var i = 0, l = events.length; i < l; i++) {
      var event_3 = events[i].trim();
      this.notify({
        eventName: event_3,
        object: this
      });
    }
  };

  Observable.prototype._getEventList = function (eventName, createIfNeeded) {
    if (!eventName) {
      throw new TypeError("EventName must be valid string.");
    }

    var list = this._observers[eventName];

    if (!list && createIfNeeded) {
      list = [];
      this._observers[eventName] = list;
    }

    return list;
  };

  Observable.prototype._indexOfListener = function (list, callback, thisArg) {
    for (var i = 0; i < list.length; i++) {
      var entry = list[i];

      if (thisArg) {
        if (entry.callback === callback && entry.thisArg === thisArg) {
          return i;
        }
      } else {
        if (entry.callback === callback) {
          return i;
        }
      }
    }

    return -1;
  };

  Observable.propertyChangeEvent = "propertyChange";
  return Observable;
}();

exports.Observable = Observable;

var ObservableFromObject = function (_super) {
  __extends(ObservableFromObject, _super);

  function ObservableFromObject() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._map = {};
    return _this;
  }

  ObservableFromObject.prototype.get = function (name) {
    return this._map[name];
  };

  ObservableFromObject.prototype.set = function (name, value) {
    var currentValue = this._map[name];

    if (currentValue === value) {
      return;
    }

    var newValue = WrappedValue.unwrap(value);
    this._map[name] = newValue;
    this.notifyPropertyChange(name, newValue, currentValue);
  };

  return ObservableFromObject;
}(Observable);

function defineNewProperty(target, propertyName) {
  Object.defineProperty(target, propertyName, {
    get: function get() {
      return target._map[propertyName];
    },
    set: function set(value) {
      target.set(propertyName, value);
    },
    enumerable: true,
    configurable: true
  });
}

function addPropertiesFromObject(observable, source, recursive) {
  if (recursive === void 0) {
    recursive = false;
  }

  Object.keys(source).forEach(function (prop) {
    var value = source[prop];

    if (recursive && !Array.isArray(value) && value && typeof value === "object" && !(value instanceof Observable)) {
      value = fromObjectRecursive(value);
    }

    defineNewProperty(observable, prop);
    observable.set(prop, value);
  });
}

function fromObject(source) {
  var observable = new ObservableFromObject();
  addPropertiesFromObject(observable, source, false);
  return observable;
}

exports.fromObject = fromObject;

function fromObjectRecursive(source) {
  var observable = new ObservableFromObject();
  addPropertiesFromObject(observable, source, true);
  return observable;
}

exports.fromObjectRecursive = fromObjectRecursive;

/***/ }),

/***/ "../node_modules/tns-core-modules/debugger/debugger.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var network;

function getNetwork() {
  return network;
}

exports.getNetwork = getNetwork;

function setNetwork(newNetwork) {
  network = newNetwork;
}

exports.setNetwork = setNetwork;
var dom;

function getDOM() {
  return dom;
}

exports.getDOM = getDOM;

function setDOM(newDOM) {
  dom = newDOM;
}

exports.setDOM = setDOM;
var css;

function getCSS() {
  return css;
}

exports.getCSS = getCSS;

function setCSS(newCSS) {
  css = newCSS;
}

exports.setCSS = setCSS;
var NetworkAgent;

(function (NetworkAgent) {
  function responseReceived(requestId, result, headers) {
    var requestIdStr = requestId.toString();
    var mimeType = headers["Content-Type"] || headers["content-type"] || "application/octet-stream";
    var contentLengthHeader = headers["Content-Length"] || headers["content-length"];
    var contentLength = parseInt(contentLengthHeader, 10);

    if (isNaN(contentLength)) {
      contentLength = 0;
    }

    var response = {
      url: result.url || "",
      status: result.statusCode,
      statusText: result.statusText || "",
      headers: headers,
      mimeType: mimeType,
      fromDiskCache: false,
      connectionReused: true,
      connectionId: 0,
      encodedDataLength: contentLength,
      securityState: "info"
    };
    var responseData = {
      requestId: requestIdStr,
      type: mimeTypeToType(response.mimeType),
      response: response,
      timestamp: getTimeStamp()
    };

    global.__inspector.responseReceived(responseData);

    global.__inspector.loadingFinished({
      requestId: requestIdStr,
      timestamp: getTimeStamp(),
      encodedDataLength: contentLength
    });

    var hasTextContent = responseData.type === "Document" || responseData.type === "Script";
    var data;

    if (!hasTextContent) {
      if (responseData.type === "Image") {
        var bitmap = result.responseAsImage;

        if (bitmap) {
          var outputStream = new java.io.ByteArrayOutputStream();
          bitmap.compress(android.graphics.Bitmap.CompressFormat.PNG, 100, outputStream);
          var base64Image = android.util.Base64.encodeToString(outputStream.toByteArray(), android.util.Base64.DEFAULT);
          data = base64Image;
        }
      }
    } else {
      data = result.responseAsString;
    }

    var successfulRequestData = {
      requestId: requestIdStr,
      data: data,
      hasTextContent: hasTextContent
    };

    global.__inspector.dataForRequestId(successfulRequestData);
  }

  NetworkAgent.responseReceived = responseReceived;

  function requestWillBeSent(requestId, options) {
    var request = {
      url: options.url,
      method: options.method,
      headers: options.headers || {},
      postData: options.content ? options.content.toString() : "",
      initialPriority: "Medium",
      referrerPolicy: "no-referrer-when-downgrade"
    };
    var requestData = {
      requestId: requestId.toString(),
      url: request.url,
      request: request,
      timestamp: getTimeStamp(),
      type: "Document",
      wallTime: 0
    };

    global.__inspector.requestWillBeSent(requestData);
  }

  NetworkAgent.requestWillBeSent = requestWillBeSent;

  function getTimeStamp() {
    var d = new Date();
    return Math.round(d.getTime() / 1000);
  }

  function mimeTypeToType(mimeType) {
    var type = "Document";

    if (mimeType) {
      if (mimeType.indexOf("image") === 0) {
        type = "Image";
      } else if (mimeType.indexOf("javascript") !== -1 || mimeType.indexOf("json") !== -1) {
        type = "Script";
      }
    }

    return type;
  }
})(NetworkAgent = exports.NetworkAgent || (exports.NetworkAgent = {}));
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/debugger/devtools-elements.common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var dom_node_1 = __webpack_require__("../node_modules/tns-core-modules/debugger/dom-node.js");

var frameTopmost = function frameTopmost() {
  return __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame.js").topmost();
};

var unsetValue;

function unsetViewValue(view, name) {
  if (!unsetValue) {
    unsetValue = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js").unsetValue;
  }

  view[name] = unsetValue;
}

function getViewById(nodeId) {
  var node = dom_node_1.getNodeById(nodeId);
  var view;

  if (node) {
    view = node.viewRef.get();
  }

  return view;
}

function getDocument() {
  var topMostFrame = frameTopmost();

  if (!topMostFrame) {
    return undefined;
  }

  try {
    topMostFrame.ensureDomNode();
  } catch (e) {
    console.log("ERROR in getDocument(): " + e);
  }

  return topMostFrame.domNode.toObject();
}

exports.getDocument = getDocument;

function getComputedStylesForNode(nodeId) {
  var view = getViewById(nodeId);

  if (view) {
    return view.domNode.getComputedProperties();
  }

  return [];
}

exports.getComputedStylesForNode = getComputedStylesForNode;

function removeNode(nodeId) {
  var view = getViewById(nodeId);

  if (view) {
    var parent_1 = view.parent;

    if (parent_1.removeChild) {
      parent_1.removeChild(view);
    } else if (parent_1.content === view) {
      parent_1.content = null;
    } else {
      console.log("Can't remove child from " + parent_1);
    }
  }
}

exports.removeNode = removeNode;

function setAttributeAsText(nodeId, text, name) {
  var view = getViewById(nodeId);

  if (view) {
    var hasOriginalAttribute = !!name.trim();

    if (text) {
      var textParts = text.split("=");

      if (textParts.length === 2) {
        var attrName = textParts[0];
        var attrValue = textParts[1].replace(/['"]+/g, "");

        if (name !== attrName && hasOriginalAttribute) {
          unsetViewValue(view, name);
          view[attrName] = attrValue;
        } else {
          view[hasOriginalAttribute ? name : attrName] = attrValue;
        }
      }
    } else {
      unsetViewValue(view, name);
    }

    view.domNode.loadAttributes();
  }
}

exports.setAttributeAsText = setAttributeAsText;

/***/ }),

/***/ "../node_modules/tns-core-modules/debugger/devtools-elements.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var devtools_elements_common_1 = __webpack_require__("../node_modules/tns-core-modules/debugger/devtools-elements.common.js");

var dom_node_1 = __webpack_require__("../node_modules/tns-core-modules/debugger/dom-node.js");

function attachDOMInspectorEventCallbacks(DOMDomainFrontend) {
  dom_node_1.registerInspectorEvents(DOMDomainFrontend);
  var originalChildNodeInserted = DOMDomainFrontend.childNodeInserted;

  DOMDomainFrontend.childNodeInserted = function (parentId, lastId, node) {
    originalChildNodeInserted(parentId, lastId, JSON.stringify(node.toObject()));
  };
}

exports.attachDOMInspectorEventCallbacks = attachDOMInspectorEventCallbacks;

function attachDOMInspectorCommandCallbacks(DOMDomainBackend) {
  DOMDomainBackend.getDocument = function () {
    return JSON.stringify(devtools_elements_common_1.getDocument());
  };

  DOMDomainBackend.getComputedStylesForNode = function (nodeId) {
    return JSON.stringify(devtools_elements_common_1.getComputedStylesForNode(nodeId));
  };

  DOMDomainBackend.removeNode = devtools_elements_common_1.removeNode;
  DOMDomainBackend.setAttributeAsText = devtools_elements_common_1.setAttributeAsText;
}

exports.attachDOMInspectorCommandCallbacks = attachDOMInspectorCommandCallbacks;

function attachCSSInspectorCommandCallbacks(CSSDomainFrontend) {}

exports.attachCSSInspectorCommandCallbacks = attachCSSInspectorCommandCallbacks;

/***/ }),

/***/ "../node_modules/tns-core-modules/debugger/dom-node.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var registeredDomNodes = {};
var ELEMENT_NODE_TYPE = 1;
var ROOT_NODE_TYPE = 9;
var propertyBlacklist = ["effectivePaddingLeft", "effectivePaddingBottom", "effectivePaddingRight", "effectivePaddingTop", "effectiveBorderTopWidth", "effectiveBorderRightWidth", "effectiveBorderBottomWidth", "effectiveBorderLeftWidth", "effectiveMinWidth", "effectiveMinHeight", "effectiveWidth", "effectiveHeight", "effectiveMarginLeft", "effectiveMarginTop", "effectiveMarginRight", "effectiveMarginBottom", "nodeName", "nodeType", "decodeWidth", "decodeHeight", "ng-reflect-items", "domNode", "touchListenerIsSet", "bindingContext", "nativeView"];

function lazy(action) {
  var _value;

  return function () {
    return _value || (_value = action());
  };
}

var percentLengthToStringLazy = lazy(function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js").PercentLength.convertToString;
});
var getSetPropertiesLazy = lazy(function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js").getSetProperties;
});
var getComputedCssValuesLazy = lazy(function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js").getComputedCssValues;
});

function registerInspectorEvents(inspector) {
  inspectorFrontendInstance = inspector;
}

exports.registerInspectorEvents = registerInspectorEvents;
var inspectorFrontendInstance;

function notifyInspector(callback) {
  if (inspectorFrontendInstance) {
    callback(inspectorFrontendInstance);
  }
}

function valueToString(value) {
  if (typeof value === "undefined" || value === null) {
    return "";
  } else if (typeof value === "object" && value.unit) {
    return percentLengthToStringLazy()(value);
  } else {
    return value + "";
  }
}

function propertyFilter(_a) {
  var name = _a[0],
      value = _a[1];

  if (name[0] === "_") {
    return false;
  }

  if (value !== null && typeof value === "object") {
    return false;
  }

  if (propertyBlacklist.indexOf(name) >= 0) {
    return false;
  }

  return true;
}

function registerNode(domNode) {
  registeredDomNodes[domNode.nodeId] = domNode;
}

function unregisterNode(domNode) {
  delete registeredDomNodes[domNode.nodeId];
}

function getNodeById(id) {
  return registeredDomNodes[id];
}

exports.getNodeById = getNodeById;

var DOMNode = function () {
  function DOMNode(view) {
    this.nodeValue = "";
    this.attributes = [];
    this.viewRef = new WeakRef(view);
    this.nodeType = view.typeName === "Frame" ? ROOT_NODE_TYPE : ELEMENT_NODE_TYPE;
    this.nodeId = view._domId;
    this.nodeName = view.typeName;
    this.localName = this.nodeName;
    this.loadAttributes();
    registerNode(this);
  }

  DOMNode.prototype.loadAttributes = function () {
    var _this = this;

    this.attributes = [];
    getSetPropertiesLazy()(this.viewRef.get()).filter(propertyFilter).forEach(function (pair) {
      return _this.attributes.push(pair[0], pair[1] + "");
    });
  };

  Object.defineProperty(DOMNode.prototype, "children", {
    get: function get() {
      var view = this.viewRef.get();

      if (!view) {
        return [];
      }

      var res = [];
      view.eachChild(function (child) {
        child.ensureDomNode();
        res.push(child.domNode);
        return true;
      });
      return res;
    },
    enumerable: true,
    configurable: true
  });

  DOMNode.prototype.onChildAdded = function (childView) {
    var _this = this;

    notifyInspector(function (ins) {
      var view = _this.viewRef.get();

      var previousChild;
      view.eachChild(function (child) {
        if (child === childView) {
          return false;
        }

        previousChild = child;
        return true;
      });
      var index = !!previousChild ? previousChild._domId : 0;
      childView.ensureDomNode();
      ins.childNodeInserted(_this.nodeId, index, childView.domNode);
    });
  };

  DOMNode.prototype.onChildRemoved = function (view) {
    var _this = this;

    notifyInspector(function (ins) {
      ins.childNodeRemoved(_this.nodeId, view._domId);
    });
  };

  DOMNode.prototype.attributeModified = function (name, value) {
    var _this = this;

    notifyInspector(function (ins) {
      if (propertyBlacklist.indexOf(name) < 0) {
        ins.attributeModified(_this.nodeId, name, valueToString(value));
      }
    });
  };

  DOMNode.prototype.attributeRemoved = function (name) {
    var _this = this;

    notifyInspector(function (ins) {
      ins.attributeRemoved(_this.nodeId, name);
    });
  };

  DOMNode.prototype.getComputedProperties = function () {
    var view = this.viewRef.get();

    if (!view) {
      return [];
    }

    var result = getComputedCssValuesLazy()(view).filter(function (pair) {
      return pair[0][0] !== "_";
    }).map(function (pair) {
      return {
        name: pair[0],
        value: valueToString(pair[1])
      };
    });
    return result;
  };

  DOMNode.prototype.dispose = function () {
    unregisterNode(this);
    this.viewRef.clear();
  };

  DOMNode.prototype.toObject = function () {
    return {
      nodeId: this.nodeId,
      nodeType: this.nodeType,
      nodeName: this.nodeName,
      localName: this.localName,
      nodeValue: this.nodeValue,
      children: this.children.map(function (c) {
        return c.toObject();
      }),
      attributes: this.attributes,
      backendNodeId: 0
    };
  };

  return DOMNode;
}();

exports.DOMNode = DOMNode;

/***/ }),

/***/ "../node_modules/tns-core-modules/fetch/fetch.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {(function () {
  'use strict';

  exports.XMLHttpRequest = global.XMLHttpRequest;
  exports.FormData = global.FormData;

  if (!exports.XMLHttpRequest) {
    var xhr = __webpack_require__("../node_modules/tns-core-modules/xhr/xhr.js");

    exports.XMLHttpRequest = xhr.XMLHttpRequest;
    exports.FormData = xhr.FormData;
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = name.toString();
    }

    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name');
    }

    return name.toLowerCase();
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = value.toString();
    }

    return value;
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function (value, name) {
        this.append(name, value);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function (name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function (name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var list = this.map[name];

    if (!list) {
      list = [];
      this.map[name] = list;
    }

    list.push(value);
  };

  Headers.prototype['delete'] = function (name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function (name) {
    var values = this.map[normalizeName(name)];
    return values ? values[0] : null;
  };

  Headers.prototype.getAll = function (name) {
    return this.map[normalizeName(name)] || [];
  };

  Headers.prototype.has = function (name) {
    return this.map.hasOwnProperty(normalizeName(name));
  };

  Headers.prototype.set = function (name, value) {
    this.map[normalizeName(name)] = [normalizeValue(value)];
  };

  Headers.prototype.forEach = function (callback, thisArg) {
    Object.getOwnPropertyNames(this.map).forEach(function (name) {
      this.map[name].forEach(function (value) {
        callback.call(thisArg, value, name, this);
      }, this);
    }, this);
  };

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'));
    }

    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function (resolve, reject) {
      reader.onload = function () {
        resolve(reader.result);
      };

      reader.onerror = function () {
        reject(reader.error);
      };
    });
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    reader.readAsArrayBuffer(blob);
    return fileReaderReady(reader);
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    reader.readAsText(blob);
    return fileReaderReady(reader);
  }

  var support = {
    blob: 'FileReader' in exports && 'Blob' in exports && function () {
      try {
        new Blob();
        return true;
      } catch (e) {
        return false;
      }
    }(),
    formData: 'FormData' in exports
  };

  function Body() {
    this.bodyUsed = false;

    this._initBody = function (body) {
      this._bodyInit = body;

      if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && exports.FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (!body) {
        this._bodyText = '';
      } else {
        throw new Error('unsupported BodyInit type');
      }
    };

    if (support.blob) {
      this.blob = function () {
        var rejected = consumed(this);

        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob);
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob');
        } else {
          return Promise.resolve(new Blob([this._bodyText]));
        }
      };

      this.arrayBuffer = function () {
        return this.blob().then(readBlobAsArrayBuffer);
      };

      this.text = function () {
        var rejected = consumed(this);

        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob);
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text');
        } else {
          return Promise.resolve(this._bodyText);
        }
      };
    } else {
      this.text = function () {
        var rejected = consumed(this);
        return rejected ? rejected : Promise.resolve(this._bodyText);
      };
    }

    if (support.formData) {
      this.formData = function () {
        return this.text().then(decode);
      };
    }

    this.json = function () {
      return this.text().then(JSON.parse);
    };

    return this;
  } // HTTP methods whose capitalization should be normalized


  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method;
  }

  function Request(url, options) {
    options = options || {};
    this.url = url;
    this.credentials = options.credentials || 'omit';
    this.headers = new Headers(options.headers);
    this.method = normalizeMethod(options.method || 'GET');
    this.mode = options.mode || null;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && options.body) {
      throw new TypeError('Body not allowed for GET or HEAD requests');
    }

    this._initBody(options.body);
  }

  function decode(body) {
    var form = new exports.FormData();
    body.trim().split('&').forEach(function (bytes) {
      if (bytes) {
        var split = bytes.split('=');
        var name = split.shift().replace(/\+/g, ' ');
        var value = split.join('=').replace(/\+/g, ' ');
        form.append(decodeURIComponent(name), decodeURIComponent(value));
      }
    });
    return form;
  }

  function headers(xhr) {
    var head = new Headers();
    var pairs = xhr.getAllResponseHeaders().trim().split('\n');
    pairs.forEach(function (header) {
      var split = header.trim().split(':');
      var key = split.shift().trim();
      var value = split.join(':').trim();
      head.append(key, value);
    });
    return head;
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!options) {
      options = {};
    }

    this._initBody(bodyInit);

    this.type = 'default';
    this.url = null;
    this.status = options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = options.statusText;
    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers);
    this.url = options.url || '';
  }

  Body.call(Response.prototype);
  exports.Headers = Headers;
  exports.Request = Request;
  exports.Response = Response;

  exports.fetch = function (input, init) {
    // TODO: Request constructor should accept input, init
    var request;

    if (Request.prototype.isPrototypeOf(input) && !init) {
      request = input;
    } else {
      request = new Request(input, init);
    }

    return new Promise(function (resolve, reject) {
      var xhr = new exports.XMLHttpRequest();

      function responseURL() {
        if ('responseURL' in xhr) {
          return xhr.responseURL;
        } // Avoid security warnings on getResponseHeader when not allowed by CORS


        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
          return xhr.getResponseHeader('X-Request-URL');
        }

        return;
      }

      xhr.onload = function () {
        var status = xhr.status === 1223 ? 204 : xhr.status;

        if (status < 100 || status > 599) {
          reject(new TypeError('Network request failed'));
          return;
        }

        var options = {
          status: status,
          statusText: xhr.statusText,
          headers: headers(xhr),
          url: responseURL() //var body = 'response' in xhr ? xhr.response : xhr.responseText;

        };
        resolve(new Response(xhr.responseText, options));
      };

      xhr.onerror = function (error) {
        reject(new TypeError(['Network request failed:', error.message].join(' ')));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function (value, name) {
        xhr.setRequestHeader(name, value);
      });
      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    });
  };

  exports.fetch.polyfill = true;
})();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/file-system/file-name-resolver/file-name-resolver.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var trace = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

var appCommonModule = __webpack_require__("../node_modules/tns-core-modules/application/application-common.js");

var MIN_WH = "minWH";
var MIN_W = "minW";
var MIN_H = "minH";
var PRIORITY_STEP = 10000;
var minWidthHeightQualifier = {
  isMatch: function isMatch(value) {
    return value.indexOf(MIN_WH) === 0;
  },
  getMatchValue: function getMatchValue(value, context) {
    var numVal = parseInt(value.substr(MIN_WH.length));

    if (isNaN(numVal)) {
      return -1;
    }

    var actualLength = Math.min(context.width, context.height);

    if (actualLength < numVal) {
      return -1;
    }

    return PRIORITY_STEP - (actualLength - numVal);
  }
};
var minWidthQualifier = {
  isMatch: function isMatch(value) {
    return value.indexOf(MIN_W) === 0 && value.indexOf(MIN_WH) < 0;
  },
  getMatchValue: function getMatchValue(value, context) {
    var numVal = parseInt(value.substr(MIN_W.length));

    if (isNaN(numVal)) {
      return -1;
    }

    var actualWidth = context.width;

    if (actualWidth < numVal) {
      return -1;
    }

    return PRIORITY_STEP - (actualWidth - numVal);
  }
};
var minHeightQualifier = {
  isMatch: function isMatch(value) {
    return value.indexOf(MIN_H) === 0 && value.indexOf(MIN_WH) < 0;
  },
  getMatchValue: function getMatchValue(value, context) {
    var numVal = parseInt(value.substr(MIN_H.length));

    if (isNaN(numVal)) {
      return -1;
    }

    var actualHeight = context.height;

    if (actualHeight < numVal) {
      return -1;
    }

    return PRIORITY_STEP - (actualHeight - numVal);
  }
};
var platformQualifier = {
  isMatch: function isMatch(value) {
    return value === "android" || value === "ios";
  },
  getMatchValue: function getMatchValue(value, context) {
    return value === context.os.toLowerCase() ? 1 : -1;
  }
};
var orientationQualifier = {
  isMatch: function isMatch(value) {
    return value === "land" || value === "port";
  },
  getMatchValue: function getMatchValue(value, context) {
    var isLandscape = context.width > context.height ? 1 : -1;
    return value === "land" ? isLandscape : -isLandscape;
  }
};
var supportedQualifiers = [minWidthHeightQualifier, minWidthQualifier, minHeightQualifier, orientationQualifier, platformQualifier];

var FileNameResolver = function () {
  function FileNameResolver(context) {
    this._cache = {};
    this._context = context;
  }

  FileNameResolver.prototype.resolveFileName = function (path, ext) {
    var key = path + ext;
    var result = this._cache[key];

    if (result === undefined) {
      result = this.resolveFileNameImpl(path, ext);
      this._cache[key] = result;
    }

    return result;
  };

  FileNameResolver.prototype.clearCache = function () {
    this._cache = {};
  };

  FileNameResolver.prototype.resolveFileNameImpl = function (path, ext) {
    var result = null;
    path = file_system_1.path.normalize(path);
    ext = "." + ext;
    var candidates = this.getFileCandidatesFromFolder(path, ext);
    result = _findFileMatch(path, ext, candidates, this._context);
    return result;
  };

  FileNameResolver.prototype.getFileCandidatesFromFolder = function (path, ext) {
    var candidates = new Array();
    var folderPath = path.substring(0, path.lastIndexOf(file_system_1.path.separator) + 1);

    if (file_system_1.Folder.exists(folderPath)) {
      var folder = file_system_1.Folder.fromPath(folderPath);
      folder.eachEntity(function (e) {
        if (e instanceof file_system_1.File) {
          var file = e;

          if (file.path.indexOf(path) === 0 && file.extension === ext) {
            candidates.push(file.path);
          }
        }

        return true;
      });
    } else {
      if (trace.isEnabled()) {
        trace.write("Could not find folder " + folderPath + " when loading " + path + ext, trace.categories.Navigation);
      }
    }

    return candidates;
  };

  return FileNameResolver;
}();

exports.FileNameResolver = FileNameResolver;

function _findFileMatch(path, ext, candidates, context) {
  var bestValue = -1;
  var result = null;

  for (var i = 0; i < candidates.length; i++) {
    var filePath = candidates[i];
    var qualifiersStr = filePath.substr(path.length, filePath.length - path.length - ext.length);
    var qualifiers = qualifiersStr.split(".");
    var value = checkQualifiers(qualifiers, context);

    if (value >= 0 && value > bestValue) {
      bestValue = value;
      result = candidates[i];
    }
  }

  return result;
}

exports._findFileMatch = _findFileMatch;

function checkQualifiers(qualifiers, context) {
  var result = 0;

  for (var i = 0; i < qualifiers.length; i++) {
    if (qualifiers[i]) {
      var value = checkQualifier(qualifiers[i], context);

      if (value < 0) {
        return -1;
      }

      result += value;
    }
  }

  return result;
}

function checkQualifier(value, context) {
  for (var i = 0; i < supportedQualifiers.length; i++) {
    if (supportedQualifiers[i].isMatch(value)) {
      var result = supportedQualifiers[i].getMatchValue(value, context);

      if (result > 0) {
        result += (supportedQualifiers.length - i) * PRIORITY_STEP;
      }

      return result;
    }
  }

  return -1;
}

var resolverInstance;

function resolveFileName(path, ext) {
  if (!resolverInstance) {
    resolverInstance = new FileNameResolver({
      width: platform_1.screen.mainScreen.widthDIPs,
      height: platform_1.screen.mainScreen.heightDIPs,
      os: platform_1.device.os,
      deviceType: platform_1.device.deviceType
    });
  }

  return resolverInstance.resolveFileName(path, ext);
}

exports.resolveFileName = resolveFileName;
appCommonModule.on("cssChanged", function (args) {
  return resolverInstance = undefined;
});
appCommonModule.on("livesync", function (args) {
  return resolverInstance && resolverInstance.clearCache();
});

/***/ }),

/***/ "../node_modules/tns-core-modules/file-system/file-system-access.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var textModule = __webpack_require__("../node_modules/tns-core-modules/text/text.js");

var application_1 = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

var applicationContext;

function getApplicationContext() {
  if (!applicationContext) {
    applicationContext = application_1.getNativeApplication().getApplicationContext();
  }

  return applicationContext;
}

var FileSystemAccess = function () {
  function FileSystemAccess() {
    this._pathSeparator = "/";
  }

  FileSystemAccess.prototype.getLastModified = function (path) {
    var javaFile = new java.io.File(path);
    return new Date(javaFile.lastModified());
  };

  FileSystemAccess.prototype.getFileSize = function (path) {
    var javaFile = new java.io.File(path);
    return javaFile.length();
  };

  FileSystemAccess.prototype.getParent = function (path, onError) {
    try {
      var javaFile = new java.io.File(path);
      var parent = javaFile.getParentFile();
      return {
        path: parent.getAbsolutePath(),
        name: parent.getName()
      };
    } catch (exception) {
      if (onError) {
        onError(exception);
      }

      return undefined;
    }
  };

  FileSystemAccess.prototype.getFile = function (path, onError) {
    return this.ensureFile(new java.io.File(path), false, onError);
  };

  FileSystemAccess.prototype.getFolder = function (path, onError) {
    var javaFile = new java.io.File(path);
    var dirInfo = this.ensureFile(javaFile, true, onError);

    if (!dirInfo) {
      return undefined;
    }

    return {
      path: dirInfo.path,
      name: dirInfo.name
    };
  };

  FileSystemAccess.prototype.eachEntity = function (path, onEntity, onError) {
    if (!onEntity) {
      return;
    }

    this.enumEntities(path, onEntity, onError);
  };

  FileSystemAccess.prototype.getEntities = function (path, onError) {
    var fileInfos = new Array();

    var onEntity = function onEntity(entity) {
      fileInfos.push(entity);
      return true;
    };

    var errorOccurred;

    var localError = function localError(error) {
      if (onError) {
        onError(error);
      }

      errorOccurred = true;
    };

    this.enumEntities(path, onEntity, localError);

    if (!errorOccurred) {
      return fileInfos;
    }

    return null;
  };

  FileSystemAccess.prototype.fileExists = function (path) {
    var file = new java.io.File(path);
    return file.exists();
  };

  FileSystemAccess.prototype.folderExists = function (path) {
    var file = new java.io.File(path);
    return file.exists() && file.isDirectory();
  };

  FileSystemAccess.prototype.deleteFile = function (path, onError) {
    try {
      var javaFile = new java.io.File(path);

      if (!javaFile.isFile()) {
        if (onError) {
          onError({
            message: "The specified parameter is not a File entity."
          });
        }

        return;
      }

      if (!javaFile.delete()) {
        if (onError) {
          onError({
            message: "File deletion failed"
          });
        }
      }
    } catch (exception) {
      if (onError) {
        onError(exception);
      }
    }
  };

  FileSystemAccess.prototype.deleteFolder = function (path, onError) {
    try {
      var javaFile = new java.io.File(path);

      if (!javaFile.getCanonicalFile().isDirectory()) {
        if (onError) {
          onError({
            message: "The specified parameter is not a Folder entity."
          });
        }

        return;
      }

      this.deleteFolderContent(javaFile);

      if (!javaFile.delete()) {
        if (onError) {
          onError({
            message: "Folder deletion failed."
          });
        }
      }
    } catch (exception) {
      if (onError) {
        onError(exception);
      }
    }
  };

  FileSystemAccess.prototype.emptyFolder = function (path, onError) {
    try {
      var javaFile = new java.io.File(path);

      if (!javaFile.getCanonicalFile().isDirectory()) {
        if (onError) {
          onError({
            message: "The specified parameter is not a Folder entity."
          });
        }

        return;
      }

      this.deleteFolderContent(javaFile);
    } catch (exception) {
      if (onError) {
        onError(exception);
      }
    }
  };

  FileSystemAccess.prototype.rename = function (path, newPath, onError) {
    var javaFile = new java.io.File(path);

    if (!javaFile.exists()) {
      if (onError) {
        onError(new Error("The file to rename does not exist"));
      }

      return;
    }

    var newFile = new java.io.File(newPath);

    if (newFile.exists()) {
      if (onError) {
        onError(new Error("A file with the same name already exists."));
      }

      return;
    }

    if (!javaFile.renameTo(newFile)) {
      if (onError) {
        onError(new Error("Failed to rename file '" + path + "' to '" + newPath + "'"));
      }
    }
  };

  FileSystemAccess.prototype.getDocumentsFolderPath = function () {
    var dir = getApplicationContext().getFilesDir();
    return dir.getAbsolutePath();
  };

  FileSystemAccess.prototype.getLogicalRootPath = function () {
    var dir = getApplicationContext().getFilesDir();
    return dir.getCanonicalPath();
  };

  FileSystemAccess.prototype.getTempFolderPath = function () {
    var dir = getApplicationContext().getCacheDir();
    return dir.getAbsolutePath();
  };

  FileSystemAccess.prototype.getCurrentAppPath = function () {
    return this.getLogicalRootPath() + "/app";
  };

  FileSystemAccess.prototype.read = function (path, onError) {
    try {
      var javaFile = new java.io.File(path);
      var stream = new java.io.FileInputStream(javaFile);
      var bytes = Array.create("byte", javaFile.length());
      var dataInputStream = new java.io.DataInputStream(stream);
      dataInputStream.readFully(bytes);
      return bytes;
    } catch (exception) {
      if (onError) {
        onError(exception);
      }
    }
  };

  FileSystemAccess.prototype.write = function (path, bytes, onError) {
    try {
      var javaFile = new java.io.File(path);
      var stream = new java.io.FileOutputStream(javaFile);
      stream.write(bytes, 0, bytes.length);
      stream.close();
    } catch (exception) {
      if (onError) {
        onError(exception);
      }
    }
  };

  FileSystemAccess.prototype.readText = function (path, onError, encoding) {
    try {
      var javaFile = new java.io.File(path);
      var stream = new java.io.FileInputStream(javaFile);
      var actualEncoding = encoding;

      if (!actualEncoding) {
        actualEncoding = textModule.encoding.UTF_8;
      }

      var reader = new java.io.InputStreamReader(stream, actualEncoding);
      var bufferedReader = new java.io.BufferedReader(reader);
      var line = undefined;
      var result = "";

      while (true) {
        line = bufferedReader.readLine();

        if (line === null) {
          break;
        }

        if (result.length > 0) {
          result += "\n";
        }

        result += line;
      }

      if (actualEncoding === textModule.encoding.UTF_8) {
        result = FileSystemAccess._removeUtf8Bom(result);
      }

      bufferedReader.close();
      return result;
    } catch (exception) {
      if (onError) {
        onError(exception);
      }
    }
  };

  FileSystemAccess._removeUtf8Bom = function (s) {
    if (s.charCodeAt(0) === 0xFEFF) {
      s = s.slice(1);
    }

    return s;
  };

  FileSystemAccess.prototype.writeText = function (path, content, onError, encoding) {
    try {
      var javaFile = new java.io.File(path);
      var stream = new java.io.FileOutputStream(javaFile);
      var actualEncoding = encoding;

      if (!actualEncoding) {
        actualEncoding = textModule.encoding.UTF_8;
      }

      var writer = new java.io.OutputStreamWriter(stream, actualEncoding);
      writer.write(content);
      writer.close();
    } catch (exception) {
      if (onError) {
        onError(exception);
      }
    }
  };

  FileSystemAccess.prototype.deleteFolderContent = function (file) {
    var filesList = file.listFiles();

    if (filesList.length === 0) {
      return true;
    }

    var i,
        childFile,
        success = false;

    for (i = 0; i < filesList.length; i++) {
      childFile = filesList[i];

      if (childFile.getCanonicalFile().isDirectory()) {
        success = this.deleteFolderContent(childFile);

        if (!success) {
          break;
        }
      }

      success = childFile.delete();
    }

    return success;
  };

  FileSystemAccess.prototype.ensureFile = function (javaFile, isFolder, onError) {
    try {
      if (!javaFile.exists()) {
        var created;

        if (isFolder) {
          created = javaFile.mkdirs();
        } else {
          javaFile.getParentFile().mkdirs();
          created = javaFile.createNewFile();
        }

        if (!created) {
          if (onError) {
            onError("Failed to create new java File for path " + javaFile.getAbsolutePath());
          }

          return undefined;
        } else {
          javaFile.setReadable(true);
          javaFile.setWritable(true);
        }
      }

      var path = javaFile.getAbsolutePath();
      return {
        path: path,
        name: javaFile.getName(),
        extension: this.getFileExtension(path)
      };
    } catch (exception) {
      if (onError) {
        onError(exception);
      }

      return undefined;
    }
  };

  FileSystemAccess.prototype.getFileExtension = function (path) {
    var dotIndex = path.lastIndexOf(".");

    if (dotIndex && dotIndex >= 0 && dotIndex < path.length) {
      return path.substring(dotIndex);
    }

    return "";
  };

  FileSystemAccess.prototype.enumEntities = function (path, callback, onError) {
    try {
      var javaFile = new java.io.File(path);

      if (!javaFile.getCanonicalFile().isDirectory()) {
        if (onError) {
          onError("There is no folder existing at path " + path);
        }

        return;
      }

      var filesList = javaFile.listFiles();
      var length = filesList.length;
      var i;
      var info;
      var retVal;

      for (i = 0; i < length; i++) {
        javaFile = filesList[i];
        info = {
          path: javaFile.getAbsolutePath(),
          name: javaFile.getName()
        };

        if (javaFile.isFile()) {
          info.extension = this.getFileExtension(info.path);
        }

        retVal = callback(info);

        if (retVal === false) {
          break;
        }
      }
    } catch (exception) {
      if (onError) {
        onError(exception);
      }
    }
  };

  FileSystemAccess.prototype.getPathSeparator = function () {
    return this._pathSeparator;
  };

  FileSystemAccess.prototype.normalizePath = function (path) {
    var file = new java.io.File(path);
    return file.getAbsolutePath();
  };

  FileSystemAccess.prototype.joinPath = function (left, right) {
    var file1 = new java.io.File(left);
    var file2 = new java.io.File(file1, right);
    return file2.getPath();
  };

  FileSystemAccess.prototype.joinPaths = function (paths) {
    if (!paths || paths.length === 0) {
      return "";
    }

    if (paths.length === 1) {
      return paths[0];
    }

    var i,
        result = paths[0];

    for (i = 1; i < paths.length; i++) {
      result = this.joinPath(result, paths[i]);
    }

    return result;
  };

  return FileSystemAccess;
}();

exports.FileSystemAccess = FileSystemAccess;

/***/ }),

/***/ "../node_modules/tns-core-modules/file-system/file-system.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var file_access_module = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system-access.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var fileAccess;

var getFileAccess = function getFileAccess() {
  if (!fileAccess) {
    fileAccess = new file_access_module.FileSystemAccess();
  }

  return fileAccess;
};

var platform;

function ensurePlatform() {
  if (!platform) {
    platform = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");
  }
}

var createFile = function createFile(info) {
  var file = new File();
  file._path = info.path;
  file._name = info.name;
  file._extension = info.extension;
  return file;
};

var createFolder = function createFolder(info) {
  var documents = knownFolders.documents();

  if (info.path === documents.path) {
    return documents;
  }

  var temp = knownFolders.temp();

  if (info.path === temp.path) {
    return temp;
  }

  var folder = new Folder();
  folder._path = info.path;
  folder._name = info.name;
  return folder;
};

var FileSystemEntity = function () {
  function FileSystemEntity() {}

  Object.defineProperty(FileSystemEntity.prototype, "parent", {
    get: function get() {
      var onError = function onError(error) {
        throw error;
      };

      var folderInfo = getFileAccess().getParent(this.path, onError);

      if (!folderInfo) {
        return undefined;
      }

      return createFolder(folderInfo);
    },
    enumerable: true,
    configurable: true
  });

  FileSystemEntity.prototype.remove = function () {
    var _this = this;

    return new Promise(function (resolve, reject) {
      var hasError = false;

      var localError = function localError(error) {
        hasError = true;
        reject(error);
      };

      _this.removeSync(localError);

      if (!hasError) {
        resolve();
      }
    });
  };

  FileSystemEntity.prototype.removeSync = function (onError) {
    if (this._isKnown) {
      if (onError) {
        onError({
          message: "Cannot delete known folder."
        });
      }

      return;
    }

    var fileAccess = getFileAccess();

    if (this instanceof File) {
      fileAccess.deleteFile(this.path, onError);
    } else if (this instanceof Folder) {
      fileAccess.deleteFolder(this.path, onError);
    }
  };

  FileSystemEntity.prototype.rename = function (newName) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      var hasError = false;

      var localError = function localError(error) {
        hasError = true;
        reject(error);
      };

      _this.renameSync(newName, localError);

      if (!hasError) {
        resolve();
      }
    });
  };

  FileSystemEntity.prototype.renameSync = function (newName, onError) {
    if (this._isKnown) {
      if (onError) {
        onError(new Error("Cannot rename known folder."));
      }

      return;
    }

    var parentFolder = this.parent;

    if (!parentFolder) {
      if (onError) {
        onError(new Error("No parent folder."));
      }

      return;
    }

    var fileAccess = getFileAccess();
    var path = parentFolder.path;
    var newPath = fileAccess.joinPath(path, newName);

    var localError = function localError(error) {
      if (onError) {
        onError(error);
      }

      return null;
    };

    fileAccess.rename(this.path, newPath, localError);
    this._path = newPath;
    this._name = newName;

    if (this instanceof File) {
      this._extension = fileAccess.getFileExtension(newPath);
    }
  };

  Object.defineProperty(FileSystemEntity.prototype, "name", {
    get: function get() {
      return this._name;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FileSystemEntity.prototype, "path", {
    get: function get() {
      return this._path;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FileSystemEntity.prototype, "lastModified", {
    get: function get() {
      var value = this._lastModified;

      if (!this._lastModified) {
        value = this._lastModified = getFileAccess().getLastModified(this.path);
      }

      return value;
    },
    enumerable: true,
    configurable: true
  });
  return FileSystemEntity;
}();

exports.FileSystemEntity = FileSystemEntity;

var File = function (_super) {
  __extends(File, _super);

  function File() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  File.fromPath = function (path) {
    var onError = function onError(error) {
      throw error;
    };

    var fileInfo = getFileAccess().getFile(path, onError);

    if (!fileInfo) {
      return undefined;
    }

    return createFile(fileInfo);
  };

  File.exists = function (path) {
    return getFileAccess().fileExists(path);
  };

  Object.defineProperty(File.prototype, "extension", {
    get: function get() {
      return this._extension;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(File.prototype, "isLocked", {
    get: function get() {
      return !!this._locked;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(File.prototype, "size", {
    get: function get() {
      return getFileAccess().getFileSize(this.path);
    },
    enumerable: true,
    configurable: true
  });

  File.prototype.readSync = function (onError) {
    this.checkAccess();
    this._locked = true;
    var that = this;

    var localError = function localError(error) {
      that._locked = false;

      if (onError) {
        onError(error);
      }
    };

    var content = getFileAccess().read(this.path, localError);
    this._locked = false;
    return content;
  };

  File.prototype.writeSync = function (content, onError) {
    this.checkAccess();

    try {
      this._locked = true;
      var that = this;

      var localError = function localError(error) {
        that._locked = false;

        if (onError) {
          onError(error);
        }
      };

      getFileAccess().write(this.path, content, localError);
    } finally {
      this._locked = false;
    }
  };

  File.prototype.readText = function (encoding) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      var hasError = false;

      var localError = function localError(error) {
        hasError = true;
        reject(error);
      };

      var content = _this.readTextSync(localError, encoding);

      if (!hasError) {
        resolve(content);
      }
    });
  };

  File.prototype.readTextSync = function (onError, encoding) {
    this.checkAccess();
    this._locked = true;
    var that = this;

    var localError = function localError(error) {
      that._locked = false;

      if (onError) {
        onError(error);
      }
    };

    var content = getFileAccess().readText(this.path, localError, encoding);
    this._locked = false;
    return content;
  };

  File.prototype.writeText = function (content, encoding) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      var hasError = false;

      var localError = function localError(error) {
        hasError = true;
        reject(error);
      };

      _this.writeTextSync(content, localError, encoding);

      if (!hasError) {
        resolve();
      }
    });
  };

  File.prototype.writeTextSync = function (content, onError, encoding) {
    this.checkAccess();

    try {
      this._locked = true;
      var that = this;

      var localError = function localError(error) {
        that._locked = false;

        if (onError) {
          onError(error);
        }
      };

      getFileAccess().writeText(this.path, content, localError, encoding);
    } finally {
      this._locked = false;
    }
  };

  File.prototype.checkAccess = function () {
    if (this.isLocked) {
      throw new Error("Cannot access a locked file.");
    }
  };

  __decorate([profiling_1.profile], File.prototype, "readTextSync", null);

  return File;
}(FileSystemEntity);

exports.File = File;

var Folder = function (_super) {
  __extends(Folder, _super);

  function Folder() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Folder.fromPath = function (path) {
    var onError = function onError(error) {
      throw error;
    };

    var folderInfo = getFileAccess().getFolder(path, onError);

    if (!folderInfo) {
      return undefined;
    }

    return createFolder(folderInfo);
  };

  Folder.exists = function (path) {
    return getFileAccess().folderExists(path);
  };

  Folder.prototype.contains = function (name) {
    var fileAccess = getFileAccess();
    var path = fileAccess.joinPath(this.path, name);

    if (fileAccess.fileExists(path)) {
      return true;
    }

    return fileAccess.folderExists(path);
  };

  Folder.prototype.clear = function () {
    var _this = this;

    return new Promise(function (resolve, reject) {
      var hasError = false;

      var onError = function onError(error) {
        hasError = true;
        reject(error);
      };

      _this.clearSync(onError);

      if (!hasError) {
        resolve();
      }
    });
  };

  Folder.prototype.clearSync = function (onError) {
    getFileAccess().emptyFolder(this.path, onError);
  };

  Object.defineProperty(Folder.prototype, "isKnown", {
    get: function get() {
      return this._isKnown;
    },
    enumerable: true,
    configurable: true
  });

  Folder.prototype.getFile = function (name) {
    var fileAccess = getFileAccess();
    var path = fileAccess.joinPath(this.path, name);

    var onError = function onError(error) {
      throw error;
    };

    var fileInfo = fileAccess.getFile(path, onError);

    if (!fileInfo) {
      return undefined;
    }

    return createFile(fileInfo);
  };

  Folder.prototype.getFolder = function (name) {
    var fileAccess = getFileAccess();
    var path = fileAccess.joinPath(this.path, name);

    var onError = function onError(error) {
      throw error;
    };

    var folderInfo = fileAccess.getFolder(path, onError);

    if (!folderInfo) {
      return undefined;
    }

    return createFolder(folderInfo);
  };

  Folder.prototype.getEntities = function () {
    var _this = this;

    return new Promise(function (resolve, reject) {
      var hasError = false;

      var localError = function localError(error) {
        hasError = true;
        reject(error);
      };

      var entities = _this.getEntitiesSync(localError);

      if (!hasError) {
        resolve(entities);
      }
    });
  };

  Folder.prototype.getEntitiesSync = function (onError) {
    var fileInfos = getFileAccess().getEntities(this.path, onError);

    if (!fileInfos) {
      return null;
    }

    var entities = new Array();
    var i;

    for (i = 0; i < fileInfos.length; i++) {
      if (fileInfos[i].extension) {
        entities.push(createFile(fileInfos[i]));
      } else {
        entities.push(createFolder(fileInfos[i]));
      }
    }

    return entities;
  };

  Folder.prototype.eachEntity = function (onEntity) {
    if (!onEntity) {
      return;
    }

    var onSuccess = function onSuccess(fileInfo) {
      var entity;

      if (fileInfo.extension) {
        entity = createFile(fileInfo);
      } else {
        entity = createFolder(fileInfo);
      }

      return onEntity(entity);
    };

    var onError = function onError(error) {
      throw error;
    };

    getFileAccess().eachEntity(this.path, onSuccess, onError);
  };

  return Folder;
}(FileSystemEntity);

exports.Folder = Folder;
var knownFolders;

(function (knownFolders) {
  var _documents;

  var _temp;

  var _app;

  knownFolders.documents = function () {
    if (!_documents) {
      var path = getFileAccess().getDocumentsFolderPath();
      _documents = new Folder();
      _documents._path = path;
      _documents._isKnown = true;
    }

    return _documents;
  };

  knownFolders.temp = function () {
    if (!_temp) {
      var path = getFileAccess().getTempFolderPath();
      _temp = new Folder();
      _temp._path = path;
      _temp._isKnown = true;
    }

    return _temp;
  };

  knownFolders.currentApp = function () {
    if (!_app) {
      var path = getFileAccess().getCurrentAppPath();
      _app = new Folder();
      _app._path = path;
      _app._isKnown = true;
    }

    return _app;
  };

  var ios;

  (function (ios) {
    function _checkPlatform(knownFolderName) {
      ensurePlatform();

      if (!platform.isIOS) {
        throw new Error("The \"" + knownFolderName + "\" known folder is available on iOS only!");
      }
    }

    var _library;

    ios.library = function () {
      _checkPlatform("library");

      if (!_library) {
        var existingFolderInfo = getExistingFolderInfo(5);

        if (existingFolderInfo) {
          _library = existingFolderInfo.folder;
          _library._path = existingFolderInfo.path;
          _library._isKnown = true;
        }
      }

      return _library;
    };

    var _developer;

    ios.developer = function () {
      _checkPlatform("developer");

      if (!_developer) {
        var existingFolderInfo = getExistingFolderInfo(6);

        if (existingFolderInfo) {
          _developer = existingFolderInfo.folder;
          _developer._path = existingFolderInfo.path;
          _developer._isKnown = true;
        }
      }

      return _developer;
    };

    var _desktop;

    ios.desktop = function () {
      _checkPlatform("desktop");

      if (!_desktop) {
        var existingFolderInfo = getExistingFolderInfo(12);

        if (existingFolderInfo) {
          _desktop = existingFolderInfo.folder;
          _desktop._path = existingFolderInfo.path;
          _desktop._isKnown = true;
        }
      }

      return _desktop;
    };

    var _downloads;

    ios.downloads = function () {
      _checkPlatform("downloads");

      if (!_downloads) {
        var existingFolderInfo = getExistingFolderInfo(15);

        if (existingFolderInfo) {
          _downloads = existingFolderInfo.folder;
          _downloads._path = existingFolderInfo.path;
          _downloads._isKnown = true;
        }
      }

      return _downloads;
    };

    var _movies;

    ios.movies = function () {
      _checkPlatform("movies");

      if (!_movies) {
        var existingFolderInfo = getExistingFolderInfo(17);

        if (existingFolderInfo) {
          _movies = existingFolderInfo.folder;
          _movies._path = existingFolderInfo.path;
          _movies._isKnown = true;
        }
      }

      return _movies;
    };

    var _music;

    ios.music = function () {
      _checkPlatform("music");

      if (!_music) {
        var existingFolderInfo = getExistingFolderInfo(18);

        if (existingFolderInfo) {
          _music = existingFolderInfo.folder;
          _music._path = existingFolderInfo.path;
          _music._isKnown = true;
        }
      }

      return _music;
    };

    var _pictures;

    ios.pictures = function () {
      _checkPlatform("pictures");

      if (!_pictures) {
        var existingFolderInfo = getExistingFolderInfo(19);

        if (existingFolderInfo) {
          _pictures = existingFolderInfo.folder;
          _pictures._path = existingFolderInfo.path;
          _pictures._isKnown = true;
        }
      }

      return _pictures;
    };

    var _sharedPublic;

    ios.sharedPublic = function () {
      _checkPlatform("sharedPublic");

      if (!_sharedPublic) {
        var existingFolderInfo = getExistingFolderInfo(21);

        if (existingFolderInfo) {
          _sharedPublic = existingFolderInfo.folder;
          _sharedPublic._path = existingFolderInfo.path;
          _sharedPublic._isKnown = true;
        }
      }

      return _sharedPublic;
    };

    function getExistingFolderInfo(pathDirectory) {
      var fileAccess = getFileAccess();
      var folderPath = fileAccess.getKnownPath(pathDirectory);
      var folderInfo = fileAccess.getExistingFolder(folderPath);

      if (folderInfo) {
        return {
          folder: createFolder(folderInfo),
          path: folderPath
        };
      }

      return undefined;
    }
  })(ios = knownFolders.ios || (knownFolders.ios = {}));
})(knownFolders = exports.knownFolders || (exports.knownFolders = {}));

var path;

(function (path_1) {
  function normalize(path) {
    return getFileAccess().normalizePath(path);
  }

  path_1.normalize = normalize;

  function join() {
    var paths = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      paths[_i] = arguments[_i];
    }

    var fileAccess = getFileAccess();
    return fileAccess.joinPaths(paths);
  }

  path_1.join = join;
  path_1.separator = getFileAccess().getPathSeparator();
})(path = exports.path || (exports.path = {}));

/***/ }),

/***/ "../node_modules/tns-core-modules/globals/globals.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

__webpack_require__("../node_modules/tns-core-modules/globals/ts-helpers.js");

global.moduleMerge = function (sourceExports, destExports) {
  for (var key in sourceExports) {
    destExports[key] = sourceExports[key];
  }
};

var modules = new Map();
global.moduleResolvers = [global.require];

global.registerModule = function (name, loader) {
  modules.set(name, loader);
};

var defaultExtensionMap = {
  ".js": ".js",
  ".ts": ".js",
  ".css": ".css",
  ".scss": ".css",
  ".xml": ".xml",
  ".less": ".css",
  ".sass": ".css"
};

global.registerWebpackModules = function registerWebpackModules(context, extensionMap) {
  if (extensionMap === void 0) {
    extensionMap = {};
  }

  context.keys().forEach(function (key) {
    var extDotIndex = key.lastIndexOf(".");
    var base = key.substr(0, extDotIndex);
    var originalExt = key.substr(extDotIndex);
    var registerExt = extensionMap[originalExt] || defaultExtensionMap[originalExt] || originalExt;
    var isSourceFile = originalExt !== registerExt;
    var registerName = base + registerExt;

    if (registerName.startsWith("./") && registerName.endsWith(".js")) {
      var jsNickNames = [registerName.substr(2, registerName.length - 5), registerName.substr(0, registerName.length - 3), registerName.substr(2)];
      jsNickNames.forEach(function (jsNickName) {
        if (isSourceFile || !global.moduleExists(jsNickName)) {
          global.registerModule(jsNickName, function () {
            return context(key);
          });
        }
      });
    }

    if (isSourceFile || !global.moduleExists(registerName)) {
      global.registerModule(registerName, function () {
        return context(key);
      });
    }
  });
};

global.moduleExists = function (name) {
  return modules.has(name);
};

global.loadModule = function (name) {
  var loader = modules.get(name);

  if (loader) {
    return loader();
  }

  var _loop_1 = function _loop_1(resolver) {
    var result = resolver(name);

    if (result) {
      modules.set(name, function () {
        return result;
      });
      return {
        value: result
      };
    }
  };

  for (var _i = 0, _a = global.moduleResolvers; _i < _a.length; _i++) {
    var resolver = _a[_i];

    var state_1 = _loop_1(resolver);

    if (typeof state_1 === "object") return state_1.value;
  }
};

global.zonedCallback = function (callback) {
  if (global.zone) {
    return global.zone.bind(callback);
  }

  if (global.Zone) {
    return global.Zone.current.wrap(callback);
  } else {
    return callback;
  }
};

global.registerModule("timer", function () {
  return __webpack_require__("../node_modules/tns-core-modules/timer/timer.js");
});
global.registerModule("ui/dialogs", function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/dialogs/dialogs.js");
});
global.registerModule("xhr", function () {
  return __webpack_require__("../node_modules/tns-core-modules/xhr/xhr.js");
});
global.registerModule("fetch", function () {
  return __webpack_require__("../node_modules/tns-core-modules/fetch/fetch.js");
});
global.System = {
  import: function _import(path) {
    return new Promise(function (resolve, reject) {
      try {
        resolve(global.require(path));
      } catch (e) {
        reject(e);
      }
    });
  }
};

function registerOnGlobalContext(name, module) {
  Object.defineProperty(global, name, {
    get: function get() {
      var m = global.loadModule(module);
      var resolvedValue = m[name];
      Object.defineProperty(this, name, {
        value: resolvedValue,
        configurable: true,
        writable: true
      });
      return resolvedValue;
    },
    configurable: true
  });
}

var snapshotGlobals;

function install() {
  if (global.__snapshot || global.__snapshotEnabled) {
    if (!snapshotGlobals) {
      var timer = __webpack_require__("../node_modules/tns-core-modules/timer/timer.js");

      var dialogs = __webpack_require__("../node_modules/tns-core-modules/ui/dialogs/dialogs.js");

      var xhr = __webpack_require__("../node_modules/tns-core-modules/xhr/xhr.js");

      var fetch = __webpack_require__("../node_modules/tns-core-modules/fetch/fetch.js");

      snapshotGlobals = snapshotGlobals || {
        setTimeout: timer.setTimeout,
        clearTimeout: timer.clearTimeout,
        setInterval: timer.setInterval,
        clearInterval: timer.clearInterval,
        alert: dialogs.alert,
        confirm: dialogs.confirm,
        prompt: dialogs.prompt,
        login: dialogs.login,
        action: dialogs.action,
        XMLHttpRequest: xhr.XMLHttpRequest,
        FormData: xhr.FormData,
        fetch: fetch.fetch,
        Headers: fetch.Headers,
        Request: fetch.Request,
        Response: fetch.Response
      };
    }

    var consoleModule = __webpack_require__("../node_modules/tns-core-modules/console/console.js").Console;

    global.console = global.console || new consoleModule();
    Object.assign(global, snapshotGlobals);
  } else {
    registerOnGlobalContext("setTimeout", "timer");
    registerOnGlobalContext("clearTimeout", "timer");
    registerOnGlobalContext("setInterval", "timer");
    registerOnGlobalContext("clearInterval", "timer");
    registerOnGlobalContext("alert", "ui/dialogs");
    registerOnGlobalContext("confirm", "ui/dialogs");
    registerOnGlobalContext("prompt", "ui/dialogs");
    registerOnGlobalContext("login", "ui/dialogs");
    registerOnGlobalContext("action", "ui/dialogs");
    registerOnGlobalContext("XMLHttpRequest", "xhr");
    registerOnGlobalContext("FormData", "xhr");
    registerOnGlobalContext("fetch", "fetch");
    registerOnGlobalContext("Headers", "fetch");
    registerOnGlobalContext("Request", "fetch");
    registerOnGlobalContext("Response", "fetch");
  }
}

exports.install = install;
install();

function Deprecated(target, key, descriptor) {
  if (descriptor) {
    var originalMethod = descriptor.value;

    descriptor.value = function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      console.log(key.toString() + " is deprecated");
      return originalMethod.apply(this, args);
    };

    return descriptor;
  } else {
    console.log((target && target.name || target) + " is deprecated");
    return target;
  }
}

exports.Deprecated = Deprecated;
global.Deprecated = Deprecated;

function Experimental(target, key, descriptor) {
  if (descriptor) {
    var originalMethod = descriptor.value;

    descriptor.value = function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      console.log(key.toString() + " is experimental");
      return originalMethod.apply(this, args);
    };

    return descriptor;
  } else {
    console.log((target && target.name || target) + " is experimental");
    return target;
  }
}

exports.Experimental = Experimental;
global.Experimental = Experimental;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/globals/ts-helpers.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

if (!global.__extends) {
  global.__extends = function (d, b) {
    for (var p in b) {
      if (b.hasOwnProperty(p)) {
        d[p] = b[p];
      }
    }

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}

var tslib = __webpack_require__("../node_modules/tslib/tslib.es6.js");

for (var _i = 0, _a = Object.keys(tslib); _i < _a.length; _i++) {
  var fnName = _a[_i];

  if (typeof tslib[fnName] !== "function") {
    continue;
  }

  if (fnName in global) {
    continue;
  }

  global[fnName] = tslib[fnName];
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/http/http-request/http-request-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

function getFilenameFromUrl(url) {
  var fs = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

  var slashPos = url.lastIndexOf("/") + 1;
  var questionMarkPos = url.lastIndexOf("?");
  var actualFileName;

  if (questionMarkPos !== -1) {
    actualFileName = url.substring(slashPos, questionMarkPos);
  } else {
    actualFileName = url.substring(slashPos);
  }

  var result = fs.path.join(fs.knownFolders.documents().path, actualFileName);
  return result;
}

exports.getFilenameFromUrl = getFilenameFromUrl;

/***/ }),

/***/ "../node_modules/tns-core-modules/http/http-request/http-request.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var http_request_common_1 = __webpack_require__("../node_modules/tns-core-modules/http/http-request/http-request-common.js");

var debugger_1 = __webpack_require__("../node_modules/tns-core-modules/debugger/debugger.js");

var HttpResponseEncoding;

(function (HttpResponseEncoding) {
  HttpResponseEncoding[HttpResponseEncoding["UTF8"] = 0] = "UTF8";
  HttpResponseEncoding[HttpResponseEncoding["GBK"] = 1] = "GBK";
})(HttpResponseEncoding = exports.HttpResponseEncoding || (exports.HttpResponseEncoding = {}));

function parseJSON(source) {
  var src = source.trim();

  if (src.lastIndexOf(")") === src.length - 1) {
    return JSON.parse(src.substring(src.indexOf("(") + 1, src.lastIndexOf(")")));
  }

  return JSON.parse(src);
}

var requestIdCounter = 0;
var pendingRequests = {};
var imageSource;

function ensureImageSource() {
  if (!imageSource) {
    imageSource = __webpack_require__("../node_modules/tns-core-modules/image-source/image-source.js");
  }
}

var platform;

function ensurePlatform() {
  if (!platform) {
    platform = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");
  }
}

var completeCallback;

function ensureCompleteCallback() {
  if (completeCallback) {
    return;
  }

  completeCallback = new org.nativescript.widgets.Async.CompleteCallback({
    onComplete: function onComplete(result, context) {
      onRequestComplete(context, result);
    }
  });
}

function onRequestComplete(requestId, result) {
  var callbacks = pendingRequests[requestId];
  delete pendingRequests[requestId];

  if (result.error) {
    callbacks.rejectCallback(new Error(result.error.toString()));
    return;
  }

  var headers = {};

  if (result.headers) {
    var jHeaders = result.headers;
    var length = jHeaders.size();
    var i;
    var pair;

    for (i = 0; i < length; i++) {
      pair = jHeaders.get(i);
      addHeader(headers, pair.key, pair.value);
    }
  }

  if (global.__inspector && global.__inspector.isConnected) {
    debugger_1.NetworkAgent.responseReceived(requestId, result, headers);
  }

  callbacks.resolveCallback({
    content: {
      raw: result.raw,
      toString: function toString(encoding) {
        var str;

        if (encoding) {
          str = decodeResponse(result.raw, encoding);
        } else {
          str = result.responseAsString;
        }

        if (typeof str === "string") {
          return str;
        } else {
          throw new Error("Response content may not be converted to string");
        }
      },
      toJSON: function toJSON(encoding) {
        var str;

        if (encoding) {
          str = decodeResponse(result.raw, encoding);
        } else {
          str = result.responseAsString;
        }

        return parseJSON(str);
      },
      toImage: function toImage() {
        ensureImageSource();
        return new Promise(function (resolveImage, rejectImage) {
          if (result.responseAsImage != null) {
            resolveImage(imageSource.fromNativeSource(result.responseAsImage));
          } else {
            rejectImage(new Error("Response content may not be converted to an Image"));
          }
        });
      },
      toFile: function toFile(destinationFilePath) {
        var fs = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

        if (!destinationFilePath) {
          destinationFilePath = http_request_common_1.getFilenameFromUrl(callbacks.url);
        }

        var stream;

        try {
          var javaFile = new java.io.File(destinationFilePath);
          stream = new java.io.FileOutputStream(javaFile);
          stream.write(result.raw.toByteArray());
          return fs.File.fromPath(destinationFilePath);
        } catch (exception) {
          throw new Error("Cannot save file with path: " + destinationFilePath + ".");
        } finally {
          if (stream) {
            stream.close();
          }
        }
      }
    },
    statusCode: result.statusCode,
    headers: headers
  });
}

function buildJavaOptions(options) {
  if (typeof options.url !== "string") {
    throw new Error("Http request must provide a valid url.");
  }

  var javaOptions = new org.nativescript.widgets.Async.Http.RequestOptions();
  javaOptions.url = options.url;

  if (typeof options.method === "string") {
    javaOptions.method = options.method;
  }

  if (typeof options.content === "string" || options.content instanceof FormData) {
    javaOptions.content = options.content.toString();
  }

  if (typeof options.timeout === "number") {
    javaOptions.timeout = options.timeout;
  }

  if (typeof options.dontFollowRedirects === "boolean") {
    javaOptions.dontFollowRedirects = options.dontFollowRedirects;
  }

  if (options.headers) {
    var arrayList = new java.util.ArrayList();
    var pair = org.nativescript.widgets.Async.Http.KeyValuePair;

    for (var key in options.headers) {
      arrayList.add(new pair(key, options.headers[key] + ""));
    }

    javaOptions.headers = arrayList;
  }

  ensurePlatform();
  var screen = platform.screen.mainScreen;
  javaOptions.screenWidth = screen.widthPixels;
  javaOptions.screenHeight = screen.heightPixels;
  return javaOptions;
}

function request(options) {
  if (options === undefined || options === null) {
    return;
  }

  return new Promise(function (resolve, reject) {
    try {
      var javaOptions = buildJavaOptions(options);

      if (global.__inspector && global.__inspector.isConnected) {
        debugger_1.NetworkAgent.requestWillBeSent(requestIdCounter, options);
      }

      var callbacks = {
        url: options.url,
        resolveCallback: resolve,
        rejectCallback: reject
      };
      pendingRequests[requestIdCounter] = callbacks;
      ensureCompleteCallback();
      org.nativescript.widgets.Async.Http.MakeRequest(javaOptions, completeCallback, new java.lang.Integer(requestIdCounter));
      requestIdCounter++;
    } catch (ex) {
      reject(ex);
    }
  });
}

exports.request = request;

function decodeResponse(raw, encoding) {
  var charsetName = "UTF-8";

  if (encoding === HttpResponseEncoding.GBK) {
    charsetName = "GBK";
  }

  return raw.toString(charsetName);
}

function addHeader(headers, key, value) {
  if (!headers[key]) {
    headers[key] = value;
  } else if (Array.isArray(headers[key])) {
    headers[key].push(value);
  } else {
    var values = [headers[key]];
    values.push(value);
    headers[key] = values;
  }
}

exports.addHeader = addHeader;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/http/http.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var httpRequest = __webpack_require__("../node_modules/tns-core-modules/http/http-request/http-request.js");

__export(__webpack_require__("../node_modules/tns-core-modules/http/http-request/http-request.js"));

function getString(arg) {
  return new Promise(function (resolve, reject) {
    httpRequest.request(typeof arg === "string" ? {
      url: arg,
      method: "GET"
    } : arg).then(function (r) {
      try {
        var str = r.content.toString();
        resolve(str);
      } catch (e) {
        reject(e);
      }
    }, function (e) {
      return reject(e);
    });
  });
}

exports.getString = getString;

function getJSON(arg) {
  return new Promise(function (resolve, reject) {
    httpRequest.request(typeof arg === "string" ? {
      url: arg,
      method: "GET"
    } : arg).then(function (r) {
      try {
        var json = r.content.toJSON();
        resolve(json);
      } catch (e) {
        reject(e);
      }
    }, function (e) {
      return reject(e);
    });
  });
}

exports.getJSON = getJSON;

function getImage(arg) {
  return new Promise(function (resolve, reject) {
    httpRequest.request(typeof arg === "string" ? {
      url: arg,
      method: "GET"
    } : arg).then(function (r) {
      try {
        resolve(r.content.toImage());
      } catch (err) {
        reject(err);
      }
    }, function (err) {
      reject(err);
    });
  });
}

exports.getImage = getImage;

function getFile(arg, destinationFilePath) {
  return new Promise(function (resolve, reject) {
    httpRequest.request(typeof arg === "string" ? {
      url: arg,
      method: "GET"
    } : arg).then(function (r) {
      try {
        var file = r.content.toFile(destinationFilePath);
        resolve(file);
      } catch (e) {
        reject(e);
      }
    }, function (e) {
      return reject(e);
    });
  });
}

exports.getFile = getFile;

/***/ }),

/***/ "../node_modules/tns-core-modules/image-asset/image-asset-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var observable = __webpack_require__("../node_modules/tns-core-modules/data/observable/observable.js");

var platform = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var ImageAsset = function (_super) {
  __extends(ImageAsset, _super);

  function ImageAsset() {
    var _this = _super.call(this) || this;

    _this._options = {
      keepAspectRatio: true,
      autoScaleFactor: true
    };
    return _this;
  }

  Object.defineProperty(ImageAsset.prototype, "options", {
    get: function get() {
      return this._options;
    },
    set: function set(value) {
      this._options = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ImageAsset.prototype, "nativeImage", {
    get: function get() {
      return this._nativeImage;
    },
    set: function set(value) {
      this._nativeImage = value;
    },
    enumerable: true,
    configurable: true
  });

  ImageAsset.prototype.getImageAsync = function (callback) {};

  return ImageAsset;
}(observable.Observable);

exports.ImageAsset = ImageAsset;

function getAspectSafeDimensions(sourceWidth, sourceHeight, reqWidth, reqHeight) {
  var widthCoef = sourceWidth / reqWidth;
  var heightCoef = sourceHeight / reqHeight;
  var aspectCoef = Math.min(widthCoef, heightCoef);
  return {
    width: Math.floor(sourceWidth / aspectCoef),
    height: Math.floor(sourceHeight / aspectCoef)
  };
}

exports.getAspectSafeDimensions = getAspectSafeDimensions;

function getRequestedImageSize(src, options) {
  var screen = platform.screen.mainScreen;
  var reqWidth = options.width || Math.min(src.width, screen.widthPixels);
  var reqHeight = options.height || Math.min(src.height, screen.heightPixels);

  if (options && options.keepAspectRatio) {
    var safeAspectSize = getAspectSafeDimensions(src.width, src.height, reqWidth, reqHeight);
    reqWidth = safeAspectSize.width;
    reqHeight = safeAspectSize.height;
  }

  return {
    width: reqWidth,
    height: reqHeight
  };
}

exports.getRequestedImageSize = getRequestedImageSize;

/***/ }),

/***/ "../node_modules/tns-core-modules/image-asset/image-asset.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var common = __webpack_require__("../node_modules/tns-core-modules/image-asset/image-asset-common.js");

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

global.moduleMerge(common, exports);

var ImageAsset = function (_super) {
  __extends(ImageAsset, _super);

  function ImageAsset(asset) {
    var _this = _super.call(this) || this;

    var fileName = typeof asset === "string" ? asset.trim() : "";

    if (fileName.indexOf("~/") === 0) {
      fileName = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, fileName.replace("~/", ""));
    }

    _this.android = fileName;
    return _this;
  }

  Object.defineProperty(ImageAsset.prototype, "android", {
    get: function get() {
      return this._android;
    },
    set: function set(value) {
      this._android = value;
    },
    enumerable: true,
    configurable: true
  });

  ImageAsset.prototype.getImageAsync = function (callback) {
    var bitmapOptions = new android.graphics.BitmapFactory.Options();
    bitmapOptions.inJustDecodeBounds = true;
    var bitmap = android.graphics.BitmapFactory.decodeFile(this.android, bitmapOptions);
    var sourceSize = {
      width: bitmapOptions.outWidth,
      height: bitmapOptions.outHeight
    };
    var requestedSize = common.getRequestedImageSize(sourceSize, this.options);
    var sampleSize = org.nativescript.widgets.image.Fetcher.calculateInSampleSize(bitmapOptions.outWidth, bitmapOptions.outHeight, requestedSize.width, requestedSize.height);
    var finalBitmapOptions = new android.graphics.BitmapFactory.Options();
    finalBitmapOptions.inSampleSize = sampleSize;

    try {
      var error = null;
      bitmap = android.graphics.BitmapFactory.decodeFile(this.android, finalBitmapOptions);

      if (bitmap) {
        if (requestedSize.width !== bitmap.getWidth() || requestedSize.height !== bitmap.getHeight()) {
          bitmap = android.graphics.Bitmap.createScaledBitmap(bitmap, requestedSize.width, requestedSize.height, true);
        }

        var rotationAngle = calculateAngleFromFile(this.android);

        if (rotationAngle !== 0) {
          var matrix = new android.graphics.Matrix();
          matrix.postRotate(rotationAngle);
          bitmap = android.graphics.Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
        }
      }

      if (!bitmap) {
        error = "Asset '" + this.android + "' cannot be found.";
      }

      callback(bitmap, error);
    } catch (ex) {
      callback(null, ex);
    }
  };

  return ImageAsset;
}(common.ImageAsset);

exports.ImageAsset = ImageAsset;

var calculateAngleFromFile = function calculateAngleFromFile(filename) {
  var rotationAngle = 0;
  var ei = new android.media.ExifInterface(filename);
  var orientation = ei.getAttributeInt(android.media.ExifInterface.TAG_ORIENTATION, android.media.ExifInterface.ORIENTATION_NORMAL);

  switch (orientation) {
    case android.media.ExifInterface.ORIENTATION_ROTATE_90:
      rotationAngle = 90;
      break;

    case android.media.ExifInterface.ORIENTATION_ROTATE_180:
      rotationAngle = 180;
      break;

    case android.media.ExifInterface.ORIENTATION_ROTATE_270:
      rotationAngle = 270;
      break;
  }

  return rotationAngle;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/image-source/image-source.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

exports.isFileOrResourcePath = utils_1.isFileOrResourcePath;

var application_1 = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

var http;

function ensureHttp() {
  if (!http) {
    http = __webpack_require__("../node_modules/tns-core-modules/http/http.js");
  }
}

var application;
var resources;

function getApplication() {
  if (!application) {
    application = application_1.getNativeApplication();
  }

  return application;
}

function getResources() {
  if (!resources) {
    resources = getApplication().getResources();
  }

  return resources;
}

var ImageSource = function () {
  function ImageSource() {}

  ImageSource.prototype.fromAsset = function (asset) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      asset.getImageAsync(function (image, err) {
        if (image) {
          _this.setNativeSource(image);

          resolve(_this);
        } else {
          reject(err);
        }
      });
    });
  };

  ImageSource.prototype.loadFromResource = function (name) {
    this.android = null;
    var res = getResources();

    if (res) {
      var identifier = res.getIdentifier(name, "drawable", getApplication().getPackageName());

      if (0 < identifier) {
        var bitmapDrawable = res.getDrawable(identifier);

        if (bitmapDrawable && bitmapDrawable.getBitmap) {
          this.android = bitmapDrawable.getBitmap();
        }
      }
    }

    return this.android != null;
  };

  ImageSource.prototype.fromResource = function (name) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      resolve(_this.loadFromResource(name));
    });
  };

  ImageSource.prototype.setRotationAngleFromFile = function (filename) {
    this.rotationAngle = 0;
    var ei = new android.media.ExifInterface(filename);
    var orientation = ei.getAttributeInt(android.media.ExifInterface.TAG_ORIENTATION, android.media.ExifInterface.ORIENTATION_NORMAL);

    switch (orientation) {
      case android.media.ExifInterface.ORIENTATION_ROTATE_90:
        this.rotationAngle = 90;
        break;

      case android.media.ExifInterface.ORIENTATION_ROTATE_180:
        this.rotationAngle = 180;
        break;

      case android.media.ExifInterface.ORIENTATION_ROTATE_270:
        this.rotationAngle = 270;
        break;
    }
  };

  ImageSource.prototype.loadFromFile = function (path) {
    var fileName = typeof path === "string" ? path.trim() : "";

    if (fileName.indexOf("~/") === 0) {
      fileName = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, fileName.replace("~/", ""));
    }

    this.setRotationAngleFromFile(fileName);
    this.android = android.graphics.BitmapFactory.decodeFile(fileName, null);
    return this.android != null;
  };

  ImageSource.prototype.fromFile = function (path) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      resolve(_this.loadFromFile(path));
    });
  };

  ImageSource.prototype.loadFromData = function (data) {
    this.android = android.graphics.BitmapFactory.decodeStream(data);
    return this.android != null;
  };

  ImageSource.prototype.fromData = function (data) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      resolve(_this.loadFromData(data));
    });
  };

  ImageSource.prototype.loadFromBase64 = function (source) {
    if (typeof source === "string") {
      var bytes = android.util.Base64.decode(source, android.util.Base64.DEFAULT);
      this.android = android.graphics.BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
    }

    return this.android != null;
  };

  ImageSource.prototype.fromBase64 = function (data) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      resolve(_this.loadFromBase64(data));
    });
  };

  ImageSource.prototype.setNativeSource = function (source) {
    if (source && !(source instanceof android.graphics.Bitmap)) {
      throw new Error("The method setNativeSource() expects android.graphics.Bitmap instance.");
    }

    this.android = source;
  };

  ImageSource.prototype.saveToFile = function (path, format, quality) {
    if (quality === void 0) {
      quality = 100;
    }

    if (!this.android) {
      return false;
    }

    var targetFormat = getTargetFormat(format);
    var outputStream = new java.io.BufferedOutputStream(new java.io.FileOutputStream(path));
    var res = this.android.compress(targetFormat, quality, outputStream);
    outputStream.close();
    return res;
  };

  ImageSource.prototype.toBase64String = function (format, quality) {
    if (quality === void 0) {
      quality = 100;
    }

    if (!this.android) {
      return null;
    }

    var targetFormat = getTargetFormat(format);
    var outputStream = new java.io.ByteArrayOutputStream();
    var base64Stream = new android.util.Base64OutputStream(outputStream, android.util.Base64.NO_WRAP);
    this.android.compress(targetFormat, quality, base64Stream);
    base64Stream.close();
    outputStream.close();
    return outputStream.toString();
  };

  Object.defineProperty(ImageSource.prototype, "height", {
    get: function get() {
      if (this.android) {
        return this.android.getHeight();
      }

      return NaN;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ImageSource.prototype, "width", {
    get: function get() {
      if (this.android) {
        return this.android.getWidth();
      }

      return NaN;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ImageSource.prototype, "rotationAngle", {
    get: function get() {
      return this._rotationAngle;
    },
    set: function set(value) {
      this._rotationAngle = value;
    },
    enumerable: true,
    configurable: true
  });
  return ImageSource;
}();

exports.ImageSource = ImageSource;

function getTargetFormat(format) {
  switch (format) {
    case "jpeg":
    case "jpg":
      return android.graphics.Bitmap.CompressFormat.JPEG;

    default:
      return android.graphics.Bitmap.CompressFormat.PNG;
  }
}

function fromAsset(asset) {
  var image = new ImageSource();
  return image.fromAsset(asset);
}

exports.fromAsset = fromAsset;

function fromResource(name) {
  var image = new ImageSource();
  return image.loadFromResource(name) ? image : null;
}

exports.fromResource = fromResource;

function fromFile(path) {
  var image = new ImageSource();
  return image.loadFromFile(path) ? image : null;
}

exports.fromFile = fromFile;

function fromData(data) {
  var image = new ImageSource();
  return image.loadFromData(data) ? image : null;
}

exports.fromData = fromData;

function fromBase64(source) {
  var image = new ImageSource();
  return image.loadFromBase64(source) ? image : null;
}

exports.fromBase64 = fromBase64;

function fromNativeSource(source) {
  var imageSource = new ImageSource();
  imageSource.setNativeSource(source);
  return imageSource;
}

exports.fromNativeSource = fromNativeSource;

function fromUrl(url) {
  ensureHttp();
  return http.getImage(url);
}

exports.fromUrl = fromUrl;

function fromFileOrResource(path) {
  if (!utils_1.isFileOrResourcePath(path)) {
    throw new Error(path + " is not a valid file or resource.");
  }

  if (path.indexOf(utils_1.RESOURCE_PREFIX) === 0) {
    return fromResource(path.substr(utils_1.RESOURCE_PREFIX.length));
  }

  return fromFile(path);
}

exports.fromFileOrResource = fromFileOrResource;

/***/ }),

/***/ "../node_modules/tns-core-modules/js-libs/easysax/easysax.js":
/***/ (function(module, exports, __webpack_require__) {

/*
new function() {
	var parser = new EasySAXParser();
		parser.ns('rss', { // or false
		rss: 'http://purl.org/rss/1.0/',
		atom: 'http://www.w3.org/2005/Atom',
		xhtml: 'http://www.w3.org/1999/xhtml',
		media: 'http://search.yahoo.com/mrss/'
	});

	parser.on('error', function(msg) {
		//console.log(msg)
	});
		parser.on('startNode', function(elem, attr, uq, tagend, getStrNode) {
		attr();
		return;
		if (tagend) {
			console.log('   '+str)
		} else {
			console.log('+  '+str)
		};
	});
		parser.on('endNode', function(elem, uq, tagstart, str) {
		return;
		if (!tagstart) console.log('-  ' + str)
	});
		parser.on('textNode', function(s, uq) {
		uq(s);
		return
		console.log('   '+s)
	});
		parser.on('cdata', function(data) {
	});

	parser.on('comment', function(text) {
		//console.log('--'+text+'--')
	});
		//parser.on('question', function() {}); // <? ... ?>
	//parser.on('attention', function() {}); // <!XXXXX zzzz="eeee">
		console.time('easysax');
	for(var z=1000;z--;) {
		parser.parse(xml)
	};
	console.timeEnd('easysax');
};

*/
// << ------------------------------------------------------------------------ >> //
if (true
/*&& this == exports*/
) {
    module.exports.EasySAXParser = EasySAXParser;
  }

;

function EasySAXParser() {
  'use strict';

  if (!this) return null;
  this.angularSyntax = false;

  function nullFunc() {}

  ;
  this.onTextNode = nullFunc;
  this.onStartNode = nullFunc;
  this.onEndNode = nullFunc;
  this.onCDATA = nullFunc;
  this.onError = nullFunc;
  this.onComment = null;
  this.onQuestion = null;
  this.onAttention = null;
  this.is_onComment = this.is_onQuestion = this.is_onAttention = false;
  this.isNamespace = false;
  this.useNS = null;
  this.default_xmlns = null;
  this.xmlns = null;
  this.nsmatrix = {
    xmlns: this.xmlns
  };
  this.hasSurmiseNS = false;
  ;
  this.attr_string = ''; // строка атрибутов

  this.attr_posstart = 0; //

  this.attr_res; // закешированный результат разбора атрибутов , null - разбор не проводился, object - хеш атрибутов, true - нет атрибутов, false - невалидный xml
}

EasySAXParser.prototype.on = function (name, cb) {
  if (typeof cb !== 'function') {
    if (cb !== null) return;
  }

  ;

  switch (name) {
    case 'error':
      this.onError = cb || nullFunc;
      break;

    case 'startNode':
      this.onStartNode = cb || nullFunc;
      break;

    case 'endNode':
      this.onEndNode = cb || nullFunc;
      break;

    case 'textNode':
      this.onTextNode = cb || nullFunc;
      break;

    case 'cdata':
      this.onCDATA = cb || nullFunc;
      break;

    case 'comment':
      this.onComment = cb;
      this.is_onComment = !!cb;
      break;

    case 'question':
      this.onQuestion = cb;
      this.is_onQuestion = !!cb;
      break;
    // <? ....  ?>

    case 'attention':
      this.onAttention = cb;
      this.is_onAttention = !!cb;
      break;
    // <!XXXXX zzzz="eeee">
  }

  ;
};

EasySAXParser.prototype.ns = function (root, ns) {
  if (!root || typeof root !== 'string' || !ns) {
    return;
  }

  ;
  var u,
      x = {},
      ok,
      v,
      i;

  for (i in ns) {
    v = ns[i];

    if (typeof v === 'string') {
      if (root === v) ok = true;
      x[i] = v;
    }

    ;
  }

  ;

  if (ok) {
    this.isNamespace = true;
    this.default_xmlns = root;
    this.useNS = x;
  }

  ;
};

EasySAXParser.prototype.parse = function (xml) {
  if (typeof xml !== 'string') {
    return;
  }

  ;

  if (this.isNamespace) {
    this.nsmatrix = {
      xmlns: this.default_xmlns
    };
    parse(xml);
    this.nsmatrix = false;
  } else {
    parse(xml);
  }

  ;
  this.attr_res = true;
}; // -----------------------------------------------------


var xharsQuot = {
  constructor: false,
  hasOwnProperty: false,
  isPrototypeOf: false,
  propertyIsEnumerable: false,
  toLocaleString: false,
  toString: false,
  valueOf: false,
  quot: '"',
  QUOT: '"',
  amp: '&',
  AMP: '&',
  nbsp: '\u00A0',
  apos: '\'',
  lt: '<',
  LT: '<',
  gt: '>',
  GT: '>',
  copy: '\u00A9',
  laquo: '\u00AB',
  raquo: '\u00BB',
  reg: '\u00AE',
  deg: '\u00B0',
  plusmn: '\u00B1',
  sup2: '\u00B2',
  sup3: '\u00B3',
  micro: '\u00B5',
  para: '\u00B6'
};

function rpEntities(s, d, x, z) {
  if (z) {
    return xharsQuot[z] || '\x01';
  }

  ;

  if (d) {
    return String.fromCharCode(d);
  }

  ;
  return String.fromCharCode(parseInt(x, 16));
}

;

function unEntities(s, i) {
  s = String(s);

  if (s.length > 3 && s.indexOf('&') !== -1) {
    if (s.indexOf('&gt;') !== -1) s = s.replace(/&gt;/g, '>');
    if (s.indexOf('&lt;') !== -1) s = s.replace(/&lt;/g, '<');
    if (s.indexOf('&quot;') !== -1) s = s.replace(/&quot;/g, '"');

    if (s.indexOf('&') !== -1) {
      s = s.replace(/&#(\d+);|&#x([0123456789abcdef]+);|&(\w+);/ig, rpEntities);
    }

    ;
  }

  ;
  return s;
}

;

EasySAXParser.prototype.allowedAngularAttributeChars = function (w) {
  if (!this.angularSyntax) {
    return false;
  } else {
    return w === 40 || // (
    w === 41 || // )
    w === 91 || // [
    w === 93 || // ]
    w === 94 || // ^
    w === 35 // #
    ;
  }
};
/*
	парсит атрибуты по требованию. Важно! - функция не генерирует исключения.
		если была ошибка разбора возврашается false
	если атрибутов нет и разбор удачен то возврашается true
	если есть атрибуты то возврашается обьект(хеш)
*/


EasySAXParser.prototype.getAttrs = function () {
  if (this.attr_res !== null) {
    return this.attr_res;
  }

  ;
  /*
  if (xxtest !== u && attr_string.indexOf(xxtest) === -1) {
      / *
          // для ускорения
          if (getAttrs('html').type == 'html') {
              ...
          };
      * /
      return true;
  };
  */

  var u,
      res = {},
      s = this.attr_string,
      i = this.attr_posstart,
      l = s.length,
      attr_list = this.hasSurmiseNS ? [] : false,
      name,
      value = '',
      ok = false,
      noValueAttribute = false,
      j,
      w,
      nn,
      n,
      hasNewMatrix,
      alias,
      newalias;

  aa: for (; i < l; i++) {
    w = s.charCodeAt(i);

    if (w === 32 || w < 14 && w > 8) {
      // \f\n\r\t\v
      continue;
    }

    ; // Check for valid attribute start char

    if (w < 65 && !this.allowedAngularAttributeChars(w) || w > 122 || w > 90 && w < 97 && !this.allowedAngularAttributeChars(w)) {
      // ожидаем символ
      return this.attr_res = false; // error. invalid char
    }

    ;

    for (j = i + 1; j < l; j++) {
      // проверяем все символы имени атрибута
      w = s.charCodeAt(j);

      if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w === 46
      /* https://github.com/telerik/xPlatCore/issues/179 */
      ) {
          if (noValueAttribute) {
            j--; //Started next attribute. Get back and break out of the loop.

            break;
          } else {
            continue;
          }
        }

      ;

      if (this.allowedAngularAttributeChars(w)) {
        continue;
      }

      if (w === 32 || w > 8 && w < 14) {
        // \f\n\r\t\v пробел
        noValueAttribute = true;
        continue;
      } else if (w === 61) {
        // "=" == 61
        noValueAttribute = false;
        break;
      } else {
        //console.log('error 2');
        if (!noValueAttribute) return this.attr_res = false; // error. invalid char
      }

      ;
      break;
    }

    ;
    name = s.substring(i, j).trim();
    ok = true;

    if (name === 'xmlns:xmlns') {
      //console.log('error 6')
      return this.attr_res = false; // error. invalid name
    }

    ;
    w = s.charCodeAt(j + 1);

    while (w = s.charCodeAt(j + 1)) {
      if (w === 32 || w > 8 && w < 14) {
        // \f\n\r\t\v пробел
        j++;
      } else {
        break;
      }
    }

    if (!noValueAttribute) {
      if (w === 34) {
        // '"'
        j = s.indexOf('"', i = j + 2);
      } else {
        if (w === 39) {
          j = s.indexOf('\'', i = j + 2);
        } else {
          // "'"
          return this.attr_res = false; // error. invalid char
        }

        ;
      }

      ;
    }

    if (j === -1) {
      //console.log('error 4')
      return this.attr_res = false; // error. invalid char
    }

    ;

    if (j + 1 < l && !noValueAttribute) {
      w = s.charCodeAt(j + 1);

      if (w > 32 || w < 9 || w < 32 && w > 13) {
        // error. invalid char
        //console.log('error 5')
        return this.attr_res = false;
      }

      ;
    }

    ;

    if (noValueAttribute) {
      value = '';
    } else {
      value = s.substring(i, j);
    } //i = j + 1; // след. семвол уже проверен потому проверять нужно следуюший


    i = j; // след. семвол уже проверен потому проверять нужно следуюший

    if (this.isNamespace) {
      //
      if (this.hasSurmiseNS) {
        // есть подозрение что в атрибутах присутствует xmlns
        if (newalias = name === 'xmlns' ? 'xmlns' : name.charCodeAt(0) === 120 && name.substr(0, 6) === 'xmlns:' && name.substr(6)) {
          alias = this.useNS[unEntities(value)];

          if (alias) {
            if (this.nsmatrix[newalias] !== alias) {
              if (!hasNewMatrix) {
                hasNewMatrix = true;
                nn = {};

                for (n in this.nsmatrix) nn[n] = this.nsmatrix[n];

                this.nsmatrix = nn;
              }

              ;
              this.nsmatrix[newalias] = alias;
            }

            ;
          } else {
            if (this.nsmatrix[newalias]) {
              if (!hasNewMatrix) {
                hasNewMatrix = true;
                nn = {};

                for (n in this.nsmatrix) nn[n] = this.nsmatrix[n];

                this.nsmatrix = nn;
              }

              ;
              this.nsmatrix[newalias] = false;
            }

            ;
          }

          ;
          res[name] = value;
          continue;
        }

        ;
        attr_list.push(name, value);
        continue;
      }

      ;
      w = name.length;

      while (--w) {
        if (name.charCodeAt(w) === 58) {
          // ':'
          if (w = this.nsmatrix[name.substring(0, w)]) {
            res[w + name.substr(w)] = value;
          }

          ;
          continue aa; // 'xml:base' ???
        }

        ;
      }

      ;
    }

    ;
    res[name] = value;
    noValueAttribute = false;
  }

  ;

  if (!ok) {
    return this.attr_res = true; // атрибутов нет, ошибок тоже нет
  }

  ;

  if (this.hasSurmiseNS) {
    bb: for (i = 0, l = attr_list.length; i < l; i++) {
      name = attr_list[i++];
      w = name.length;

      while (--w) {
        // name.indexOf(':')
        if (name.charCodeAt(w) === 58) {
          // ':'
          if (w = this.nsmatrix[name.substring(0, w)]) {
            res[w + name.substr(w)] = attr_list[i];
          }

          ;
          continue bb;
          break;
        }

        ;
      }

      ;
      res[name] = attr_list[i];
    }

    ;
  }

  ;
  return this.attr_res = res;
}; // xml - string


EasySAXParser.prototype.parse = function (xml) {
  var u,
      xml = String(xml),
      nodestack = [],
      stacknsmatrix = [] //, string_node
  ,
      elem,
      tagend = false,
      tagstart = false,
      j = 0,
      i = 0,
      k = 0,
      len,
      x,
      y,
      q,
      w,
      xmlns,
      stopIndex = 0,
      stop // используется при разборе "namespace" . если встретился неизвестное пространство то события не генерируются
  ,
      _nsmatrix,
      ok,
      pos = 0,
      ln = 0,
      lnStart = -2,
      lnEnd = -1;

  len = xml.length;

  function getStringNode() {
    return xml.substring(i, j + 1);
  }

  ;

  function findLineAndColumnFromPos() {
    while (lnStart < lnEnd && lnEnd < pos) {
      lnStart = lnEnd;
      lnEnd = xml.indexOf("\n", lnEnd + 1);
      ++ln;
    }

    return {
      line: ln,
      column: pos - lnStart
    };
  }

  function position(p) {
    pos = p;
    return findLineAndColumnFromPos;
  }

  while (j !== -1) {
    stop = stopIndex > 0;

    if (xml.charCodeAt(j) === 60) {
      // "<"
      i = j;
    } else {
      i = xml.indexOf('<', j);
    }

    ;

    if (i === -1) {
      // конец разбора
      if (nodestack.length) {
        this.onError('end file', position(j));
        return;
      }

      ;
      return;
    }

    ;

    if (j !== i && !stop) {
      ok = this.onTextNode(xml.substring(j, i), unEntities, position(j));
      if (ok === false) return;
    }

    ;
    w = xml.charCodeAt(i + 1);

    if (w === 33) {
      // "!"
      w = xml.charCodeAt(i + 2);

      if (w === 91 && xml.substr(i + 3, 6) === 'CDATA[') {
        // 91 == "["
        j = xml.indexOf(']]>', i);

        if (j === -1) {
          this.onError('cdata', position(i));
          return;
        }

        ; //x = xml.substring(i+9, j);

        if (!stop) {
          ok = this.onCDATA(xml.substring(i + 9, j), false, position(i));
          if (ok === false) return;
        }

        ;
        j += 3;
        continue;
      }

      ;

      if (w === 45 && xml.charCodeAt(i + 3) === 45) {
        // 45 == "-"
        j = xml.indexOf('-->', i);

        if (j === -1) {
          this.onError('expected -->', position(i));
          return;
        }

        ;

        if (this.is_onComment && !stop) {
          ok = this.onComment(xml.substring(i + 4, j), unEntities, position(i));
          if (ok === false) return;
        }

        ;
        j += 3;
        continue;
      }

      ;
      j = xml.indexOf('>', i + 1);

      if (j === -1) {
        this.onError('expected ">"', position(i + 1));
        return;
      }

      ;

      if (this.is_onAttention && !stop) {
        ok = this.onAttention(xml.substring(i, j + 1), unEntities, position(i));
        if (ok === false) return;
      }

      ;
      j += 1;
      continue;
    } else {
      if (w === 63) {
        // "?"
        j = xml.indexOf('?>', i);

        if (j === -1) {
          // error
          this.onError('...?>', position(i));
          return;
        }

        ;

        if (this.is_onQuestion) {
          ok = this.onQuestion(xml.substring(i, j + 2), position(i));
          if (ok === false) return;
        }

        ;
        j += 2;
        continue;
      }

      ;
    }

    ;
    var inside = false;

    for (k = i, j = -1; k < len; k++) {
      var c = xml.charCodeAt(k);

      if (!inside) {
        if (c === 34) {
          // '"'
          inside = c;
        } else if (c === 39) {
          // "'"
          inside = c;
        } else if (c === 62) {
          // <
          j = k;
          break;
        }
      } else {
        if (c === inside) {
          inside = false;
        }
      }
    }

    if (j == -1) {
      // error
      this.onError('...>', position(i + 1));
      return;
    }

    ;
    this.attr_res = true; // атрибутов нет
    //if (xml.charCodeAt(i+1) === 47) { // </...

    if (w === 47) {
      // </...
      tagstart = false;
      tagend = true; // проверяем что должен быть закрыт тотже тег что и открывался

      x = elem = nodestack.pop();
      q = i + 2 + x.length; //console.log()

      if (xml.substring(i + 2, q) !== x) {
        this.onError('close tagname', position(i + 2));
        return;
      }

      ; // проверим что в закрываюшем теге нет лишнего

      for (; q < j; q++) {
        w = xml.charCodeAt(q);

        if (w === 32 || w > 8 && w < 14) {
          // \f\n\r\t\v пробел
          continue;
        }

        ;
        this.onError('close tag', position(i + 2));
        return;
      }

      ;
    } else {
      if (xml.charCodeAt(j - 1) === 47) {
        // .../>
        x = elem = xml.substring(i + 1, j - 1);
        tagstart = true;
        tagend = true;
      } else {
        x = elem = xml.substring(i + 1, j);
        tagstart = true;
        tagend = false;
      }

      ;

      if (!(w > 96 && w < 123 || w > 64 && w < 91)) {
        this.onError('first char nodeName', position(i + 1));
        return;
      }

      ;

      for (q = 1, y = x.length; q < y; q++) {
        w = x.charCodeAt(q);

        if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w === 46
        /* https://github.com/telerik/xPlatCore/issues/179 */
        ) {
            continue;
          }

        ;

        if (w === 32 || w < 14 && w > 8) {
          // \f\n\r\t\v пробел
          elem = x.substring(0, q);
          this.attr_res = null; // возможно есть атирибуты

          break;
        }

        ;
        this.onError('invalid nodeName', position(i + 1));
        return;
      }

      ;

      if (!tagend) {
        nodestack.push(elem);
      }

      ;
    }

    ;

    if (this.isNamespace) {
      if (stop) {
        if (tagend) {
          if (!tagstart) {
            if (--stopIndex === 0) {
              this.nsmatrix = stacknsmatrix.pop();
            }

            ;
          }

          ;
        } else {
          stopIndex += 1;
        }

        ;
        j += 1;
        continue;
      }

      ;
      _nsmatrix = this.nsmatrix;

      if (!tagend) {
        stacknsmatrix.push(this.nsmatrix);

        if (this.attr_res !== true) {
          if (this.hasSurmiseNS = x.indexOf('xmlns', q) !== -1) {
            this.attr_string = x;
            this.attr_posstart = q;
            this.getAttrs();
            this.hasSurmiseNS = false;
          }

          ;
        }

        ;
      }

      ;
      w = elem.indexOf(':');

      if (w !== -1) {
        xmlns = this.nsmatrix[elem.substring(0, w)];
        elem = elem.substr(w + 1);
      } else {
        xmlns = this.nsmatrix.xmlns;
      }

      ;

      if (!xmlns) {
        if (tagend) {
          if (tagstart) {
            this.nsmatrix = _nsmatrix;
          } else {
            this.nsmatrix = stacknsmatrix.pop();
          }

          ;
        } else {
          stopIndex = 1; // первый элемент для которого не определено пространство имен

          this.attr_res = true;
        }

        ;
        j += 1;
        continue;
      }

      ;
      elem = xmlns + ':' + elem;
    }

    ; //string_node = xml.substring(i, j+1); // текст ноды как есть

    if (tagstart) {
      // is_onStartNode
      this.attr_string = x;
      this.attr_posstart = q;
      var that = this;
      ok = this.onStartNode(elem, function () {
        return that.getAttrs();
      }, unEntities, tagend, getStringNode, position(i));

      if (ok === false) {
        return;
      }

      ;
      this.attr_res = true;
    }

    ;

    if (tagend) {
      ok = this.onEndNode(elem, unEntities, tagstart, getStringNode, position(i));

      if (ok === false) {
        return;
      }

      ;

      if (this.isNamespace) {
        if (tagstart) {
          this.nsmatrix = _nsmatrix;
        } else {
          this.nsmatrix = stacknsmatrix.pop();
        }

        ;
      }

      ;
    }

    ;
    j += 1;
  }

  ;
};

/***/ }),

/***/ "../node_modules/tns-core-modules/js-libs/esprima/esprima.js":
/***/ (function(module, exports) {

/*
  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
(function (global) {
  'use strict';

  var Token, TokenName, Syntax, Messages, source, index, length, delegate, lookahead, state;
  Token = {
    BooleanLiteral: 1,
    EOF: 2,
    Identifier: 3,
    Keyword: 4,
    NullLiteral: 5,
    NumericLiteral: 6,
    Punctuator: 7,
    StringLiteral: 8
  };
  TokenName = {};
  TokenName[Token.BooleanLiteral] = 'Boolean';
  TokenName[Token.EOF] = '<end>';
  TokenName[Token.Identifier] = 'Identifier';
  TokenName[Token.Keyword] = 'Keyword';
  TokenName[Token.NullLiteral] = 'Null';
  TokenName[Token.NumericLiteral] = 'Numeric';
  TokenName[Token.Punctuator] = 'Punctuator';
  TokenName[Token.StringLiteral] = 'String';
  Syntax = {
    ArrayExpression: 'ArrayExpression',
    BinaryExpression: 'BinaryExpression',
    CallExpression: 'CallExpression',
    ConditionalExpression: 'ConditionalExpression',
    EmptyStatement: 'EmptyStatement',
    ExpressionStatement: 'ExpressionStatement',
    Identifier: 'Identifier',
    Literal: 'Literal',
    LabeledStatement: 'LabeledStatement',
    LogicalExpression: 'LogicalExpression',
    MemberExpression: 'MemberExpression',
    ObjectExpression: 'ObjectExpression',
    Program: 'Program',
    Property: 'Property',
    ThisExpression: 'ThisExpression',
    UnaryExpression: 'UnaryExpression'
  }; // Error messages should be identical to V8.

  Messages = {
    UnexpectedToken: 'Unexpected token %0',
    UnknownLabel: 'Undefined label \'%0\'',
    Redeclaration: '%0 \'%1\' has already been declared'
  }; // Ensure the condition is true, otherwise throw an error.
  // This is only to have a better contract semantic, i.e. another safety net
  // to catch a logic error. The condition shall be fulfilled in normal case.
  // Do NOT use this to enforce a certain condition on any user input.

  function assert(condition, message) {
    if (!condition) {
      throw new Error('ASSERT: ' + message);
    }
  }

  function isDecimalDigit(ch) {
    return ch >= 48 && ch <= 57; // 0..9
  } // 7.2 White Space


  function isWhiteSpace(ch) {
    return ch === 32 || // space
    ch === 9 || // tab
    ch === 0xB || ch === 0xC || ch === 0xA0 || ch >= 0x1680 && '\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\uFEFF'.indexOf(String.fromCharCode(ch)) > 0;
  } // 7.3 Line Terminators


  function isLineTerminator(ch) {
    return ch === 10 || ch === 13 || ch === 0x2028 || ch === 0x2029;
  } // 7.6 Identifier Names and Identifiers


  function isIdentifierStart(ch) {
    return ch === 36 || ch === 95 || // $ (dollar) and _ (underscore)
    ch >= 65 && ch <= 90 || // A..Z
    ch >= 97 && ch <= 122; // a..z
  }

  function isIdentifierPart(ch) {
    return ch === 36 || ch === 95 || // $ (dollar) and _ (underscore)
    ch >= 65 && ch <= 90 || // A..Z
    ch >= 97 && ch <= 122 || // a..z
    ch >= 48 && ch <= 57; // 0..9
  } // 7.6.1.1 Keywords


  function isKeyword(id) {
    return id === 'this';
  } // 7.4 Comments


  function skipWhitespace() {
    while (index < length && isWhiteSpace(source.charCodeAt(index))) {
      ++index;
    }
  }

  function getIdentifier() {
    var start, ch;
    start = index++;

    while (index < length) {
      ch = source.charCodeAt(index);

      if (isIdentifierPart(ch)) {
        ++index;
      } else {
        break;
      }
    }

    return source.slice(start, index);
  }

  function scanIdentifier() {
    var start, id, type;
    start = index;
    id = getIdentifier(); // There is no keyword or literal with only one character.
    // Thus, it must be an identifier.

    if (id.length === 1) {
      type = Token.Identifier;
    } else if (isKeyword(id)) {
      type = Token.Keyword;
    } else if (id === 'null') {
      type = Token.NullLiteral;
    } else if (id === 'true' || id === 'false') {
      type = Token.BooleanLiteral;
    } else {
      type = Token.Identifier;
    }

    return {
      type: type,
      value: id,
      range: [start, index]
    };
  } // 7.7 Punctuators


  function scanPunctuator() {
    var start = index,
        code = source.charCodeAt(index),
        code2,
        ch1 = source[index],
        ch2;

    switch (code) {
      // Check for most common single-character punctuators.
      case 46: // . dot

      case 40: // ( open bracket

      case 41: // ) close bracket

      case 59: // ; semicolon

      case 44: // , comma

      case 123: // { open curly brace

      case 125: // } close curly brace

      case 91: // [

      case 93: // ]

      case 58: // :

      case 63:
        // ?
        ++index;
        return {
          type: Token.Punctuator,
          value: String.fromCharCode(code),
          range: [start, index]
        };

      default:
        code2 = source.charCodeAt(index + 1); // '=' (char #61) marks an assignment or comparison operator.

        if (code2 === 61) {
          switch (code) {
            case 37: // %

            case 38: // &

            case 42: // *:

            case 43: // +

            case 45: // -

            case 47: // /

            case 60: // <

            case 62: // >

            case 124:
              // |
              index += 2;
              return {
                type: Token.Punctuator,
                value: String.fromCharCode(code) + String.fromCharCode(code2),
                range: [start, index]
              };

            case 33: // !

            case 61:
              // =
              index += 2; // !== and ===

              if (source.charCodeAt(index) === 61) {
                ++index;
              }

              return {
                type: Token.Punctuator,
                value: source.slice(start, index),
                range: [start, index]
              };

            default:
              break;
          }
        }

        break;
    } // Peek more characters.


    ch2 = source[index + 1]; // Other 2-character punctuators: && ||

    if (ch1 === ch2 && '&|'.indexOf(ch1) >= 0) {
      index += 2;
      return {
        type: Token.Punctuator,
        value: ch1 + ch2,
        range: [start, index]
      };
    }

    if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {
      ++index;
      return {
        type: Token.Punctuator,
        value: ch1,
        range: [start, index]
      };
    }

    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
  } // 7.8.3 Numeric Literals


  function scanNumericLiteral() {
    var number, start, ch;
    ch = source[index];
    assert(isDecimalDigit(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');
    start = index;
    number = '';

    if (ch !== '.') {
      number = source[index++];
      ch = source[index]; // Hex number starts with '0x'.
      // Octal number starts with '0'.

      if (number === '0') {
        // decimal number starts with '0' such as '09' is illegal.
        if (ch && isDecimalDigit(ch.charCodeAt(0))) {
          throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }
      }

      while (isDecimalDigit(source.charCodeAt(index))) {
        number += source[index++];
      }

      ch = source[index];
    }

    if (ch === '.') {
      number += source[index++];

      while (isDecimalDigit(source.charCodeAt(index))) {
        number += source[index++];
      }

      ch = source[index];
    }

    if (ch === 'e' || ch === 'E') {
      number += source[index++];
      ch = source[index];

      if (ch === '+' || ch === '-') {
        number += source[index++];
      }

      if (isDecimalDigit(source.charCodeAt(index))) {
        while (isDecimalDigit(source.charCodeAt(index))) {
          number += source[index++];
        }
      } else {
        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
      }
    }

    if (isIdentifierStart(source.charCodeAt(index))) {
      throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
    }

    return {
      type: Token.NumericLiteral,
      value: parseFloat(number),
      range: [start, index]
    };
  } // 7.8.4 String Literals


  function scanStringLiteral() {
    var str = '',
        quote,
        start,
        ch,
        octal = false;
    quote = source[index];
    assert(quote === '\'' || quote === '"', 'String literal must starts with a quote');
    start = index;
    ++index;

    while (index < length) {
      ch = source[index++];

      if (ch === quote) {
        quote = '';
        break;
      } else if (ch === '\\') {
        ch = source[index++];

        if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
          switch (ch) {
            case 'n':
              str += '\n';
              break;

            case 'r':
              str += '\r';
              break;

            case 't':
              str += '\t';
              break;

            case 'b':
              str += '\b';
              break;

            case 'f':
              str += '\f';
              break;

            case 'v':
              str += '\x0B';
              break;

            default:
              str += ch;
              break;
          }
        } else {
          if (ch === '\r' && source[index] === '\n') {
            ++index;
          }
        }
      } else if (isLineTerminator(ch.charCodeAt(0))) {
        break;
      } else {
        str += ch;
      }
    }

    if (quote !== '') {
      throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
    }

    return {
      type: Token.StringLiteral,
      value: str,
      octal: octal,
      range: [start, index]
    };
  }

  function isIdentifierName(token) {
    return token.type === Token.Identifier || token.type === Token.Keyword || token.type === Token.BooleanLiteral || token.type === Token.NullLiteral;
  }

  function advance() {
    var ch;
    skipWhitespace();

    if (index >= length) {
      return {
        type: Token.EOF,
        range: [index, index]
      };
    }

    ch = source.charCodeAt(index); // Very common: ( and ) and ;

    if (ch === 40 || ch === 41 || ch === 58) {
      return scanPunctuator();
    } // String literal starts with single quote (#39) or double quote (#34).


    if (ch === 39 || ch === 34) {
      return scanStringLiteral();
    }

    if (isIdentifierStart(ch)) {
      return scanIdentifier();
    } // Dot (.) char #46 can also start a floating-point number, hence the need
    // to check the next character.


    if (ch === 46) {
      if (isDecimalDigit(source.charCodeAt(index + 1))) {
        return scanNumericLiteral();
      }

      return scanPunctuator();
    }

    if (isDecimalDigit(ch)) {
      return scanNumericLiteral();
    }

    return scanPunctuator();
  }

  function lex() {
    var token;
    token = lookahead;
    index = token.range[1];
    lookahead = advance();
    index = token.range[1];
    return token;
  }

  function peek() {
    var pos;
    pos = index;
    lookahead = advance();
    index = pos;
  } // Throw an exception


  function throwError(token, messageFormat) {
    var error,
        args = Array.prototype.slice.call(arguments, 2),
        msg = messageFormat.replace(/%(\d)/g, function (whole, index) {
      assert(index < args.length, 'Message reference must be in range');
      return args[index];
    });
    error = new Error(msg);
    error.index = index;
    error.description = msg;
    throw error;
  } // Throw an exception because of the token.


  function throwUnexpected(token) {
    throwError(token, Messages.UnexpectedToken, token.value);
  } // Expect the next token to match the specified punctuator.
  // If not, an exception will be thrown.


  function expect(value) {
    var token = lex();

    if (token.type !== Token.Punctuator || token.value !== value) {
      throwUnexpected(token);
    }
  } // Return true if the next token matches the specified punctuator.


  function match(value) {
    return lookahead.type === Token.Punctuator && lookahead.value === value;
  } // Return true if the next token matches the specified keyword


  function matchKeyword(keyword) {
    return lookahead.type === Token.Keyword && lookahead.value === keyword;
  }

  function consumeSemicolon() {
    // Catch the very common case first: immediately a semicolon (char #59).
    if (source.charCodeAt(index) === 59) {
      lex();
      return;
    }

    skipWhitespace();

    if (match(';')) {
      lex();
      return;
    }

    if (lookahead.type !== Token.EOF && !match('}')) {
      throwUnexpected(lookahead);
    }
  } // 11.1.4 Array Initialiser


  function parseArrayInitialiser() {
    var elements = [];
    expect('[');

    while (!match(']')) {
      if (match(',')) {
        lex();
        elements.push(null);
      } else {
        elements.push(parseExpression());

        if (!match(']')) {
          expect(',');
        }
      }
    }

    expect(']');
    return delegate.createArrayExpression(elements);
  } // 11.1.5 Object Initialiser


  function parseObjectPropertyKey() {
    var token;
    skipWhitespace();
    token = lex(); // Note: This function is called only from parseObjectProperty(), where
    // EOF and Punctuator tokens are already filtered out.

    if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {
      return delegate.createLiteral(token);
    }

    return delegate.createIdentifier(token.value);
  }

  function parseObjectProperty() {
    var token, key;
    token = lookahead;
    skipWhitespace();

    if (token.type === Token.EOF || token.type === Token.Punctuator) {
      throwUnexpected(token);
    }

    key = parseObjectPropertyKey();
    expect(':');
    return delegate.createProperty('init', key, parseExpression());
  }

  function parseObjectInitialiser() {
    var properties = [];
    expect('{');

    while (!match('}')) {
      properties.push(parseObjectProperty());

      if (!match('}')) {
        expect(',');
      }
    }

    expect('}');
    return delegate.createObjectExpression(properties);
  } // 11.1.6 The Grouping Operator


  function parseGroupExpression() {
    var expr;
    expect('(');
    expr = parseExpression();
    expect(')');
    return expr;
  } // 11.1 Primary Expressions


  function parsePrimaryExpression() {
    var type, token, expr;

    if (match('(')) {
      return parseGroupExpression();
    }

    type = lookahead.type;

    if (type === Token.Identifier) {
      expr = delegate.createIdentifier(lex().value);
    } else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
      expr = delegate.createLiteral(lex());
    } else if (type === Token.Keyword) {
      if (matchKeyword('this')) {
        lex();
        expr = delegate.createThisExpression();
      }
    } else if (type === Token.BooleanLiteral) {
      token = lex();
      token.value = token.value === 'true';
      expr = delegate.createLiteral(token);
    } else if (type === Token.NullLiteral) {
      token = lex();
      token.value = null;
      expr = delegate.createLiteral(token);
    } else if (match('[')) {
      expr = parseArrayInitialiser();
    } else if (match('{')) {
      expr = parseObjectInitialiser();
    }

    if (expr) {
      return expr;
    }

    throwUnexpected(lex());
  } // 11.2 Left-Hand-Side Expressions


  function parseArguments() {
    var args = [];
    expect('(');

    if (!match(')')) {
      while (index < length) {
        args.push(parseExpression());

        if (match(')')) {
          break;
        }

        expect(',');
      }
    }

    expect(')');
    return args;
  }

  function parseNonComputedProperty() {
    var token;
    token = lex();

    if (!isIdentifierName(token)) {
      throwUnexpected(token);
    }

    return delegate.createIdentifier(token.value);
  }

  function parseNonComputedMember() {
    expect('.');
    return parseNonComputedProperty();
  }

  function parseComputedMember() {
    var expr;
    expect('[');
    expr = parseExpression();
    expect(']');
    return expr;
  }

  function parseLeftHandSideExpression() {
    var expr, args, property;
    expr = parsePrimaryExpression();

    while (true) {
      if (match('[')) {
        property = parseComputedMember();
        expr = delegate.createMemberExpression('[', expr, property);
      } else if (match('.')) {
        property = parseNonComputedMember();
        expr = delegate.createMemberExpression('.', expr, property);
      } else if (match('(')) {
        args = parseArguments();
        expr = delegate.createCallExpression(expr, args);
      } else {
        break;
      }
    }

    return expr;
  } // 11.3 Postfix Expressions


  var parsePostfixExpression = parseLeftHandSideExpression; // 11.4 Unary Operators

  function parseUnaryExpression() {
    var token, expr;

    if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
      expr = parsePostfixExpression();
    } else if (match('+') || match('-') || match('!')) {
      token = lex();
      expr = parseUnaryExpression();
      expr = delegate.createUnaryExpression(token.value, expr);
    } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
      throwError({}, Messages.UnexpectedToken);
    } else {
      expr = parsePostfixExpression();
    }

    return expr;
  }

  function binaryPrecedence(token) {
    var prec = 0;

    if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
      return 0;
    }

    switch (token.value) {
      case '||':
        prec = 1;
        break;

      case '&&':
        prec = 2;
        break;

      case '==':
      case '!=':
      case '===':
      case '!==':
        prec = 6;
        break;

      case '<':
      case '>':
      case '<=':
      case '>=':
      case 'instanceof':
        prec = 7;
        break;

      case 'in':
        prec = 7;
        break;

      case '+':
      case '-':
        prec = 9;
        break;

      case '*':
      case '/':
      case '%':
        prec = 11;
        break;

      default:
        break;
    }

    return prec;
  } // 11.5 Multiplicative Operators
  // 11.6 Additive Operators
  // 11.7 Bitwise Shift Operators
  // 11.8 Relational Operators
  // 11.9 Equality Operators
  // 11.10 Binary Bitwise Operators
  // 11.11 Binary Logical Operators


  function parseBinaryExpression() {
    var expr, token, prec, stack, right, operator, left, i;
    left = parseUnaryExpression();
    token = lookahead;
    prec = binaryPrecedence(token);

    if (prec === 0) {
      return left;
    }

    token.prec = prec;
    lex();
    right = parseUnaryExpression();
    stack = [left, token, right];

    while ((prec = binaryPrecedence(lookahead)) > 0) {
      // Reduce: make a binary expression from the three topmost entries.
      while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {
        right = stack.pop();
        operator = stack.pop().value;
        left = stack.pop();
        expr = delegate.createBinaryExpression(operator, left, right);
        stack.push(expr);
      } // Shift.


      token = lex();
      token.prec = prec;
      stack.push(token);
      expr = parseUnaryExpression();
      stack.push(expr);
    } // Final reduce to clean-up the stack.


    i = stack.length - 1;
    expr = stack[i];

    while (i > 1) {
      expr = delegate.createBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
      i -= 2;
    }

    return expr;
  } // 11.12 Conditional Operator


  function parseConditionalExpression() {
    var expr, consequent, alternate;
    expr = parseBinaryExpression();

    if (match('?')) {
      lex();
      consequent = parseConditionalExpression();
      expect(':');
      alternate = parseConditionalExpression();
      expr = delegate.createConditionalExpression(expr, consequent, alternate);
    }

    return expr;
  } // Simplification since we do not support AssignmentExpression.


  var parseExpression = parseConditionalExpression; // Polymer Syntax extensions
  // Filter ::
  //   Identifier
  //   Identifier "(" ")"
  //   Identifier "(" FilterArguments ")"

  function parseFilter() {
    var identifier, args;
    identifier = lex();

    if (identifier.type !== Token.Identifier) {
      throwUnexpected(identifier);
    }

    args = match('(') ? parseArguments() : [];
    return delegate.createFilter(identifier.value, args);
  } // Filters ::
  //   "|" Filter
  //   Filters "|" Filter


  function parseFilters() {
    while (match('|')) {
      lex();
      parseFilter();
    }
  } // TopLevel ::
  //   LabelledExpressions
  //   AsExpression
  //   InExpression
  //   FilterExpression
  // AsExpression ::
  //   FilterExpression as Identifier
  // InExpression ::
  //   Identifier, Identifier in FilterExpression
  //   Identifier in FilterExpression
  // FilterExpression ::
  //   Expression
  //   Expression Filters


  function parseTopLevel() {
    skipWhitespace();
    peek();
    var expr = parseExpression();

    if (expr) {
      if (lookahead.value === ',' || lookahead.value == 'in' && expr.type === Syntax.Identifier) {
        parseInExpression(expr);
      } else {
        parseFilters();

        if (lookahead.value === 'as') {
          parseAsExpression(expr);
        } else {
          delegate.createTopLevel(expr);
        }
      }
    }

    if (lookahead.type !== Token.EOF) {
      throwUnexpected(lookahead);
    }
  }

  function parseAsExpression(expr) {
    lex(); // as

    var identifier = lex().value;
    delegate.createAsExpression(expr, identifier);
  }

  function parseInExpression(identifier) {
    var indexName;

    if (lookahead.value === ',') {
      lex();
      if (lookahead.type !== Token.Identifier) throwUnexpected(lookahead);
      indexName = lex().value;
    }

    lex(); // in

    var expr = parseExpression();
    parseFilters();
    delegate.createInExpression(identifier.name, indexName, expr);
  }

  function parse(code, inDelegate) {
    delegate = inDelegate;
    source = code;
    index = 0;
    length = source.length;
    lookahead = null;
    state = {
      labelSet: {}
    };
    return parseTopLevel();
  }

  global.esprima = {
    parse: parse
  };
})(module.exports);

/***/ }),

/***/ "../node_modules/tns-core-modules/js-libs/polymer-expressions/path-parser.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
 */


function detectEval() {
  // Don't test for eval if we're running in a Chrome App environment.
  // We check for APIs set that only exist in a Chrome App context.
  if (typeof chrome !== 'undefined' && chrome.app && chrome.app.runtime) {
    return false;
  } // Firefox OS Apps do not allow eval. This feature detection is very hacky
  // but even if some other platform adds support for this function this code
  // will continue to work.


  if (typeof navigator != 'undefined' && navigator.getDeviceStorage) {
    return false;
  }

  try {
    var f = new Function('', 'return true;');
    return f();
  } catch (ex) {
    return false;
  }
}

var hasEval = detectEval();

function isIndex(s) {
  return +s === s >>> 0 && s !== '';
}

function toNumber(s) {
  return +s;
}

function isObject(obj) {
  return obj === Object(obj);
}

var numberIsNaN = Number.isNaN || function (value) {
  return typeof value === 'number' && isNaN(value);
};

function areSameValue(left, right) {
  if (left === right) return left !== 0 || 1 / left === 1 / right;
  if (numberIsNaN(left) && numberIsNaN(right)) return true;
  return left !== left && right !== right;
}

var createObject = '__proto__' in {} ? function (obj) {
  return obj;
} : function (obj) {
  var proto = obj.__proto__;
  if (!proto) return obj;
  var newObject = Object.create(proto);
  Object.getOwnPropertyNames(obj).forEach(function (name) {
    Object.defineProperty(newObject, name, Object.getOwnPropertyDescriptor(obj, name));
  });
  return newObject;
};
var identStart = '[\$_a-zA-Z]';
var identPart = '[\$_a-zA-Z0-9]';
var identRegExp = new RegExp('^' + identStart + '+' + identPart + '*' + '$');

function getPathCharType(char) {
  if (char === undefined) return 'eof';
  var code = char.charCodeAt(0);

  switch (code) {
    case 0x5B: // [

    case 0x5D: // ]

    case 0x2E: // .

    case 0x22: // "

    case 0x27: // '

    case 0x30:
      // 0
      return char;

    case 0x5F: // _

    case 0x24:
      // $
      return 'ident';

    case 0x20: // Space

    case 0x09: // Tab

    case 0x0A: // Newline

    case 0x0D: // Return

    case 0xA0: // No-break space

    case 0xFEFF: // Byte Order Mark

    case 0x2028: // Line Separator

    case 0x2029:
      // Paragraph Separator
      return 'ws';
  } // a-z, A-Z


  if (0x61 <= code && code <= 0x7A || 0x41 <= code && code <= 0x5A) return 'ident'; // 1-9

  if (0x31 <= code && code <= 0x39) return 'number';
  return 'else';
}

var pathStateMachine = {
  'beforePath': {
    'ws': ['beforePath'],
    'ident': ['inIdent', 'append'],
    '[': ['beforeElement'],
    'eof': ['afterPath']
  },
  'inPath': {
    'ws': ['inPath'],
    '.': ['beforeIdent'],
    '[': ['beforeElement'],
    'eof': ['afterPath']
  },
  'beforeIdent': {
    'ws': ['beforeIdent'],
    'ident': ['inIdent', 'append']
  },
  'inIdent': {
    'ident': ['inIdent', 'append'],
    '0': ['inIdent', 'append'],
    'number': ['inIdent', 'append'],
    'ws': ['inPath', 'push'],
    '.': ['beforeIdent', 'push'],
    '[': ['beforeElement', 'push'],
    'eof': ['afterPath', 'push']
  },
  'beforeElement': {
    'ws': ['beforeElement'],
    '0': ['afterZero', 'append'],
    'number': ['inIndex', 'append'],
    "'": ['inSingleQuote', 'append', ''],
    '"': ['inDoubleQuote', 'append', '']
  },
  'afterZero': {
    'ws': ['afterElement', 'push'],
    ']': ['inPath', 'push']
  },
  'inIndex': {
    '0': ['inIndex', 'append'],
    'number': ['inIndex', 'append'],
    'ws': ['afterElement'],
    ']': ['inPath', 'push']
  },
  'inSingleQuote': {
    "'": ['afterElement'],
    'eof': ['error'],
    'else': ['inSingleQuote', 'append']
  },
  'inDoubleQuote': {
    '"': ['afterElement'],
    'eof': ['error'],
    'else': ['inDoubleQuote', 'append']
  },
  'afterElement': {
    'ws': ['afterElement'],
    ']': ['inPath', 'push']
  }
};

function noop() {}

function parsePath(path) {
  var keys = [];
  var index = -1;
  var c,
      newChar,
      key,
      type,
      transition,
      action,
      typeMap,
      mode = 'beforePath';
  var actions = {
    push: function push() {
      if (key === undefined) return;
      keys.push(key);
      key = undefined;
    },
    append: function append() {
      if (key === undefined) key = newChar;else key += newChar;
    }
  };

  function maybeUnescapeQuote() {
    if (index >= path.length) return;
    var nextChar = path[index + 1];

    if (mode == 'inSingleQuote' && nextChar == "'" || mode == 'inDoubleQuote' && nextChar == '"') {
      index++;
      newChar = nextChar;
      actions.append();
      return true;
    }
  }

  while (mode) {
    index++;
    c = path[index];
    if (c == '\\' && maybeUnescapeQuote(mode)) continue;
    type = getPathCharType(c);
    typeMap = pathStateMachine[mode];
    transition = typeMap[type] || typeMap['else'] || 'error';
    if (transition == 'error') return; // parse error;

    mode = transition[0];
    action = actions[transition[1]] || noop;
    newChar = transition[2] === undefined ? c : transition[2];
    action();

    if (mode === 'afterPath') {
      return keys;
    }
  }

  return; // parse error
}

function isIdent(s) {
  return identRegExp.test(s);
}

var constructorIsPrivate = {};

function Path(parts, privateToken) {
  if (privateToken !== constructorIsPrivate) throw Error('Use Path.get to retrieve path objects');

  for (var i = 0; i < parts.length; i++) {
    this.push(String(parts[i]));
  }

  if (hasEval && this.length) {
    this.getValueFrom = this.compiledGetValueFromFn();
  }
} // TODO(rafaelw): Make simple LRU cache


var pathCache = {};

function getPath(pathString) {
  if (pathString instanceof Path) return pathString;
  if (pathString == null || pathString.length == 0) pathString = '';

  if (typeof pathString != 'string') {
    if (isIndex(pathString.length)) {
      // Constructed with array-like (pre-parsed) keys
      return new Path(pathString, constructorIsPrivate);
    }

    pathString = String(pathString);
  }

  var path = pathCache[pathString];
  if (path) return path;
  var parts = parsePath(pathString);
  if (!parts) return invalidPath;
  var path = new Path(parts, constructorIsPrivate);
  pathCache[pathString] = path;
  return path;
}

Path.get = getPath;

function formatAccessor(key) {
  if (isIndex(key)) {
    return '[' + key + ']';
  } else {
    return '["' + key.replace(/"/g, '\\"') + '"]';
  }
}

Path.prototype = createObject({
  __proto__: [],
  valid: true,
  toString: function toString() {
    var pathString = '';

    for (var i = 0; i < this.length; i++) {
      var key = this[i];

      if (isIdent(key)) {
        pathString += i ? '.' + key : key;
      } else {
        pathString += formatAccessor(key);
      }
    }

    return pathString;
  },
  getValueFrom: function getValueFrom(obj, directObserver) {
    for (var i = 0; i < this.length; i++) {
      if (obj == null) return;
      obj = obj[this[i]];
    }

    return obj;
  },
  iterateObjects: function iterateObjects(obj, observe) {
    for (var i = 0; i < this.length; i++) {
      if (i) obj = obj[this[i - 1]];
      if (!isObject(obj)) return;
      observe(obj, this[i]);
    }
  },
  compiledGetValueFromFn: function compiledGetValueFromFn() {
    var str = '';
    var pathString = 'obj';
    str += 'if (obj != null';
    var i = 0;
    var key;

    for (; i < this.length - 1; i++) {
      key = this[i];
      pathString += isIdent(key) ? '.' + key : formatAccessor(key);
      str += ' &&\n     ' + pathString + ' != null';
    }

    str += ')\n';
    var key = this[i];
    pathString += isIdent(key) ? '.' + key : formatAccessor(key);
    str += '  return ' + pathString + ';\nelse\n  return undefined;';
    return new Function('obj', str);
  },
  setValueFrom: function setValueFrom(obj, value) {
    if (!this.length) return false;

    for (var i = 0; i < this.length - 1; i++) {
      if (!isObject(obj)) return false;
      obj = obj[this[i]];
    }

    if (!isObject(obj)) return false;
    obj[this[i]] = value;
    return true;
  }
});
var invalidPath = new Path('', constructorIsPrivate);
invalidPath.valid = false;

invalidPath.getValueFrom = invalidPath.setValueFrom = function () {};

exports.Path = Path;

/***/ }),

/***/ "../node_modules/tns-core-modules/js-libs/polymer-expressions/polymer-expressions.js":
/***/ (function(module, exports, __webpack_require__) {

// Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
// This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
// The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
// The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
// Code distributed by Google as part of the polymer project is also
// subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
var esprima = __webpack_require__("../node_modules/tns-core-modules/js-libs/esprima/esprima.js").esprima;

var Path = __webpack_require__("../node_modules/tns-core-modules/js-libs/polymer-expressions/path-parser.js").Path;

(function (global) {
  'use strict'; // TODO(rafaelw): Implement simple LRU.

  var expressionParseCache = Object.create(null);

  function getExpression(expressionText) {
    var expression = expressionParseCache[expressionText];

    if (!expression) {
      var delegate = new ASTDelegate();
      esprima.parse(expressionText, delegate);
      expression = new Expression(delegate);
      expressionParseCache[expressionText] = expression;
    }

    return expression;
  }

  function Literal(value) {
    this.value = value;
    this.valueFn_ = undefined;
  }

  Literal.prototype = {
    valueFn: function valueFn() {
      if (!this.valueFn_) {
        var value = this.value;

        this.valueFn_ = function () {
          return value;
        };
      }

      return this.valueFn_;
    }
  };

  function IdentPath(name) {
    this.name = name;
    this.path = Path.get(name);
  }

  IdentPath.prototype = {
    valueFn: function valueFn() {
      if (!this.valueFn_) {
        var name = this.name;
        var path = this.path;

        this.valueFn_ = function (model, observer, changedModel) {
          if (observer) observer.addPath(model, path);

          if (changedModel) {
            var result = path.getValueFrom(changedModel);

            if (result !== undefined) {
              return result;
            }
          }

          return path.getValueFrom(model);
        };
      }

      return this.valueFn_;
    },
    setValue: function setValue(model, newValue) {
      if (this.path.length == 1) {
        model = findScope(model, this.path[0]);
      }

      return this.path.setValueFrom(model, newValue);
    }
  };

  function MemberExpression(object, property, accessor) {
    this.computed = accessor == '[';
    this.dynamicDeps = typeof object == 'function' || object.dynamicDeps || this.computed && !(property instanceof Literal);
    this.simplePath = !this.dynamicDeps && (property instanceof IdentPath || property instanceof Literal) && (object instanceof MemberExpression || object instanceof IdentPath);
    this.object = this.simplePath ? object : getFn(object);
    this.property = !this.computed || this.simplePath ? property : getFn(property);
  }

  MemberExpression.prototype = {
    get fullPath() {
      if (!this.fullPath_) {
        var parts = this.object instanceof MemberExpression ? this.object.fullPath.slice() : [this.object.name];
        parts.push(this.property instanceof IdentPath ? this.property.name : this.property.value);
        this.fullPath_ = Path.get(parts);
      }

      return this.fullPath_;
    },

    valueFn: function valueFn() {
      if (!this.valueFn_) {
        var object = this.object;

        if (this.simplePath) {
          var path = this.fullPath;

          this.valueFn_ = function (model, observer) {
            if (observer) observer.addPath(model, path);
            return path.getValueFrom(model);
          };
        } else if (!this.computed) {
          var path = Path.get(this.property.name);

          this.valueFn_ = function (model, observer, filterRegistry) {
            var context = object(model, observer, filterRegistry);
            if (observer) observer.addPath(context, path);
            return path.getValueFrom(context);
          };
        } else {
          // Computed property.
          var property = this.property;

          this.valueFn_ = function (model, observer, filterRegistry) {
            var context = object(model, observer, filterRegistry);
            var propName = property(model, observer, filterRegistry);
            if (observer) observer.addPath(context, [propName]);
            return context ? context[propName] : undefined;
          };
        }
      }

      return this.valueFn_;
    },
    setValue: function setValue(model, newValue) {
      if (this.simplePath) {
        this.fullPath.setValueFrom(model, newValue);
        return newValue;
      }

      var object = this.object(model);
      var propName = this.property instanceof IdentPath ? this.property.name : this.property(model);
      return object[propName] = newValue;
    }
  };

  function Filter(name, args) {
    this.name = name;
    this.args = [];

    for (var i = 0; i < args.length; i++) {
      this.args[i] = getFn(args[i]);
    }
  }

  Filter.prototype = {
    transform: function transform(model, observer, filterRegistry, toModelDirection, initialArgs) {
      var fn = filterRegistry[this.name];
      var context = model;

      if (fn) {
        context = undefined;
      } else {
        fn = context[this.name];

        if (!fn) {
          console.error('Cannot find function or filter: ' + this.name);
          return;
        }
      } // If toModelDirection is falsey, then the "normal" (dom-bound) direction
      // is used. Otherwise, it looks for a 'toModel' property function on the
      // object.


      if (toModelDirection) {
        fn = fn.toModel;
      } else if (typeof fn.toView == 'function') {
        fn = fn.toView;
      }

      if (typeof fn != 'function') {
        console.error('Cannot find function or filter: ' + this.name);
        return;
      }

      var args = initialArgs || [];

      for (var i = 0; i < this.args.length; i++) {
        args.push(getFn(this.args[i])(model, observer, filterRegistry));
      }

      return fn.apply(context, args);
    }
  };

  function notImplemented() {
    throw Error('Not Implemented');
  }

  var unaryOperators = {
    '+': function _(v) {
      return +v;
    },
    '-': function _(v) {
      return -v;
    },
    '!': function _(v) {
      return !v;
    }
  };
  var binaryOperators = {
    '+': function _(l, r) {
      return l + r;
    },
    '-': function _(l, r) {
      return l - r;
    },
    '*': function _(l, r) {
      return l * r;
    },
    '/': function _(l, r) {
      return l / r;
    },
    '%': function _(l, r) {
      return l % r;
    },
    '<': function _(l, r) {
      return l < r;
    },
    '>': function _(l, r) {
      return l > r;
    },
    '<=': function _(l, r) {
      return l <= r;
    },
    '>=': function _(l, r) {
      return l >= r;
    },
    '==': function _(l, r) {
      return l == r;
    },
    '!=': function _(l, r) {
      return l != r;
    },
    '===': function _(l, r) {
      return l === r;
    },
    '!==': function _(l, r) {
      return l !== r;
    },
    '&&': function _(l, r) {
      return l && r;
    },
    '||': function _(l, r) {
      return l || r;
    }
  };

  function getFn(arg) {
    return typeof arg == 'function' ? arg : arg.valueFn();
  }

  function ASTDelegate() {
    this.expression = null;
    this.filters = [];
    this.deps = {};
    this.currentPath = undefined;
    this.scopeIdent = undefined;
    this.indexIdent = undefined;
    this.dynamicDeps = false;
  }

  ASTDelegate.prototype = {
    createUnaryExpression: function createUnaryExpression(op, argument) {
      if (!unaryOperators[op]) throw Error('Disallowed operator: ' + op);
      argument = getFn(argument);
      return function (model, observer, filterRegistry) {
        return unaryOperators[op](argument(model, observer, filterRegistry));
      };
    },
    createBinaryExpression: function createBinaryExpression(op, left, right) {
      if (!binaryOperators[op]) throw Error('Disallowed operator: ' + op);
      left = getFn(left);
      right = getFn(right);

      switch (op) {
        case '||':
          this.dynamicDeps = true;
          return function (model, observer, filterRegistry) {
            return left(model, observer, filterRegistry) || right(model, observer, filterRegistry);
          };

        case '&&':
          this.dynamicDeps = true;
          return function (model, observer, filterRegistry) {
            return left(model, observer, filterRegistry) && right(model, observer, filterRegistry);
          };
      }

      return function (model, observer, filterRegistry) {
        return binaryOperators[op](left(model, observer, filterRegistry), right(model, observer, filterRegistry));
      };
    },
    createConditionalExpression: function createConditionalExpression(test, consequent, alternate) {
      test = getFn(test);
      consequent = getFn(consequent);
      alternate = getFn(alternate);
      this.dynamicDeps = true;
      return function (model, observer, filterRegistry) {
        return test(model, observer, filterRegistry) ? consequent(model, observer, filterRegistry) : alternate(model, observer, filterRegistry);
      };
    },
    createIdentifier: function createIdentifier(name) {
      var ident = new IdentPath(name);
      ident.type = 'Identifier';
      return ident;
    },
    createMemberExpression: function createMemberExpression(accessor, object, property) {
      var ex = new MemberExpression(object, property, accessor);
      if (ex.dynamicDeps) this.dynamicDeps = true;
      return ex;
    },
    createCallExpression: function createCallExpression(expression, args) {
      if (!(expression instanceof IdentPath)) throw Error('Only identifier function invocations are allowed');
      var filter = new Filter(expression.name, args);
      return function (model, observer, filterRegistry) {
        return filter.transform(model, observer, filterRegistry, false);
      };
    },
    createLiteral: function createLiteral(token) {
      return new Literal(token.value);
    },
    createArrayExpression: function createArrayExpression(elements) {
      for (var i = 0; i < elements.length; i++) elements[i] = getFn(elements[i]);

      return function (model, observer, filterRegistry) {
        var arr = [];

        for (var i = 0; i < elements.length; i++) arr.push(elements[i](model, observer, filterRegistry));

        return arr;
      };
    },
    createProperty: function createProperty(kind, key, value) {
      return {
        key: key instanceof IdentPath ? key.name : key.value,
        value: value
      };
    },
    createObjectExpression: function createObjectExpression(properties) {
      for (var i = 0; i < properties.length; i++) properties[i].value = getFn(properties[i].value);

      return function (model, observer, filterRegistry) {
        var obj = {};

        for (var i = 0; i < properties.length; i++) obj[properties[i].key] = properties[i].value(model, observer, filterRegistry);

        return obj;
      };
    },
    createFilter: function createFilter(name, args) {
      this.filters.push(new Filter(name, args));
    },
    createAsExpression: function createAsExpression(expression, scopeIdent) {
      this.expression = expression;
      this.scopeIdent = scopeIdent;
    },
    createInExpression: function createInExpression(scopeIdent, indexIdent, expression) {
      this.expression = expression;
      this.scopeIdent = scopeIdent;
      this.indexIdent = indexIdent;
    },
    createTopLevel: function createTopLevel(expression) {
      this.expression = expression;
    },
    createThisExpression: notImplemented
  };

  function Expression(delegate) {
    this.scopeIdent = delegate.scopeIdent;
    this.indexIdent = delegate.indexIdent;
    if (!delegate.expression) throw Error('No expression found.');
    this.expression = delegate.expression;
    getFn(this.expression); // forces enumeration of path dependencies

    this.filters = delegate.filters;
    this.dynamicDeps = delegate.dynamicDeps;
  }

  Expression.prototype = {
    getValue: function getValue(model, isBackConvert, changedModel, observer) {
      var value = getFn(this.expression)(model.context, observer, changedModel);

      for (var i = 0; i < this.filters.length; i++) {
        value = this.filters[i].transform(model.context, observer, model.context, isBackConvert, [value]);
      }

      return value;
    },
    setValue: function setValue(model, newValue, filterRegistry) {
      var count = this.filters ? this.filters.length : 0;

      while (count-- > 0) {
        newValue = this.filters[count].transform(model, undefined, filterRegistry, true, [newValue]);
      }

      if (this.expression.setValue) return this.expression.setValue(model, newValue);
    }
    /**
     * Converts a style property name to a css property name. For example:
     * "WebkitUserSelect" to "-webkit-user-select"
     */

  };

  function convertStylePropertyName(name) {
    return String(name).replace(/[A-Z]/g, function (c) {
      return '-' + c.toLowerCase();
    });
  }

  var parentScopeName = '@' + Math.random().toString(36).slice(2); // Single ident paths must bind directly to the appropriate scope object.
  // I.e. Pushed values in two-bindings need to be assigned to the actual model
  // object.

  function findScope(model, prop) {
    while (model[parentScopeName] && !Object.prototype.hasOwnProperty.call(model, prop)) {
      model = model[parentScopeName];
    }

    return model;
  }

  function isLiteralExpression(pathString) {
    switch (pathString) {
      case '':
        return false;

      case 'false':
      case 'null':
      case 'true':
        return true;
    }

    if (!isNaN(Number(pathString))) return true;
    return false;
  }

  ;

  function PolymerExpressions() {}

  PolymerExpressions.prototype = {
    // "built-in" filters
    styleObject: function styleObject(value) {
      var parts = [];

      for (var key in value) {
        parts.push(convertStylePropertyName(key) + ': ' + value[key]);
      }

      return parts.join('; ');
    },
    tokenList: function tokenList(value) {
      var tokens = [];

      for (var key in value) {
        if (value[key]) tokens.push(key);
      }

      return tokens.join(' ');
    },
    // binding delegate API
    prepareInstancePositionChanged: function prepareInstancePositionChanged(template) {
      var indexIdent = template.polymerExpressionIndexIdent_;
      if (!indexIdent) return;
      return function (templateInstance, index) {
        templateInstance.model[indexIdent] = index;
      };
    },
    prepareInstanceModel: function prepareInstanceModel(template) {
      var scopeName = template.polymerExpressionScopeIdent_;
      if (!scopeName) return;
      var parentScope = template.templateInstance ? template.templateInstance.model : template.model;
      var indexName = template.polymerExpressionIndexIdent_;
      return function (model) {
        return createScopeObject(parentScope, model, scopeName, indexName);
      };
    }
  };
  var createScopeObject = '__proto__' in {} ? function (parentScope, model, scopeName, indexName) {
    var scope = {};
    scope[scopeName] = model;
    scope[indexName] = undefined;
    scope[parentScopeName] = parentScope;
    scope.__proto__ = parentScope;
    return scope;
  } : function (parentScope, model, scopeName, indexName) {
    var scope = Object.create(parentScope);
    Object.defineProperty(scope, scopeName, {
      value: model,
      configurable: true,
      writable: true
    });
    Object.defineProperty(scope, indexName, {
      value: undefined,
      configurable: true,
      writable: true
    });
    Object.defineProperty(scope, parentScopeName, {
      value: parentScope,
      configurable: true,
      writable: true
    });
    return scope;
  };
  global.PolymerExpressions = PolymerExpressions;
  PolymerExpressions.getExpression = getExpression;
})(module.exports);

/***/ }),

/***/ "../node_modules/tns-core-modules/matrix/matrix.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var number_utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/number-utils.js");

exports.getTransformMatrix = function (_a) {
  var property = _a.property,
      value = _a.value;
  return TRANSFORM_MATRIXES[property](value);
};

var TRANSFORM_MATRIXES = {
  "scale": function scale(_a) {
    var x = _a.x,
        y = _a.y;
    return [x, 0, 0, 0, y, 0, 0, 0, 1];
  },
  "translate": function translate(_a) {
    var x = _a.x,
        y = _a.y;
    return [1, 0, x, 0, 1, y, 0, 0, 1];
  },
  "rotate": function rotate(angleInDeg) {
    var angleInRad = number_utils_1.degreesToRadians(angleInDeg);
    return [Math.cos(angleInRad), -Math.sin(angleInRad), 0, Math.sin(angleInRad), Math.cos(angleInRad), 0, 0, 0, 1];
  }
};

exports.matrixArrayToCssMatrix = function (m) {
  return [m[0], m[3], m[1], m[4], m[2], m[5]];
};

function multiplyAffine2d(m1, m2) {
  return [m1[0] * m2[0] + m1[1] * m2[3], m1[0] * m2[1] + m1[1] * m2[4], m1[0] * m2[2] + m1[1] * m2[5] + m1[2], m1[3] * m2[0] + m1[4] * m2[3], m1[3] * m2[1] + m1[4] * m2[4], m1[3] * m2[2] + m1[4] * m2[5] + m1[5]];
}

exports.multiplyAffine2d = multiplyAffine2d;

function decompose2DTransformMatrix(matrix) {
  verifyTransformMatrix(matrix);

  var _a = matrix.slice(),
      A = _a[0],
      B = _a[1],
      C = _a[2],
      D = _a[3],
      E = _a[4],
      F = _a[5];

  var determinant = A * D - B * C;
  var translate = {
    x: E || 0,
    y: F || 0
  };
  var rotate = 0;
  var scale = {
    x: 1,
    y: 1
  };

  if (A || B) {
    var R = Math.sqrt(A * A + B * B);
    rotate = B > 0 ? Math.acos(A / R) : -Math.acos(A / R);
    scale = {
      x: R,
      y: determinant / R
    };
  } else if (C || D) {
    var R = Math.sqrt(C * C + D * D);
    rotate = Math.PI / 2 - (D > 0 ? Math.acos(-C / R) : -Math.acos(C / R));
    scale = {
      x: determinant / R,
      y: R
    };
  }

  rotate = number_utils_1.radiansToDegrees(rotate);
  return {
    translate: translate,
    rotate: rotate,
    scale: scale
  };
}

exports.decompose2DTransformMatrix = decompose2DTransformMatrix;

function verifyTransformMatrix(matrix) {
  if (matrix.length < 6) {
    throw new Error("Transform matrix should be 2x3.");
  }
}

/***/ }),

/***/ "../node_modules/tns-core-modules/platform/platform.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var appModule = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

var MIN_TABLET_PIXELS = 600;
var platformNames;

(function (platformNames) {
  platformNames.android = "Android";
  platformNames.ios = "iOS";
})(platformNames = exports.platformNames || (exports.platformNames = {}));

var Device = function () {
  function Device() {}

  Object.defineProperty(Device.prototype, "os", {
    get: function get() {
      return platformNames.android;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "manufacturer", {
    get: function get() {
      if (!this._manufacturer) {
        this._manufacturer = android.os.Build.MANUFACTURER;
      }

      return this._manufacturer;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "osVersion", {
    get: function get() {
      if (!this._osVersion) {
        this._osVersion = android.os.Build.VERSION.RELEASE;
      }

      return this._osVersion;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "model", {
    get: function get() {
      if (!this._model) {
        this._model = android.os.Build.MODEL;
      }

      return this._model;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "sdkVersion", {
    get: function get() {
      if (!this._sdkVersion) {
        this._sdkVersion = android.os.Build.VERSION.SDK;
      }

      return this._sdkVersion;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "deviceType", {
    get: function get() {
      if (!this._deviceType) {
        var dips = Math.min(screen.mainScreen.widthPixels, screen.mainScreen.heightPixels) / screen.mainScreen.scale;

        if (dips >= MIN_TABLET_PIXELS) {
          this._deviceType = "Tablet";
        } else {
          this._deviceType = "Phone";
        }
      }

      return this._deviceType;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "uuid", {
    get: function get() {
      if (!this._uuid) {
        var nativeApp = appModule.android.nativeApp;
        this._uuid = android.provider.Settings.Secure.getString(nativeApp.getContentResolver(), android.provider.Settings.Secure.ANDROID_ID);
      }

      return this._uuid;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "language", {
    get: function get() {
      if (!this._language) {
        this._language = java.util.Locale.getDefault().getLanguage().replace("_", "-");
      }

      return this._language;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "region", {
    get: function get() {
      if (!this._region) {
        this._region = java.util.Locale.getDefault().getCountry();
      }

      return this._region;
    },
    enumerable: true,
    configurable: true
  });
  return Device;
}();

var MainScreen = function () {
  function MainScreen() {}

  MainScreen.prototype.reinitMetrics = function () {
    if (!this._metrics) {
      this._metrics = new android.util.DisplayMetrics();
    }

    this.initMetrics();
  };

  MainScreen.prototype.initMetrics = function () {
    var nativeApp = appModule.getNativeApplication();
    nativeApp.getSystemService(android.content.Context.WINDOW_SERVICE).getDefaultDisplay().getRealMetrics(this._metrics);
  };

  Object.defineProperty(MainScreen.prototype, "metrics", {
    get: function get() {
      if (!this._metrics) {
        appModule.on("cssChanged", this.reinitMetrics, this);
        appModule.on(appModule.orientationChangedEvent, this.reinitMetrics, this);
        this._metrics = new android.util.DisplayMetrics();
        this.initMetrics();
      }

      return this._metrics;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MainScreen.prototype, "widthPixels", {
    get: function get() {
      return this.metrics.widthPixels;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MainScreen.prototype, "heightPixels", {
    get: function get() {
      return this.metrics.heightPixels;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MainScreen.prototype, "scale", {
    get: function get() {
      return this.metrics.density;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MainScreen.prototype, "widthDIPs", {
    get: function get() {
      return this.metrics.widthPixels / this.metrics.density;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MainScreen.prototype, "heightDIPs", {
    get: function get() {
      return this.metrics.heightPixels / this.metrics.density;
    },
    enumerable: true,
    configurable: true
  });
  return MainScreen;
}();

exports.device = new Device();
var screen;

(function (screen) {
  screen.mainScreen = new MainScreen();
})(screen = exports.screen || (exports.screen = {}));

exports.isAndroid = true;

/***/ }),

/***/ "../node_modules/tns-core-modules/profiling/profiling.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

function uptime() {
  return global.android ? org.nativescript.Process.getUpTime() : global.__tns_uptime();
}

exports.uptime = uptime;

function log(message) {
  if (global.__nslog) {
    global.__nslog("CONSOLE LOG: " + message);
  }

  console.log(message);
}

exports.log = log;
var timers = {};
var anyGlobal = global;
var profileNames = [];
exports.time = global.__time || Date.now;

function start(name) {
  var info = timers[name];

  if (info) {
    info.currentStart = exports.time();
    info.runCount++;
  } else {
    info = {
      totalTime: 0,
      count: 0,
      currentStart: exports.time(),
      runCount: 1
    };
    timers[name] = info;
    profileNames.push(name);
  }
}

exports.start = start;

function stop(name) {
  var info = timers[name];

  if (!info) {
    throw new Error("No timer started: " + name);
  }

  if (info.runCount) {
    info.runCount--;

    if (info.runCount) {
      info.count++;
    } else {
      info.lastTime = exports.time() - info.currentStart;
      info.totalTime += info.lastTime;
      info.count++;
      info.currentStart = 0;
    }
  } else {
    throw new Error("Timer " + name + " paused more times than started.");
  }

  return info;
}

exports.stop = stop;

function timer(name) {
  return timers[name];
}

exports.timer = timer;

function print(name) {
  var info = timers[name];

  if (!info) {
    throw new Error("No timer started: " + name);
  }

  console.log("---- [" + name + "] STOP total: " + info.totalTime + " count:" + info.count);
  return info;
}

exports.print = print;

function isRunning(name) {
  var info = timers[name];
  return !!(info && info.runCount);
}

exports.isRunning = isRunning;

function countersProfileFunctionFactory(fn, name, type) {
  if (type === void 0) {
    type = 1;
  }

  profileNames.push(name);
  return function () {
    start(name);

    try {
      return fn.apply(this, arguments);
    } finally {
      stop(name);
    }
  };
}

function timelineProfileFunctionFactory(fn, name, type) {
  if (type === void 0) {
    type = 1;
  }

  return type === 1 ? function () {
    var start = exports.time();

    try {
      return fn.apply(this, arguments);
    } finally {
      var end = exports.time();
      console.log("Timeline: Modules: " + name + " " + this + "  (" + start + "ms. - " + end + "ms.)");
    }
  } : function () {
    var start = exports.time();

    try {
      return fn.apply(this, arguments);
    } finally {
      var end = exports.time();
      console.log("Timeline: Modules: " + name + "  (" + start + "ms. - " + end + "ms.)");
    }
  };
}

var Level;

(function (Level) {
  Level[Level["none"] = 0] = "none";
  Level[Level["lifecycle"] = 1] = "lifecycle";
  Level[Level["timeline"] = 2] = "timeline";
})(Level = exports.Level || (exports.Level = {}));

var tracingLevel = Level.none;
var profileFunctionFactory;

function enable(mode) {
  if (mode === void 0) {
    mode = "counters";
  }

  profileFunctionFactory = mode && {
    counters: countersProfileFunctionFactory,
    timeline: timelineProfileFunctionFactory
  }[mode];
  tracingLevel = {
    lifecycle: Level.lifecycle,
    timeline: Level.timeline
  }[mode] || Level.none;
}

exports.enable = enable;

try {
  var appConfig = __webpack_require__("./package.json");

  if (appConfig && appConfig.profiling) {
    enable(appConfig.profiling);
  }
} catch (e1) {
  try {
    console.log("Profiling startup failed to figure out defaults from package.json, error: " + e1);
  } catch (e2) {}
}

function disable() {
  profileFunctionFactory = undefined;
}

exports.disable = disable;

function profileFunction(fn, customName) {
  return profileFunctionFactory(fn, customName || fn.name);
}

var profileMethodUnnamed = function profileMethodUnnamed(target, key, descriptor) {
  if (descriptor === undefined) {
    descriptor = Object.getOwnPropertyDescriptor(target, key);
  }

  var originalMethod = descriptor.value;
  var className = "";

  if (target && target.constructor && target.constructor.name) {
    className = target.constructor.name + ".";
  }

  var name = className + key;
  descriptor.value = profileFunctionFactory(originalMethod, name, 1);
  return descriptor;
};

var profileStaticMethodUnnamed = function profileStaticMethodUnnamed(ctor, key, descriptor) {
  if (descriptor === undefined) {
    descriptor = Object.getOwnPropertyDescriptor(ctor, key);
  }

  var originalMethod = descriptor.value;
  var className = "";

  if (ctor && ctor.name) {
    className = ctor.name + ".";
  }

  var name = className + key;
  descriptor.value = profileFunctionFactory(originalMethod, name, 0);
  return descriptor;
};

function profileMethodNamed(name) {
  return function (target, key, descriptor) {
    if (descriptor === undefined) {
      descriptor = Object.getOwnPropertyDescriptor(target, key);
    }

    var originalMethod = descriptor.value;
    descriptor.value = profileFunctionFactory(originalMethod, name);
    return descriptor;
  };
}

var voidMethodDecorator = function voidMethodDecorator() {};

function profile(nameFnOrTarget, fnOrKey, descriptor) {
  if (typeof nameFnOrTarget === "object" && (typeof fnOrKey === "string" || typeof fnOrKey === "symbol")) {
    if (!profileFunctionFactory) {
      return;
    }

    return profileMethodUnnamed(nameFnOrTarget, fnOrKey, descriptor);
  } else if (typeof nameFnOrTarget === "function" && (typeof fnOrKey === "string" || typeof fnOrKey === "symbol")) {
    if (!profileFunctionFactory) {
      return;
    }

    return profileStaticMethodUnnamed(nameFnOrTarget, fnOrKey, descriptor);
  } else if (typeof nameFnOrTarget === "string" && typeof fnOrKey === "function") {
    if (!profileFunctionFactory) {
      return fnOrKey;
    }

    return profileFunction(fnOrKey, nameFnOrTarget);
  } else if (typeof nameFnOrTarget === "function") {
    if (!profileFunctionFactory) {
      return nameFnOrTarget;
    }

    return profileFunction(nameFnOrTarget);
  } else if (typeof nameFnOrTarget === "string") {
    if (!profileFunctionFactory) {
      return voidMethodDecorator;
    }

    return profileMethodNamed(nameFnOrTarget);
  } else {
    if (!profileFunctionFactory) {
      return voidMethodDecorator;
    }

    return profileMethodUnnamed;
  }
}

exports.profile = profile;

function dumpProfiles() {
  profileNames.forEach(function (name) {
    var info = timers[name];

    if (info) {
      console.log("---- [" + name + "] STOP total: " + info.totalTime + " count:" + info.count);
    } else {
      console.log("---- [" + name + "] Never called");
    }
  });
}

exports.dumpProfiles = dumpProfiles;

function resetProfiles() {
  profileNames.forEach(function (name) {
    var info = timers[name];

    if (info) {
      if (info.runCount) {
        console.log("---- timer with name [" + name + "] is currently running and won't be reset");
      } else {
        timers[name] = undefined;
      }
    }
  });
}

exports.resetProfiles = resetProfiles;

function startCPUProfile(name) {
  if (anyGlobal.android) {
    __startCPUProfiler(name);
  }
}

exports.startCPUProfile = startCPUProfile;

function stopCPUProfile(name) {
  if (anyGlobal.android) {
    __stopCPUProfiler(name);
  }
}

exports.stopCPUProfile = stopCPUProfile;

function level() {
  return tracingLevel;
}

exports.level = level;

function trace(message, start, end) {
  log("Timeline: Modules: " + message + "  (" + start + "ms. - " + end + "ms.)");
}

exports.trace = trace;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/text/formatted-string.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var span_1 = __webpack_require__("../node_modules/tns-core-modules/text/span.js");

exports.Span = span_1.Span;

var observable_1 = __webpack_require__("../node_modules/tns-core-modules/data/observable/observable.js");

var observable_array_1 = __webpack_require__("../node_modules/tns-core-modules/data/observable-array/observable-array.js");

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var knownCollections;

(function (knownCollections) {
  knownCollections.spans = "spans";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));

var CHILD_SPAN = "Span";

var FormattedString = function (_super) {
  __extends(FormattedString, _super);

  function FormattedString() {
    var _this = _super.call(this) || this;

    _this._spans = new observable_array_1.ObservableArray();

    _this._spans.addEventListener(observable_array_1.ObservableArray.changeEvent, _this.onSpansCollectionChanged, _this);

    return _this;
  }

  Object.defineProperty(FormattedString.prototype, "fontFamily", {
    get: function get() {
      return this.style.fontFamily;
    },
    set: function set(value) {
      this.style.fontFamily = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FormattedString.prototype, "fontSize", {
    get: function get() {
      return this.style.fontSize;
    },
    set: function set(value) {
      this.style.fontSize = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FormattedString.prototype, "fontStyle", {
    get: function get() {
      return this.style.fontStyle;
    },
    set: function set(value) {
      this.style.fontStyle = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FormattedString.prototype, "fontWeight", {
    get: function get() {
      return this.style.fontWeight;
    },
    set: function set(value) {
      this.style.fontWeight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FormattedString.prototype, "textDecoration", {
    get: function get() {
      return this.style.textDecoration;
    },
    set: function set(value) {
      this.style.textDecoration = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FormattedString.prototype, "color", {
    get: function get() {
      return this.style.color;
    },
    set: function set(value) {
      this.style.color = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FormattedString.prototype, "backgroundColor", {
    get: function get() {
      return this.style.backgroundColor;
    },
    set: function set(value) {
      this.style.backgroundColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FormattedString.prototype, "spans", {
    get: function get() {
      if (!this._spans) {
        this._spans = new observable_array_1.ObservableArray();
      }

      return this._spans;
    },
    enumerable: true,
    configurable: true
  });

  FormattedString.prototype.toString = function () {
    var result = "";

    for (var i = 0, length_1 = this._spans.length; i < length_1; i++) {
      result += this._spans.getItem(i).text;
    }

    return result;
  };

  FormattedString.prototype._addArrayFromBuilder = function (name, value) {
    if (name === knownCollections.spans) {
      this.spans.push(value);
    }
  };

  FormattedString.prototype._addChildFromBuilder = function (name, value) {
    if (name === CHILD_SPAN) {
      this.spans.push(value);
    }
  };

  FormattedString.prototype.onSpansCollectionChanged = function (eventData) {
    if (eventData.addedCount > 0) {
      for (var i = 0; i < eventData.addedCount; i++) {
        var span = eventData.object.getItem(eventData.index + i);

        this._addView(span);

        this.addPropertyChangeHandler(span);
      }
    }

    if (eventData.removed && eventData.removed.length > 0) {
      for (var p = 0; p < eventData.removed.length; p++) {
        var span = eventData.removed[p];
        this.removePropertyChangeHandler(span);

        this._removeView(span);
      }
    }

    this.notifyPropertyChange(".", this);
  };

  FormattedString.prototype.addPropertyChangeHandler = function (span) {
    var style = span.style;
    span.on(observable_1.Observable.propertyChangeEvent, this.onPropertyChange, this);
    style.on("fontFamilyChange", this.onPropertyChange, this);
    style.on("fontSizeChange", this.onPropertyChange, this);
    style.on("fontStyleChange", this.onPropertyChange, this);
    style.on("fontWeightChange", this.onPropertyChange, this);
    style.on("textDecorationChange", this.onPropertyChange, this);
    style.on("colorChange", this.onPropertyChange, this);
    style.on("backgroundColorChange", this.onPropertyChange, this);
  };

  FormattedString.prototype.removePropertyChangeHandler = function (span) {
    var style = span.style;
    span.off(observable_1.Observable.propertyChangeEvent, this.onPropertyChange, this);
    style.off("fontFamilyChange", this.onPropertyChange, this);
    style.off("fontSizeChange", this.onPropertyChange, this);
    style.off("fontStyleChange", this.onPropertyChange, this);
    style.off("fontWeightChange", this.onPropertyChange, this);
    style.off("textDecorationChange", this.onPropertyChange, this);
    style.off("colorChange", this.onPropertyChange, this);
    style.off("backgroundColorChange", this.onPropertyChange, this);
  };

  FormattedString.prototype.onPropertyChange = function (data) {
    this.notifyPropertyChange(data.propertyName, this);
  };

  FormattedString.prototype.eachChild = function (callback) {
    this.spans.forEach(function (v, i, arr) {
      return callback(v);
    });
  };

  return FormattedString;
}(view_1.ViewBase);

exports.FormattedString = FormattedString;

/***/ }),

/***/ "../node_modules/tns-core-modules/text/span.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var Span = function (_super) {
  __extends(Span, _super);

  function Span() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(Span.prototype, "fontFamily", {
    get: function get() {
      return this.style.fontFamily;
    },
    set: function set(value) {
      this.style.fontFamily = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Span.prototype, "fontSize", {
    get: function get() {
      return this.style.fontSize;
    },
    set: function set(value) {
      this.style.fontSize = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Span.prototype, "fontStyle", {
    get: function get() {
      return this.style.fontStyle;
    },
    set: function set(value) {
      this.style.fontStyle = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Span.prototype, "fontWeight", {
    get: function get() {
      return this.style.fontWeight;
    },
    set: function set(value) {
      this.style.fontWeight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Span.prototype, "textDecoration", {
    get: function get() {
      return this.style.textDecoration;
    },
    set: function set(value) {
      this.style.textDecoration = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Span.prototype, "color", {
    get: function get() {
      return this.style.color;
    },
    set: function set(value) {
      this.style.color = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Span.prototype, "backgroundColor", {
    get: function get() {
      return this.style.backgroundColor;
    },
    set: function set(value) {
      this.style.backgroundColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Span.prototype, "text", {
    get: function get() {
      return this._text;
    },
    set: function set(value) {
      if (this._text !== value) {
        this._text = value;
        this.notifyPropertyChange("text", value);
      }
    },
    enumerable: true,
    configurable: true
  });

  Span.prototype._setTextInternal = function (value) {
    this._text = value;
  };

  return Span;
}(view_1.ViewBase);

exports.Span = Span;

/***/ }),

/***/ "../node_modules/tns-core-modules/text/text.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var encoding;

(function (encoding) {
  encoding.ISO_8859_1 = "ISO-8859-1";
  encoding.US_ASCII = "US-ASCII";
  encoding.UTF_16 = "UTF-16";
  encoding.UTF_16BE = "UTF-16BE";
  encoding.UTF_16LE = "UTF-16LE";
  encoding.UTF_8 = "UTF-8";
})(encoding = exports.encoding || (exports.encoding = {}));

/***/ }),

/***/ "../node_modules/tns-core-modules/timer/timer.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var timeoutHandler;
var timeoutCallbacks = {};
var timerId = 0;

function createHandlerAndGetId() {
  if (!timeoutHandler) {
    timeoutHandler = new android.os.Handler(android.os.Looper.myLooper());
  }

  timerId++;
  return timerId;
}

function setTimeout(callback, milliseconds) {
  if (milliseconds === void 0) {
    milliseconds = 0;
  }

  var args = [];

  for (var _i = 2; _i < arguments.length; _i++) {
    args[_i - 2] = arguments[_i];
  }

  var id = createHandlerAndGetId();

  var invoke = function invoke() {
    return callback.apply(void 0, args);
  };

  var zoneBound = zonedCallback(invoke);
  var runnable = new java.lang.Runnable({
    run: function run() {
      zoneBound();

      if (timeoutCallbacks[id]) {
        delete timeoutCallbacks[id];
      }
    }
  });

  if (!timeoutCallbacks[id]) {
    timeoutCallbacks[id] = runnable;
  }

  timeoutHandler.postDelayed(runnable, long(milliseconds));
  return id;
}

exports.setTimeout = setTimeout;

function clearTimeout(id) {
  var index = id;

  if (timeoutCallbacks[index]) {
    timeoutHandler.removeCallbacks(timeoutCallbacks[index]);
    delete timeoutCallbacks[index];
  }
}

exports.clearTimeout = clearTimeout;

function setInterval(callback, milliseconds) {
  if (milliseconds === void 0) {
    milliseconds = 0;
  }

  var args = [];

  for (var _i = 2; _i < arguments.length; _i++) {
    args[_i - 2] = arguments[_i];
  }

  var id = createHandlerAndGetId();
  var handler = timeoutHandler;

  var invoke = function invoke() {
    return callback.apply(void 0, args);
  };

  var zoneBound = zonedCallback(invoke);
  var runnable = new java.lang.Runnable({
    run: function run() {
      zoneBound();

      if (timeoutCallbacks[id]) {
        handler.postDelayed(runnable, long(milliseconds));
      }
    }
  });

  if (!timeoutCallbacks[id]) {
    timeoutCallbacks[id] = runnable;
  }

  timeoutHandler.postDelayed(runnable, long(milliseconds));
  return id;
}

exports.setInterval = setInterval;
exports.clearInterval = clearTimeout;

/***/ }),

/***/ "../node_modules/tns-core-modules/trace/trace.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var enabled = false;
var _categories = {};
var _writers = [];
var _eventListeners = [];

var _errorHandler;

function enable() {
  enabled = true;
}

exports.enable = enable;

function disable() {
  enabled = false;
}

exports.disable = disable;

function isEnabled() {
  return enabled;
}

exports.isEnabled = isEnabled;

function isCategorySet(category) {
  return category in _categories;
}

exports.isCategorySet = isCategorySet;

function addWriter(writer) {
  _writers.push(writer);
}

exports.addWriter = addWriter;

function removeWriter(writer) {
  var index = _writers.indexOf(writer);

  if (index >= 0) {
    _writers.splice(index, 1);
  }
}

exports.removeWriter = removeWriter;

function clearWriters() {
  if (_writers.length > 0) {
    _writers.splice(0, _writers.length);
  }
}

exports.clearWriters = clearWriters;

function setCategories(categories) {
  _categories = {};
  addCategories(categories);
}

exports.setCategories = setCategories;

function addCategories(categories) {
  var split = categories.split(",");

  for (var i = 0; i < split.length; i++) {
    _categories[split[i].trim()] = true;
  }
}

exports.addCategories = addCategories;

function write(message, category, type) {
  var i;

  if (type === messageType.error) {
    for (i = 0; i < _writers.length; i++) {
      _writers[i].write(message, category, type);
    }

    return;
  }

  if (!enabled) {
    return;
  }

  if (!(category in _categories)) {
    return;
  }

  for (i = 0; i < _writers.length; i++) {
    _writers[i].write(message, category, type);
  }
}

exports.write = write;

function notifyEvent(object, name, data) {
  if (!enabled) {
    return;
  }

  var i, listener, filters;

  for (i = 0; i < _eventListeners.length; i++) {
    listener = _eventListeners[i];

    if (listener.filter) {
      filters = listener.filter.split(",");
      filters.forEach(function (value) {
        if (value.trim() === name) {
          listener.on(object, name, data);
        }
      });
    } else {
      listener.on(object, name, data);
    }
  }
}

exports.notifyEvent = notifyEvent;

function addEventListener(listener) {
  _eventListeners.push(listener);
}

exports.addEventListener = addEventListener;

function removeEventListener(listener) {
  var index = _eventListeners.indexOf(listener);

  if (index >= 0) {
    _eventListeners.splice(index, 1);
  }
}

exports.removeEventListener = removeEventListener;
var messageType;

(function (messageType) {
  messageType.log = 0;
  messageType.info = 1;
  messageType.warn = 2;
  messageType.error = 3;
})(messageType = exports.messageType || (exports.messageType = {}));

var categories;

(function (categories) {
  categories.VisualTreeEvents = "VisualTreeEvents";
  categories.Layout = "Layout";
  categories.Style = "Style";
  categories.ViewHierarchy = "ViewHierarchy";
  categories.NativeLifecycle = "NativeLifecycle";
  categories.Debug = "Debug";
  categories.Navigation = "Navigation";
  categories.Test = "Test";
  categories.Binding = "Binding";
  categories.BindingError = "BindingError";
  categories.Error = "Error";
  categories.Animation = "Animation";
  categories.Transition = "Transition";
  categories.All = categories.VisualTreeEvents + "," + categories.Layout + "," + categories.Style + "," + categories.ViewHierarchy + "," + categories.NativeLifecycle + "," + categories.Debug + "," + categories.Navigation + "," + categories.Test + "," + categories.Binding + "," + categories.Error + "," + categories.Animation + "," + categories.Transition;
  categories.separator = ",";

  function concat() {
    var i;
    var result;

    for (i = 0; i < arguments.length; i++) {
      if (!result) {
        result = arguments[i];
        continue;
      }

      result = result.concat(categories.separator, arguments[i]);
    }

    return result;
  }

  categories.concat = concat;
})(categories = exports.categories || (exports.categories = {}));

var ConsoleWriter = function () {
  function ConsoleWriter() {}

  ConsoleWriter.prototype.write = function (message, category, type) {
    if (!console) {
      return;
    }

    var msgType;

    if (type === undefined) {
      msgType = messageType.log;
    } else {
      msgType = type;
    }

    switch (msgType) {
      case messageType.log:
        console.log(category + ": " + message);
        break;

      case messageType.info:
        console.info(category + ": " + message);
        break;

      case messageType.warn:
        console.warn(category + ": " + message);
        break;

      case messageType.error:
        console.error(category + ": " + message);
        break;
    }
  };

  return ConsoleWriter;
}();

addWriter(new ConsoleWriter());

var DefaultErrorHandler = function () {
  function DefaultErrorHandler() {}

  DefaultErrorHandler.prototype.handlerError = function (error) {
    throw error;
  };

  return DefaultErrorHandler;
}();

exports.DefaultErrorHandler = DefaultErrorHandler;
setErrorHandler(new DefaultErrorHandler());

function getErrorHandler() {
  return _errorHandler;
}

exports.getErrorHandler = getErrorHandler;

function setErrorHandler(handler) {
  _errorHandler = handler;
}

exports.setErrorHandler = setErrorHandler;

function error(error) {
  if (!_errorHandler) {
    return;
  }

  if (typeof error === "string") {
    error = new Error(error);
  }

  _errorHandler.handlerError(error);
}

exports.error = error;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/action-bar/action-bar-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var knownCollections;

(function (knownCollections) {
  knownCollections.actionItems = "actionItems";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));

var ActionBarBase = function (_super) {
  __extends(ActionBarBase, _super);

  function ActionBarBase() {
    var _this = _super.call(this) || this;

    _this._actionItems = new ActionItems(_this);
    return _this;
  }

  Object.defineProperty(ActionBarBase.prototype, "navigationButton", {
    get: function get() {
      return this._navigationButton;
    },
    set: function set(value) {
      if (this._navigationButton !== value) {
        if (this._navigationButton) {
          this._removeView(this._navigationButton);

          this._navigationButton.actionBar = undefined;
        }

        this._navigationButton = value;

        if (this._navigationButton) {
          this._navigationButton.actionBar = this;

          this._addView(this._navigationButton);
        }

        this.update();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ActionBarBase.prototype, "actionItems", {
    get: function get() {
      return this._actionItems;
    },
    set: function set(value) {
      throw new Error("actionItems property is read-only");
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ActionBarBase.prototype, "titleView", {
    get: function get() {
      return this._titleView;
    },
    set: function set(value) {
      if (this._titleView !== value) {
        if (this._titleView) {
          this._removeView(this._titleView);

          this._titleView.style[view_1.horizontalAlignmentProperty.cssName] = view_1.unsetValue;
          this._titleView.style[view_1.verticalAlignmentProperty.cssName] = view_1.unsetValue;
        }

        this._titleView = value;

        if (value) {
          this._addView(value);

          var style = value.style;

          if (!view_1.horizontalAlignmentProperty.isSet(style)) {
            style[view_1.horizontalAlignmentProperty.cssName] = "center";
          }

          if (!view_1.verticalAlignmentProperty.isSet(style)) {
            style[view_1.verticalAlignmentProperty.cssName] = "middle";
          }
        }

        this.update();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ActionBarBase.prototype, "android", {
    get: function get() {
      return undefined;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ActionBarBase.prototype, "_childrenCount", {
    get: function get() {
      var actionViewsCount = 0;

      this._actionItems.getItems().forEach(function (actionItem) {
        if (actionItem.actionView) {
          actionViewsCount++;
        }
      });

      return actionViewsCount + (this.titleView ? 1 : 0);
    },
    enumerable: true,
    configurable: true
  });

  ActionBarBase.prototype.update = function () {};

  ActionBarBase.prototype._onTitlePropertyChanged = function () {};

  ActionBarBase.prototype._addArrayFromBuilder = function (name, value) {
    if (name === "actionItems") {
      this.actionItems.setItems(value);
    }
  };

  ActionBarBase.prototype.eachChildView = function (callback) {
    var titleView = this.titleView;

    if (titleView) {
      callback(titleView);
    }
  };

  ActionBarBase.prototype.eachChild = function (callback) {
    var titleView = this.titleView;

    if (titleView) {
      callback(titleView);
    }

    var navigationButton = this._navigationButton;

    if (navigationButton) {
      callback(navigationButton);
    }

    this.actionItems.getItems().forEach(function (actionItem) {
      callback(actionItem);
    });
  };

  ActionBarBase.prototype._isEmpty = function () {
    if (this.title || this.titleView || this.android && this.android.icon || this.navigationButton || this.actionItems.getItems().length > 0) {
      return false;
    }

    return true;
  };

  ActionBarBase = __decorate([view_1.CSSType("ActionBar")], ActionBarBase);
  return ActionBarBase;
}(view_1.View);

exports.ActionBarBase = ActionBarBase;

var ActionItems = function () {
  function ActionItems(actionBar) {
    this._items = new Array();
    this._actionBar = actionBar;
  }

  ActionItems.prototype.addItem = function (item) {
    if (!item) {
      throw new Error("Cannot add empty item");
    }

    this._items.push(item);

    item.actionBar = this._actionBar;

    this._actionBar._addView(item);

    this.invalidate();
  };

  ActionItems.prototype.removeItem = function (item) {
    if (!item) {
      throw new Error("Cannot remove empty item");
    }

    var itemIndex = this._items.indexOf(item);

    if (itemIndex < 0) {
      throw new Error("Cannot find item to remove");
    }

    this._items.splice(itemIndex, 1);

    this._actionBar._removeView(item);

    item.actionBar = undefined;
    this.invalidate();
  };

  ActionItems.prototype.getItems = function () {
    return this._items.slice();
  };

  ActionItems.prototype.getVisibleItems = function () {
    var visibleItems = [];

    this._items.forEach(function (item) {
      if (isVisible(item)) {
        visibleItems.push(item);
      }
    });

    return visibleItems;
  };

  ActionItems.prototype.getItemAt = function (index) {
    if (index < 0 || index >= this._items.length) {
      return undefined;
    }

    return this._items[index];
  };

  ActionItems.prototype.setItems = function (items) {
    while (this._items.length > 0) {
      this.removeItem(this._items[this._items.length - 1]);
    }

    for (var i = 0; i < items.length; i++) {
      this.addItem(items[i]);
    }

    this.invalidate();
  };

  ActionItems.prototype.invalidate = function () {
    if (this._actionBar) {
      this._actionBar.update();
    }
  };

  return ActionItems;
}();

exports.ActionItems = ActionItems;

var ActionItemBase = function (_super) {
  __extends(ActionItemBase, _super);

  function ActionItemBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(ActionItemBase.prototype, "actionView", {
    get: function get() {
      return this._actionView;
    },
    set: function set(value) {
      if (this._actionView !== value) {
        if (this._actionView) {
          this._actionView.style[view_1.horizontalAlignmentProperty.cssName] = view_1.unsetValue;
          this._actionView.style[view_1.verticalAlignmentProperty.cssName] = view_1.unsetValue;

          this._removeView(this._actionView);
        }

        this._actionView = value;

        if (this._actionView) {
          this._addView(this._actionView);
        }

        if (this._actionBar) {
          this._actionBar.update();
        }
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ActionItemBase.prototype, "actionBar", {
    get: function get() {
      return this._actionBar;
    },
    set: function set(value) {
      if (value !== this._actionBar) {
        this._actionBar = value;
      }
    },
    enumerable: true,
    configurable: true
  });

  ActionItemBase.prototype.onLoaded = function () {
    if (this._actionView) {
      this._actionView.style[view_1.horizontalAlignmentProperty.cssName] = "center";
      this._actionView.style[view_1.verticalAlignmentProperty.cssName] = "middle";
    }

    _super.prototype.onLoaded.call(this);
  };

  ActionItemBase.prototype._raiseTap = function () {
    this._emit(ActionItemBase.tapEvent);
  };

  ActionItemBase.prototype._addChildFromBuilder = function (name, value) {
    this.actionView = value;
  };

  ActionItemBase.prototype._onVisibilityChanged = function (visibility) {
    if (this.actionBar) {
      this.actionBar.update();
    }
  };

  ActionItemBase.prototype.eachChild = function (callback) {
    if (this._actionView) {
      callback(this._actionView);
    }
  };

  ActionItemBase.tapEvent = "tap";

  __decorate([profiling_1.profile], ActionItemBase.prototype, "onLoaded", null);

  return ActionItemBase;
}(view_1.ViewBase);

exports.ActionItemBase = ActionItemBase;

function isVisible(item) {
  return item.visibility === "visible";
}

exports.isVisible = isVisible;

function onTitlePropertyChanged(actionBar, oldValue, newValue) {
  actionBar._onTitlePropertyChanged();
}

exports.titleProperty = new view_1.Property({
  name: "title",
  valueChanged: onTitlePropertyChanged
});
exports.titleProperty.register(ActionBarBase);

function onItemChanged(item, oldValue, newValue) {
  if (item.actionBar) {
    item.actionBar.update();
  }
}

function onVisibilityChanged(item, oldValue, newValue) {
  item._onVisibilityChanged(newValue);
}

function traceMissingIcon(icon) {
  view_1.traceWrite("Could not load action bar icon: " + icon, view_1.traceCategories.Error, view_1.traceMessageType.error);
}

exports.traceMissingIcon = traceMissingIcon;
exports.textProperty = new view_1.Property({
  name: "text",
  defaultValue: "",
  valueChanged: onItemChanged
});
exports.textProperty.register(ActionItemBase);
exports.iconProperty = new view_1.Property({
  name: "icon",
  valueChanged: onItemChanged
});
exports.iconProperty.register(ActionItemBase);
exports.visibilityProperty = new view_1.Property({
  name: "visibility",
  defaultValue: "visible",
  valueChanged: onVisibilityChanged
});
exports.visibilityProperty.register(ActionItemBase);
exports.flatProperty = new view_1.Property({
  name: "flat",
  defaultValue: false,
  valueConverter: view_1.booleanConverter
});
exports.flatProperty.register(ActionBarBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/action-bar/action-bar.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var action_bar_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/action-bar/action-bar-common.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var image_source_1 = __webpack_require__("../node_modules/tns-core-modules/image-source/image-source.js");

var application = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/action-bar/action-bar-common.js"));

var R_ID_HOME = 0x0102002c;
var ACTION_ITEM_ID_OFFSET = 10000;
var DEFAULT_ELEVATION = 4;
var AppCompatTextView;
var actionItemIdGenerator = ACTION_ITEM_ID_OFFSET;

function generateItemId() {
  actionItemIdGenerator++;
  return actionItemIdGenerator;
}

var appResources;
var MenuItemClickListener;

function initializeMenuItemClickListener() {
  if (MenuItemClickListener) {
    return;
  }

  AppCompatTextView = android.support.v7.widget.AppCompatTextView;

  var MenuItemClickListenerImpl = function (_super) {
    __extends(MenuItemClickListenerImpl, _super);

    function MenuItemClickListenerImpl(owner) {
      var _this = _super.call(this) || this;

      _this.owner = owner;
      return global.__native(_this);
    }

    MenuItemClickListenerImpl.prototype.onMenuItemClick = function (item) {
      var itemId = item.getItemId();
      return this.owner._onAndroidItemSelected(itemId);
    };

    MenuItemClickListenerImpl = __decorate([Interfaces([android.support.v7.widget.Toolbar.OnMenuItemClickListener])], MenuItemClickListenerImpl);
    return MenuItemClickListenerImpl;
  }(java.lang.Object);

  MenuItemClickListener = MenuItemClickListenerImpl;
  appResources = application.android.context.getResources();
}

var ActionItem = function (_super) {
  __extends(ActionItem, _super);

  function ActionItem() {
    var _this = _super.call(this) || this;

    _this._androidPosition = {
      position: "actionBar",
      systemIcon: undefined
    };
    _this._itemId = generateItemId();
    return _this;
  }

  Object.defineProperty(ActionItem.prototype, "android", {
    get: function get() {
      return this._androidPosition;
    },
    set: function set(value) {
      throw new Error("ActionItem.android is read-only");
    },
    enumerable: true,
    configurable: true
  });

  ActionItem.prototype._getItemId = function () {
    return this._itemId;
  };

  return ActionItem;
}(action_bar_common_1.ActionItemBase);

exports.ActionItem = ActionItem;

var AndroidActionBarSettings = function () {
  function AndroidActionBarSettings(actionBar) {
    this._iconVisibility = "auto";
    this._actionBar = actionBar;
  }

  Object.defineProperty(AndroidActionBarSettings.prototype, "icon", {
    get: function get() {
      return this._icon;
    },
    set: function set(value) {
      if (value !== this._icon) {
        this._icon = value;

        this._actionBar._onIconPropertyChanged();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(AndroidActionBarSettings.prototype, "iconVisibility", {
    get: function get() {
      return this._iconVisibility;
    },
    set: function set(value) {
      if (value !== this._iconVisibility) {
        this._iconVisibility = value;

        this._actionBar._onIconPropertyChanged();
      }
    },
    enumerable: true,
    configurable: true
  });
  return AndroidActionBarSettings;
}();

exports.AndroidActionBarSettings = AndroidActionBarSettings;

var NavigationButton = function (_super) {
  __extends(NavigationButton, _super);

  function NavigationButton() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  return NavigationButton;
}(ActionItem);

exports.NavigationButton = NavigationButton;

var ActionBar = function (_super) {
  __extends(ActionBar, _super);

  function ActionBar() {
    var _this = _super.call(this) || this;

    _this._android = new AndroidActionBarSettings(_this);
    return _this;
  }

  Object.defineProperty(ActionBar.prototype, "android", {
    get: function get() {
      return this._android;
    },
    enumerable: true,
    configurable: true
  });

  ActionBar.prototype._addChildFromBuilder = function (name, value) {
    if (value instanceof NavigationButton) {
      this.navigationButton = value;
    } else if (value instanceof ActionItem) {
      this.actionItems.addItem(value);
    } else if (value instanceof action_bar_common_1.View) {
      this.titleView = value;
    }
  };

  ActionBar.prototype.createNativeView = function () {
    return new android.support.v7.widget.Toolbar(this._context);
  };

  ActionBar.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    var nativeView = this.nativeViewProtected;
    initializeMenuItemClickListener();
    var menuItemClickListener = new MenuItemClickListener(this);
    nativeView.setOnMenuItemClickListener(menuItemClickListener);
    nativeView.menuItemClickListener = menuItemClickListener;
  };

  ActionBar.prototype.disposeNativeView = function () {
    this.nativeViewProtected.menuItemClickListener.owner = null;

    _super.prototype.disposeNativeView.call(this);
  };

  ActionBar.prototype.onLoaded = function () {
    _super.prototype.onLoaded.call(this);

    this.update();
  };

  ActionBar.prototype.update = function () {
    if (!this.nativeViewProtected) {
      return;
    }

    var page = this.page;

    if (!page.frame || !page.frame._getNavBarVisible(page)) {
      this.nativeViewProtected.setVisibility(android.view.View.GONE);
      return;
    }

    this.nativeViewProtected.setVisibility(android.view.View.VISIBLE);

    this._addActionItems();

    this._updateTitleAndTitleView();

    this._updateIcon();

    this._updateNavigationButton();
  };

  ActionBar.prototype._onAndroidItemSelected = function (itemId) {
    if (this.navigationButton && itemId === R_ID_HOME) {
      this.navigationButton._raiseTap();

      return true;
    }

    var menuItem = undefined;
    var items = this.actionItems.getItems();

    for (var i = 0; i < items.length; i++) {
      if (items[i]._getItemId() === itemId) {
        menuItem = items[i];
        break;
      }
    }

    if (menuItem) {
      menuItem._raiseTap();

      return true;
    }

    return false;
  };

  ActionBar.prototype._updateNavigationButton = function () {
    var navButton = this.navigationButton;

    if (navButton && action_bar_common_1.isVisible(navButton)) {
      var systemIcon = navButton.android.systemIcon;

      if (systemIcon !== undefined) {
        var systemResourceId = getSystemResourceId(systemIcon);

        if (systemResourceId) {
          this.nativeViewProtected.setNavigationIcon(systemResourceId);
        }
      } else if (navButton.icon) {
        var drawableOrId = getDrawableOrResourceId(navButton.icon, appResources);

        if (drawableOrId) {
          this.nativeViewProtected.setNavigationIcon(drawableOrId);
        }
      }

      this.nativeViewProtected.setNavigationContentDescription(navButton.text || null);
      var navBtn_1 = new WeakRef(navButton);
      this.nativeViewProtected.setNavigationOnClickListener(new android.view.View.OnClickListener({
        onClick: function onClick(v) {
          var owner = navBtn_1.get();

          if (owner) {
            owner._raiseTap();
          }
        }
      }));
    } else {
      this.nativeViewProtected.setNavigationIcon(null);
    }
  };

  ActionBar.prototype._updateIcon = function () {
    var visibility = getIconVisibility(this.android.iconVisibility);

    if (visibility) {
      var icon = this.android.icon;

      if (icon !== undefined) {
        var drawableOrId = getDrawableOrResourceId(icon, appResources);

        if (drawableOrId) {
          this.nativeViewProtected.setLogo(drawableOrId);
        }
      } else {
        var defaultIcon = application.android.nativeApp.getApplicationInfo().icon;
        this.nativeViewProtected.setLogo(defaultIcon);
      }
    } else {
      this.nativeViewProtected.setLogo(null);
    }
  };

  ActionBar.prototype._updateTitleAndTitleView = function () {
    if (!this.titleView) {
      var title = this.title;

      if (title !== undefined) {
        this.nativeViewProtected.setTitle(title);
      } else {
        var appContext = application.android.context;
        var appInfo = appContext.getApplicationInfo();
        var appLabel = appContext.getPackageManager().getApplicationLabel(appInfo);

        if (appLabel) {
          this.nativeViewProtected.setTitle(appLabel);
        }
      }
    }
  };

  ActionBar.prototype._addActionItems = function () {
    var menu = this.nativeViewProtected.getMenu();
    var items = this.actionItems.getVisibleItems();
    menu.clear();

    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      var menuItem = menu.add(android.view.Menu.NONE, item._getItemId(), android.view.Menu.NONE, item.text + "");

      if (item.actionView && item.actionView.android) {
        item.android.position = "actionBar";
        menuItem.setActionView(item.actionView.android);

        ActionBar._setOnClickListener(item);
      } else if (item.android.systemIcon) {
        var systemResourceId = getSystemResourceId(item.android.systemIcon);

        if (systemResourceId) {
          menuItem.setIcon(systemResourceId);
        }
      } else if (item.icon) {
        var drawableOrId = getDrawableOrResourceId(item.icon, appResources);

        if (drawableOrId) {
          menuItem.setIcon(drawableOrId);
        }
      }

      var showAsAction = getShowAsAction(item);
      menuItem.setShowAsAction(showAsAction);
    }
  };

  ActionBar._setOnClickListener = function (item) {
    var weakRef = new WeakRef(item);
    item.actionView.android.setOnClickListener(new android.view.View.OnClickListener({
      onClick: function onClick(v) {
        var owner = weakRef.get();

        if (owner) {
          owner._raiseTap();
        }
      }
    }));
  };

  ActionBar.prototype._onTitlePropertyChanged = function () {
    if (this.nativeViewProtected) {
      this._updateTitleAndTitleView();
    }
  };

  ActionBar.prototype._onIconPropertyChanged = function () {
    if (this.nativeViewProtected) {
      this._updateIcon();
    }
  };

  ActionBar.prototype._addViewToNativeVisualTree = function (child, atIndex) {
    if (atIndex === void 0) {
      atIndex = Number.MAX_VALUE;
    }

    _super.prototype._addViewToNativeVisualTree.call(this, child);

    if (this.nativeViewProtected && child.nativeViewProtected) {
      if (atIndex >= this.nativeViewProtected.getChildCount()) {
        this.nativeViewProtected.addView(child.nativeViewProtected);
      } else {
        this.nativeViewProtected.addView(child.nativeViewProtected, atIndex);
      }

      return true;
    }

    return false;
  };

  ActionBar.prototype._removeViewFromNativeVisualTree = function (child) {
    _super.prototype._removeViewFromNativeVisualTree.call(this, child);

    if (this.nativeViewProtected && child.nativeViewProtected) {
      this.nativeViewProtected.removeView(child.nativeViewProtected);
    }
  };

  ActionBar.prototype[action_bar_common_1.colorProperty.getDefault] = function () {
    var nativeView = this.nativeViewProtected;

    if (!defaultTitleTextColor) {
      var tv = getAppCompatTextView(nativeView);

      if (!tv) {
        var title = nativeView.getTitle();
        nativeView.setTitle("");
        tv = getAppCompatTextView(nativeView);

        if (title) {
          nativeView.setTitle(title);
        }
      }

      defaultTitleTextColor = tv ? tv.getTextColors().getDefaultColor() : -570425344;
    }

    return defaultTitleTextColor;
  };

  ActionBar.prototype[action_bar_common_1.colorProperty.setNative] = function (value) {
    var color = value instanceof action_bar_common_1.Color ? value.android : value;
    this.nativeViewProtected.setTitleTextColor(color);
  };

  ActionBar.prototype[action_bar_common_1.flatProperty.setNative] = function (value) {
    var compat = android.support.v4.view.ViewCompat;

    if (compat.setElevation) {
      if (value) {
        compat.setElevation(this.nativeViewProtected, 0);
      } else {
        var val = DEFAULT_ELEVATION * action_bar_common_1.layout.getDisplayDensity();
        compat.setElevation(this.nativeViewProtected, val);
      }
    }
  };

  return ActionBar;
}(action_bar_common_1.ActionBarBase);

exports.ActionBar = ActionBar;

function getAppCompatTextView(toolbar) {
  for (var i = 0, count = toolbar.getChildCount(); i < count; i++) {
    var child = toolbar.getChildAt(i);

    if (child instanceof AppCompatTextView) {
      return child;
    }
  }

  return null;
}

ActionBar.prototype.recycleNativeView = "auto";
var defaultTitleTextColor;

function getDrawableOrResourceId(icon, resources) {
  if (typeof icon !== "string") {
    return undefined;
  }

  var result = undefined;

  if (icon.indexOf(utils_1.RESOURCE_PREFIX) === 0) {
    var resourceId = resources.getIdentifier(icon.substr(utils_1.RESOURCE_PREFIX.length), "drawable", application.android.packageName);

    if (resourceId > 0) {
      result = resourceId;
    }
  } else {
    var drawable = void 0;
    var is = image_source_1.fromFileOrResource(icon);

    if (is) {
      drawable = new android.graphics.drawable.BitmapDrawable(is.android);
    }

    result = drawable;
  }

  if (!result) {
    action_bar_common_1.traceMissingIcon(icon);
  }

  return result;
}

function getShowAsAction(menuItem) {
  switch (menuItem.android.position) {
    case "actionBarIfRoom":
      return android.view.MenuItem.SHOW_AS_ACTION_IF_ROOM;

    case "popup":
      return android.view.MenuItem.SHOW_AS_ACTION_NEVER;

    case "actionBar":
    default:
      return android.view.MenuItem.SHOW_AS_ACTION_ALWAYS;
  }
}

function getIconVisibility(iconVisibility) {
  switch (iconVisibility) {
    case "always":
      return true;

    case "auto":
    case "never":
    default:
      return false;
  }
}

function getSystemResourceId(systemIcon) {
  return android.content.res.Resources.getSystem().getIdentifier(systemIcon, "drawable", "android");
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/activity-indicator/activity-indicator-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var ActivityIndicatorBase = function (_super) {
  __extends(ActivityIndicatorBase, _super);

  function ActivityIndicatorBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ActivityIndicatorBase = __decorate([view_1.CSSType("ActivityIndicator")], ActivityIndicatorBase);
  return ActivityIndicatorBase;
}(view_1.View);

exports.ActivityIndicatorBase = ActivityIndicatorBase;
ActivityIndicatorBase.prototype.recycleNativeView = "auto";
exports.busyProperty = new view_1.Property({
  name: "busy",
  defaultValue: false,
  valueConverter: view_1.booleanConverter
});
exports.busyProperty.register(ActivityIndicatorBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/activity-indicator/activity-indicator.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var activity_indicator_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/activity-indicator/activity-indicator-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/activity-indicator/activity-indicator-common.js"));

var ActivityIndicator = function (_super) {
  __extends(ActivityIndicator, _super);

  function ActivityIndicator() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ActivityIndicator.prototype.createNativeView = function () {
    var progressBar = new android.widget.ProgressBar(this._context);
    progressBar.setVisibility(android.view.View.INVISIBLE);
    progressBar.setIndeterminate(true);
    return progressBar;
  };

  ActivityIndicator.prototype[activity_indicator_common_1.busyProperty.getDefault] = function () {
    return false;
  };

  ActivityIndicator.prototype[activity_indicator_common_1.busyProperty.setNative] = function (value) {
    if (this.visibility === activity_indicator_common_1.Visibility.VISIBLE) {
      this.nativeViewProtected.setVisibility(value ? android.view.View.VISIBLE : android.view.View.INVISIBLE);
    }
  };

  ActivityIndicator.prototype[activity_indicator_common_1.visibilityProperty.getDefault] = function () {
    return activity_indicator_common_1.Visibility.HIDDEN;
  };

  ActivityIndicator.prototype[activity_indicator_common_1.visibilityProperty.setNative] = function (value) {
    switch (value) {
      case activity_indicator_common_1.Visibility.VISIBLE:
        this.nativeViewProtected.setVisibility(this.busy ? android.view.View.VISIBLE : android.view.View.INVISIBLE);
        break;

      case activity_indicator_common_1.Visibility.HIDDEN:
        this.nativeViewProtected.setVisibility(android.view.View.INVISIBLE);
        break;

      case activity_indicator_common_1.Visibility.COLLAPSE:
        this.nativeViewProtected.setVisibility(android.view.View.GONE);
        break;

      default:
        throw new Error("Invalid visibility value: " + value + ". Valid values are: \"" + activity_indicator_common_1.Visibility.VISIBLE + "\", \"" + activity_indicator_common_1.Visibility.HIDDEN + "\", \"" + activity_indicator_common_1.Visibility.COLLAPSE + "\".");
    }
  };

  ActivityIndicator.prototype[activity_indicator_common_1.colorProperty.getDefault] = function () {
    return -1;
  };

  ActivityIndicator.prototype[activity_indicator_common_1.colorProperty.setNative] = function (value) {
    if (value instanceof activity_indicator_common_1.Color) {
      this.nativeViewProtected.getIndeterminateDrawable().setColorFilter(value.android, android.graphics.PorterDuff.Mode.SRC_IN);
    } else {
      this.nativeViewProtected.getIndeterminateDrawable().clearColorFilter();
    }
  };

  return ActivityIndicator;
}(activity_indicator_common_1.ActivityIndicatorBase);

exports.ActivityIndicator = ActivityIndicator;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/animation/animation-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var color_1 = __webpack_require__("../node_modules/tns-core-modules/color/color.js");

exports.Color = color_1.Color;

var trace_1 = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

exports.traceEnabled = trace_1.isEnabled;
exports.traceWrite = trace_1.write;
exports.traceCategories = trace_1.categories;
exports.traceType = trace_1.messageType;
var Properties;

(function (Properties) {
  Properties.opacity = "opacity";
  Properties.backgroundColor = "backgroundColor";
  Properties.translate = "translate";
  Properties.rotate = "rotate";
  Properties.scale = "scale";
})(Properties = exports.Properties || (exports.Properties = {}));

var CubicBezierAnimationCurve = function () {
  function CubicBezierAnimationCurve(x1, y1, x2, y2) {
    this.x1 = x1;
    this.y1 = y1;
    this.x2 = x2;
    this.y2 = y2;
  }

  return CubicBezierAnimationCurve;
}();

exports.CubicBezierAnimationCurve = CubicBezierAnimationCurve;

var AnimationBase = function () {
  function AnimationBase(animationDefinitions, playSequentially) {
    if (!animationDefinitions || animationDefinitions.length === 0) {
      throw new Error("No animation definitions specified");
    }

    if (trace_1.isEnabled()) {
      trace_1.write("Analyzing " + animationDefinitions.length + " animation definitions...", trace_1.categories.Animation);
    }

    this._propertyAnimations = new Array();

    for (var i = 0, length_1 = animationDefinitions.length; i < length_1; i++) {
      if (animationDefinitions[i].curve) {
        animationDefinitions[i].curve = this._resolveAnimationCurve(animationDefinitions[i].curve);
      }

      this._propertyAnimations = this._propertyAnimations.concat(AnimationBase._createPropertyAnimations(animationDefinitions[i]));
    }

    if (this._propertyAnimations.length === 0) {
      throw new Error("Nothing to animate.");
    }

    if (trace_1.isEnabled()) {
      trace_1.write("Created " + this._propertyAnimations.length + " individual property animations.", trace_1.categories.Animation);
    }

    this._playSequentially = playSequentially;
  }

  AnimationBase.prototype._rejectAlreadyPlaying = function () {
    var reason = "Animation is already playing.";
    trace_1.write(reason, trace_1.categories.Animation, trace_1.messageType.warn);
    return new Promise(function (resolve, reject) {
      reject(reason);
    });
  };

  AnimationBase.prototype.play = function () {
    var _this_1 = this;

    var animationFinishedPromise = new Promise(function (resolve, reject) {
      _this_1._resolve = resolve;
      _this_1._reject = reject;
    });
    this.fixupAnimationPromise(animationFinishedPromise);
    this._isPlaying = true;
    return animationFinishedPromise;
  };

  AnimationBase.prototype.fixupAnimationPromise = function (promise) {
    var _this = this;

    promise.cancel = function () {
      _this.cancel();
    };

    var _then = promise.then;

    promise.then = function () {
      var r = _then.apply(promise, arguments);

      _this.fixupAnimationPromise(r);

      return r;
    };

    var _catch = promise.catch;

    promise.catch = function () {
      var r = _catch.apply(promise, arguments);

      _this.fixupAnimationPromise(r);

      return r;
    };
  };

  AnimationBase.prototype.cancel = function () {};

  Object.defineProperty(AnimationBase.prototype, "isPlaying", {
    get: function get() {
      return this._isPlaying;
    },
    enumerable: true,
    configurable: true
  });

  AnimationBase.prototype._resolveAnimationFinishedPromise = function () {
    this._isPlaying = false;

    this._resolve();
  };

  AnimationBase.prototype._rejectAnimationFinishedPromise = function () {
    this._isPlaying = false;

    this._reject(new Error("Animation cancelled."));
  };

  AnimationBase._createPropertyAnimations = function (animationDefinition) {
    if (!animationDefinition.target) {
      throw new Error("No animation target specified.");
    }

    for (var item in animationDefinition) {
      if (animationDefinition[item] === undefined) {
        continue;
      }

      if ((item === Properties.opacity || item === Properties.rotate || item === "duration" || item === "delay" || item === "iterations") && typeof animationDefinition[item] !== "number") {
        throw new Error("Property " + item + " must be valid number. Value: " + animationDefinition[item]);
      } else if ((item === Properties.scale || item === Properties.translate) && (typeof animationDefinition[item].x !== "number" || typeof animationDefinition[item].y !== "number")) {
        throw new Error("Property " + item + " must be valid Pair. Value: " + animationDefinition[item]);
      } else if (item === Properties.backgroundColor && !color_1.Color.isValid(animationDefinition.backgroundColor)) {
        throw new Error("Property " + item + " must be valid color. Value: " + animationDefinition[item]);
      }
    }

    var propertyAnimations = new Array();

    if (animationDefinition.opacity !== undefined) {
      propertyAnimations.push({
        target: animationDefinition.target,
        property: Properties.opacity,
        value: animationDefinition.opacity,
        duration: animationDefinition.duration,
        delay: animationDefinition.delay,
        iterations: animationDefinition.iterations,
        curve: animationDefinition.curve
      });
    }

    if (animationDefinition.backgroundColor !== undefined) {
      propertyAnimations.push({
        target: animationDefinition.target,
        property: Properties.backgroundColor,
        value: typeof animationDefinition.backgroundColor === "string" ? new color_1.Color(animationDefinition.backgroundColor) : animationDefinition.backgroundColor,
        duration: animationDefinition.duration,
        delay: animationDefinition.delay,
        iterations: animationDefinition.iterations,
        curve: animationDefinition.curve
      });
    }

    if (animationDefinition.translate !== undefined) {
      propertyAnimations.push({
        target: animationDefinition.target,
        property: Properties.translate,
        value: animationDefinition.translate,
        duration: animationDefinition.duration,
        delay: animationDefinition.delay,
        iterations: animationDefinition.iterations,
        curve: animationDefinition.curve
      });
    }

    if (animationDefinition.scale !== undefined) {
      propertyAnimations.push({
        target: animationDefinition.target,
        property: Properties.scale,
        value: animationDefinition.scale,
        duration: animationDefinition.duration,
        delay: animationDefinition.delay,
        iterations: animationDefinition.iterations,
        curve: animationDefinition.curve
      });
    }

    if (animationDefinition.rotate !== undefined) {
      propertyAnimations.push({
        target: animationDefinition.target,
        property: Properties.rotate,
        value: animationDefinition.rotate,
        duration: animationDefinition.duration,
        delay: animationDefinition.delay,
        iterations: animationDefinition.iterations,
        curve: animationDefinition.curve
      });
    }

    if (propertyAnimations.length === 0) {
      throw new Error("No animation property specified.");
    }

    return propertyAnimations;
  };

  AnimationBase._getAnimationInfo = function (animation) {
    return JSON.stringify({
      target: animation.target.id,
      property: animation.property,
      value: animation.value,
      duration: animation.duration,
      delay: animation.delay,
      iterations: animation.iterations,
      curve: animation.curve
    });
  };

  return AnimationBase;
}();

exports.AnimationBase = AnimationBase;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/animation/animation.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var animation_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/animation/animation-common.js");

var style_properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var lazy_1 = __webpack_require__("../node_modules/tns-core-modules/utils/lazy.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/animation/animation-common.js"));

var argbEvaluator;

function ensureArgbEvaluator() {
  if (!argbEvaluator) {
    argbEvaluator = new android.animation.ArgbEvaluator();
  }
}

var easeIn = lazy_1.default(function () {
  return new android.view.animation.AccelerateInterpolator(1);
});
var easeOut = lazy_1.default(function () {
  return new android.view.animation.DecelerateInterpolator(1);
});
var easeInOut = lazy_1.default(function () {
  return new android.view.animation.AccelerateDecelerateInterpolator();
});
var linear = lazy_1.default(function () {
  return new android.view.animation.LinearInterpolator();
});
var bounce = lazy_1.default(function () {
  return new android.view.animation.BounceInterpolator();
});
var keyPrefix = "ui.animation.";
var propertyKeys = {};
propertyKeys[animation_common_1.Properties.backgroundColor] = Symbol(keyPrefix + animation_common_1.Properties.backgroundColor);
propertyKeys[animation_common_1.Properties.opacity] = Symbol(keyPrefix + animation_common_1.Properties.opacity);
propertyKeys[animation_common_1.Properties.rotate] = Symbol(keyPrefix + animation_common_1.Properties.rotate);
propertyKeys[animation_common_1.Properties.scale] = Symbol(keyPrefix + animation_common_1.Properties.scale);
propertyKeys[animation_common_1.Properties.translate] = Symbol(keyPrefix + animation_common_1.Properties.translate);

function _resolveAnimationCurve(curve) {
  switch (curve) {
    case "easeIn":
      if (animation_common_1.traceEnabled()) {
        animation_common_1.traceWrite("Animation curve resolved to android.view.animation.AccelerateInterpolator(1).", animation_common_1.traceCategories.Animation);
      }

      return easeIn();

    case "easeOut":
      if (animation_common_1.traceEnabled()) {
        animation_common_1.traceWrite("Animation curve resolved to android.view.animation.DecelerateInterpolator(1).", animation_common_1.traceCategories.Animation);
      }

      return easeOut();

    case "easeInOut":
      if (animation_common_1.traceEnabled()) {
        animation_common_1.traceWrite("Animation curve resolved to android.view.animation.AccelerateDecelerateInterpolator().", animation_common_1.traceCategories.Animation);
      }

      return easeInOut();

    case "linear":
      if (animation_common_1.traceEnabled()) {
        animation_common_1.traceWrite("Animation curve resolved to android.view.animation.LinearInterpolator().", animation_common_1.traceCategories.Animation);
      }

      return linear();

    case "spring":
      if (animation_common_1.traceEnabled()) {
        animation_common_1.traceWrite("Animation curve resolved to android.view.animation.BounceInterpolator().", animation_common_1.traceCategories.Animation);
      }

      return bounce();

    case "ease":
      return android.support.v4.view.animation.PathInterpolatorCompat.create(0.25, 0.1, 0.25, 1.0);

    default:
      if (animation_common_1.traceEnabled()) {
        animation_common_1.traceWrite("Animation curve resolved to original: " + curve, animation_common_1.traceCategories.Animation);
      }

      if (curve instanceof animation_common_1.CubicBezierAnimationCurve) {
        return android.support.v4.view.animation.PathInterpolatorCompat.create(curve.x1, curve.y1, curve.x2, curve.y2);
      } else if (curve && curve.getInterpolation) {
        return curve;
      } else if (curve instanceof android.view.animation.LinearInterpolator) {
        return curve;
      } else {
        throw new Error("Invalid animation curve: " + curve);
      }

  }
}

exports._resolveAnimationCurve = _resolveAnimationCurve;

var Animation = function (_super) {
  __extends(Animation, _super);

  function Animation(animationDefinitions, playSequentially) {
    var _this = _super.call(this, animationDefinitions, playSequentially) || this;

    _this._valueSource = "animation";

    if (animationDefinitions.length > 0 && animationDefinitions[0].valueSource !== undefined) {
      _this._valueSource = animationDefinitions[0].valueSource;
    }

    var that = new WeakRef(_this);
    _this._animatorListener = new android.animation.Animator.AnimatorListener({
      onAnimationStart: function onAnimationStart(animator) {
        if (animation_common_1.traceEnabled()) {
          animation_common_1.traceWrite("MainAnimatorListener.onAndroidAnimationStart(" + animator + ")", animation_common_1.traceCategories.Animation);
        }
      },
      onAnimationRepeat: function onAnimationRepeat(animator) {
        if (animation_common_1.traceEnabled()) {
          animation_common_1.traceWrite("MainAnimatorListener.onAnimationRepeat(" + animator + ")", animation_common_1.traceCategories.Animation);
        }
      },
      onAnimationEnd: function onAnimationEnd(animator) {
        if (animation_common_1.traceEnabled()) {
          animation_common_1.traceWrite("MainAnimatorListener.onAnimationEnd(" + animator + ")", animation_common_1.traceCategories.Animation);
        }

        var thisRef = that.get();

        if (thisRef) {
          thisRef._onAndroidAnimationEnd();
        }
      },
      onAnimationCancel: function onAnimationCancel(animator) {
        if (animation_common_1.traceEnabled()) {
          animation_common_1.traceWrite("MainAnimatorListener.onAnimationCancel(" + animator + ")", animation_common_1.traceCategories.Animation);
        }

        var thisRef = that.get();

        if (thisRef) {
          thisRef._onAndroidAnimationCancel();
        }
      }
    });
    return _this;
  }

  Animation.prototype.play = function () {
    if (this.isPlaying) {
      return this._rejectAlreadyPlaying();
    }

    var animationFinishedPromise = _super.prototype.play.call(this);

    this._animators = new Array();
    this._propertyUpdateCallbacks = new Array();
    this._propertyResetCallbacks = new Array();

    for (var i = 0, length_1 = this._propertyAnimations.length; i < length_1; i++) {
      this._createAnimators(this._propertyAnimations[i]);
    }

    this._nativeAnimatorsArray = Array.create(android.animation.Animator, this._animators.length);

    for (var i = 0, length_2 = this._animators.length; i < length_2; i++) {
      this._nativeAnimatorsArray[i] = this._animators[i];
    }

    this._animatorSet = new android.animation.AnimatorSet();

    this._animatorSet.addListener(this._animatorListener);

    if (this._animators.length > 0) {
      if (this._playSequentially) {
        this._animatorSet.playSequentially(this._nativeAnimatorsArray);
      } else {
        this._animatorSet.playTogether(this._nativeAnimatorsArray);
      }
    }

    if (animation_common_1.traceEnabled()) {
      animation_common_1.traceWrite("Starting " + this._nativeAnimatorsArray.length + " animations " + (this._playSequentially ? "sequentially." : "together."), animation_common_1.traceCategories.Animation);
    }

    this._animatorSet.setupStartValues();

    this._animatorSet.start();

    return animationFinishedPromise;
  };

  Animation.prototype.cancel = function () {
    if (!this.isPlaying) {
      animation_common_1.traceWrite("Animation is not currently playing.", animation_common_1.traceCategories.Animation, animation_common_1.traceType.warn);
      return;
    }

    animation_common_1.traceWrite("Cancelling AnimatorSet.", animation_common_1.traceCategories.Animation);

    this._animatorSet.cancel();
  };

  Animation.prototype._resolveAnimationCurve = function (curve) {
    return _resolveAnimationCurve(curve);
  };

  Animation.prototype._onAndroidAnimationEnd = function () {
    if (!this.isPlaying) {
      return;
    }

    this._propertyUpdateCallbacks.forEach(function (v) {
      return v();
    });

    this._resolveAnimationFinishedPromise();

    if (this._target) {
      this._target._removeAnimation(this);
    }
  };

  Animation.prototype._onAndroidAnimationCancel = function () {
    this._propertyResetCallbacks.forEach(function (v) {
      return v();
    });

    this._rejectAnimationFinishedPromise();

    if (this._target) {
      this._target._removeAnimation(this);
    }
  };

  Animation.prototype._createAnimators = function (propertyAnimation) {
    if (!propertyAnimation.target.nativeViewProtected) {
      return;
    }

    if (animation_common_1.traceEnabled()) {
      animation_common_1.traceWrite("Creating ObjectAnimator(s) for animation: " + Animation._getAnimationInfo(propertyAnimation) + "...", animation_common_1.traceCategories.Animation);
    }

    if (propertyAnimation.target === null || propertyAnimation.target === undefined) {
      throw new Error("Animation target cannot be null or undefined; property: " + propertyAnimation.property + "; value: " + propertyAnimation.value + ";");
    }

    if (propertyAnimation.property === null || propertyAnimation.property === undefined) {
      throw new Error("Animation property cannot be null or undefined; target: " + propertyAnimation.target + "; value: " + propertyAnimation.value + ";");
    }

    if (propertyAnimation.value === null || propertyAnimation.value === undefined) {
      throw new Error("Animation value cannot be null or undefined; target: " + propertyAnimation.target + "; property: " + propertyAnimation.property + ";");
    }

    this._target = propertyAnimation.target;
    var nativeArray;
    var nativeView = propertyAnimation.target.nativeViewProtected;
    var animators = new Array();
    var propertyUpdateCallbacks = new Array();
    var propertyResetCallbacks = new Array();
    var originalValue1;
    var originalValue2;
    var density = utils_1.layout.getDisplayDensity();
    var xyObjectAnimators;
    var animatorSet;
    var key = propertyKeys[propertyAnimation.property];

    if (key) {
      propertyAnimation.target[key] = propertyAnimation;
    }

    function checkAnimation(cb) {
      return function () {
        if (propertyAnimation.target[key] === propertyAnimation) {
          delete propertyAnimation.target[key];
          cb();
        }
      };
    }

    var setLocal = this._valueSource === "animation";
    var style = propertyAnimation.target.style;

    switch (propertyAnimation.property) {
      case animation_common_1.Properties.opacity:
        style_properties_1.opacityProperty._initDefaultNativeValue(style);

        originalValue1 = nativeView.getAlpha();
        nativeArray = Array.create("float", 1);
        nativeArray[0] = propertyAnimation.value;
        propertyUpdateCallbacks.push(checkAnimation(function () {
          propertyAnimation.target.style[setLocal ? style_properties_1.opacityProperty.name : style_properties_1.opacityProperty.keyframe] = propertyAnimation.value;
        }));
        propertyResetCallbacks.push(checkAnimation(function () {
          if (setLocal) {
            propertyAnimation.target.style[style_properties_1.opacityProperty.name] = originalValue1;
          } else {
            propertyAnimation.target.style[style_properties_1.opacityProperty.keyframe] = originalValue1;
          }

          if (propertyAnimation.target.nativeViewProtected) {
            propertyAnimation.target[style_properties_1.opacityProperty.setNative](propertyAnimation.target.style.opacity);
          }
        }));
        animators.push(android.animation.ObjectAnimator.ofFloat(nativeView, "alpha", nativeArray));
        break;

      case animation_common_1.Properties.backgroundColor:
        style_properties_1.backgroundColorProperty._initDefaultNativeValue(style);

        ensureArgbEvaluator();
        originalValue1 = propertyAnimation.target.backgroundColor;
        nativeArray = Array.create(java.lang.Object, 2);
        nativeArray[0] = propertyAnimation.target.backgroundColor ? java.lang.Integer.valueOf(propertyAnimation.target.backgroundColor.argb) : java.lang.Integer.valueOf(-1);
        nativeArray[1] = java.lang.Integer.valueOf(propertyAnimation.value.argb);
        var animator = android.animation.ValueAnimator.ofObject(argbEvaluator, nativeArray);
        animator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener({
          onAnimationUpdate: function onAnimationUpdate(animator) {
            var argb = animator.getAnimatedValue().intValue();
            propertyAnimation.target.style[setLocal ? style_properties_1.backgroundColorProperty.name : style_properties_1.backgroundColorProperty.keyframe] = new animation_common_1.Color(argb);
          }
        }));
        propertyUpdateCallbacks.push(checkAnimation(function () {
          propertyAnimation.target.style[setLocal ? style_properties_1.backgroundColorProperty.name : style_properties_1.backgroundColorProperty.keyframe] = propertyAnimation.value;
        }));
        propertyResetCallbacks.push(checkAnimation(function () {
          if (setLocal) {
            propertyAnimation.target.style[style_properties_1.backgroundColorProperty.name] = originalValue1;
          } else {
            propertyAnimation.target.style[style_properties_1.backgroundColorProperty.keyframe] = originalValue1;
          }

          if (propertyAnimation.target.nativeViewProtected && propertyAnimation.target[style_properties_1.backgroundColorProperty.setNative]) {
            propertyAnimation.target[style_properties_1.backgroundColorProperty.setNative](propertyAnimation.target.style.backgroundColor);
          }
        }));
        animators.push(animator);
        break;

      case animation_common_1.Properties.translate:
        style_properties_1.translateXProperty._initDefaultNativeValue(style);

        style_properties_1.translateYProperty._initDefaultNativeValue(style);

        xyObjectAnimators = Array.create(android.animation.Animator, 2);
        nativeArray = Array.create("float", 1);
        nativeArray[0] = propertyAnimation.value.x * density;
        xyObjectAnimators[0] = android.animation.ObjectAnimator.ofFloat(nativeView, "translationX", nativeArray);
        xyObjectAnimators[0].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
        nativeArray = Array.create("float", 1);
        nativeArray[0] = propertyAnimation.value.y * density;
        xyObjectAnimators[1] = android.animation.ObjectAnimator.ofFloat(nativeView, "translationY", nativeArray);
        xyObjectAnimators[1].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
        originalValue1 = nativeView.getTranslationX() / density;
        originalValue2 = nativeView.getTranslationY() / density;
        propertyUpdateCallbacks.push(checkAnimation(function () {
          propertyAnimation.target.style[setLocal ? style_properties_1.translateXProperty.name : style_properties_1.translateXProperty.keyframe] = propertyAnimation.value.x;
          propertyAnimation.target.style[setLocal ? style_properties_1.translateYProperty.name : style_properties_1.translateYProperty.keyframe] = propertyAnimation.value.y;
        }));
        propertyResetCallbacks.push(checkAnimation(function () {
          if (setLocal) {
            propertyAnimation.target.style[style_properties_1.translateXProperty.name] = originalValue1;
            propertyAnimation.target.style[style_properties_1.translateYProperty.name] = originalValue2;
          } else {
            propertyAnimation.target.style[style_properties_1.translateXProperty.keyframe] = originalValue1;
            propertyAnimation.target.style[style_properties_1.translateYProperty.keyframe] = originalValue2;
          }

          if (propertyAnimation.target.nativeViewProtected) {
            propertyAnimation.target[style_properties_1.translateXProperty.setNative](propertyAnimation.target.style.translateX);
            propertyAnimation.target[style_properties_1.translateYProperty.setNative](propertyAnimation.target.style.translateY);
          }
        }));
        animatorSet = new android.animation.AnimatorSet();
        animatorSet.playTogether(xyObjectAnimators);
        animatorSet.setupStartValues();
        animators.push(animatorSet);
        break;

      case animation_common_1.Properties.scale:
        style_properties_1.scaleXProperty._initDefaultNativeValue(style);

        style_properties_1.scaleYProperty._initDefaultNativeValue(style);

        xyObjectAnimators = Array.create(android.animation.Animator, 2);
        nativeArray = Array.create("float", 1);
        nativeArray[0] = propertyAnimation.value.x;
        xyObjectAnimators[0] = android.animation.ObjectAnimator.ofFloat(nativeView, "scaleX", nativeArray);
        xyObjectAnimators[0].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
        nativeArray = Array.create("float", 1);
        nativeArray[0] = propertyAnimation.value.y;
        xyObjectAnimators[1] = android.animation.ObjectAnimator.ofFloat(nativeView, "scaleY", nativeArray);
        xyObjectAnimators[1].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
        originalValue1 = nativeView.getScaleX();
        originalValue2 = nativeView.getScaleY();
        propertyUpdateCallbacks.push(checkAnimation(function () {
          propertyAnimation.target.style[setLocal ? style_properties_1.scaleXProperty.name : style_properties_1.scaleXProperty.keyframe] = propertyAnimation.value.x;
          propertyAnimation.target.style[setLocal ? style_properties_1.scaleYProperty.name : style_properties_1.scaleYProperty.keyframe] = propertyAnimation.value.y;
        }));
        propertyResetCallbacks.push(checkAnimation(function () {
          if (setLocal) {
            propertyAnimation.target.style[style_properties_1.scaleXProperty.name] = originalValue1;
            propertyAnimation.target.style[style_properties_1.scaleYProperty.name] = originalValue2;
          } else {
            propertyAnimation.target.style[style_properties_1.scaleXProperty.keyframe] = originalValue1;
            propertyAnimation.target.style[style_properties_1.scaleYProperty.keyframe] = originalValue2;
          }

          if (propertyAnimation.target.nativeViewProtected) {
            propertyAnimation.target[style_properties_1.scaleXProperty.setNative](propertyAnimation.target.style.scaleX);
            propertyAnimation.target[style_properties_1.scaleYProperty.setNative](propertyAnimation.target.style.scaleY);
          }
        }));
        animatorSet = new android.animation.AnimatorSet();
        animatorSet.playTogether(xyObjectAnimators);
        animatorSet.setupStartValues();
        animators.push(animatorSet);
        break;

      case animation_common_1.Properties.rotate:
        style_properties_1.rotateProperty._initDefaultNativeValue(style);

        originalValue1 = nativeView.getRotation();
        nativeArray = Array.create("float", 1);
        nativeArray[0] = propertyAnimation.value;
        propertyUpdateCallbacks.push(checkAnimation(function () {
          propertyAnimation.target.style[setLocal ? style_properties_1.rotateProperty.name : style_properties_1.rotateProperty.keyframe] = propertyAnimation.value;
        }));
        propertyResetCallbacks.push(checkAnimation(function () {
          if (setLocal) {
            propertyAnimation.target.style[style_properties_1.rotateProperty.name] = originalValue1;
          } else {
            propertyAnimation.target.style[style_properties_1.rotateProperty.keyframe] = originalValue1;
          }

          if (propertyAnimation.target.nativeViewProtected) {
            propertyAnimation.target[style_properties_1.rotateProperty.setNative](propertyAnimation.target.style.rotate);
          }
        }));
        animators.push(android.animation.ObjectAnimator.ofFloat(nativeView, "rotation", nativeArray));
        break;

      default:
        throw new Error("Cannot animate " + propertyAnimation.property);
    }

    for (var i = 0, length_3 = animators.length; i < length_3; i++) {
      if (propertyAnimation.duration !== undefined) {
        animators[i].setDuration(propertyAnimation.duration);
      }

      if (propertyAnimation.delay !== undefined) {
        animators[i].setStartDelay(propertyAnimation.delay);
      }

      if (propertyAnimation.iterations !== undefined && animators[i] instanceof android.animation.ValueAnimator) {
        animators[i].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
      }

      if (propertyAnimation.curve !== undefined) {
        animators[i].setInterpolator(propertyAnimation.curve);
      }

      if (animation_common_1.traceEnabled()) {
        animation_common_1.traceWrite("Animator created: " + animators[i], animation_common_1.traceCategories.Animation);
      }
    }

    this._animators = this._animators.concat(animators);
    this._propertyUpdateCallbacks = this._propertyUpdateCallbacks.concat(propertyUpdateCallbacks);
    this._propertyResetCallbacks = this._propertyResetCallbacks.concat(propertyResetCallbacks);
  };

  Animation._getAndroidRepeatCount = function (iterations) {
    return iterations === Number.POSITIVE_INFINITY ? android.view.animation.Animation.INFINITE : iterations - 1;
  };

  return Animation;
}(animation_common_1.AnimationBase);

exports.Animation = Animation;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/animation/keyframe-animation.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var enums_1 = __webpack_require__("../node_modules/tns-core-modules/ui/enums/enums.js");

var trace_1 = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var animation_1 = __webpack_require__("../node_modules/tns-core-modules/ui/animation/animation.js");

var style_properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js");

var Keyframes = function () {
  function Keyframes() {}

  return Keyframes;
}();

exports.Keyframes = Keyframes;

var UnparsedKeyframe = function () {
  function UnparsedKeyframe() {}

  return UnparsedKeyframe;
}();

exports.UnparsedKeyframe = UnparsedKeyframe;

var KeyframeDeclaration = function () {
  function KeyframeDeclaration() {}

  return KeyframeDeclaration;
}();

exports.KeyframeDeclaration = KeyframeDeclaration;

var KeyframeInfo = function () {
  function KeyframeInfo() {
    this.curve = enums_1.AnimationCurve.ease;
  }

  return KeyframeInfo;
}();

exports.KeyframeInfo = KeyframeInfo;

var KeyframeAnimationInfo = function () {
  function KeyframeAnimationInfo() {
    this.name = "";
    this.duration = 0.3;
    this.delay = 0;
    this.iterations = 1;
    this.curve = "ease";
    this.isForwards = false;
    this.isReverse = false;
  }

  return KeyframeAnimationInfo;
}();

exports.KeyframeAnimationInfo = KeyframeAnimationInfo;

var KeyframeAnimation = function () {
  function KeyframeAnimation() {
    this.delay = 0;
    this.iterations = 1;
  }

  KeyframeAnimation.keyframeAnimationFromInfo = function (info) {
    var length = info.keyframes.length;
    var animations = new Array();
    var startDuration = 0;

    if (info.isReverse) {
      for (var index_1 = length - 1; index_1 >= 0; index_1--) {
        var keyframe = info.keyframes[index_1];
        startDuration = KeyframeAnimation.parseKeyframe(info, keyframe, animations, startDuration);
      }
    } else {
      for (var index_2 = 0; index_2 < length; index_2++) {
        var keyframe = info.keyframes[index_2];
        startDuration = KeyframeAnimation.parseKeyframe(info, keyframe, animations, startDuration);
      }

      for (var index_3 = length - 1; index_3 > 0; index_3--) {
        var a1 = animations[index_3];
        var a2 = animations[index_3 - 1];

        if (a2["curve"] !== undefined) {
          a1["curve"] = a2["curve"];
          a2["curve"] = undefined;
        }
      }
    }

    animations.map(function (a) {
      return a["curve"] ? a : Object.assign(a, {
        curve: info.curve
      });
    });
    var animation = new KeyframeAnimation();
    animation.delay = info.delay;
    animation.iterations = info.iterations;
    animation.animations = animations;
    animation._isForwards = info.isForwards;
    return animation;
  };

  KeyframeAnimation.parseKeyframe = function (info, keyframe, animations, startDuration) {
    var animation = {};

    for (var _i = 0, _a = keyframe.declarations; _i < _a.length; _i++) {
      var declaration = _a[_i];
      animation[declaration.property] = declaration.value;
    }

    var duration = keyframe.duration;

    if (duration === 0) {
      duration = 0.01;
    } else {
      duration = info.duration * duration - startDuration;
      startDuration += duration;
    }

    animation.duration = info.isReverse ? info.duration - duration : duration;
    animation.curve = keyframe.curve;
    animation.forceLayer = true;
    animation.valueSource = "keyframe";
    animations.push(animation);
    return startDuration;
  };

  Object.defineProperty(KeyframeAnimation.prototype, "isPlaying", {
    get: function get() {
      return this._isPlaying;
    },
    enumerable: true,
    configurable: true
  });

  KeyframeAnimation.prototype.cancel = function () {
    if (!this.isPlaying) {
      trace_1.write("Keyframe animation is already playing.", trace_1.categories.Animation, trace_1.messageType.warn);
      return;
    }

    this._isPlaying = false;

    for (var i = this._nativeAnimations.length - 1; i >= 0; i--) {
      var animation = this._nativeAnimations[i];

      if (animation.isPlaying) {
        animation.cancel();
      }
    }

    if (this._nativeAnimations.length > 0) {
      var animation = this._nativeAnimations[0];

      this._resetAnimationValues(this._target, animation);
    }

    this._resetAnimations();
  };

  KeyframeAnimation.prototype.play = function (view) {
    var _this = this;

    if (this._isPlaying) {
      trace_1.write("Keyframe animation is already playing.", trace_1.categories.Animation, trace_1.messageType.warn);
      return new Promise(function (resolve) {
        resolve();
      });
    }

    var animationFinishedPromise = new Promise(function (resolve) {
      _this._resolve = resolve;
    });
    this._isPlaying = true;
    this._nativeAnimations = new Array();
    this._target = view;

    if (this.delay !== 0) {
      setTimeout(function () {
        return _this.animate(view, 0, _this.iterations);
      }, this.delay);
    } else {
      this.animate(view, 0, this.iterations);
    }

    return animationFinishedPromise;
  };

  KeyframeAnimation.prototype.animate = function (view, index, iterations) {
    var _this = this;

    if (!this._isPlaying) {
      return;
    }

    if (index === 0) {
      var animation = this.animations[0];

      if ("backgroundColor" in animation) {
        view.style[style_properties_1.backgroundColorProperty.keyframe] = animation.backgroundColor;
      }

      if ("scale" in animation) {
        view.style[style_properties_1.scaleXProperty.keyframe] = animation.scale.x;
        view.style[style_properties_1.scaleYProperty.keyframe] = animation.scale.y;
      }

      if ("translate" in animation) {
        view.style[style_properties_1.translateXProperty.keyframe] = animation.translate.x;
        view.style[style_properties_1.translateYProperty.keyframe] = animation.translate.y;
      }

      if ("rotate" in animation) {
        view.style[style_properties_1.rotateProperty.keyframe] = animation.rotate;
      }

      if ("opacity" in animation) {
        view.style[style_properties_1.opacityProperty.keyframe] = animation.opacity;
      }

      setTimeout(function () {
        return _this.animate(view, 1, iterations);
      }, 1);
    } else if (index < 0 || index >= this.animations.length) {
      iterations -= 1;

      if (iterations > 0) {
        this.animate(view, 0, iterations);
      } else {
        if (this._isForwards === false) {
          var animation = this.animations[this.animations.length - 1];

          this._resetAnimationValues(view, animation);
        }

        this._resolveAnimationFinishedPromise();
      }
    } else {
      var animation = void 0;
      var cachedAnimation = this._nativeAnimations[index - 1];

      if (cachedAnimation) {
        animation = cachedAnimation;
      } else {
        var animationDef = this.animations[index];
        animationDef.target = view;
        animation = new animation_1.Animation([animationDef]);

        this._nativeAnimations.push(animation);
      }

      animation.play().then(function () {
        _this.animate(view, index + 1, iterations);
      }, function (error) {
        trace_1.write(typeof error === "string" ? error : error.message, trace_1.categories.Animation, trace_1.messageType.warn);
      }).catch(function (error) {
        trace_1.write(typeof error === "string" ? error : error.message, trace_1.categories.Animation, trace_1.messageType.warn);
      });
    }
  };

  KeyframeAnimation.prototype._resolveAnimationFinishedPromise = function () {
    this._nativeAnimations = new Array();
    this._isPlaying = false;
    this._target = null;

    this._resolve();
  };

  KeyframeAnimation.prototype._resetAnimations = function () {
    this._nativeAnimations = new Array();
    this._isPlaying = false;
    this._target = null;
  };

  KeyframeAnimation.prototype._resetAnimationValues = function (view, animation) {
    if ("backgroundColor" in animation) {
      view.style[style_properties_1.backgroundColorProperty.keyframe] = properties_1.unsetValue;
    }

    if ("scale" in animation) {
      view.style[style_properties_1.scaleXProperty.keyframe] = properties_1.unsetValue;
      view.style[style_properties_1.scaleYProperty.keyframe] = properties_1.unsetValue;
    }

    if ("translate" in animation) {
      view.style[style_properties_1.translateXProperty.keyframe] = properties_1.unsetValue;
      view.style[style_properties_1.translateYProperty.keyframe] = properties_1.unsetValue;
    }

    if ("rotate" in animation) {
      view.style[style_properties_1.rotateProperty.keyframe] = properties_1.unsetValue;
    }

    if ("opacity" in animation) {
      view.style[style_properties_1.opacityProperty.keyframe] = properties_1.unsetValue;
    }
  };

  return KeyframeAnimation;
}();

exports.KeyframeAnimation = KeyframeAnimation;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/border/border.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var content_view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/content-view/content-view.js");

var Border = function (_super) {
  __extends(Border, _super);

  function Border() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(Border.prototype, "cornerRadius", {
    get: function get() {
      if (typeof this.borderRadius === "number") {
        return this.borderRadius;
      }

      return 0;
    },
    set: function set(value) {
      this.borderRadius = value;
    },
    enumerable: true,
    configurable: true
  });

  Border.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var width = content_view_1.layout.getMeasureSpecSize(widthMeasureSpec);
    var widthMode = content_view_1.layout.getMeasureSpecMode(widthMeasureSpec);
    var height = content_view_1.layout.getMeasureSpecSize(heightMeasureSpec);
    var heightMode = content_view_1.layout.getMeasureSpecMode(heightMeasureSpec);
    var horizontalBorderLength = this.effectiveBorderLeftWidth + this.effectiveBorderRightWidth;
    var verticalBorderLength = this.effectiveBorderTopWidth + this.effectiveBorderBottomWidth;
    var result = content_view_1.View.measureChild(this, this.layoutView, content_view_1.layout.makeMeasureSpec(width - horizontalBorderLength, widthMode), content_view_1.layout.makeMeasureSpec(height - verticalBorderLength, heightMode));
    var widthAndState = content_view_1.View.resolveSizeAndState(result.measuredWidth + horizontalBorderLength, width, widthMode, 0);
    var heightAndState = content_view_1.View.resolveSizeAndState(result.measuredHeight + verticalBorderLength, height, heightMode, 0);
    this.setMeasuredDimension(widthAndState, heightAndState);
  };

  Border.prototype.onLayout = function (left, top, right, bottom) {
    var horizontalBorderLength = this.effectiveBorderLeftWidth + this.effectiveBorderRightWidth;
    var verticalBorderLength = this.effectiveBorderTopWidth + this.effectiveBorderBottomWidth;
    content_view_1.View.layoutChild(this, this.layoutView, this.effectiveBorderLeftWidth, this.effectiveBorderTopWidth, right - left - horizontalBorderLength, bottom - top - verticalBorderLength);
  };

  Border = __decorate([Deprecated, content_view_1.CSSType("Border")], Border);
  return Border;
}(content_view_1.ContentView);

exports.Border = Border;
Border.prototype.recycleNativeView = "auto";

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/builder/binding-builder.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var expressionSymbolsRegex = /[\+\-\*\/%\?:<>=!\|&\(\)^~]/;
var bindingConstants;

(function (bindingConstants) {
  bindingConstants.sourceProperty = "sourceProperty";
  bindingConstants.targetProperty = "targetProperty";
  bindingConstants.expression = "expression";
  bindingConstants.twoWay = "twoWay";
  bindingConstants.source = "source";
  bindingConstants.bindingValueKey = "$value";
  bindingConstants.parentValueKey = "$parent";
  bindingConstants.parentsValueKey = "$parents";
  bindingConstants.newPropertyValueKey = "$newPropertyValue";
})(bindingConstants = exports.bindingConstants || (exports.bindingConstants = {}));

;
var hasEqualSignRegex = /=+/;
var equalSignComparisionOperatorsRegex = /(==|===|>=|<=|!=|!==)/;
exports.parentsRegex = /\$parents\s*\[\s*(['"]*)\w*\1\s*\]/g;

function isNamedParam(value) {
  var equalSignIndex = value.search(hasEqualSignRegex);

  if (equalSignIndex > -1) {
    var equalSignSurround = value.substr(equalSignIndex > 0 ? equalSignIndex - 1 : 0, 3);

    if (equalSignSurround.search(equalSignComparisionOperatorsRegex) === -1) {
      return true;
    }
  }

  return false;
}

function areNamedParams(params) {
  var i;

  for (i = 0; i < params.length; i++) {
    if (isNamedParam(params[i])) {
      return true;
    }
  }

  return false;
}

var namedParamConstants = {
  propName: "propName",
  propValue: "propValue"
};

function getPropertyNameValuePair(param, knownOptions, callback) {
  var nameValuePair = {};
  var propertyName = param.substr(0, param.indexOf("=")).trim();
  var propertyValue = param.substr(param.indexOf("=") + 1).trim();

  if (knownOptions) {
    if (!propertyName) {
      propertyName = knownOptions.defaultProperty;
    } else {
      propertyName = propertyName in knownOptions ? propertyName : null;
    }
  }

  if (propertyName) {
    if (callback) {
      nameValuePair = callback(propertyName, propertyValue);
    } else {
      nameValuePair[namedParamConstants.propName] = propertyName;
      nameValuePair[namedParamConstants.propValue] = propertyValue;
    }

    return nameValuePair;
  }

  return null;
}

function parseNamedProperties(parameterList, knownOptions, callback) {
  var result = {};
  var i;

  for (i = 0; i < parameterList.length; i++) {
    var nameValuePair = getPropertyNameValuePair(parameterList[i], knownOptions, callback);

    if (nameValuePair) {
      result[nameValuePair[namedParamConstants.propName]] = nameValuePair[namedParamConstants.propValue];
    }
  }

  return result;
}

function getParamsArray(value) {
  var result = [];
  var i;
  var skipComma = 0;
  var indexReached = 0;
  var singleQuoteBlock,
      doubleQuoteBlock = false;

  for (i = 0; i < value.length; i++) {
    if (value[i] === "\"") {
      doubleQuoteBlock = !doubleQuoteBlock;
    }

    if (value[i] === "'") {
      singleQuoteBlock = !singleQuoteBlock;
    }

    if (value[i] === "(" || value[i] === "[") {
      skipComma++;
    }

    if (value[i] === ")" || value[i] === "]") {
      skipComma--;
    }

    if (value[i] === "," && skipComma === 0 && !(singleQuoteBlock || doubleQuoteBlock)) {
      result.push(value.substr(indexReached, i - indexReached));
      indexReached = i + 1;
    }
  }

  result.push(value.substr(indexReached));
  return result;
}

function isExpression(expression) {
  if (expression.search(expressionSymbolsRegex) > -1) {
    var parentsMatches = expression.match(exports.parentsRegex);

    if (parentsMatches) {
      var restOfExpression = expression.substr(expression.indexOf(parentsMatches[0]) + parentsMatches[0].length);

      if (!(restOfExpression.search(expressionSymbolsRegex) > -1)) {
        return false;
      }
    }

    return true;
  }

  return false;
}

function getBindingOptions(name, value) {
  var namedParams = [];
  var params = getParamsArray(value);

  if (!areNamedParams(params)) {
    if (params.length === 1) {
      var trimmedValue = params[0].trim();
      var sourceProp;

      if (isExpression(trimmedValue)) {
        sourceProp = bindingConstants.bindingValueKey;
        namedParams.push(bindingConstants.expression + " = " + trimmedValue);
      } else {
        sourceProp = trimmedValue;
      }

      namedParams.push(bindingConstants.sourceProperty + " = " + sourceProp);
      namedParams.push(bindingConstants.twoWay + " = true");
    } else {
      namedParams.push(bindingConstants.sourceProperty + " = " + params[0].trim());
      namedParams.push(bindingConstants.expression + " = " + params[1].trim());
      var twoWay = params[2] ? params[2].toLowerCase().trim() === "true" : true;
      namedParams.push(bindingConstants.twoWay + " = " + twoWay);
    }
  } else {
    namedParams = params;
  }

  var bindingPropertyHandler = function bindingPropertyHandler(prop, value) {
    var result = {};
    result[namedParamConstants.propName] = prop;

    if (prop === bindingConstants.twoWay) {
      if (value === "true") {
        result[namedParamConstants.propValue] = true;
      } else {
        result[namedParamConstants.propValue] = false;
      }
    } else {
      result[namedParamConstants.propValue] = value;
    }

    return result;
  };

  var bindingOptionsParameters = parseNamedProperties(namedParams, xmlBindingProperties, bindingPropertyHandler);
  var bindOptions = {
    targetProperty: name
  };

  for (var prop in bindingOptionsParameters) {
    if (bindingOptionsParameters.hasOwnProperty(prop)) {
      bindOptions[prop] = bindingOptionsParameters[prop];
    }
  }

  if (bindOptions[bindingConstants.twoWay] === undefined) {
    bindOptions[bindingConstants.twoWay] = true;
  }

  return bindOptions;
}

exports.getBindingOptions = getBindingOptions;
var xmlBindingProperties = {
  sourceProperty: true,
  expression: true,
  twoWay: true,
  source: true,
  defaultProperty: bindingConstants.sourceProperty
};

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/builder/builder.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var debug_1 = __webpack_require__("../node_modules/tns-core-modules/utils/debug.js");

var xml = __webpack_require__("../node_modules/tns-core-modules/xml/xml.js");

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var types_1 = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var component_builder_1 = __webpack_require__("../node_modules/tns-core-modules/ui/builder/component-builder/component-builder.js");

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var file_name_resolver_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-name-resolver/file-name-resolver.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var ios = platform_1.platformNames.ios.toLowerCase();
var android = platform_1.platformNames.android.toLowerCase();
var defaultNameSpaceMatcher = /tns\.xsd$/i;
var trace;

function ensureTrace() {
  if (!trace) {
    trace = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");
  }
}

function parse(value, context) {
  if (typeof value === "function") {
    return value();
  } else {
    var exports_1 = context ? getExports(context) : undefined;
    var componentModule = parseInternal(value, exports_1);
    return componentModule && componentModule.component;
  }
}

exports.parse = parse;

function parseMultipleTemplates(value, context) {
  var dummyComponent = "<ListView><ListView.itemTemplates>" + value + "</ListView.itemTemplates></ListView>";
  return parseInternal(dummyComponent, context).component["itemTemplates"];
}

exports.parseMultipleTemplates = parseMultipleTemplates;

function load(pathOrOptions, context) {
  var componentModule;

  if (!context) {
    if (typeof pathOrOptions === "string") {
      componentModule = loadInternal(pathOrOptions);
    } else {
      componentModule = loadCustomComponent(pathOrOptions.path, pathOrOptions.name, pathOrOptions.attributes, pathOrOptions.exports, pathOrOptions.page, true);
    }
  } else {
    var path_1 = pathOrOptions;
    componentModule = loadInternal(path_1, context);
  }

  return componentModule && componentModule.component;
}

exports.load = load;

function loadPage(moduleNamePath, fileName, context) {
  var componentModule = loadInternal(fileName, context, moduleNamePath);
  return componentModule && componentModule.component;
}

exports.loadPage = loadPage;
var loadModule = profiling_1.profile("loadModule", function (moduleNamePath, entry) {
  if (global.moduleExists(entry.moduleName)) {
    return global.loadModule(entry.moduleName);
  } else {
    var moduleExportsResolvedPath = file_name_resolver_1.resolveFileName(moduleNamePath, "js");

    if (moduleExportsResolvedPath) {
      moduleExportsResolvedPath = moduleExportsResolvedPath.substr(0, moduleExportsResolvedPath.length - 3);
      return global.loadModule(moduleExportsResolvedPath);
    }
  }

  return null;
});
var viewFromBuilder = profiling_1.profile("viewFromBuilder", function (moduleNamePath, moduleExports) {
  var fileName = file_name_resolver_1.resolveFileName(moduleNamePath, "xml");
  return loadPage(moduleNamePath, fileName, moduleExports);
});
exports.createViewFromEntry = profiling_1.profile("createViewFromEntry", function (entry) {
  if (entry.create) {
    return createView(entry);
  } else if (entry.moduleName) {
    var currentAppPath = file_system_1.knownFolders.currentApp().path;
    var moduleNamePath = file_system_1.path.join(currentAppPath, entry.moduleName);
    var moduleExports = loadModule(moduleNamePath, entry);

    if (moduleExports && moduleExports.createPage) {
      return moduleCreateView(moduleNamePath, moduleExports);
    } else {
      return viewFromBuilder(moduleNamePath, moduleExports);
    }
  }

  throw new Error("Failed to load page XML file for module: " + entry.moduleName);
});
var createView = profiling_1.profile("entry.create", function (entry) {
  var view = entry.create();

  if (!view) {
    throw new Error("Failed to create Page with entry.create() function.");
  }

  return view;
});
var moduleCreateView = profiling_1.profile("module.createView", function (moduleNamePath, moduleExports) {
  var view = moduleExports.createPage();
  var cssFileName = file_name_resolver_1.resolveFileName(moduleNamePath, "css");

  if (cssFileName) {
    view.addCssFile(cssFileName);
  }

  return view;
});

function loadInternal(fileName, context, moduleNamePath) {
  var componentModule;
  var appPath = file_system_1.knownFolders.currentApp().path;
  var filePathRelativeToApp = (moduleNamePath && moduleNamePath.startsWith(appPath) ? "./" + moduleNamePath.substr(appPath.length + 1) : moduleNamePath) + ".xml";

  if (global.moduleExists(filePathRelativeToApp)) {
    var text = global.loadModule(filePathRelativeToApp);
    componentModule = parseInternal(text, context, fileName, moduleNamePath);
  } else if (fileName && file_system_1.File.exists(fileName)) {
    var file = file_system_1.File.fromPath(fileName);
    var text_1 = file.readTextSync(function (error) {
      throw new Error("Error loading file " + fileName + " :" + error.message);
    });
    componentModule = parseInternal(text_1, context, fileName, moduleNamePath);
  }

  if (componentModule && componentModule.component) {
    componentModule.component.exports = context;
  }

  return componentModule;
}

function loadCustomComponent(componentPath, componentName, attributes, context, parentPage, isRootComponent, moduleNamePath) {
  if (isRootComponent === void 0) {
    isRootComponent = true;
  }

  if (!parentPage && context) {
    parentPage = context["_parentPage"];
    delete context["_parentPage"];
  }

  var result;
  componentPath = componentPath.replace("~/", "");
  var moduleName = componentPath + "/" + componentName;
  var xmlModuleName = moduleName + ".xml";
  var fullComponentPathFilePathWithoutExt = componentPath;

  if (!file_system_1.File.exists(componentPath) || componentPath === "." || componentPath === "./") {
    fullComponentPathFilePathWithoutExt = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, componentPath, componentName);
  }

  var xmlFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "xml");

  if (xmlFilePath || global.moduleExists(xmlModuleName)) {
    var subExports = context;

    if (global.moduleExists(moduleName)) {
      subExports = global.loadModule(moduleName);
    } else {
      var jsFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "js");

      if (jsFilePath) {
        subExports = global.loadModule(jsFilePath);
      }
    }

    if (!subExports) {
      subExports = {};
    }

    subExports["_parentPage"] = parentPage;
    result = xmlFilePath ? loadInternal(xmlFilePath, subExports) : loadInternal(xmlFilePath, subExports, moduleName);

    if (types_1.isDefined(result) && types_1.isDefined(result.component) && types_1.isDefined(attributes)) {
      for (var attr in attributes) {
        component_builder_1.setPropertyValue(result.component, subExports, context, attr, attributes[attr]);
      }
    }
  } else {
    result = component_builder_1.getComponentModule(componentName, componentPath, attributes, context, moduleNamePath, isRootComponent);
  }

  var cssModulePath = fullComponentPathFilePathWithoutExt + ".css";

  if (cssModulePath.startsWith("/")) {
    var app = file_system_1.knownFolders.currentApp().path + "/";

    if (cssModulePath.startsWith(app)) {
      cssModulePath = "./" + cssModulePath.substr(app.length);
    }
  }

  if (global.moduleExists(cssModulePath)) {
    parentPage.addCssFile(cssModulePath);
  } else {
    var cssFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "css");

    if (cssFilePath) {
      if (parentPage && typeof parentPage.addCssFile === "function") {
        parentPage.addCssFile(cssFilePath);
      } else {
        ensureTrace();
        trace.write("CSS file found but no page specified. Please specify page in the options!", trace.categories.Error, trace.messageType.error);
      }
    }
  }

  return result;
}

function getExports(instance) {
  var isView = !!instance._domId;

  if (!isView) {
    return instance.exports || instance;
  }

  var exportObject = instance.exports;
  var parent = instance.parent;

  while (exportObject === undefined && parent) {
    exportObject = parent.exports;
    parent = parent.parent;
  }

  return exportObject;
}

function parseInternal(value, context, uri, moduleNamePath) {
  var start;
  var ui;
  var errorFormat = debug_1.debug && uri ? xml2ui.SourceErrorFormat(uri) : xml2ui.PositionErrorFormat;
  var componentSourceTracker = debug_1.debug && uri ? xml2ui.ComponentSourceTracker(uri) : function () {};
  (start = new xml2ui.XmlStringParser(errorFormat)).pipe(new xml2ui.PlatformFilter()).pipe(new xml2ui.XmlStateParser(ui = new xml2ui.ComponentParser(context, errorFormat, componentSourceTracker, moduleNamePath)));
  start.parse(value);
  return ui.rootComponentModule;
}

var xml2ui;

(function (xml2ui) {
  var XmlProducerBase = function () {
    function XmlProducerBase() {}

    XmlProducerBase.prototype.pipe = function (next) {
      this._next = next;
      return next;
    };

    XmlProducerBase.prototype.next = function (args) {
      this._next.parse(args);
    };

    return XmlProducerBase;
  }();

  xml2ui.XmlProducerBase = XmlProducerBase;

  var XmlStringParser = function (_super) {
    __extends(XmlStringParser, _super);

    function XmlStringParser(error) {
      var _this = _super.call(this) || this;

      _this.error = error || PositionErrorFormat;
      return _this;
    }

    XmlStringParser.prototype.parse = function (value) {
      var _this = this;

      var xmlParser = new xml.XmlParser(function (args) {
        try {
          _this.next(args);
        } catch (e) {
          throw _this.error(e, args.position);
        }
      }, function (e, p) {
        throw _this.error(e, p);
      }, true);

      if (types_1.isString(value)) {
        xmlParser.parse(value);
      }
    };

    return XmlStringParser;
  }(XmlProducerBase);

  xml2ui.XmlStringParser = XmlStringParser;

  function PositionErrorFormat(e, p) {
    return new debug_1.ScopeError(e, "Parsing XML at " + p.line + ":" + p.column);
  }

  xml2ui.PositionErrorFormat = PositionErrorFormat;

  function SourceErrorFormat(uri) {
    return function (e, p) {
      var source = p ? new debug_1.Source(uri, p.line, p.column) : new debug_1.Source(uri, -1, -1);
      e = new debug_1.SourceError(e, source, "Building UI from XML.");
      return e;
    };
  }

  xml2ui.SourceErrorFormat = SourceErrorFormat;

  function ComponentSourceTracker(uri) {
    return function (component, p) {
      if (!debug_1.Source.get(component)) {
        var source = p ? new debug_1.Source(uri, p.line, p.column) : new debug_1.Source(uri, -1, -1);
        debug_1.Source.set(component, source);
      }
    };
  }

  xml2ui.ComponentSourceTracker = ComponentSourceTracker;

  var PlatformFilter = function (_super) {
    __extends(PlatformFilter, _super);

    function PlatformFilter() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    PlatformFilter.prototype.parse = function (args) {
      if (args.eventType === xml.ParserEventType.StartElement) {
        if (PlatformFilter.isPlatform(args.elementName)) {
          if (this.currentPlatformContext) {
            throw new Error("Already in '" + this.currentPlatformContext + "' platform context and cannot switch to '" + args.elementName + "' platform! Platform tags cannot be nested.");
          }

          this.currentPlatformContext = args.elementName;
          return;
        }
      }

      if (args.eventType === xml.ParserEventType.EndElement) {
        if (PlatformFilter.isPlatform(args.elementName)) {
          this.currentPlatformContext = undefined;
          return;
        }
      }

      if (this.currentPlatformContext && !PlatformFilter.isCurentPlatform(this.currentPlatformContext)) {
        return;
      }

      this.next(args);
    };

    PlatformFilter.isPlatform = function (value) {
      if (value) {
        var toLower = value.toLowerCase();
        return toLower === android || toLower === ios;
      }

      return false;
    };

    PlatformFilter.isCurentPlatform = function (value) {
      return value && value.toLowerCase() === platform_1.device.os.toLowerCase();
    };

    return PlatformFilter;
  }(XmlProducerBase);

  xml2ui.PlatformFilter = PlatformFilter;

  var XmlArgsReplay = function (_super) {
    __extends(XmlArgsReplay, _super);

    function XmlArgsReplay(args, errorFormat) {
      var _this = _super.call(this) || this;

      _this.args = args;
      _this.error = errorFormat;
      return _this;
    }

    XmlArgsReplay.prototype.replay = function () {
      var _this = this;

      this.args.forEach(function (args) {
        try {
          _this.next(args);
        } catch (e) {
          throw _this.error(e, args.position);
        }
      });
    };

    return XmlArgsReplay;
  }(XmlProducerBase);

  xml2ui.XmlArgsReplay = XmlArgsReplay;

  var XmlStateParser = function () {
    function XmlStateParser(state) {
      this.state = state;
    }

    XmlStateParser.prototype.parse = function (args) {
      this.state = this.state.parse(args);
    };

    return XmlStateParser;
  }();

  xml2ui.XmlStateParser = XmlStateParser;

  var TemplateParser = function () {
    function TemplateParser(parent, templateProperty, setTemplateProperty) {
      if (setTemplateProperty === void 0) {
        setTemplateProperty = true;
      }

      this.parent = parent;
      this._context = templateProperty.context;
      this._recordedXmlStream = new Array();
      this._templateProperty = templateProperty;
      this._nestingLevel = 0;
      this._state = 0;
      this._setTemplateProperty = setTemplateProperty;
    }

    TemplateParser.prototype.parse = function (args) {
      if (args.eventType === xml.ParserEventType.StartElement) {
        this.parseStartElement(args.prefix, args.namespace, args.elementName, args.attributes);
      } else if (args.eventType === xml.ParserEventType.EndElement) {
        this.parseEndElement(args.prefix, args.elementName);
      }

      this._recordedXmlStream.push(args);

      return this._state === 2 ? this.parent : this;
    };

    Object.defineProperty(TemplateParser.prototype, "elementName", {
      get: function get() {
        return this._templateProperty.elementName;
      },
      enumerable: true,
      configurable: true
    });

    TemplateParser.prototype.parseStartElement = function (prefix, namespace, elementName, attributes) {
      if (this._state === 0) {
        this._state = 1;
      } else if (this._state === 2) {
        throw new Error("Template must have exactly one root element but multiple elements were found.");
      }

      this._nestingLevel++;
    };

    TemplateParser.prototype.parseEndElement = function (prefix, elementName) {
      if (this._state === 0) {
        throw new Error("Template must have exactly one root element but none was found.");
      } else if (this._state === 2) {
        throw new Error("No more closing elements expected for this template.");
      }

      this._nestingLevel--;

      if (this._nestingLevel === 0) {
        this._state = 2;

        if (this._setTemplateProperty && this._templateProperty.name in this._templateProperty.parent.component) {
          var template = this.buildTemplate();
          this._templateProperty.parent.component[this._templateProperty.name] = template;
        }
      }
    };

    TemplateParser.prototype.buildTemplate = function () {
      var _this = this;

      var context = this._context;
      var errorFormat = this._templateProperty.errorFormat;
      var sourceTracker = this._templateProperty.sourceTracker;
      var template = profiling_1.profile("Template()", function () {
        var start;
        var ui;
        (start = new xml2ui.XmlArgsReplay(_this._recordedXmlStream, errorFormat)).pipe(new XmlStateParser(ui = new ComponentParser(context, errorFormat, sourceTracker)));
        start.replay();
        return ui.rootComponentModule.component;
      });
      return template;
    };

    return TemplateParser;
  }();

  xml2ui.TemplateParser = TemplateParser;

  var MultiTemplateParser = function () {
    function MultiTemplateParser(parent, templateProperty) {
      this.parent = parent;
      this.templateProperty = templateProperty;
      this._childParsers = new Array();
    }

    Object.defineProperty(MultiTemplateParser.prototype, "value", {
      get: function get() {
        return this._value;
      },
      enumerable: true,
      configurable: true
    });

    MultiTemplateParser.prototype.parse = function (args) {
      if (args.eventType === xml.ParserEventType.StartElement && args.elementName === "template") {
        var childParser = new TemplateParser(this, this.templateProperty, false);
        childParser["key"] = args.attributes["key"];

        this._childParsers.push(childParser);

        return childParser;
      }

      if (args.eventType === xml.ParserEventType.EndElement) {
        var name_1 = ComponentParser.getComplexPropertyName(args.elementName);

        if (name_1 === this.templateProperty.name) {
          var templates = new Array();

          for (var i = 0; i < this._childParsers.length; i++) {
            templates.push({
              key: this._childParsers[i]["key"],
              createView: this._childParsers[i].buildTemplate()
            });
          }

          this._value = templates;
          return this.parent.parse(args);
        }
      }

      return this;
    };

    return MultiTemplateParser;
  }();

  xml2ui.MultiTemplateParser = MultiTemplateParser;

  var ComponentParser = function () {
    function ComponentParser(context, errorFormat, sourceTracker, moduleNamePath) {
      this.moduleNamePath = moduleNamePath;
      this.parents = new Array();
      this.complexProperties = new Array();
      this.context = context;
      this.error = errorFormat;
      this.sourceTracker = sourceTracker;
    }

    ComponentParser.prototype.buildComponent = function (args) {
      if (args.prefix && args.namespace) {
        return loadCustomComponent(args.namespace, args.elementName, args.attributes, this.context, this.currentRootView, !this.currentRootView, this.moduleNamePath);
      } else {
        var namespace = args.namespace;

        if (defaultNameSpaceMatcher.test(namespace || "")) {
          namespace = undefined;
        }

        return component_builder_1.getComponentModule(args.elementName, namespace, args.attributes, this.context, this.moduleNamePath, !this.currentRootView);
      }
    };

    ComponentParser.prototype.parse = function (args) {
      var parent = this.parents[this.parents.length - 1];
      var complexProperty = this.complexProperties[this.complexProperties.length - 1];

      if (args.eventType === xml.ParserEventType.StartElement) {
        if (ComponentParser.isComplexProperty(args.elementName)) {
          var name = ComponentParser.getComplexPropertyName(args.elementName);
          var complexProperty_1 = {
            parent: parent,
            name: name,
            items: []
          };
          this.complexProperties.push(complexProperty_1);

          if (ComponentParser.isKnownTemplate(name, parent.exports)) {
            return new TemplateParser(this, {
              context: (parent ? getExports(parent.component) : null) || this.context,
              parent: parent,
              name: name,
              elementName: args.elementName,
              templateItems: [],
              errorFormat: this.error,
              sourceTracker: this.sourceTracker
            });
          }

          if (ComponentParser.isKnownMultiTemplate(name, parent.exports)) {
            var parser = new MultiTemplateParser(this, {
              context: (parent ? getExports(parent.component) : null) || this.context,
              parent: parent,
              name: name,
              elementName: args.elementName,
              templateItems: [],
              errorFormat: this.error,
              sourceTracker: this.sourceTracker
            });
            complexProperty_1.parser = parser;
            return parser;
          }
        } else {
          var componentModule = this.buildComponent(args);

          if (componentModule) {
            this.sourceTracker(componentModule.component, args.position);

            if (parent) {
              if (complexProperty) {
                ComponentParser.addToComplexProperty(parent, complexProperty, componentModule);
              } else if (parent.component._addChildFromBuilder) {
                parent.component._addChildFromBuilder(args.elementName, componentModule.component);
              }
            } else if (this.parents.length === 0) {
              this.rootComponentModule = componentModule;

              if (this.rootComponentModule) {
                this.currentRootView = this.rootComponentModule.component;

                if (this.currentRootView.exports) {
                  this.context = this.currentRootView.exports;
                }
              }
            }

            this.parents.push(componentModule);
          }
        }
      } else if (args.eventType === xml.ParserEventType.EndElement) {
        if (ComponentParser.isComplexProperty(args.elementName)) {
          if (complexProperty) {
            if (complexProperty.parser) {
              parent.component[complexProperty.name] = complexProperty.parser.value;
            } else if (parent && parent.component._addArrayFromBuilder) {
              parent.component._addArrayFromBuilder(complexProperty.name, complexProperty.items);

              complexProperty.items = [];
            }
          }

          this.complexProperties.pop();
        } else {
          this.parents.pop();
        }
      }

      return this;
    };

    ComponentParser.isComplexProperty = function (name) {
      return types_1.isString(name) && name.indexOf(".") !== -1;
    };

    ComponentParser.getComplexPropertyName = function (fullName) {
      var name;

      if (types_1.isString(fullName)) {
        var names = fullName.split(".");
        name = names[names.length - 1];
      }

      return name;
    };

    ComponentParser.isKnownTemplate = function (name, exports) {
      return ComponentParser.KNOWNTEMPLATES in exports && exports[ComponentParser.KNOWNTEMPLATES] && name in exports[ComponentParser.KNOWNTEMPLATES];
    };

    ComponentParser.isKnownMultiTemplate = function (name, exports) {
      return ComponentParser.KNOWNMULTITEMPLATES in exports && exports[ComponentParser.KNOWNMULTITEMPLATES] && name in exports[ComponentParser.KNOWNMULTITEMPLATES];
    };

    ComponentParser.addToComplexProperty = function (parent, complexProperty, elementModule) {
      var parentComponent = parent.component;

      if (ComponentParser.isKnownCollection(complexProperty.name, parent.exports)) {
        complexProperty.items.push(elementModule.component);
      } else if (parentComponent._addChildFromBuilder) {
        parentComponent._addChildFromBuilder(complexProperty.name, elementModule.component);
      } else {
        parentComponent[complexProperty.name] = elementModule.component;
      }
    };

    ComponentParser.isKnownCollection = function (name, context) {
      return ComponentParser.KNOWNCOLLECTIONS in context && context[ComponentParser.KNOWNCOLLECTIONS] && name in context[ComponentParser.KNOWNCOLLECTIONS];
    };

    ComponentParser.KNOWNCOLLECTIONS = "knownCollections";
    ComponentParser.KNOWNTEMPLATES = "knownTemplates";
    ComponentParser.KNOWNMULTITEMPLATES = "knownMultiTemplates";

    __decorate([profiling_1.profile], ComponentParser.prototype, "buildComponent", null);

    return ComponentParser;
  }();

  xml2ui.ComponentParser = ComponentParser;
})(xml2ui || (xml2ui = {}));
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/builder/component-builder/component-builder.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var bindable_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/bindable/bindable.js");

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var binding_builder_1 = __webpack_require__("../node_modules/tns-core-modules/ui/builder/binding-builder.js");

var file_name_resolver_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-name-resolver/file-name-resolver.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var platform = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var filesystem = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var UI_PATH = "ui/";
var MODULES = {
  "TabViewItem": "ui/tab-view",
  "FormattedString": "text/formatted-string",
  "Span": "text/span",
  "ActionItem": "ui/action-bar",
  "NavigationButton": "ui/action-bar",
  "SegmentedBarItem": "ui/segmented-bar"
};
var CODEFILE = "codeFile";
var CSSFILE = "cssFile";
var IMPORT = "import";
var createComponentInstance = profiling_1.profile("createComponentInstance", function (elementName, namespace) {
  var instance;
  var instanceModule;
  var moduleId = MODULES[elementName] || UI_PATH + (elementName.toLowerCase().indexOf("layout") !== -1 ? "layouts/" : "") + elementName.split(/(?=[A-Z])/).join("-").toLowerCase();

  try {
    if (typeof namespace === "string") {
      if (global.moduleExists(namespace)) {
        moduleId = namespace;
      } else {
        var pathInsideTNSModules = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, "tns_modules", namespace);

        try {
          instanceModule = global.require(pathInsideTNSModules);
          moduleId = pathInsideTNSModules;
        } catch (e) {
          moduleId = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, namespace);
        }
      }
    }

    if (!instanceModule) {
      instanceModule = global.loadModule(moduleId);
    }

    var instanceType = instanceModule[elementName] || Object;
    instance = new instanceType();
  } catch (ex) {
    var debug = __webpack_require__("../node_modules/tns-core-modules/utils/debug.js");

    throw new debug.ScopeError(ex, "Module '" + moduleId + "' not found for element '" + (namespace ? namespace + ":" : "") + elementName + "'.");
  }

  return {
    instance: instance,
    instanceModule: instanceModule
  };
});
var getComponentModuleExports = profiling_1.profile("getComponentModuleExports", function (instance, moduleExports, attributes) {
  if (attributes) {
    if (attributes[IMPORT]) {
      var importPath = attributes[IMPORT].trim();

      if (importPath.indexOf("~/") === 0) {
        importPath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, importPath.replace("~/", ""));
      }

      moduleExports = global.loadModule(importPath);
      instance.exports = moduleExports;
    }

    if (attributes[CODEFILE]) {
      var codeFilePath = attributes[CODEFILE].trim();

      if (codeFilePath.indexOf("~/") === 0) {
        codeFilePath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, codeFilePath.replace("~/", ""));
      }

      var codeFilePathWithExt = codeFilePath.indexOf(".js") !== -1 ? codeFilePath : codeFilePath + ".js";

      if (file_system_1.File.exists(codeFilePathWithExt)) {
        moduleExports = global.loadModule(codeFilePath);
        instance.exports = moduleExports;
      } else {
        throw new Error("Code file with path \"" + codeFilePathWithExt + "\" cannot be found!");
      }
    }
  }

  return moduleExports;
});
var applyComponentCss = profiling_1.profile("applyComponentCss", function (instance, moduleNamePath, attributes) {
  var cssApplied = false;

  if (attributes) {
    if (attributes[CSSFILE] && typeof instance.addCssFile === "function") {
      var cssFilePath = attributes[CSSFILE].trim();

      if (cssFilePath.indexOf("~/") === 0) {
        cssFilePath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, cssFilePath.replace("~/", ""));
      }

      if (file_system_1.File.exists(cssFilePath)) {
        instance.addCssFile(cssFilePath);
        cssApplied = true;
      } else {
        throw new Error("Css file with path \"" + cssFilePath + "\" cannot be found!");
      }
    }
  }

  if (typeof instance.addCssFile === "function") {
    if (moduleNamePath && !cssApplied) {
      var appPath = filesystem.knownFolders.currentApp().path;
      var cssPathRelativeToApp = (moduleNamePath.startsWith(appPath) ? "./" + moduleNamePath.substr(appPath.length + 1) : moduleNamePath) + ".css";

      if (global.moduleExists(cssPathRelativeToApp)) {
        instance.addCssFile(cssPathRelativeToApp);
      }

      var cssFilePath = file_name_resolver_1.resolveFileName(moduleNamePath, "css");

      if (cssFilePath) {
        instance.addCssFile(cssFilePath);
        cssApplied = true;
      }
    }
  }
});
var applyComponentAttributes = profiling_1.profile("applyComponentAttributes", function (instance, instanceModule, moduleExports, attributes) {
  if (instance && instanceModule) {
    for (var attr in attributes) {
      var attrValue = attributes[attr];

      if (attr.indexOf(":") !== -1) {
        var platformName = attr.split(":")[0].trim();

        if (platformName.toLowerCase() === platform.device.os.toLowerCase()) {
          attr = attr.split(":")[1].trim();
        } else {
          continue;
        }
      }

      if (attr.indexOf(".") !== -1) {
        var subObj = instance;
        var properties = attr.split(".");
        var subPropName = properties[properties.length - 1];

        for (var i = 0; i < properties.length - 1; i++) {
          if (subObj !== undefined && subObj !== null) {
            subObj = subObj[properties[i]];
          }
        }

        if (subObj !== undefined && subObj !== null) {
          setPropertyValue(subObj, instanceModule, moduleExports, subPropName, attrValue);
        }
      } else {
        setPropertyValue(instance, instanceModule, moduleExports, attr, attrValue);
      }
    }
  }
});

function getComponentModule(elementName, namespace, attributes, moduleExports, moduleNamePath, isRootComponent) {
  elementName = elementName.split("-").map(function (s) {
    return s[0].toUpperCase() + s.substring(1);
  }).join("");

  var _a = createComponentInstance(elementName, namespace),
      instance = _a.instance,
      instanceModule = _a.instanceModule;

  moduleExports = getComponentModuleExports(instance, moduleExports, attributes);

  if (isRootComponent) {
    applyComponentCss(instance, moduleNamePath, attributes);
  }

  applyComponentAttributes(instance, instanceModule, moduleExports, attributes);
  var componentModule;

  if (instance && instanceModule) {
    componentModule = {
      component: instance,
      exports: instanceModule
    };
  }

  return componentModule;
}

exports.getComponentModule = getComponentModule;

function setPropertyValue(instance, instanceModule, exports, propertyName, propertyValue) {
  if (isBinding(propertyValue) && instance.bind) {
    var bindOptions = binding_builder_1.getBindingOptions(propertyName, getBindingExpressionFromAttribute(propertyValue));
    instance.bind({
      sourceProperty: bindOptions[binding_builder_1.bindingConstants.sourceProperty],
      targetProperty: bindOptions[binding_builder_1.bindingConstants.targetProperty],
      expression: bindOptions[binding_builder_1.bindingConstants.expression],
      twoWay: bindOptions[binding_builder_1.bindingConstants.twoWay]
    }, bindOptions[binding_builder_1.bindingConstants.source]);
  } else if (bindable_1.isEventOrGesture(propertyName, instance)) {
    var handler = exports && exports[propertyValue];

    if (typeof handler === "function") {
      instance.on(propertyName, handler);
    }
  } else if (isKnownFunction(propertyName, instance) && exports && typeof exports[propertyValue] === "function") {
    instance[propertyName] = exports[propertyValue];
  } else {
    instance[propertyName] = propertyValue;
  }
}

exports.setPropertyValue = setPropertyValue;

function getBindingExpressionFromAttribute(value) {
  return value.replace("{{", "").replace("}}", "").trim();
}

function isBinding(value) {
  var isBinding;

  if (typeof value === "string") {
    var str = value.trim();
    isBinding = str.indexOf("{{") === 0 && str.lastIndexOf("}}") === str.length - 2;
  }

  return isBinding;
}

var KNOWN_FUNCTIONS = "knownFunctions";

function isKnownFunction(name, instance) {
  return instance.constructor && KNOWN_FUNCTIONS in instance.constructor && instance.constructor[KNOWN_FUNCTIONS].indexOf(name) !== -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/button/button-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var text_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base.js"));

var ButtonBase = function (_super) {
  __extends(ButtonBase, _super);

  function ButtonBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(ButtonBase.prototype, "textWrap", {
    get: function get() {
      return this.style.whiteSpace === "normal";
    },
    set: function set(value) {
      if (typeof value === "string") {
        value = text_base_1.booleanConverter(value);
      }

      this.style.whiteSpace = value ? "normal" : "nowrap";
    },
    enumerable: true,
    configurable: true
  });
  ButtonBase.tapEvent = "tap";
  ButtonBase = __decorate([text_base_1.CSSType("Button")], ButtonBase);
  return ButtonBase;
}(text_base_1.TextBase);

exports.ButtonBase = ButtonBase;
ButtonBase.prototype.recycleNativeView = "auto";

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/button/button.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var button_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/button/button-common.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var gestures_1 = __webpack_require__("../node_modules/tns-core-modules/ui/gestures/gestures.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/button/button-common.js"));

var ClickListener;
var APILEVEL;
var AndroidButton;

function initializeClickListener() {
  if (ClickListener) {
    return;
  }

  var ClickListenerImpl = function (_super) {
    __extends(ClickListenerImpl, _super);

    function ClickListenerImpl(owner) {
      var _this = _super.call(this) || this;

      _this.owner = owner;
      return global.__native(_this);
    }

    ClickListenerImpl.prototype.onClick = function (v) {
      var owner = this.owner;

      if (owner) {
        owner._emit(button_common_1.ButtonBase.tapEvent);
      }
    };

    ClickListenerImpl = __decorate([Interfaces([android.view.View.OnClickListener])], ClickListenerImpl);
    return ClickListenerImpl;
  }(java.lang.Object);

  ClickListener = ClickListenerImpl;
}

var Button = function (_super) {
  __extends(Button, _super);

  function Button() {
    var _this = _super.call(this) || this;

    if (!APILEVEL) {
      APILEVEL = android.os.Build.VERSION.SDK_INT;
    }

    return _this;
  }

  Button.prototype.createNativeView = function () {
    if (!AndroidButton) {
      AndroidButton = android.widget.Button;
    }

    return new AndroidButton(this._context);
  };

  Button.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    var nativeView = this.nativeViewProtected;
    initializeClickListener();
    var clickListener = new ClickListener(this);
    nativeView.setOnClickListener(clickListener);
    nativeView.clickListener = clickListener;
  };

  Button.prototype.disposeNativeView = function () {
    if (this.nativeViewProtected) {
      this.nativeViewProtected.clickListener.owner = null;
    }

    _super.prototype.disposeNativeView.call(this);
  };

  Button.prototype.resetNativeView = function () {
    _super.prototype.resetNativeView.call(this);

    if (this._stateListAnimator && APILEVEL >= 21) {
      this.nativeViewProtected.setStateListAnimator(this._stateListAnimator);
      this._stateListAnimator = undefined;
    }
  };

  Button.prototype._updateHandler = function (subscribe) {
    var _this = this;

    if (subscribe) {
      this._highlightedHandler = this._highlightedHandler || function (args) {
        switch (args.action) {
          case gestures_1.TouchAction.up:
            _this._goToVisualState("normal");

            break;

          case gestures_1.TouchAction.down:
            _this._goToVisualState("highlighted");

            break;
        }
      };

      this.on(gestures_1.GestureTypes.touch, this._highlightedHandler);
    } else {
      this.off(gestures_1.GestureTypes.touch, this._highlightedHandler);
    }
  };

  Button.prototype[button_common_1.paddingTopProperty.getDefault] = function () {
    return {
      value: this._defaultPaddingTop,
      unit: "px"
    };
  };

  Button.prototype[button_common_1.paddingTopProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setPaddingTop(this.nativeViewProtected, button_common_1.Length.toDevicePixels(value, 0) + button_common_1.Length.toDevicePixels(this.style.borderTopWidth, 0));
  };

  Button.prototype[button_common_1.paddingRightProperty.getDefault] = function () {
    return {
      value: this._defaultPaddingRight,
      unit: "px"
    };
  };

  Button.prototype[button_common_1.paddingRightProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setPaddingRight(this.nativeViewProtected, button_common_1.Length.toDevicePixels(value, 0) + button_common_1.Length.toDevicePixels(this.style.borderRightWidth, 0));
  };

  Button.prototype[button_common_1.paddingBottomProperty.getDefault] = function () {
    return {
      value: this._defaultPaddingBottom,
      unit: "px"
    };
  };

  Button.prototype[button_common_1.paddingBottomProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setPaddingBottom(this.nativeViewProtected, button_common_1.Length.toDevicePixels(value, 0) + button_common_1.Length.toDevicePixels(this.style.borderBottomWidth, 0));
  };

  Button.prototype[button_common_1.paddingLeftProperty.getDefault] = function () {
    return {
      value: this._defaultPaddingLeft,
      unit: "px"
    };
  };

  Button.prototype[button_common_1.paddingLeftProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setPaddingLeft(this.nativeViewProtected, button_common_1.Length.toDevicePixels(value, 0) + button_common_1.Length.toDevicePixels(this.style.borderLeftWidth, 0));
  };

  Button.prototype[button_common_1.zIndexProperty.setNative] = function (value) {
    if (APILEVEL >= 21) {
      var nativeView = this.nativeViewProtected;

      if (!this._stateListAnimator) {
        this._stateListAnimator = nativeView.getStateListAnimator();
      }

      nativeView.setStateListAnimator(null);
    }

    org.nativescript.widgets.ViewHelper.setZIndex(this.nativeViewProtected, value);
  };

  Button.prototype[button_common_1.textAlignmentProperty.setNative] = function (value) {
    var newValue = value === "initial" ? "center" : value;

    _super.prototype[button_common_1.textAlignmentProperty.setNative].call(this, newValue);
  };

  __decorate([profiling_1.profile], Button.prototype, "createNativeView", null);

  __decorate([button_common_1.PseudoClassHandler("normal", "highlighted", "pressed", "active")], Button.prototype, "_updateHandler", null);

  return Button;
}(button_common_1.ButtonBase);

exports.Button = Button;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/content-view/content-view.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var ContentView = function (_super) {
  __extends(ContentView, _super);

  function ContentView() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(ContentView.prototype, "content", {
    get: function get() {
      return this._content;
    },
    set: function set(value) {
      var oldView = this._content;

      if (this._content) {
        this._removeView(this._content);
      }

      this._content = value;

      if (this._content) {
        this._addView(this._content);
      }

      this._onContentChanged(oldView, value);

      if (view_1.isIOS && oldView !== value) {
        this.requestLayout();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ContentView.prototype, "layoutView", {
    get: function get() {
      var result;

      if (this._content) {
        var first_1 = true;

        this._content._eachLayoutView(function (child) {
          if (first_1) {
            first_1 = false;
            result = child;
          } else {
            throw new Error("More than one layout child inside a ContentView");
          }
        });
      }

      return result;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ContentView.prototype, "_childrenCount", {
    get: function get() {
      return this._content ? 1 : 0;
    },
    enumerable: true,
    configurable: true
  });

  ContentView.prototype._onContentChanged = function (oldView, newView) {};

  ContentView.prototype._addChildFromBuilder = function (name, value) {
    if (value instanceof view_1.View) {
      this.content = value;
    }
  };

  ContentView.prototype.eachChildView = function (callback) {
    var content = this._content;

    if (content) {
      callback(content);
    }
  };

  ContentView.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var result = view_1.View.measureChild(this, this.layoutView, widthMeasureSpec, heightMeasureSpec);
    var width = view_1.layout.getMeasureSpecSize(widthMeasureSpec);
    var widthMode = view_1.layout.getMeasureSpecMode(widthMeasureSpec);
    var height = view_1.layout.getMeasureSpecSize(heightMeasureSpec);
    var heightMode = view_1.layout.getMeasureSpecMode(heightMeasureSpec);
    var measureWidth = Math.max(result.measuredWidth, this.effectiveMinWidth);
    var measureHeight = Math.max(result.measuredHeight, this.effectiveMinHeight);
    var widthAndState = view_1.View.resolveSizeAndState(measureWidth, width, widthMode, 0);
    var heightAndState = view_1.View.resolveSizeAndState(measureHeight, height, heightMode, 0);
    this.setMeasuredDimension(widthAndState, heightAndState);
  };

  ContentView.prototype.onLayout = function (left, top, right, bottom) {
    view_1.View.layoutChild(this, this.layoutView, 0, 0, right - left, bottom - top);
  };

  return ContentView;
}(view_1.CustomLayoutView);

exports.ContentView = ContentView;
ContentView.prototype.recycleNativeView = "auto";

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/core/bindable/bindable.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var observable_1 = __webpack_require__("../node_modules/tns-core-modules/data/observable/observable.js");

exports.Observable = observable_1.Observable;
exports.WrappedValue = observable_1.WrappedValue;

var weak_event_listener_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/weak-event-listener/weak-event-listener.js");

var binding_builder_1 = __webpack_require__("../node_modules/tns-core-modules/ui/builder/binding-builder.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var trace_1 = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

exports.traceEnabled = trace_1.isEnabled;
exports.traceWrite = trace_1.write;
exports.traceError = trace_1.error;
exports.traceCategories = trace_1.categories;
exports.traceNotifyEvent = trace_1.notifyEvent;
exports.isCategorySet = trace_1.isCategorySet;
exports.traceMessageType = trace_1.messageType;

var types = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var applicationCommon = __webpack_require__("../node_modules/tns-core-modules/application/application-common.js");

var polymerExpressions = __webpack_require__("../node_modules/tns-core-modules/js-libs/polymer-expressions/polymer-expressions.js");

var contextKey = "context";
var paramsRegex = /\[\s*(['"])*(\w*)\1\s*\]/;
var bc = binding_builder_1.bindingConstants;
var emptyArray = [];
var propertiesCache = {};

function getProperties(property) {
  if (!property) {
    return emptyArray;
  }

  var result = propertiesCache[property];

  if (result) {
    return result;
  }

  var parentsMatches = property.match(binding_builder_1.parentsRegex);
  result = property.replace(binding_builder_1.parentsRegex, "parentsMatch").replace(/\]/g, "").split(/\.|\[/);
  var parentsMatchesCounter = 0;

  for (var i = 0, resultLength = result.length; i < resultLength; i++) {
    if (result[i] === "parentsMatch") {
      result[i] = parentsMatches[parentsMatchesCounter++];
    }
  }

  propertiesCache[property] = result;
  return result;
}

function getEventOrGestureName(name) {
  return name.indexOf("on") === 0 ? name.substr(2, name.length - 2) : name;
}

exports.getEventOrGestureName = getEventOrGestureName;

function isGesture(eventOrGestureName) {
  var t = eventOrGestureName.trim().toLowerCase();
  return t === "tap" || t === "doubletap" || t === "pinch" || t === "pan" || t === "swipe" || t === "rotation" || t === "longpress" || t === "touch";
}

exports.isGesture = isGesture;

function isEventOrGesture(name, view) {
  if (typeof name === "string") {
    var eventOrGestureName = getEventOrGestureName(name);
    var evt = eventOrGestureName + "Event";
    return view.constructor && evt in view.constructor || isGesture(eventOrGestureName.toLowerCase());
  }

  return false;
}

exports.isEventOrGesture = isEventOrGesture;

var Binding = function () {
  function Binding(target, options) {
    this.propertyChangeListeners = new Map();
    this.target = new WeakRef(target);
    this.options = options;
    this.sourceProperties = getProperties(options.sourceProperty);
    this.targetOptions = this.resolveOptions(target, getProperties(options.targetProperty));

    if (!this.targetOptions) {
      throw new Error("Invalid property: " + options.targetProperty + " for target: " + target);
    }

    if (options.twoWay) {
      var target_1 = this.targetOptions.instance.get();

      if (target_1 instanceof observable_1.Observable) {
        target_1.on(this.targetOptions.property + "Change", this.onTargetPropertyChanged, this);
      }
    }
  }

  Binding.prototype.onTargetPropertyChanged = function (data) {
    this.updateTwoWay(data.value);
  };

  Binding.prototype.loadedHandlerVisualTreeBinding = function (args) {
    var target = args.object;
    target.off("loaded", this.loadedHandlerVisualTreeBinding, this);
    var context = target.bindingContext;

    if (context !== undefined && context !== null) {
      this.update(context);
    }
  };

  ;

  Binding.prototype.clearSource = function () {
    var _this = this;

    this.propertyChangeListeners.forEach(function (observable, index, map) {
      weak_event_listener_1.removeWeakEventListener(observable, observable_1.Observable.propertyChangeEvent, _this.onSourcePropertyChanged, _this);
    });
    this.propertyChangeListeners.clear();

    if (this.source) {
      this.source.clear();
    }

    if (this.sourceOptions) {
      this.sourceOptions.instance.clear();
      this.sourceOptions = undefined;
    }
  };

  Binding.prototype.sourceAsObject = function (source) {
    var objectType = typeof source;

    if (objectType === "number") {
      source = new Number(source);
    } else if (objectType === "boolean") {
      source = new Boolean(source);
    } else if (objectType === "string") {
      source = new String(source);
    }

    return source;
  };

  Binding.prototype.bindingContextChanged = function (data) {
    var target = this.targetOptions.instance.get();

    if (!target) {
      this.unbind();
      return;
    }

    var value = data.value;

    if (value !== null && value !== undefined) {
      this.update(value);
    } else {
      this.clearBinding();
    }
  };

  Binding.prototype.bind = function (source) {
    var target = this.targetOptions.instance.get();

    if (this.sourceIsBindingContext && target instanceof observable_1.Observable && this.targetOptions.property !== "bindingContext") {
      target.on("bindingContextChange", this.bindingContextChanged, this);
    }

    this.update(source);
  };

  Binding.prototype.update = function (source) {
    this.clearSource();
    source = this.sourceAsObject(source);

    if (!types.isNullOrUndefined(source)) {
      this.source = new WeakRef(source);
      this.sourceOptions = this.resolveOptions(source, this.sourceProperties);
      var sourceValue = this.getSourcePropertyValue();
      this.updateTarget(sourceValue);
      this.addPropertyChangeListeners(this.source, this.sourceProperties);
    } else if (!this.sourceIsBindingContext) {
      var sourceValue = this.getSourcePropertyValue();
      this.updateTarget(sourceValue ? sourceValue : source);
    }
  };

  Binding.prototype.unbind = function () {
    var target = this.targetOptions.instance.get();

    if (target instanceof observable_1.Observable) {
      if (this.options.twoWay) {
        target.off(this.targetOptions.property + "Change", this.onTargetPropertyChanged, this);
      }

      if (this.sourceIsBindingContext && this.targetOptions.property !== "bindingContext") {
        target.off("bindingContextChange", this.bindingContextChanged, this);
      }
    }

    if (this.targetOptions) {
      this.targetOptions = undefined;
    }

    this.sourceProperties = undefined;

    if (!this.source) {
      return;
    }

    this.clearSource();
  };

  Binding.prototype.resolveObjectsAndProperties = function (source, properties) {
    var result = [];
    var currentObject = source;
    var currentObjectChanged = false;

    for (var i = 0, propsArrayLength = properties.length; i < propsArrayLength; i++) {
      var property = properties[i];

      if (property === bc.bindingValueKey) {
        currentObjectChanged = true;
      }

      if (property === bc.parentValueKey || property.indexOf(bc.parentsValueKey) === 0) {
        var parentView = this.getParentView(this.target.get(), property).view;

        if (parentView) {
          currentObject = parentView.bindingContext;
        } else {
          var targetInstance = this.target.get();
          targetInstance.off("loaded", this.loadedHandlerVisualTreeBinding, this);
          targetInstance.on("loaded", this.loadedHandlerVisualTreeBinding, this);
        }

        currentObjectChanged = true;
      }

      if (currentObject) {
        result.push({
          instance: currentObject,
          property: property
        });
      } else {
        break;
      }

      if (!currentObjectChanged && i < propsArrayLength - 1) {
        currentObject = currentObject ? currentObject[properties[i]] : null;
      }

      currentObjectChanged = false;
    }

    return result;
  };

  Binding.prototype.addPropertyChangeListeners = function (source, sourceProperty, parentProperies) {
    var objectsAndProperties = this.resolveObjectsAndProperties(source.get(), sourceProperty);
    var prop = parentProperies || "";

    for (var i = 0, length_1 = objectsAndProperties.length; i < length_1; i++) {
      var propName = objectsAndProperties[i].property;
      prop += "$" + propName;
      var currentObject = objectsAndProperties[i].instance;

      if (!this.propertyChangeListeners.has(prop) && currentObject instanceof observable_1.Observable && currentObject._isViewBase) {
        weak_event_listener_1.addWeakEventListener(currentObject, propName + "Change", this.onSourcePropertyChanged, this);
        weak_event_listener_1.addWeakEventListener(currentObject, observable_1.Observable.propertyChangeEvent, this.onSourcePropertyChanged, this);
        this.propertyChangeListeners.set(prop, currentObject);
      } else if (!this.propertyChangeListeners.has(prop) && currentObject instanceof observable_1.Observable) {
        weak_event_listener_1.addWeakEventListener(currentObject, observable_1.Observable.propertyChangeEvent, this.onSourcePropertyChanged, this);
        this.propertyChangeListeners.set(prop, currentObject);
      }
    }
  };

  Binding.prototype.prepareExpressionForUpdate = function () {
    var escapedSourceProperty = utils_1.escapeRegexSymbols(this.options.sourceProperty);
    var expRegex = new RegExp(escapedSourceProperty, "g");
    var resultExp = this.options.expression.replace(expRegex, bc.newPropertyValueKey);
    return resultExp;
  };

  Binding.prototype.updateTwoWay = function (value) {
    if (this.updating || !this.options.twoWay) {
      return;
    }

    var newValue = value;

    if (this.options.expression) {
      var changedModel = {};
      changedModel[bc.bindingValueKey] = value;
      changedModel[bc.newPropertyValueKey] = value;
      var sourcePropertyName = "";

      if (this.sourceOptions) {
        sourcePropertyName = this.sourceOptions.property;
      } else if (typeof this.options.sourceProperty === "string" && this.options.sourceProperty.indexOf(".") === -1) {
        sourcePropertyName = this.options.sourceProperty;
      }

      if (sourcePropertyName !== "") {
        changedModel[sourcePropertyName] = value;
      }

      var updateExpression = this.prepareExpressionForUpdate();
      this.prepareContextForExpression(changedModel, updateExpression, undefined);

      var expressionValue = this._getExpressionValue(updateExpression, true, changedModel);

      if (expressionValue instanceof Error) {
        trace_1.write(expressionValue.message, trace_1.categories.Binding, trace_1.messageType.error);
      }

      newValue = expressionValue;
    }

    this.updateSource(newValue);
  };

  Binding.prototype._getExpressionValue = function (expression, isBackConvert, changedModel) {
    try {
      var exp_1 = polymerExpressions.PolymerExpressions.getExpression(expression);

      if (exp_1) {
        var context_1 = this.source && this.source.get && this.source.get() || global;
        var model = {};
        var addedProps = [];
        var resources = applicationCommon.getResources();

        for (var prop in resources) {
          if (resources.hasOwnProperty(prop) && !context_1.hasOwnProperty(prop)) {
            context_1[prop] = resources[prop];
            addedProps.push(prop);
          }
        }

        this.prepareContextForExpression(context_1, expression, addedProps);
        model[contextKey] = context_1;
        var result = exp_1.getValue(model, isBackConvert, changedModel ? changedModel : model);
        var addedPropsLength = addedProps.length;

        for (var i = 0; i < addedPropsLength; i++) {
          delete context_1[addedProps[i]];
        }

        addedProps.length = 0;
        return result;
      }

      return new Error(expression + " is not a valid expression.");
    } catch (e) {
      var errorMessage = "Run-time error occured in file: " + e.sourceURL + " at line: " + e.line + " and column: " + e.column;
      return new Error(errorMessage);
    }
  };

  Binding.prototype.onSourcePropertyChanged = function (data) {
    var sourceProps = this.sourceProperties;
    var sourcePropsLength = sourceProps.length;
    var changedPropertyIndex = sourceProps.indexOf(data.propertyName);
    var parentProps = "";

    if (changedPropertyIndex > -1) {
      parentProps = "$" + sourceProps.slice(0, changedPropertyIndex + 1).join("$");

      while (this.propertyChangeListeners.get(parentProps) !== data.object) {
        changedPropertyIndex += sourceProps.slice(changedPropertyIndex + 1).indexOf(data.propertyName) + 1;
        parentProps = "$" + sourceProps.slice(0, changedPropertyIndex + 1).join("$");
      }
    }

    if (this.options.expression) {
      var expressionValue = this._getExpressionValue(this.options.expression, false, undefined);

      if (expressionValue instanceof Error) {
        trace_1.write(expressionValue.message, trace_1.categories.Binding, trace_1.messageType.error);
      } else {
        this.updateTarget(expressionValue);
      }
    } else {
      if (changedPropertyIndex > -1) {
        var props = sourceProps.slice(changedPropertyIndex + 1);
        var propsLength = props.length;

        if (propsLength > 0) {
          var value = data.value;

          for (var i = 0; i < propsLength; i++) {
            value = value[props[i]];
          }

          this.updateTarget(value);
        } else if (data.propertyName === this.sourceOptions.property) {
          this.updateTarget(data.value);
        }
      }
    }

    if (changedPropertyIndex > -1 && changedPropertyIndex < sourcePropsLength - 1) {
      var probablyChangedObject = this.propertyChangeListeners.get(parentProps);

      if (probablyChangedObject && probablyChangedObject !== data.object[sourceProps[changedPropertyIndex]]) {
        for (var i = sourcePropsLength - 1; i > changedPropertyIndex; i--) {
          var prop = "$" + sourceProps.slice(0, i + 1).join("$");

          if (this.propertyChangeListeners.has(prop)) {
            weak_event_listener_1.removeWeakEventListener(this.propertyChangeListeners.get(prop), observable_1.Observable.propertyChangeEvent, this.onSourcePropertyChanged, this);
            this.propertyChangeListeners.delete(prop);
          }
        }

        var newProps = sourceProps.slice(changedPropertyIndex + 1);
        var newObject = data.object[sourceProps[changedPropertyIndex]];

        if (!types.isNullOrUndefined(newObject) && typeof newObject === "object") {
          this.addPropertyChangeListeners(new WeakRef(newObject), newProps, parentProps);
        }
      }
    }
  };

  Binding.prototype.prepareContextForExpression = function (model, expression, newProps) {
    var parentViewAndIndex;
    var parentView;
    var addedProps = newProps || [];

    if (expression.indexOf(bc.bindingValueKey) > -1) {
      model[bc.bindingValueKey] = model;
      addedProps.push(bc.bindingValueKey);
    }

    if (expression.indexOf(bc.parentValueKey) > -1) {
      parentView = this.getParentView(this.target.get(), bc.parentValueKey).view;

      if (parentView) {
        model[bc.parentValueKey] = parentView.bindingContext;
        addedProps.push(bc.parentValueKey);
      }
    }

    var parentsArray = expression.match(binding_builder_1.parentsRegex);

    if (parentsArray) {
      for (var i = 0; i < parentsArray.length; i++) {
        parentViewAndIndex = this.getParentView(this.target.get(), parentsArray[i]);

        if (parentViewAndIndex.view) {
          model[bc.parentsValueKey] = model[bc.parentsValueKey] || {};
          model[bc.parentsValueKey][parentViewAndIndex.index] = parentViewAndIndex.view.bindingContext;
          addedProps.push(bc.parentsValueKey);
        }
      }
    }
  };

  Binding.prototype.getSourcePropertyValue = function () {
    if (this.options.expression) {
      var changedModel = {};
      changedModel[bc.bindingValueKey] = this.source ? this.source.get() : undefined;

      var expressionValue = this._getExpressionValue(this.options.expression, false, changedModel);

      if (expressionValue instanceof Error) {
        trace_1.write(expressionValue.message, trace_1.categories.Binding, trace_1.messageType.error);
      } else {
        return expressionValue;
      }
    }

    if (this.sourceOptions) {
      var sourceOptionsInstance = this.sourceOptions.instance.get();

      if (this.sourceOptions.property === bc.bindingValueKey) {
        return sourceOptionsInstance;
      } else if (sourceOptionsInstance instanceof observable_1.Observable && this.sourceOptions.property && this.sourceOptions.property !== "") {
        return sourceOptionsInstance.get(this.sourceOptions.property);
      } else if (sourceOptionsInstance && this.sourceOptions.property && this.sourceOptions.property !== "" && this.sourceOptions.property in sourceOptionsInstance) {
        return sourceOptionsInstance[this.sourceOptions.property];
      } else {
        trace_1.write("Property: '" + this.sourceOptions.property + "' is invalid or does not exist. SourceProperty: '" + this.options.sourceProperty + "'", trace_1.categories.Binding, trace_1.messageType.error);
      }
    }

    return null;
  };

  Binding.prototype.clearBinding = function () {
    this.clearSource();
    this.updateTarget(properties_1.unsetValue);
  };

  Binding.prototype.updateTarget = function (value) {
    if (this.updating) {
      return;
    }

    this.updateOptions(this.targetOptions, types.isNullOrUndefined(value) ? properties_1.unsetValue : value);
  };

  Binding.prototype.updateSource = function (value) {
    if (this.updating || !this.source || !this.source.get()) {
      return;
    }

    this.updateOptions(this.sourceOptions, value);
  };

  Binding.prototype.getParentView = function (target, property) {
    if (!target) {
      return {
        view: null,
        index: null
      };
    }

    var result;

    if (property === bc.parentValueKey) {
      result = target.parent;
    }

    var index = null;

    if (property.indexOf(bc.parentsValueKey) === 0) {
      result = target.parent;
      var indexParams = paramsRegex.exec(property);

      if (indexParams && indexParams.length > 1) {
        index = indexParams[2];
      }

      if (!isNaN(index)) {
        var indexAsInt = parseInt(index);

        while (indexAsInt > 0) {
          result = result.parent;
          indexAsInt--;
        }
      } else if (types.isString(index)) {
        while (result && result.typeName !== index) {
          result = result.parent;
        }
      }
    }

    return {
      view: result,
      index: index
    };
  };

  Binding.prototype.resolveOptions = function (obj, properties) {
    var objectsAndProperties = this.resolveObjectsAndProperties(obj, properties);

    if (objectsAndProperties.length > 0) {
      var resolvedObj = objectsAndProperties[objectsAndProperties.length - 1].instance;
      var prop = objectsAndProperties[objectsAndProperties.length - 1].property;
      return {
        instance: new WeakRef(this.sourceAsObject(resolvedObj)),
        property: prop
      };
    }

    return null;
  };

  Binding.prototype.updateOptions = function (options, value) {
    var optionsInstance;

    if (options && options.instance) {
      optionsInstance = options.instance.get();
    }

    if (!optionsInstance) {
      return;
    }

    this.updating = true;

    try {
      if (isEventOrGesture(options.property, optionsInstance) && types.isFunction(value)) {
        optionsInstance.off(options.property, null, optionsInstance.bindingContext);
        optionsInstance.on(options.property, value, optionsInstance.bindingContext);
      } else if (optionsInstance instanceof observable_1.Observable) {
        optionsInstance.set(options.property, value);
      } else {
        optionsInstance[options.property] = value;
      }
    } catch (ex) {
      trace_1.write("Binding error while setting property " + options.property + " of " + optionsInstance + ": " + ex, trace_1.categories.Binding, trace_1.messageType.error);
    }

    this.updating = false;
  };

  return Binding;
}();

exports.Binding = Binding;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/core/properties/properties.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var observable_1 = __webpack_require__("../node_modules/tns-core-modules/data/observable/observable.js");

var style_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style/style.js");

exports.Style = style_1.Style;

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

exports.unsetValue = new Object();
var cssPropertyNames = [];
var symbolPropertyMap = {};
var cssSymbolPropertyMap = {};
var inheritableProperties = new Array();
var inheritableCssProperties = new Array();

function print(map) {
  var symbols = Object.getOwnPropertySymbols(map);

  for (var _i = 0, symbols_1 = symbols; _i < symbols_1.length; _i++) {
    var symbol = symbols_1[_i];
    var prop = map[symbol];

    if (!prop.registered) {
      console.log("Property " + prop.name + " not Registered!!!!!");
    }
  }
}

function _printUnregisteredProperties() {
  print(symbolPropertyMap);
  print(cssSymbolPropertyMap);
}

exports._printUnregisteredProperties = _printUnregisteredProperties;

function _getProperties() {
  return getPropertiesFromMap(symbolPropertyMap);
}

exports._getProperties = _getProperties;

function _getStyleProperties() {
  return getPropertiesFromMap(cssSymbolPropertyMap);
}

exports._getStyleProperties = _getStyleProperties;

function getPropertiesFromMap(map) {
  var props = [];
  Object.getOwnPropertySymbols(map).forEach(function (symbol) {
    return props.push(map[symbol]);
  });
  return props;
}

var Property = function () {
  function Property(options) {
    this.enumerable = true;
    this.configurable = true;
    var propertyName = options.name;
    this.name = propertyName;
    var key = Symbol(propertyName + ":propertyKey");
    this.key = key;
    var getDefault = Symbol(propertyName + ":getDefault");
    this.getDefault = getDefault;
    var setNative = Symbol(propertyName + ":setNative");
    this.setNative = setNative;
    var defaultValueKey = Symbol(propertyName + ":nativeDefaultValue");
    this.defaultValueKey = defaultValueKey;
    var defaultValue = options.defaultValue;
    this.defaultValue = defaultValue;
    var eventName = propertyName + "Change";
    var equalityComparer = options.equalityComparer;
    var affectsLayout = options.affectsLayout;
    var valueChanged = options.valueChanged;
    var valueConverter = options.valueConverter;
    var property = this;

    this.set = function (boxedValue) {
      var reset = boxedValue === exports.unsetValue;
      var value;
      var wrapped;

      if (reset) {
        value = defaultValue;
      } else {
        wrapped = boxedValue && boxedValue.wrapped;
        value = wrapped ? observable_1.WrappedValue.unwrap(boxedValue) : boxedValue;

        if (valueConverter && typeof value === "string") {
          value = valueConverter(value);
        }
      }

      var oldValue = key in this ? this[key] : defaultValue;
      var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;

      if (wrapped || changed) {
        if (affectsLayout) {
          this.requestLayout();
        }

        if (reset) {
          delete this[key];

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (this[setNative]) {
            if (this._suspendNativeUpdatesCount) {
              if (this._suspendedUpdates) {
                this._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (defaultValueKey in this) {
                this[setNative](this[defaultValueKey]);
                delete this[defaultValueKey];
              } else {
                this[setNative](defaultValue);
              }
            }
          }
        } else {
          this[key] = value;

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (this[setNative]) {
            if (this._suspendNativeUpdatesCount) {
              if (this._suspendedUpdates) {
                this._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (!(defaultValueKey in this)) {
                this[defaultValueKey] = this[getDefault] ? this[getDefault]() : defaultValue;
              }

              this[setNative](value);
            }
          }
        }

        if (this.hasListeners(eventName)) {
          this.notify({
            object: this,
            eventName: eventName,
            propertyName: propertyName,
            value: value,
            oldValue: oldValue
          });
        }

        if (this.domNode) {
          if (reset) {
            this.domNode.attributeRemoved(propertyName);
          } else {
            this.domNode.attributeModified(propertyName, value);
          }
        }
      }
    };

    this.get = function () {
      return key in this ? this[key] : defaultValue;
    };

    this.nativeValueChange = function (owner, value) {
      var oldValue = key in owner ? owner[key] : defaultValue;
      var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;

      if (changed) {
        owner[key] = value;

        if (valueChanged) {
          valueChanged(owner, oldValue, value);
        }

        if (owner.nativeViewProtected && !(defaultValueKey in owner)) {
          owner[defaultValueKey] = owner[getDefault] ? owner[getDefault]() : defaultValue;
        }

        if (owner.hasListeners(eventName)) {
          owner.notify({
            object: owner,
            eventName: eventName,
            propertyName: propertyName,
            value: value,
            oldValue: oldValue
          });
        }

        if (affectsLayout) {
          owner.requestLayout();
        }

        if (owner.domNode) {
          owner.domNode.attributeModified(propertyName, value);
        }
      }
    };

    symbolPropertyMap[key] = this;
  }

  Property.prototype.register = function (cls) {
    if (this.registered) {
      throw new Error("Property " + this.name + " already registered.");
    }

    this.registered = true;
    Object.defineProperty(cls.prototype, this.name, this);
  };

  Property.prototype.isSet = function (instance) {
    return this.key in instance;
  };

  return Property;
}();

exports.Property = Property;
Property.prototype.isStyleProperty = false;

var CoercibleProperty = function (_super) {
  __extends(CoercibleProperty, _super);

  function CoercibleProperty(options) {
    var _this = _super.call(this, options) || this;

    var propertyName = options.name;
    var key = _this.key;
    var getDefault = _this.getDefault;
    var setNative = _this.setNative;
    var defaultValueKey = _this.defaultValueKey;
    var defaultValue = _this.defaultValue;
    var coerceKey = Symbol(propertyName + ":coerceKey");
    var eventName = propertyName + "Change";
    var affectsLayout = options.affectsLayout;
    var equalityComparer = options.equalityComparer;
    var valueChanged = options.valueChanged;
    var valueConverter = options.valueConverter;
    var coerceCallback = options.coerceValue;
    var property = _this;

    _this.coerce = function (target) {
      var originalValue = coerceKey in target ? target[coerceKey] : defaultValue;
      target[propertyName] = originalValue;
    };

    _this.set = function (boxedValue) {
      var reset = boxedValue === exports.unsetValue;
      var value;
      var wrapped;

      if (reset) {
        value = defaultValue;
        delete this[coerceKey];
      } else {
        wrapped = boxedValue && boxedValue.wrapped;
        value = wrapped ? observable_1.WrappedValue.unwrap(boxedValue) : boxedValue;

        if (valueConverter && typeof value === "string") {
          value = valueConverter(value);
        }

        this[coerceKey] = value;
        value = coerceCallback(this, value);
      }

      var oldValue = key in this ? this[key] : defaultValue;
      var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;

      if (wrapped || changed) {
        if (reset) {
          delete this[key];

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (this[setNative]) {
            if (this._suspendNativeUpdatesCount) {
              if (this._suspendedUpdates) {
                this._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (defaultValueKey in this) {
                this[setNative](this[defaultValueKey]);
                delete this[defaultValueKey];
              } else {
                this[setNative](defaultValue);
              }
            }
          }
        } else {
          this[key] = value;

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (this[setNative]) {
            if (this._suspendNativeUpdatesCount) {
              if (this._suspendedUpdates) {
                this._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (!(defaultValueKey in this)) {
                this[defaultValueKey] = this[getDefault] ? this[getDefault]() : defaultValue;
              }

              this[setNative](value);
            }
          }
        }

        if (this.hasListeners(eventName)) {
          this.notify({
            object: this,
            eventName: eventName,
            propertyName: propertyName,
            value: value,
            oldValue: oldValue
          });
        }

        if (affectsLayout) {
          this.requestLayout();
        }

        if (this.domNode) {
          if (reset) {
            this.domNode.attributeRemoved(propertyName);
          } else {
            this.domNode.attributeModified(propertyName, value);
          }
        }
      }
    };

    return _this;
  }

  return CoercibleProperty;
}(Property);

exports.CoercibleProperty = CoercibleProperty;

var InheritedProperty = function (_super) {
  __extends(InheritedProperty, _super);

  function InheritedProperty(options) {
    var _this = _super.call(this, options) || this;

    var name = options.name;
    var key = _this.key;
    var defaultValue = options.defaultValue;
    var sourceKey = Symbol(name + ":valueSourceKey");
    _this.sourceKey = sourceKey;
    var setBase = _this.set;

    var setFunc = function setFunc(valueSource) {
      return function (value) {
        var that = this;
        var unboxedValue;
        var newValueSource;

        if (value === exports.unsetValue) {
          var parent_1 = that.parent;

          if (parent_1 && parent_1[sourceKey] !== 0) {
            unboxedValue = parent_1[name];
            newValueSource = 1;
          } else {
            unboxedValue = defaultValue;
            newValueSource = 0;
          }
        } else {
          unboxedValue = value;
          newValueSource = valueSource;
        }

        var currentValue = that[key];
        setBase.call(that, unboxedValue);
        var newValue = that[key];
        that[sourceKey] = newValueSource;

        if (currentValue !== newValue) {
          var reset_1 = newValueSource === 0;
          that.eachChild(function (child) {
            var childValueSource = child[sourceKey] || 0;

            if (reset_1) {
              if (childValueSource === 1) {
                setFunc.call(child, exports.unsetValue);
              }
            } else {
              if (childValueSource <= 1) {
                setInheritedValue.call(child, newValue);
              }
            }

            return true;
          });
        }
      };
    };

    var setInheritedValue = setFunc(1);
    _this.setInheritedValue = setInheritedValue;
    _this.set = setFunc(3);
    inheritableProperties.push(_this);
    return _this;
  }

  return InheritedProperty;
}(Property);

exports.InheritedProperty = InheritedProperty;

var CssProperty = function () {
  function CssProperty(options) {
    var propertyName = options.name;
    this.name = propertyName;
    cssPropertyNames.push(options.cssName);
    this.cssName = "css:" + options.cssName;
    this.cssLocalName = options.cssName;
    var key = Symbol(propertyName + ":propertyKey");
    this.key = key;
    var sourceKey = Symbol(propertyName + ":valueSourceKey");
    this.sourceKey = sourceKey;
    var getDefault = Symbol(propertyName + ":getDefault");
    this.getDefault = getDefault;
    var setNative = Symbol(propertyName + ":setNative");
    this.setNative = setNative;
    var defaultValueKey = Symbol(propertyName + ":nativeDefaultValue");
    this.defaultValueKey = defaultValueKey;
    var defaultValue = options.defaultValue;
    this.defaultValue = defaultValue;
    var eventName = propertyName + "Change";
    var affectsLayout = options.affectsLayout;
    var equalityComparer = options.equalityComparer;
    var valueChanged = options.valueChanged;
    var valueConverter = options.valueConverter;
    var property = this;

    function setLocalValue(newValue) {
      var reset = newValue === exports.unsetValue || newValue === "";
      var value;

      if (reset) {
        value = defaultValue;
        delete this[sourceKey];
      } else {
        this[sourceKey] = 3;
        value = valueConverter && typeof newValue === "string" ? valueConverter(newValue) : newValue;
      }

      var oldValue = key in this ? this[key] : defaultValue;
      var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;

      if (changed) {
        var view = this.view;

        if (reset) {
          delete this[key];

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (view[setNative]) {
            if (view._suspendNativeUpdatesCount) {
              if (view._suspendedUpdates) {
                view._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (defaultValueKey in this) {
                view[setNative](this[defaultValueKey]);
                delete this[defaultValueKey];
              } else {
                view[setNative](defaultValue);
              }
            }
          }
        } else {
          this[key] = value;

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (view[setNative]) {
            if (view._suspendNativeUpdatesCount) {
              if (view._suspendedUpdates) {
                view._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (!(defaultValueKey in this)) {
                this[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
              }

              view[setNative](value);
            }
          }
        }

        if (this.hasListeners(eventName)) {
          this.notify({
            object: this,
            eventName: eventName,
            propertyName: propertyName,
            value: value,
            oldValue: oldValue
          });
        }

        if (affectsLayout) {
          view.requestLayout();
        }
      }
    }

    function setCssValue(newValue) {
      var currentValueSource = this[sourceKey] || 0;

      if (currentValueSource === 3) {
        return;
      }

      var reset = newValue === exports.unsetValue || newValue === "";
      var value;

      if (reset) {
        value = defaultValue;
        delete this[sourceKey];
      } else {
        value = valueConverter && typeof newValue === "string" ? valueConverter(newValue) : newValue;
        this[sourceKey] = 2;
      }

      var oldValue = key in this ? this[key] : defaultValue;
      var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;

      if (changed) {
        var view = this.view;

        if (reset) {
          delete this[key];

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (view[setNative]) {
            if (view._suspendNativeUpdatesCount) {
              if (view._suspendedUpdates) {
                view._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (defaultValueKey in this) {
                view[setNative](this[defaultValueKey]);
                delete this[defaultValueKey];
              } else {
                view[setNative](defaultValue);
              }
            }
          }
        } else {
          this[key] = value;

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (view[setNative]) {
            if (view._suspendNativeUpdatesCount) {
              if (view._suspendedUpdates) {
                view._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (!(defaultValueKey in this)) {
                this[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
              }

              view[setNative](value);
            }
          }
        }

        if (this.hasListeners(eventName)) {
          this.notify({
            object: this,
            eventName: eventName,
            propertyName: propertyName,
            value: value,
            oldValue: oldValue
          });
        }

        if (affectsLayout) {
          view.requestLayout();
        }
      }
    }

    function get() {
      return key in this ? this[key] : defaultValue;
    }

    this.cssValueDescriptor = {
      enumerable: true,
      configurable: true,
      get: get,
      set: setCssValue
    };
    this.localValueDescriptor = {
      enumerable: true,
      configurable: true,
      get: get,
      set: setLocalValue
    };
    cssSymbolPropertyMap[key] = this;
  }

  CssProperty.prototype.register = function (cls) {
    if (this.registered) {
      throw new Error("Property " + this.name + " already registered.");
    }

    this.registered = true;
    Object.defineProperty(cls.prototype, this.name, this.localValueDescriptor);
    Object.defineProperty(cls.prototype, this.cssName, this.cssValueDescriptor);

    if (this.cssLocalName !== this.cssName) {
      Object.defineProperty(cls.prototype, this.cssLocalName, this.localValueDescriptor);
    }
  };

  CssProperty.prototype.isSet = function (instance) {
    return this.key in instance;
  };

  return CssProperty;
}();

exports.CssProperty = CssProperty;
CssProperty.prototype.isStyleProperty = true;

var CssAnimationProperty = function () {
  function CssAnimationProperty(options) {
    var valueConverter = options.valueConverter,
        equalityComparer = options.equalityComparer,
        valueChanged = options.valueChanged,
        defaultValue = options.defaultValue;
    var propertyName = options.name;
    this.name = propertyName;
    cssPropertyNames.push(options.cssName);
    CssAnimationProperty.properties[propertyName] = this;

    if (options.cssName && options.cssName !== propertyName) {
      CssAnimationProperty.properties[options.cssName] = this;
    }

    this._valueConverter = options.valueConverter;
    var cssLocalName = options.cssName || propertyName;
    this.cssLocalName = cssLocalName;
    var cssName = "css:" + cssLocalName;
    this.cssName = cssName;
    var keyframeName = "keyframe:" + propertyName;
    this.keyframe = keyframeName;
    var defaultName = "default:" + propertyName;
    var defaultValueKey = Symbol(defaultName);
    this.defaultValueKey = defaultValueKey;
    this.defaultValue = defaultValue;
    var cssValue = Symbol(cssName);
    var styleValue = Symbol("local:" + propertyName);
    var keyframeValue = Symbol(keyframeName);
    var computedValue = Symbol("computed-value:" + propertyName);
    this.key = computedValue;
    var computedSource = Symbol("computed-source:" + propertyName);
    this.source = computedSource;
    this.getDefault = Symbol(propertyName + ":getDefault");
    var getDefault = this.getDefault;
    var setNative = this.setNative = Symbol(propertyName + ":setNative");
    var eventName = propertyName + "Change";
    var property = this;

    function descriptor(symbol, propertySource, enumerable, configurable, getsComputed) {
      return {
        enumerable: enumerable,
        configurable: configurable,
        get: getsComputed ? function () {
          return this[computedValue];
        } : function () {
          return this[symbol];
        },
        set: function set(boxedValue) {
          var oldValue = this[computedValue];
          var oldSource = this[computedSource];
          var wasSet = oldSource !== 0;
          var reset = boxedValue === exports.unsetValue || boxedValue === "";

          if (reset) {
            this[symbol] = exports.unsetValue;

            if (this[computedSource] === propertySource) {
              if (this[styleValue] !== exports.unsetValue) {
                this[computedSource] = 3;
                this[computedValue] = this[styleValue];
              } else if (this[cssValue] !== exports.unsetValue) {
                this[computedSource] = 2;
                this[computedValue] = this[cssValue];
              } else {
                delete this[computedSource];
                delete this[computedValue];
              }
            }
          } else {
            if (valueConverter && typeof boxedValue === "string") {
              boxedValue = valueConverter(boxedValue);
            }

            this[symbol] = boxedValue;

            if (this[computedSource] <= propertySource) {
              this[computedSource] = propertySource;
              this[computedValue] = boxedValue;
            }
          }

          var value = this[computedValue];
          var source = this[computedSource];
          var isSet = source !== 0;
          var computedValueChanged = oldValue !== value && (!equalityComparer || !equalityComparer(oldValue, value));

          if (computedValueChanged && valueChanged) {
            valueChanged(this, oldValue, value);
          }

          var view = this.view;

          if (view[setNative] && (computedValueChanged || isSet !== wasSet)) {
            if (view._suspendNativeUpdatesCount) {
              if (view._suspendedUpdates) {
                view._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (isSet) {
                if (!wasSet && !(defaultValueKey in this)) {
                  this[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
                }

                view[setNative](value);
              } else if (wasSet) {
                if (defaultValueKey in this) {
                  view[setNative](this[defaultValueKey]);
                } else {
                  view[setNative](defaultValue);
                }
              }
            }
          }

          if (computedValueChanged && this.hasListeners(eventName)) {
            this.notify({
              object: this,
              eventName: eventName,
              propertyName: propertyName,
              value: value,
              oldValue: oldValue
            });
          }
        }
      };
    }

    var defaultPropertyDescriptor = descriptor(defaultValueKey, 0, false, false, false);
    var cssPropertyDescriptor = descriptor(cssValue, 2, false, false, false);
    var stylePropertyDescriptor = descriptor(styleValue, 3, true, true, true);
    var keyframePropertyDescriptor = descriptor(keyframeValue, 4, false, false, false);
    symbolPropertyMap[computedValue] = this;
    cssSymbolPropertyMap[computedValue] = this;

    this.register = function (cls) {
      cls.prototype[computedValue] = options.defaultValue;
      cls.prototype[computedSource] = 0;
      cls.prototype[cssValue] = exports.unsetValue;
      cls.prototype[styleValue] = exports.unsetValue;
      cls.prototype[keyframeValue] = exports.unsetValue;
      Object.defineProperty(cls.prototype, defaultName, defaultPropertyDescriptor);
      Object.defineProperty(cls.prototype, cssName, cssPropertyDescriptor);
      Object.defineProperty(cls.prototype, propertyName, stylePropertyDescriptor);

      if (options.cssName && options.cssName !== options.name) {
        Object.defineProperty(cls.prototype, options.cssName, stylePropertyDescriptor);
      }

      Object.defineProperty(cls.prototype, keyframeName, keyframePropertyDescriptor);
    };
  }

  CssAnimationProperty.prototype._initDefaultNativeValue = function (target) {
    var defaultValueKey = this.defaultValueKey;

    if (!(defaultValueKey in target)) {
      var view = target.view;
      var getDefault = this.getDefault;
      target[defaultValueKey] = view[getDefault] ? view[getDefault]() : this.defaultValue;
    }
  };

  CssAnimationProperty._getByCssName = function (name) {
    return this.properties[name];
  };

  CssAnimationProperty._getPropertyNames = function () {
    return Object.keys(CssAnimationProperty.properties);
  };

  CssAnimationProperty.prototype.isSet = function (instance) {
    return instance[this.source] !== 0;
  };

  CssAnimationProperty.properties = {};
  return CssAnimationProperty;
}();

exports.CssAnimationProperty = CssAnimationProperty;
CssAnimationProperty.prototype.isStyleProperty = true;

var InheritedCssProperty = function (_super) {
  __extends(InheritedCssProperty, _super);

  function InheritedCssProperty(options) {
    var _this = _super.call(this, options) || this;

    var propertyName = options.name;
    var key = _this.key;
    var sourceKey = _this.sourceKey;
    var getDefault = _this.getDefault;
    var setNative = _this.setNative;
    var defaultValueKey = _this.defaultValueKey;
    var eventName = propertyName + "Change";
    var defaultValue = options.defaultValue;
    var affectsLayout = options.affectsLayout;
    var equalityComparer = options.equalityComparer;
    var valueChanged = options.valueChanged;
    var valueConverter = options.valueConverter;
    var property = _this;

    var setFunc = function setFunc(valueSource) {
      return function (boxedValue) {
        var reset = boxedValue === exports.unsetValue || boxedValue === "";
        var currentValueSource = this[sourceKey] || 0;

        if (reset) {
          if (valueSource === 2 && currentValueSource === 3) {
            return;
          }
        } else {
          if (currentValueSource > valueSource) {
            return;
          }
        }

        var oldValue = key in this ? this[key] : defaultValue;
        var view = this.view;
        var value;
        var unsetNativeValue = false;

        if (reset) {
          var parent_2 = view.parent;
          var style = parent_2 ? parent_2.style : null;

          if (style && style[sourceKey] > 0) {
            value = style[propertyName];
            this[sourceKey] = 1;
            this[key] = value;
          } else {
            value = defaultValue;
            delete this[sourceKey];
            delete this[key];
            unsetNativeValue = true;
          }
        } else {
          this[sourceKey] = valueSource;

          if (valueConverter && typeof boxedValue === "string") {
            value = valueConverter(boxedValue);
          } else {
            value = boxedValue;
          }

          this[key] = value;
        }

        var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;

        if (changed) {
          var view_1 = this.view;

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (view_1[setNative]) {
            if (view_1._suspendNativeUpdatesCount) {
              if (view_1._suspendedUpdates) {
                view_1._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (unsetNativeValue) {
                if (defaultValueKey in this) {
                  view_1[setNative](this[defaultValueKey]);
                  delete this[defaultValueKey];
                } else {
                  view_1[setNative](defaultValue);
                }
              } else {
                if (!(defaultValueKey in this)) {
                  this[defaultValueKey] = view_1[getDefault] ? view_1[getDefault]() : defaultValue;
                }

                view_1[setNative](value);
              }
            }
          }

          if (this.hasListeners(eventName)) {
            this.notify({
              object: this,
              eventName: eventName,
              propertyName: propertyName,
              value: value,
              oldValue: oldValue
            });
          }

          if (affectsLayout) {
            view_1.requestLayout();
          }

          view_1.eachChild(function (child) {
            var childStyle = child.style;
            var childValueSource = childStyle[sourceKey] || 0;

            if (reset) {
              if (childValueSource === 1) {
                setDefaultFunc.call(childStyle, exports.unsetValue);
              }
            } else {
              if (childValueSource <= 1) {
                setInheritedFunc.call(childStyle, value);
              }
            }

            return true;
          });
        }
      };
    };

    var setDefaultFunc = setFunc(0);
    var setInheritedFunc = setFunc(1);
    _this.setInheritedValue = setInheritedFunc;
    _this.cssValueDescriptor.set = setFunc(2);
    _this.localValueDescriptor.set = setFunc(3);
    inheritableCssProperties.push(_this);
    return _this;
  }

  return InheritedCssProperty;
}(CssProperty);

exports.InheritedCssProperty = InheritedCssProperty;

var ShorthandProperty = function () {
  function ShorthandProperty(options) {
    this.name = options.name;
    var key = Symbol(this.name + ":propertyKey");
    this.key = key;
    this.cssName = "css:" + options.cssName;
    this.cssLocalName = "" + options.cssName;
    var converter = options.converter;

    function setLocalValue(value) {
      var _this = this;

      this.view._batchUpdate(function () {
        for (var _i = 0, _a = converter(value); _i < _a.length; _i++) {
          var _b = _a[_i],
              p = _b[0],
              v = _b[1];
          _this[p.name] = v;
        }
      });
    }

    function setCssValue(value) {
      var _this = this;

      this.view._batchUpdate(function () {
        for (var _i = 0, _a = converter(value); _i < _a.length; _i++) {
          var _b = _a[_i],
              p = _b[0],
              v = _b[1];
          _this[p.cssName] = v;
        }
      });
    }

    this.cssValueDescriptor = {
      enumerable: true,
      configurable: true,
      get: options.getter,
      set: setCssValue
    };
    this.localValueDescriptor = {
      enumerable: true,
      configurable: true,
      get: options.getter,
      set: setLocalValue
    };
    this.propertyBagDescriptor = {
      enumerable: false,
      configurable: true,
      set: function set(value) {
        var _this = this;

        converter(value).forEach(function (_a) {
          var property = _a[0],
              value = _a[1];
          _this[property.cssLocalName] = value;
        });
      }
    };
    cssSymbolPropertyMap[key] = this;
  }

  ShorthandProperty.prototype.register = function (cls) {
    if (this.registered) {
      throw new Error("Property " + this.name + " already registered.");
    }

    this.registered = true;
    Object.defineProperty(cls.prototype, this.name, this.localValueDescriptor);
    Object.defineProperty(cls.prototype, this.cssName, this.cssValueDescriptor);

    if (this.cssLocalName !== this.cssName) {
      Object.defineProperty(cls.prototype, this.cssLocalName, this.localValueDescriptor);
    }

    Object.defineProperty(cls.prototype.PropertyBag, this.cssLocalName, this.propertyBagDescriptor);
  };

  return ShorthandProperty;
}();

exports.ShorthandProperty = ShorthandProperty;

function inheritablePropertyValuesOn(view) {
  var array = new Array();

  for (var _i = 0, inheritableProperties_1 = inheritableProperties; _i < inheritableProperties_1.length; _i++) {
    var prop = inheritableProperties_1[_i];
    var sourceKey = prop.sourceKey;
    var valueSource = view[sourceKey] || 0;

    if (valueSource !== 0) {
      array.push({
        property: prop,
        value: view[prop.name]
      });
    }
  }

  return array;
}

function inheritableCssPropertyValuesOn(style) {
  var array = new Array();

  for (var _i = 0, inheritableCssProperties_1 = inheritableCssProperties; _i < inheritableCssProperties_1.length; _i++) {
    var prop = inheritableCssProperties_1[_i];
    var sourceKey = prop.sourceKey;
    var valueSource = style[sourceKey] || 0;

    if (valueSource !== 0) {
      array.push({
        property: prop,
        value: style[prop.name]
      });
    }
  }

  return array;
}

exports.initNativeView = profiling_1.profile("\"properties\".initNativeView", function initNativeView(view) {
  if (view._suspendedUpdates) {
    applyPendingNativeSetters(view);
  } else {
    applyAllNativeSetters(view);
  }

  view._suspendedUpdates = {};
});

function applyPendingNativeSetters(view) {
  var suspendedUpdates = view._suspendedUpdates;

  for (var propertyName in suspendedUpdates) {
    var property = suspendedUpdates[propertyName];
    var setNative = property.setNative;

    if (view[setNative]) {
      var getDefault = property.getDefault,
          isStyleProperty = property.isStyleProperty,
          defaultValueKey = property.defaultValueKey,
          defaultValue = property.defaultValue;
      var value = void 0;

      if (isStyleProperty) {
        var style = view.style;

        if (property.isSet(view.style)) {
          if (!(defaultValueKey in style)) {
            style[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
          }

          value = view.style[propertyName];
        } else {
          value = style[defaultValueKey];
        }
      } else {
        if (property.isSet(view)) {
          if (!(defaultValueKey in view)) {
            view[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
          }

          value = view[propertyName];
        } else {
          value = view[defaultValueKey];
        }
      }

      view[setNative](value);
    }
  }
}

exports.applyPendingNativeSetters = applyPendingNativeSetters;

function applyAllNativeSetters(view) {
  var symbols = Object.getOwnPropertySymbols(view);

  for (var _i = 0, symbols_2 = symbols; _i < symbols_2.length; _i++) {
    var symbol = symbols_2[_i];
    var property = symbolPropertyMap[symbol];

    if (!property) {
      continue;
    }

    var setNative = property.setNative;
    var getDefault = property.getDefault;

    if (setNative in view) {
      var defaultValueKey = property.defaultValueKey;

      if (!(defaultValueKey in view)) {
        view[defaultValueKey] = view[getDefault] ? view[getDefault]() : property.defaultValue;
      }

      var value = view[symbol];
      view[setNative](value);
    }
  }

  var style = view.style;
  symbols = Object.getOwnPropertySymbols(style);

  for (var _a = 0, symbols_3 = symbols; _a < symbols_3.length; _a++) {
    var symbol = symbols_3[_a];
    var property = cssSymbolPropertyMap[symbol];

    if (!property) {
      continue;
    }

    if (view[property.setNative]) {
      var defaultValueKey = property.defaultValueKey;

      if (!(defaultValueKey in style)) {
        style[defaultValueKey] = view[property.getDefault] ? view[property.getDefault]() : property.defaultValue;
      }

      var value = style[symbol];
      view[property.setNative](value);
    }
  }
}

exports.applyAllNativeSetters = applyAllNativeSetters;

function resetNativeView(view) {
  var symbols = Object.getOwnPropertySymbols(view);

  for (var _i = 0, symbols_4 = symbols; _i < symbols_4.length; _i++) {
    var symbol = symbols_4[_i];
    var property = symbolPropertyMap[symbol];

    if (!property) {
      continue;
    }

    if (view[property.setNative]) {
      if (property.defaultValueKey in view) {
        view[property.setNative](view[property.defaultValueKey]);
        delete view[property.defaultValueKey];
      } else {
        view[property.setNative](property.defaultValue);
      }
    }
  }

  var style = view.style;
  symbols = Object.getOwnPropertySymbols(style);

  for (var _a = 0, symbols_5 = symbols; _a < symbols_5.length; _a++) {
    var symbol = symbols_5[_a];
    var property = cssSymbolPropertyMap[symbol];

    if (!property) {
      continue;
    }

    if (view[property.setNative]) {
      if (property.defaultValueKey in style) {
        view[property.setNative](style[property.defaultValueKey]);
        delete style[property.defaultValueKey];
      } else {
        view[property.setNative](property.defaultValue);
      }
    }
  }
}

exports.resetNativeView = resetNativeView;

function clearInheritedProperties(view) {
  for (var _i = 0, inheritableProperties_2 = inheritableProperties; _i < inheritableProperties_2.length; _i++) {
    var prop = inheritableProperties_2[_i];
    var sourceKey = prop.sourceKey;

    if (view[sourceKey] === 1) {
      prop.set.call(view, exports.unsetValue);
    }
  }

  var style = view.style;

  for (var _a = 0, inheritableCssProperties_2 = inheritableCssProperties; _a < inheritableCssProperties_2.length; _a++) {
    var prop = inheritableCssProperties_2[_a];
    var sourceKey = prop.sourceKey;

    if (style[sourceKey] === 1) {
      prop.setInheritedValue.call(style, exports.unsetValue);
    }
  }
}

exports.clearInheritedProperties = clearInheritedProperties;

function resetCSSProperties(style) {
  var symbols = Object.getOwnPropertySymbols(style);

  for (var _i = 0, symbols_6 = symbols; _i < symbols_6.length; _i++) {
    var symbol = symbols_6[_i];
    var cssProperty = void 0;

    if (cssProperty = cssSymbolPropertyMap[symbol]) {
      style[cssProperty.cssName] = exports.unsetValue;

      if (cssProperty instanceof CssAnimationProperty) {
        style[cssProperty.keyframe] = exports.unsetValue;
      }
    }
  }
}

exports.resetCSSProperties = resetCSSProperties;

function propagateInheritableProperties(view, child) {
  var inheritablePropertyValues = inheritablePropertyValuesOn(view);

  for (var _i = 0, inheritablePropertyValues_1 = inheritablePropertyValues; _i < inheritablePropertyValues_1.length; _i++) {
    var pair = inheritablePropertyValues_1[_i];
    var prop = pair.property;
    var sourceKey = prop.sourceKey;
    var currentValueSource = child[sourceKey] || 0;

    if (currentValueSource <= 1) {
      prop.setInheritedValue.call(child, pair.value);
    }
  }
}

exports.propagateInheritableProperties = propagateInheritableProperties;

function propagateInheritableCssProperties(parentStyle, childStyle) {
  var inheritableCssPropertyValues = inheritableCssPropertyValuesOn(parentStyle);

  for (var _i = 0, inheritableCssPropertyValues_1 = inheritableCssPropertyValues; _i < inheritableCssPropertyValues_1.length; _i++) {
    var pair = inheritableCssPropertyValues_1[_i];
    var prop = pair.property;
    var sourceKey = prop.sourceKey;
    var currentValueSource = childStyle[sourceKey] || 0;

    if (currentValueSource <= 1) {
      prop.setInheritedValue.call(childStyle, pair.value, 1);
    }
  }
}

exports.propagateInheritableCssProperties = propagateInheritableCssProperties;

function makeValidator() {
  var values = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    values[_i] = arguments[_i];
  }

  var set = new Set(values);
  return function (value) {
    return set.has(value);
  };
}

exports.makeValidator = makeValidator;

function makeParser(isValid) {
  return function (value) {
    var lower = value && value.toLowerCase();

    if (isValid(lower)) {
      return lower;
    } else {
      throw new Error("Invalid value: " + value);
    }
  };
}

exports.makeParser = makeParser;

function getSetProperties(view) {
  var result = [];
  Object.getOwnPropertyNames(view).forEach(function (prop) {
    result.push([prop, view[prop]]);
  });
  var symbols = Object.getOwnPropertySymbols(view);

  for (var _i = 0, symbols_7 = symbols; _i < symbols_7.length; _i++) {
    var symbol = symbols_7[_i];
    var property = symbolPropertyMap[symbol];

    if (!property) {
      continue;
    }

    var value = view[property.key];
    result.push([property.name, value]);
  }

  return result;
}

exports.getSetProperties = getSetProperties;

function getComputedCssValues(view) {
  var result = [];
  var style = view.style;

  for (var _i = 0, cssPropertyNames_1 = cssPropertyNames; _i < cssPropertyNames_1.length; _i++) {
    var prop = cssPropertyNames_1[_i];
    result.push([prop, style[prop]]);
  }

  result.push(["top", "auto"]);
  result.push(["left", "auto"]);
  result.push(["bottom", "auto"]);
  result.push(["right", "auto"]);
  return result;
}

exports.getComputedCssValues = getComputedCssValues;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/core/view-base/view-base.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var debug_1 = __webpack_require__("../node_modules/tns-core-modules/utils/debug.js");

var bindable_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/bindable/bindable.js");

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

exports.isIOS = platform_1.isIOS;
exports.isAndroid = platform_1.isAndroid;

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

exports.layout = utils_1.layout;

var style_properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js");

var types = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var color_1 = __webpack_require__("../node_modules/tns-core-modules/color/color.js");

exports.Color = color_1.Color;

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/bindable/bindable.js"));

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js"));

var ssm = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-scope.js");

var domNodeModule;

function ensuredomNodeModule() {
  if (!domNodeModule) {
    domNodeModule = __webpack_require__("../node_modules/tns-core-modules/debugger/dom-node.js");
  }
}

var styleScopeModule;

function ensureStyleScopeModule() {
  if (!styleScopeModule) {
    styleScopeModule = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-scope.js");
  }
}

var defaultBindingSource = {};

function getAncestor(view, criterion) {
  var matcher = null;

  if (typeof criterion === "string") {
    matcher = function matcher(view) {
      return view.typeName === criterion;
    };
  } else {
    matcher = function matcher(view) {
      return view instanceof criterion;
    };
  }

  for (var parent_1 = view.parent; parent_1 != null; parent_1 = parent_1.parent) {
    if (matcher(parent_1)) {
      return parent_1;
    }
  }

  return null;
}

exports.getAncestor = getAncestor;

function getViewById(view, id) {
  if (!view) {
    return undefined;
  }

  if (view.id === id) {
    return view;
  }

  var retVal;

  var descendantsCallback = function descendantsCallback(child) {
    if (child.id === id) {
      retVal = child;
      return false;
    }

    return true;
  };

  eachDescendant(view, descendantsCallback);
  return retVal;
}

exports.getViewById = getViewById;

function eachDescendant(view, callback) {
  if (!callback || !view) {
    return;
  }

  var continueIteration;

  var localCallback = function localCallback(child) {
    continueIteration = callback(child);

    if (continueIteration) {
      child.eachChild(localCallback);
    }

    return continueIteration;
  };

  view.eachChild(localCallback);
}

exports.eachDescendant = eachDescendant;
var viewIdCounter = 1;
var Flags;

(function (Flags) {
  Flags["superOnLoadedCalled"] = "Loaded";
  Flags["superOnUnloadedCalled"] = "Unloaded";
})(Flags || (Flags = {}));

var SuspendType;

(function (SuspendType) {
  SuspendType[SuspendType["Incremental"] = 0] = "Incremental";
  SuspendType[SuspendType["Loaded"] = 1048576] = "Loaded";
  SuspendType[SuspendType["NativeView"] = 2097152] = "NativeView";
  SuspendType[SuspendType["UISetup"] = 4194304] = "UISetup";
  SuspendType[SuspendType["IncrementalCountMask"] = -7340033] = "IncrementalCountMask";
})(SuspendType || (SuspendType = {}));

(function (SuspendType) {
  function toString(type) {
    return (type ? "suspended" : "resumed") + "(" + "Incremental: " + (type & SuspendType.IncrementalCountMask) + ", " + "Loaded: " + !(type & SuspendType.Loaded) + ", " + "NativeView: " + !(type & SuspendType.NativeView) + ", " + "UISetup: " + !(type & SuspendType.UISetup) + ")";
  }

  SuspendType.toString = toString;
})(SuspendType || (SuspendType = {}));

var ViewBase = function (_super) {
  __extends(ViewBase, _super);

  function ViewBase() {
    var _this = _super.call(this) || this;

    _this._onLoadedCalled = false;
    _this._onUnloadedCalled = false;
    _this._cssState = new ssm.CssState(_this);
    _this.pseudoClassAliases = {
      "highlighted": ["active", "pressed"]
    };
    _this.cssClasses = new Set();
    _this.cssPseudoClasses = new Set();
    _this._domId = viewIdCounter++;
    _this._style = new properties_1.Style(_this);
    return _this;
  }

  Object.defineProperty(ViewBase.prototype, "parentNode", {
    get: function get() {
      return this._templateParent || this.parent;
    },
    set: function set(node) {
      this._templateParent = node;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewBase.prototype, "nativeView", {
    get: function get() {
      return this.nativeViewProtected;
    },
    set: function set(value) {
      this.setNativeView(value);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewBase.prototype, "typeName", {
    get: function get() {
      return types.getClass(this);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewBase.prototype, "style", {
    get: function get() {
      return this._style;
    },
    set: function set(inlineStyle) {
      if (typeof inlineStyle === "string") {
        this.setInlineStyle(inlineStyle);
      } else {
        throw new Error("View.style property is read-only.");
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewBase.prototype, "android", {
    get: function get() {
      return this._androidView;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewBase.prototype, "ios", {
    get: function get() {
      return this._iosView;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewBase.prototype, "isLoaded", {
    get: function get() {
      return this._isLoaded;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewBase.prototype, "class", {
    get: function get() {
      return this.className;
    },
    set: function set(v) {
      this.className = v;
    },
    enumerable: true,
    configurable: true
  });

  ViewBase.prototype.getViewById = function (id) {
    return getViewById(this, id);
  };

  Object.defineProperty(ViewBase.prototype, "page", {
    get: function get() {
      if (this.parent) {
        return this.parent.page;
      }

      return null;
    },
    enumerable: true,
    configurable: true
  });

  ViewBase.prototype.ensureDomNode = function () {
    if (!this.domNode) {
      ensuredomNodeModule();
      this.domNode = new domNodeModule.DOMNode(this);
    }
  };

  ViewBase.prototype.set = function (name, value) {
    this[name] = bindable_1.WrappedValue.unwrap(value);
  };

  ViewBase.prototype.onLoaded = function () {
    var _this = this;

    this.setFlag(Flags.superOnLoadedCalled, true);

    if (this._isLoaded) {
      return;
    }

    this._isLoaded = true;

    this._cssState.onLoaded();

    this._resumeNativeUpdates(SuspendType.Loaded);

    this.eachChild(function (child) {
      _this.loadView(child);

      return true;
    });

    this._emit("loaded");
  };

  ViewBase.prototype.onUnloaded = function () {
    var _this = this;

    this.setFlag(Flags.superOnUnloadedCalled, true);

    if (!this._isLoaded) {
      return;
    }

    this._suspendNativeUpdates(SuspendType.Loaded);

    this.eachChild(function (child) {
      _this.unloadView(child);

      return true;
    });
    this._isLoaded = false;

    this._cssState.onUnloaded();

    this._emit("unloaded");
  };

  ViewBase.prototype._suspendNativeUpdates = function (type) {
    if (type) {
      this._suspendNativeUpdatesCount = this._suspendNativeUpdatesCount | type;
    } else {
      this._suspendNativeUpdatesCount++;
    }
  };

  ViewBase.prototype._resumeNativeUpdates = function (type) {
    if (type) {
      this._suspendNativeUpdatesCount = this._suspendNativeUpdatesCount & ~type;
    } else {
      if ((this._suspendNativeUpdatesCount & SuspendType.IncrementalCountMask) === 0) {
        throw new Error("Invalid call to " + this + "._resumeNativeUpdates");
      }

      this._suspendNativeUpdatesCount--;
    }

    if (!this._suspendNativeUpdatesCount) {
      this.onResumeNativeUpdates();
    }
  };

  ViewBase.prototype._batchUpdate = function (callback) {
    try {
      this._suspendNativeUpdates(SuspendType.Incremental);

      return callback();
    } finally {
      this._resumeNativeUpdates(SuspendType.Incremental);
    }
  };

  ViewBase.prototype.setFlag = function (flag, value) {
    switch (flag) {
      case Flags.superOnLoadedCalled:
        this._onLoadedCalled = value;
        break;

      case Flags.superOnUnloadedCalled:
        this._onUnloadedCalled = value;
        break;
    }
  };

  ViewBase.prototype.isFlagSet = function (flag) {
    switch (flag) {
      case Flags.superOnLoadedCalled:
        return this._onLoadedCalled;

      case Flags.superOnUnloadedCalled:
        return this._onUnloadedCalled;
    }
  };

  ViewBase.prototype.callFunctionWithSuper = function (flag, func) {
    this.setFlag(flag, false);
    func();

    if (!this.isFlagSet(flag)) {
      throw new Error("super." + flag + " not called in " + this);
    }
  };

  ViewBase.prototype.callLoaded = function () {
    var _this = this;

    this.callFunctionWithSuper(Flags.superOnLoadedCalled, function () {
      return _this.onLoaded();
    });
  };

  ViewBase.prototype.callUnloaded = function () {
    var _this = this;

    this.callFunctionWithSuper(Flags.superOnUnloadedCalled, function () {
      return _this.onUnloaded();
    });
  };

  ViewBase.prototype.notifyPseudoClassChanged = function (pseudoClass) {
    this.notify({
      eventName: ":" + pseudoClass,
      object: this
    });
  };

  ViewBase.prototype.getAllAliasedStates = function (name) {
    var allStates = [];
    allStates.push(name);

    if (name in this.pseudoClassAliases) {
      for (var i = 0; i < this.pseudoClassAliases[name].length; i++) {
        allStates.push(this.pseudoClassAliases[name][i]);
      }
    }

    return allStates;
  };

  ViewBase.prototype.addPseudoClass = function (name) {
    var allStates = this.getAllAliasedStates(name);

    for (var i = 0; i < allStates.length; i++) {
      if (!this.cssPseudoClasses.has(allStates[i])) {
        this.cssPseudoClasses.add(allStates[i]);
        this.notifyPseudoClassChanged(allStates[i]);
      }
    }
  };

  ViewBase.prototype.deletePseudoClass = function (name) {
    var allStates = this.getAllAliasedStates(name);

    for (var i = 0; i < allStates.length; i++) {
      if (this.cssPseudoClasses.has(allStates[i])) {
        this.cssPseudoClasses.delete(allStates[i]);
        this.notifyPseudoClassChanged(allStates[i]);
      }
    }
  };

  ViewBase.prototype.bindingContextChanged = function (data) {
    this.bindings.get("bindingContext").bind(data.value);
  };

  ViewBase.prototype.bind = function (options, source) {
    if (source === void 0) {
      source = defaultBindingSource;
    }

    var targetProperty = options.targetProperty;
    this.unbind(targetProperty);

    if (!this.bindings) {
      this.bindings = new Map();
    }

    var binding = new bindable_1.Binding(this, options);
    this.bindings.set(targetProperty, binding);
    var bindingSource = source;

    if (bindingSource === defaultBindingSource) {
      bindingSource = this.bindingContext;
      binding.sourceIsBindingContext = true;

      if (targetProperty === "bindingContext") {
        this.bindingContextBoundToParentBindingContextChanged = true;
        var parent_2 = this.parent;

        if (parent_2) {
          parent_2.on("bindingContextChange", this.bindingContextChanged, this);
        } else {
          this.shouldAddHandlerToParentBindingContextChanged = true;
        }
      }
    }

    binding.bind(bindingSource);
  };

  ViewBase.prototype.unbind = function (property) {
    var bindings = this.bindings;

    if (!bindings) {
      return;
    }

    var binding = bindings.get(property);

    if (binding) {
      binding.unbind();
      bindings.delete(property);

      if (binding.sourceIsBindingContext) {
        if (property === "bindingContext") {
          this.shouldAddHandlerToParentBindingContextChanged = false;
          this.bindingContextBoundToParentBindingContextChanged = false;
          var parent_3 = this.parent;

          if (parent_3) {
            parent_3.off("bindingContextChange", this.bindingContextChanged, this);
          }
        }
      }
    }
  };

  ViewBase.prototype.requestLayout = function () {
    var parent = this.parent;

    if (parent) {
      parent.requestLayout();
    }
  };

  ViewBase.prototype.eachChild = function (callback) {};

  ViewBase.prototype._addView = function (view, atIndex) {
    if (bindable_1.traceEnabled()) {
      bindable_1.traceWrite(this + "._addView(" + view + ", " + atIndex + ")", bindable_1.traceCategories.ViewHierarchy);
    }

    if (!view) {
      throw new Error("Expecting a valid View instance.");
    }

    if (!(view instanceof ViewBase)) {
      throw new Error(view + " is not a valid View instance.");
    }

    if (view.parent) {
      throw new Error("View already has a parent. View: " + view + " Parent: " + view.parent);
    }

    view.parent = this;

    this._addViewCore(view, atIndex);

    view._parentChanged(null);

    if (this.domNode) {
      this.domNode.onChildAdded(view);
    }
  };

  ViewBase.prototype._addViewCore = function (view, atIndex) {
    properties_1.propagateInheritableProperties(this, view);

    view._inheritStyleScope(this._styleScope);

    properties_1.propagateInheritableCssProperties(this.style, view.style);

    if (this._context) {
      view._setupUI(this._context, atIndex);
    }

    if (this._isLoaded) {
      this.loadView(view);
    }
  };

  ViewBase.prototype.loadView = function (view) {
    if (view && !view.isLoaded) {
      view.callLoaded();
    }
  };

  ViewBase.prototype.unloadView = function (view) {
    if (view && view.isLoaded) {
      view.callUnloaded();
    }
  };

  ViewBase.prototype._removeView = function (view) {
    if (bindable_1.traceEnabled()) {
      bindable_1.traceWrite(this + "._removeView(" + view + ")", bindable_1.traceCategories.ViewHierarchy);
    }

    if (view.parent !== this) {
      throw new Error("View not added to this instance. View: " + view + " CurrentParent: " + view.parent + " ExpectedParent: " + this);
    }

    if (this.domNode) {
      this.domNode.onChildRemoved(view);
    }

    this._removeViewCore(view);

    view.parent = undefined;

    view._parentChanged(this);
  };

  ViewBase.prototype._removeViewCore = function (view) {
    this.unloadView(view);

    if (view._context) {
      view._tearDownUI();
    }
  };

  ViewBase.prototype.createNativeView = function () {
    return undefined;
  };

  ViewBase.prototype.disposeNativeView = function () {};

  ViewBase.prototype.initNativeView = function () {};

  ViewBase.prototype.resetNativeView = function () {};

  ViewBase.prototype.resetNativeViewInternal = function () {};

  ViewBase.prototype._setupAsRootView = function (context) {
    this._setupUI(context);
  };

  ViewBase.prototype._setupUI = function (context, atIndex, parentIsLoaded) {
    if (this._context === context) {
      return;
    } else if (this._context) {
      this._tearDownUI(true);
    }

    this._context = context;
    var nativeView = this.nativeViewProtected;

    if (!nativeView) {
      nativeView = this.createNativeView();
    }

    if (platform_1.isAndroid) {
      this._androidView = nativeView;

      if (nativeView) {
        if (this._isPaddingRelative === undefined) {
          this._isPaddingRelative = nativeView.isPaddingRelative();
        }

        var result = nativeView.defaultPaddings;

        if (result === undefined) {
          result = org.nativescript.widgets.ViewHelper.getPadding(nativeView);
          nativeView.defaultPaddings = result;
        }

        this._defaultPaddingTop = result.top;
        this._defaultPaddingRight = result.right;
        this._defaultPaddingBottom = result.bottom;
        this._defaultPaddingLeft = result.left;
        var style = this.style;

        if (!style_properties_1.paddingTopProperty.isSet(style)) {
          this.effectivePaddingTop = this._defaultPaddingTop;
        }

        if (!style_properties_1.paddingRightProperty.isSet(style)) {
          this.effectivePaddingRight = this._defaultPaddingRight;
        }

        if (!style_properties_1.paddingBottomProperty.isSet(style)) {
          this.effectivePaddingBottom = this._defaultPaddingBottom;
        }

        if (!style_properties_1.paddingLeftProperty.isSet(style)) {
          this.effectivePaddingLeft = this._defaultPaddingLeft;
        }
      }
    } else {
      this._iosView = nativeView;
    }

    this.setNativeView(nativeView);

    if (this.parent) {
      var nativeIndex = this.parent._childIndexToNativeChildIndex(atIndex);

      this._isAddedToNativeVisualTree = this.parent._addViewToNativeVisualTree(this, nativeIndex);
    }

    this._resumeNativeUpdates(SuspendType.UISetup);

    this.eachChild(function (child) {
      child._setupUI(context);

      return true;
    });
  };

  ViewBase.prototype.setNativeView = function (value) {
    if (this.__nativeView === value) {
      return;
    }

    if (this.__nativeView) {
      this._suspendNativeUpdates(SuspendType.NativeView);
    }

    this.__nativeView = this.nativeViewProtected = value;

    if (this.__nativeView) {
      this._suspendedUpdates = undefined;
      this.initNativeView();

      this._resumeNativeUpdates(SuspendType.NativeView);
    }
  };

  ViewBase.prototype._tearDownUI = function (force) {
    if (!this._context) {
      return;
    }

    this.resetNativeViewInternal();
    this.eachChild(function (child) {
      child._tearDownUI(force);

      return true;
    });

    if (this.parent) {
      this.parent._removeViewFromNativeVisualTree(this);
    }

    this.disposeNativeView();

    this._suspendNativeUpdates(SuspendType.UISetup);

    if (platform_1.isAndroid) {
      this.setNativeView(null);
      this._androidView = null;
    }

    this._context = null;

    if (this.domNode) {
      this.domNode.dispose();
      this.domNode = undefined;
    }
  };

  ViewBase.prototype._childIndexToNativeChildIndex = function (index) {
    return index;
  };

  ViewBase.prototype._addViewToNativeVisualTree = function (view, atIndex) {
    if (view._isAddedToNativeVisualTree) {
      throw new Error("Child already added to the native visual tree.");
    }

    return true;
  };

  ViewBase.prototype._removeViewFromNativeVisualTree = function (view) {
    view._isAddedToNativeVisualTree = false;
  };

  ViewBase.prototype._goToVisualState = function (state) {
    if (bindable_1.traceEnabled()) {
      bindable_1.traceWrite(this + " going to state: " + state, bindable_1.traceCategories.Style);
    }

    if (state === this._visualState) {
      return;
    }

    this.deletePseudoClass(this._visualState);
    this._visualState = state;
    this.addPseudoClass(state);
  };

  ViewBase.prototype._applyXmlAttribute = function (attribute, value) {
    if (attribute === "style" || attribute === "rows" || attribute === "columns" || attribute === "fontAttributes") {
      this[attribute] = value;
      return true;
    }

    return false;
  };

  ViewBase.prototype.setInlineStyle = function (style) {
    if (typeof style !== "string") {
      throw new Error("Parameter should be valid CSS string!");
    }

    ensureStyleScopeModule();
    styleScopeModule.applyInlineStyle(this, style);
  };

  ViewBase.prototype._parentChanged = function (oldParent) {
    var newParent = this.parent;

    if (oldParent) {
      properties_1.clearInheritedProperties(this);

      if (this.bindingContextBoundToParentBindingContextChanged) {
        oldParent.off("bindingContextChange", this.bindingContextChanged, this);
      }
    } else if (this.shouldAddHandlerToParentBindingContextChanged) {
      newParent.on("bindingContextChange", this.bindingContextChanged, this);
      this.bindings.get("bindingContext").bind(newParent.bindingContext);
    }
  };

  ViewBase.prototype.onResumeNativeUpdates = function () {
    properties_1.initNativeView(this);
  };

  ViewBase.prototype.toString = function () {
    var str = this.typeName;

    if (this.id) {
      str += "<" + this.id + ">";
    } else {
      str += "(" + this._domId + ")";
    }

    var source = debug_1.Source.get(this);

    if (source) {
      str += "@" + source + ";";
    }

    return str;
  };

  ViewBase.prototype._onCssStateChange = function () {
    this._cssState.onChange();

    eachDescendant(this, function (child) {
      child._cssState.onChange();

      return true;
    });
  };

  ViewBase.prototype._inheritStyleScope = function (styleScope) {
    if (this._isStyleScopeHost) {
      return;
    }

    if (this._styleScope !== styleScope) {
      this._styleScope = styleScope;

      this._onCssStateChange();

      this.eachChild(function (child) {
        child._inheritStyleScope(styleScope);

        return true;
      });
    }
  };

  ViewBase.prototype.showModal = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var parent = this.parent;
    return parent && parent.showModal.apply(parent, args);
  };

  ViewBase.prototype.closeModal = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var parent = this.parent;

    if (parent) {
      parent.closeModal.apply(parent, args);
    }
  };

  ViewBase.prototype._dialogClosed = function () {
    eachDescendant(this, function (child) {
      child._dialogClosed();

      return true;
    });
  };

  ViewBase.prototype._onRootViewReset = function () {
    eachDescendant(this, function (child) {
      child._onRootViewReset();

      return true;
    });
  };

  ViewBase.loadedEvent = "loaded";
  ViewBase.unloadedEvent = "unloaded";

  __decorate([profiling_1.profile], ViewBase.prototype, "onLoaded", null);

  __decorate([profiling_1.profile], ViewBase.prototype, "onUnloaded", null);

  __decorate([profiling_1.profile], ViewBase.prototype, "addPseudoClass", null);

  __decorate([profiling_1.profile], ViewBase.prototype, "deletePseudoClass", null);

  __decorate([profiling_1.profile], ViewBase.prototype, "requestLayout", null);

  __decorate([profiling_1.profile], ViewBase.prototype, "_addView", null);

  __decorate([profiling_1.profile], ViewBase.prototype, "_setupUI", null);

  __decorate([profiling_1.profile], ViewBase.prototype, "_tearDownUI", null);

  return ViewBase;
}(bindable_1.Observable);

exports.ViewBase = ViewBase;
ViewBase.prototype.isCollapsed = false;
ViewBase.prototype._oldLeft = 0;
ViewBase.prototype._oldTop = 0;
ViewBase.prototype._oldRight = 0;
ViewBase.prototype._oldBottom = 0;
ViewBase.prototype.effectiveMinWidth = 0;
ViewBase.prototype.effectiveMinHeight = 0;
ViewBase.prototype.effectiveWidth = 0;
ViewBase.prototype.effectiveHeight = 0;
ViewBase.prototype.effectiveMarginTop = 0;
ViewBase.prototype.effectiveMarginRight = 0;
ViewBase.prototype.effectiveMarginBottom = 0;
ViewBase.prototype.effectiveMarginLeft = 0;
ViewBase.prototype.effectivePaddingTop = 0;
ViewBase.prototype.effectivePaddingRight = 0;
ViewBase.prototype.effectivePaddingBottom = 0;
ViewBase.prototype.effectivePaddingLeft = 0;
ViewBase.prototype.effectiveBorderTopWidth = 0;
ViewBase.prototype.effectiveBorderRightWidth = 0;
ViewBase.prototype.effectiveBorderBottomWidth = 0;
ViewBase.prototype.effectiveBorderLeftWidth = 0;
ViewBase.prototype._defaultPaddingTop = 0;
ViewBase.prototype._defaultPaddingRight = 0;
ViewBase.prototype._defaultPaddingBottom = 0;
ViewBase.prototype._defaultPaddingLeft = 0;
ViewBase.prototype._isViewBase = true;
ViewBase.prototype.recycleNativeView = "never";
ViewBase.prototype._suspendNativeUpdatesCount = SuspendType.Loaded | SuspendType.NativeView | SuspendType.UISetup;
exports.bindingContextProperty = new properties_1.InheritedProperty({
  name: "bindingContext"
});
exports.bindingContextProperty.register(ViewBase);
exports.classNameProperty = new properties_1.Property({
  name: "className",
  valueChanged: function valueChanged(view, oldValue, newValue) {
    var classes = view.cssClasses;
    classes.clear();

    if (typeof newValue === "string") {
      newValue.split(" ").forEach(function (c) {
        return classes.add(c);
      });
    }

    view._onCssStateChange();
  }
});
exports.classNameProperty.register(ViewBase);
exports.idProperty = new properties_1.Property({
  name: "id",
  valueChanged: function valueChanged(view, oldValue, newValue) {
    return view._onCssStateChange();
  }
});
exports.idProperty.register(ViewBase);

function booleanConverter(v) {
  var lowercase = (v + "").toLowerCase();

  if (lowercase === "true") {
    return true;
  } else if (lowercase === "false") {
    return false;
  }

  throw new Error("Invalid boolean: " + v);
}

exports.booleanConverter = booleanConverter;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/core/view/view-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view-base/view-base.js");

var style_properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js");

var gestures_1 = __webpack_require__("../node_modules/tns-core-modules/ui/gestures/gestures.js");

var builder_1 = __webpack_require__("../node_modules/tns-core-modules/ui/builder/builder.js");

var style_scope_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-scope.js");

var linear_gradient_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/linear-gradient.js");

exports.LinearGradient = linear_gradient_1.LinearGradient;

__export(__webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js"));

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view-base/view-base.js"));

var animationModule;

function ensureAnimationModule() {
  if (!animationModule) {
    animationModule = __webpack_require__("../node_modules/tns-core-modules/ui/animation/animation.js");
  }
}

function CSSType(type) {
  return function (cls) {
    cls.prototype.cssType = type;
  };
}

exports.CSSType = CSSType;

function PseudoClassHandler() {
  var pseudoClasses = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    pseudoClasses[_i] = arguments[_i];
  }

  var stateEventNames = pseudoClasses.map(function (s) {
    return ":" + s;
  });
  var listeners = Symbol("listeners");
  return function (target, propertyKey, descriptor) {
    function update(change) {
      var prev = this[listeners] || 0;
      var next = prev + change;

      if (prev <= 0 && next > 0) {
        this[propertyKey](true);
      } else if (prev > 0 && next <= 0) {
        this[propertyKey](false);
      }
    }

    stateEventNames.forEach(function (s) {
      return target[s] = update;
    });
  };
}

exports.PseudoClassHandler = PseudoClassHandler;
exports._rootModalViews = new Array();

var ViewCommon = function (_super) {
  __extends(ViewCommon, _super);

  function ViewCommon() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._gestureObservers = {};
    return _this;
  }

  Object.defineProperty(ViewCommon.prototype, "css", {
    get: function get() {
      var scope = this._styleScope;
      return scope && scope.css;
    },
    set: function set(value) {
      this._updateStyleScope(undefined, undefined, value);
    },
    enumerable: true,
    configurable: true
  });

  ViewCommon.prototype.addCss = function (cssString) {
    this._updateStyleScope(undefined, cssString);
  };

  ViewCommon.prototype.addCssFile = function (cssFileName) {
    this._updateStyleScope(cssFileName);
  };

  ViewCommon.prototype._updateStyleScope = function (cssFileName, cssString, css) {
    var scope = this._styleScope;

    if (!scope) {
      scope = new style_scope_1.StyleScope();
      this.setScopeProperty(scope, cssFileName, cssString, css);

      this._inheritStyleScope(scope);

      this._isStyleScopeHost = true;
    } else {
      this.setScopeProperty(scope, cssFileName, cssString, css);

      this._onCssStateChange();
    }
  };

  ViewCommon.prototype.setScopeProperty = function (scope, cssFileName, cssString, css) {
    if (cssFileName !== undefined) {
      scope.addCssFile(cssFileName);
    } else if (cssString !== undefined) {
      scope.addCss(cssString);
    } else if (css !== undefined) {
      scope.css = css;
    }
  };

  ViewCommon.prototype._setupAsRootView = function (context) {
    _super.prototype._setupAsRootView.call(this, context);

    if (!this._styleScope) {
      this._updateStyleScope();
    }
  };

  ViewCommon.prototype.observe = function (type, callback, thisArg) {
    if (!this._gestureObservers[type]) {
      this._gestureObservers[type] = [];
    }

    this._gestureObservers[type].push(gestures_1.observe(this, type, callback, thisArg));
  };

  ViewCommon.prototype.getGestureObservers = function (type) {
    return this._gestureObservers[type];
  };

  ViewCommon.prototype.addEventListener = function (arg, callback, thisArg) {
    if (typeof arg === "string") {
      arg = view_base_1.getEventOrGestureName(arg);
      var gesture = gestures_1.fromString(arg);

      if (gesture && !this._isEvent(arg)) {
        this.observe(gesture, callback, thisArg);
      } else {
        var events = arg.split(",");

        if (events.length > 0) {
          for (var i = 0; i < events.length; i++) {
            var evt = events[i].trim();
            var gst = gestures_1.fromString(evt);

            if (gst && !this._isEvent(arg)) {
              this.observe(gst, callback, thisArg);
            } else {
              _super.prototype.addEventListener.call(this, evt, callback, thisArg);
            }
          }
        } else {
          _super.prototype.addEventListener.call(this, arg, callback, thisArg);
        }
      }
    } else if (typeof arg === "number") {
      this.observe(arg, callback, thisArg);
    }
  };

  ViewCommon.prototype.removeEventListener = function (arg, callback, thisArg) {
    if (typeof arg === "string") {
      var gesture = gestures_1.fromString(arg);

      if (gesture && !this._isEvent(arg)) {
        this._disconnectGestureObservers(gesture);
      } else {
        var events = arg.split(",");

        if (events.length > 0) {
          for (var i = 0; i < events.length; i++) {
            var evt = events[i].trim();
            var gst = gestures_1.fromString(evt);

            if (gst && !this._isEvent(arg)) {
              this._disconnectGestureObservers(gst);
            } else {
              _super.prototype.removeEventListener.call(this, evt, callback, thisArg);
            }
          }
        } else {
          _super.prototype.removeEventListener.call(this, arg, callback, thisArg);
        }
      }
    } else if (typeof arg === "number") {
      this._disconnectGestureObservers(arg);
    }
  };

  ViewCommon.prototype._onLivesync = function () {
    exports._rootModalViews.forEach(function (v) {
      return v.closeModal();
    });

    exports._rootModalViews.length = 0;
    return false;
  };

  ViewCommon.prototype.onBackPressed = function () {
    return false;
  };

  ViewCommon.prototype._getFragmentManager = function () {
    return undefined;
  };

  ViewCommon.prototype.getModalOptions = function (args) {
    if (args.length === 0) {
      throw new Error("showModal without parameters is deprecated. Please call showModal on a view instance instead.");
    } else {
      var options = null;

      if (args.length === 2) {
        options = args[1];
      } else {
        options = {
          context: args[1],
          closeCallback: args[2],
          fullscreen: args[3],
          animated: args[4],
          stretched: args[5]
        };
      }

      var firstArgument = args[0];
      var view = firstArgument instanceof ViewCommon ? firstArgument : builder_1.createViewFromEntry({
        moduleName: firstArgument
      });
      return {
        view: view,
        options: options
      };
    }
  };

  ViewCommon.prototype.showModal = function () {
    var _a = this.getModalOptions(arguments),
        view = _a.view,
        options = _a.options;

    view._showNativeModalView(this, options);

    return view;
  };

  ViewCommon.prototype.closeModal = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var closeCallback = this._closeModalCallback;

    if (closeCallback) {
      closeCallback.apply(undefined, arguments);
    } else {
      var parent_1 = this.parent;

      if (parent_1) {
        parent_1.closeModal.apply(parent_1, args);
      }
    }
  };

  Object.defineProperty(ViewCommon.prototype, "modal", {
    get: function get() {
      return this._modal;
    },
    enumerable: true,
    configurable: true
  });

  ViewCommon.prototype._showNativeModalView = function (parent, options) {
    exports._rootModalViews.push(this);

    parent._modal = this;
    this._modalParent = parent;
    this._modalContext = options.context;
    var that = this;

    this._closeModalCallback = function () {
      var originalArgs = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        originalArgs[_i] = arguments[_i];
      }

      if (that._closeModalCallback) {
        var modalIndex = exports._rootModalViews.indexOf(that);

        exports._rootModalViews.splice(modalIndex);

        that._modalParent = null;
        that._modalContext = null;
        that._closeModalCallback = null;

        that._dialogClosed();

        parent._modal = null;

        var whenClosedCallback = function whenClosedCallback() {
          if (typeof options.closeCallback === "function") {
            options.closeCallback.apply(undefined, originalArgs);
          }
        };

        that._hideNativeModalView(parent, whenClosedCallback);
      }
    };
  };

  ViewCommon.prototype._raiseLayoutChangedEvent = function () {
    var args = {
      eventName: ViewCommon.layoutChangedEvent,
      object: this
    };
    this.notify(args);
  };

  ViewCommon.prototype._raiseShownModallyEvent = function () {
    var args = {
      eventName: ViewCommon.shownModallyEvent,
      object: this,
      context: this._modalContext,
      closeCallback: this._closeModalCallback
    };
    this.notify(args);
  };

  ViewCommon.prototype._raiseShowingModallyEvent = function () {
    var args = {
      eventName: ViewCommon.showingModallyEvent,
      object: this,
      context: this._modalContext,
      closeCallback: this._closeModalCallback
    };
    this.notify(args);
  };

  ViewCommon.prototype._isEvent = function (name) {
    return this.constructor && name + "Event" in this.constructor;
  };

  ViewCommon.prototype._disconnectGestureObservers = function (type) {
    var observers = this.getGestureObservers(type);

    if (observers) {
      for (var i = 0; i < observers.length; i++) {
        observers[i].disconnect();
      }
    }
  };

  Object.defineProperty(ViewCommon.prototype, "borderColor", {
    get: function get() {
      return this.style.borderColor;
    },
    set: function set(value) {
      this.style.borderColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderTopColor", {
    get: function get() {
      return this.style.borderTopColor;
    },
    set: function set(value) {
      this.style.borderTopColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderRightColor", {
    get: function get() {
      return this.style.borderRightColor;
    },
    set: function set(value) {
      this.style.borderRightColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderBottomColor", {
    get: function get() {
      return this.style.borderBottomColor;
    },
    set: function set(value) {
      this.style.borderBottomColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderLeftColor", {
    get: function get() {
      return this.style.borderLeftColor;
    },
    set: function set(value) {
      this.style.borderLeftColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderWidth", {
    get: function get() {
      return this.style.borderWidth;
    },
    set: function set(value) {
      this.style.borderWidth = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderTopWidth", {
    get: function get() {
      return this.style.borderTopWidth;
    },
    set: function set(value) {
      this.style.borderTopWidth = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderRightWidth", {
    get: function get() {
      return this.style.borderRightWidth;
    },
    set: function set(value) {
      this.style.borderRightWidth = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderBottomWidth", {
    get: function get() {
      return this.style.borderBottomWidth;
    },
    set: function set(value) {
      this.style.borderBottomWidth = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderLeftWidth", {
    get: function get() {
      return this.style.borderLeftWidth;
    },
    set: function set(value) {
      this.style.borderLeftWidth = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderRadius", {
    get: function get() {
      return this.style.borderRadius;
    },
    set: function set(value) {
      this.style.borderRadius = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderTopLeftRadius", {
    get: function get() {
      return this.style.borderTopLeftRadius;
    },
    set: function set(value) {
      this.style.borderTopLeftRadius = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderTopRightRadius", {
    get: function get() {
      return this.style.borderTopRightRadius;
    },
    set: function set(value) {
      this.style.borderTopRightRadius = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderBottomRightRadius", {
    get: function get() {
      return this.style.borderBottomRightRadius;
    },
    set: function set(value) {
      this.style.borderBottomRightRadius = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderBottomLeftRadius", {
    get: function get() {
      return this.style.borderBottomLeftRadius;
    },
    set: function set(value) {
      this.style.borderBottomLeftRadius = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "color", {
    get: function get() {
      return this.style.color;
    },
    set: function set(value) {
      this.style.color = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "background", {
    get: function get() {
      return this.style.background;
    },
    set: function set(value) {
      this.style.background = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "backgroundColor", {
    get: function get() {
      return this.style.backgroundColor;
    },
    set: function set(value) {
      this.style.backgroundColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "backgroundImage", {
    get: function get() {
      return this.style.backgroundImage;
    },
    set: function set(value) {
      this.style.backgroundImage = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "minWidth", {
    get: function get() {
      return this.style.minWidth;
    },
    set: function set(value) {
      this.style.minWidth = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "minHeight", {
    get: function get() {
      return this.style.minHeight;
    },
    set: function set(value) {
      this.style.minHeight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "width", {
    get: function get() {
      return this.style.width;
    },
    set: function set(value) {
      this.style.width = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "height", {
    get: function get() {
      return this.style.height;
    },
    set: function set(value) {
      this.style.height = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "margin", {
    get: function get() {
      return this.style.margin;
    },
    set: function set(value) {
      this.style.margin = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "marginLeft", {
    get: function get() {
      return this.style.marginLeft;
    },
    set: function set(value) {
      this.style.marginLeft = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "marginTop", {
    get: function get() {
      return this.style.marginTop;
    },
    set: function set(value) {
      this.style.marginTop = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "marginRight", {
    get: function get() {
      return this.style.marginRight;
    },
    set: function set(value) {
      this.style.marginRight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "marginBottom", {
    get: function get() {
      return this.style.marginBottom;
    },
    set: function set(value) {
      this.style.marginBottom = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "horizontalAlignment", {
    get: function get() {
      return this.style.horizontalAlignment;
    },
    set: function set(value) {
      this.style.horizontalAlignment = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "verticalAlignment", {
    get: function get() {
      return this.style.verticalAlignment;
    },
    set: function set(value) {
      this.style.verticalAlignment = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "visibility", {
    get: function get() {
      return this.style.visibility;
    },
    set: function set(value) {
      this.style.visibility = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "opacity", {
    get: function get() {
      return this.style.opacity;
    },
    set: function set(value) {
      this.style.opacity = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "rotate", {
    get: function get() {
      return this.style.rotate;
    },
    set: function set(value) {
      this.style.rotate = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "translateX", {
    get: function get() {
      return this.style.translateX;
    },
    set: function set(value) {
      this.style.translateX = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "translateY", {
    get: function get() {
      return this.style.translateY;
    },
    set: function set(value) {
      this.style.translateY = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "scaleX", {
    get: function get() {
      return this.style.scaleX;
    },
    set: function set(value) {
      this.style.scaleX = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "scaleY", {
    get: function get() {
      return this.style.scaleY;
    },
    set: function set(value) {
      this.style.scaleY = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "isLayoutValid", {
    get: function get() {
      return this._isLayoutValid;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "cssType", {
    get: function get() {
      if (!this._cssType) {
        this._cssType = this.typeName.toLowerCase();
      }

      return this._cssType;
    },
    set: function set(type) {
      this._cssType = type.toLowerCase();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "isLayoutRequired", {
    get: function get() {
      return true;
    },
    enumerable: true,
    configurable: true
  });

  ViewCommon.prototype.measure = function (widthMeasureSpec, heightMeasureSpec) {
    this._setCurrentMeasureSpecs(widthMeasureSpec, heightMeasureSpec);
  };

  ViewCommon.prototype.layout = function (left, top, right, bottom) {
    this._setCurrentLayoutBounds(left, top, right, bottom);
  };

  ViewCommon.prototype.getMeasuredWidth = function () {
    return this._measuredWidth & view_base_1.layout.MEASURED_SIZE_MASK || 0;
  };

  ViewCommon.prototype.getMeasuredHeight = function () {
    return this._measuredHeight & view_base_1.layout.MEASURED_SIZE_MASK || 0;
  };

  ViewCommon.prototype.getMeasuredState = function () {
    return this._measuredWidth & view_base_1.layout.MEASURED_STATE_MASK | this._measuredHeight >> view_base_1.layout.MEASURED_HEIGHT_STATE_SHIFT & view_base_1.layout.MEASURED_STATE_MASK >> view_base_1.layout.MEASURED_HEIGHT_STATE_SHIFT;
  };

  ViewCommon.prototype.setMeasuredDimension = function (measuredWidth, measuredHeight) {
    this._measuredWidth = measuredWidth;
    this._measuredHeight = measuredHeight;

    if (view_base_1.traceEnabled()) {
      view_base_1.traceWrite(this + " :setMeasuredDimension: " + measuredWidth + ", " + measuredHeight, view_base_1.traceCategories.Layout);
    }
  };

  ViewCommon.prototype.requestLayout = function () {
    this._isLayoutValid = false;

    _super.prototype.requestLayout.call(this);
  };

  ViewCommon.resolveSizeAndState = function (size, specSize, specMode, childMeasuredState) {
    var result = size;

    switch (specMode) {
      case view_base_1.layout.UNSPECIFIED:
        result = Math.ceil(size);
        break;

      case view_base_1.layout.AT_MOST:
        if (specSize < size) {
          result = Math.ceil(specSize) | view_base_1.layout.MEASURED_STATE_TOO_SMALL;
        }

        break;

      case view_base_1.layout.EXACTLY:
        result = Math.ceil(specSize);
        break;
    }

    return result | childMeasuredState & view_base_1.layout.MEASURED_STATE_MASK;
  };

  ViewCommon.combineMeasuredStates = function (curState, newState) {
    return curState | newState;
  };

  ViewCommon.layoutChild = function (parent, child, left, top, right, bottom, setFrame) {
    if (setFrame === void 0) {
      setFrame = true;
    }

    if (!child || child.isCollapsed) {
      return;
    }

    var childStyle = child.style;
    var childTop;
    var childLeft;
    var childWidth = child.getMeasuredWidth();
    var childHeight = child.getMeasuredHeight();
    var effectiveMarginTop = child.effectiveMarginTop;
    var effectiveMarginBottom = child.effectiveMarginBottom;
    var vAlignment;

    if (child.effectiveHeight >= 0 && childStyle.verticalAlignment === "stretch") {
      vAlignment = "middle";
    } else {
      vAlignment = childStyle.verticalAlignment;
    }

    switch (vAlignment) {
      case "top":
        childTop = top + effectiveMarginTop;
        break;

      case "middle":
        childTop = top + (bottom - top - childHeight + (effectiveMarginTop - effectiveMarginBottom)) / 2;
        break;

      case "bottom":
        childTop = bottom - childHeight - effectiveMarginBottom;
        break;

      case "stretch":
      default:
        childTop = top + effectiveMarginTop;
        childHeight = bottom - top - (effectiveMarginTop + effectiveMarginBottom);
        break;
    }

    var effectiveMarginLeft = child.effectiveMarginLeft;
    var effectiveMarginRight = child.effectiveMarginRight;
    var hAlignment;

    if (child.effectiveWidth >= 0 && childStyle.horizontalAlignment === "stretch") {
      hAlignment = "center";
    } else {
      hAlignment = childStyle.horizontalAlignment;
    }

    switch (hAlignment) {
      case "left":
        childLeft = left + effectiveMarginLeft;
        break;

      case "center":
        childLeft = left + (right - left - childWidth + (effectiveMarginLeft - effectiveMarginRight)) / 2;
        break;

      case "right":
        childLeft = right - childWidth - effectiveMarginRight;
        break;

      case "stretch":
      default:
        childLeft = left + effectiveMarginLeft;
        childWidth = right - left - (effectiveMarginLeft + effectiveMarginRight);
        break;
    }

    var childRight = Math.round(childLeft + childWidth);
    var childBottom = Math.round(childTop + childHeight);
    childLeft = Math.round(childLeft);
    childTop = Math.round(childTop);

    if (view_base_1.traceEnabled()) {
      view_base_1.traceWrite(child.parent + " :layoutChild: " + child + " " + childLeft + ", " + childTop + ", " + childRight + ", " + childBottom, view_base_1.traceCategories.Layout);
    }

    child.layout(childLeft, childTop, childRight, childBottom, setFrame);
  };

  ViewCommon.measureChild = function (parent, child, widthMeasureSpec, heightMeasureSpec) {
    var measureWidth = 0;
    var measureHeight = 0;

    if (child && !child.isCollapsed) {
      var widthSpec = parent ? parent._currentWidthMeasureSpec : widthMeasureSpec;
      var heightSpec = parent ? parent._currentHeightMeasureSpec : heightMeasureSpec;
      var width = view_base_1.layout.getMeasureSpecSize(widthSpec);
      var widthMode = view_base_1.layout.getMeasureSpecMode(widthSpec);
      var height = view_base_1.layout.getMeasureSpecSize(heightSpec);
      var heightMode = view_base_1.layout.getMeasureSpecMode(heightSpec);

      child._updateEffectiveLayoutValues(width, widthMode, height, heightMode);

      var style = child.style;
      var horizontalMargins = child.effectiveMarginLeft + child.effectiveMarginRight;
      var verticalMargins = child.effectiveMarginTop + child.effectiveMarginBottom;
      var childWidthMeasureSpec = ViewCommon.getMeasureSpec(widthMeasureSpec, horizontalMargins, child.effectiveWidth, style.horizontalAlignment === "stretch");
      var childHeightMeasureSpec = ViewCommon.getMeasureSpec(heightMeasureSpec, verticalMargins, child.effectiveHeight, style.verticalAlignment === "stretch");

      if (view_base_1.traceEnabled()) {
        view_base_1.traceWrite(child.parent + " :measureChild: " + child + " " + view_base_1.layout.measureSpecToString(childWidthMeasureSpec) + ", " + view_base_1.layout.measureSpecToString(childHeightMeasureSpec) + "}", view_base_1.traceCategories.Layout);
      }

      child.measure(childWidthMeasureSpec, childHeightMeasureSpec);
      measureWidth = Math.round(child.getMeasuredWidth() + horizontalMargins);
      measureHeight = Math.round(child.getMeasuredHeight() + verticalMargins);
    }

    return {
      measuredWidth: measureWidth,
      measuredHeight: measureHeight
    };
  };

  ViewCommon.getMeasureSpec = function (parentSpec, margins, childLength, stretched) {
    var parentLength = view_base_1.layout.getMeasureSpecSize(parentSpec);
    var parentSpecMode = view_base_1.layout.getMeasureSpecMode(parentSpec);
    var resultSize;
    var resultMode;

    if (childLength >= 0) {
      resultSize = parentSpecMode === view_base_1.layout.UNSPECIFIED ? childLength : Math.min(parentLength, childLength);
      resultMode = view_base_1.layout.EXACTLY;
    } else {
      switch (parentSpecMode) {
        case view_base_1.layout.EXACTLY:
          resultSize = Math.max(0, parentLength - margins);
          resultMode = stretched ? view_base_1.layout.EXACTLY : view_base_1.layout.AT_MOST;
          break;

        case view_base_1.layout.AT_MOST:
          resultSize = Math.max(0, parentLength - margins);
          resultMode = view_base_1.layout.AT_MOST;
          break;

        case view_base_1.layout.UNSPECIFIED:
          resultSize = 0;
          resultMode = view_base_1.layout.UNSPECIFIED;
          break;
      }
    }

    return view_base_1.layout.makeMeasureSpec(resultSize, resultMode);
  };

  ViewCommon.prototype._setCurrentMeasureSpecs = function (widthMeasureSpec, heightMeasureSpec) {
    var changed = this._currentWidthMeasureSpec !== widthMeasureSpec || this._currentHeightMeasureSpec !== heightMeasureSpec;
    this._currentWidthMeasureSpec = widthMeasureSpec;
    this._currentHeightMeasureSpec = heightMeasureSpec;
    return changed;
  };

  ViewCommon.prototype._getCurrentLayoutBounds = function () {
    return {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    };
  };

  ViewCommon.prototype._setCurrentLayoutBounds = function (left, top, right, bottom) {
    this._isLayoutValid = true;
    var boundsChanged = this._oldLeft !== left || this._oldTop !== top || this._oldRight !== right || this._oldBottom !== bottom;
    var sizeChanged = this._oldRight - this._oldLeft !== right - left || this._oldBottom - this._oldTop !== bottom - top;
    this._oldLeft = left;
    this._oldTop = top;
    this._oldRight = right;
    this._oldBottom = bottom;
    return {
      boundsChanged: boundsChanged,
      sizeChanged: sizeChanged
    };
  };

  ViewCommon.prototype.eachChild = function (callback) {
    this.eachChildView(callback);
  };

  ViewCommon.prototype.eachChildView = function (callback) {};

  ViewCommon.prototype._getNativeViewsCount = function () {
    return this._isAddedToNativeVisualTree ? 1 : 0;
  };

  ViewCommon.prototype._eachLayoutView = function (callback) {
    return callback(this);
  };

  ViewCommon.prototype.focus = function () {
    return undefined;
  };

  ViewCommon.prototype.getSafeAreaInsets = function () {
    return {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    };
  };

  ViewCommon.prototype.getLocationInWindow = function () {
    return undefined;
  };

  ViewCommon.prototype.getLocationOnScreen = function () {
    return undefined;
  };

  ViewCommon.prototype.getLocationRelativeTo = function (otherView) {
    return undefined;
  };

  ViewCommon.prototype.getActualSize = function () {
    var currentBounds = this._getCurrentLayoutBounds();

    if (!currentBounds) {
      return undefined;
    }

    return {
      width: view_base_1.layout.toDeviceIndependentPixels(currentBounds.right - currentBounds.left),
      height: view_base_1.layout.toDeviceIndependentPixels(currentBounds.bottom - currentBounds.top)
    };
  };

  ViewCommon.prototype.animate = function (animation) {
    return this.createAnimation(animation).play();
  };

  ViewCommon.prototype.createAnimation = function (animation) {
    ensureAnimationModule();

    if (!this._localAnimations) {
      this._localAnimations = new Set();
    }

    animation.target = this;
    var anim = new animationModule.Animation([animation]);

    this._localAnimations.add(anim);

    return anim;
  };

  ViewCommon.prototype._removeAnimation = function (animation) {
    var localAnimations = this._localAnimations;

    if (localAnimations && localAnimations.has(animation)) {
      localAnimations.delete(animation);

      if (animation.isPlaying) {
        animation.cancel();
      }

      return true;
    }

    return false;
  };

  ViewCommon.prototype.resetNativeView = function () {
    var _this = this;

    if (this._localAnimations) {
      this._localAnimations.forEach(function (a) {
        return _this._removeAnimation(a);
      });
    }

    _super.prototype.resetNativeView.call(this);
  };

  ViewCommon.prototype._setNativeViewFrame = function (nativeView, frame) {};

  ViewCommon.prototype._getValue = function () {
    throw new Error("The View._getValue is obsolete. There is a new property system.");
  };

  ViewCommon.prototype._setValue = function () {
    throw new Error("The View._setValue is obsolete. There is a new property system.");
  };

  ViewCommon.prototype._updateEffectiveLayoutValues = function (parentWidthMeasureSize, parentWidthMeasureMode, parentHeightMeasureSize, parentHeightMeasureMode) {
    var style = this.style;
    var availableWidth = parentWidthMeasureMode === view_base_1.layout.UNSPECIFIED ? -1 : parentWidthMeasureSize;
    this.effectiveWidth = style_properties_1.PercentLength.toDevicePixels(style.width, -2, availableWidth);
    this.effectiveMarginLeft = style_properties_1.PercentLength.toDevicePixels(style.marginLeft, 0, availableWidth);
    this.effectiveMarginRight = style_properties_1.PercentLength.toDevicePixels(style.marginRight, 0, availableWidth);
    var availableHeight = parentHeightMeasureMode === view_base_1.layout.UNSPECIFIED ? -1 : parentHeightMeasureSize;
    this.effectiveHeight = style_properties_1.PercentLength.toDevicePixels(style.height, -2, availableHeight);
    this.effectiveMarginTop = style_properties_1.PercentLength.toDevicePixels(style.marginTop, 0, availableHeight);
    this.effectiveMarginBottom = style_properties_1.PercentLength.toDevicePixels(style.marginBottom, 0, availableHeight);
  };

  ViewCommon.prototype._setNativeClipToBounds = function () {};

  ViewCommon.prototype._redrawNativeBackground = function (value) {};

  ViewCommon.prototype._onAttachedToWindow = function () {};

  ViewCommon.prototype._onDetachedFromWindow = function () {};

  ViewCommon.prototype._hasAncestorView = function (ancestorView) {
    var matcher = function matcher(view) {
      return view === ancestorView;
    };

    for (var parent_2 = this.parent; parent_2 != null; parent_2 = parent_2.parent) {
      if (matcher(parent_2)) {
        return true;
      }
    }

    return false;
  };

  ViewCommon.layoutChangedEvent = "layoutChanged";
  ViewCommon.shownModallyEvent = "shownModally";
  ViewCommon.showingModallyEvent = "showingModally";
  return ViewCommon;
}(view_base_1.ViewBase);

exports.ViewCommon = ViewCommon;
exports.automationTextProperty = new view_base_1.Property({
  name: "automationText"
});
exports.automationTextProperty.register(ViewCommon);
exports.originXProperty = new view_base_1.Property({
  name: "originX",
  defaultValue: 0.5,
  valueConverter: function valueConverter(v) {
    return parseFloat(v);
  }
});
exports.originXProperty.register(ViewCommon);
exports.originYProperty = new view_base_1.Property({
  name: "originY",
  defaultValue: 0.5,
  valueConverter: function valueConverter(v) {
    return parseFloat(v);
  }
});
exports.originYProperty.register(ViewCommon);
exports.isEnabledProperty = new view_base_1.Property({
  name: "isEnabled",
  defaultValue: true,
  valueConverter: view_base_1.booleanConverter,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    target._goToVisualState(newValue ? "normal" : "disabled");
  }
});
exports.isEnabledProperty.register(ViewCommon);
exports.isUserInteractionEnabledProperty = new view_base_1.Property({
  name: "isUserInteractionEnabled",
  defaultValue: true,
  valueConverter: view_base_1.booleanConverter
});
exports.isUserInteractionEnabledProperty.register(ViewCommon);
exports.iosOverflowSafeAreaProperty = new view_base_1.Property({
  name: "iosOverflowSafeArea",
  defaultValue: false,
  valueConverter: view_base_1.booleanConverter
});
exports.iosOverflowSafeAreaProperty.register(ViewCommon);
exports.iosOverflowSafeAreaEnabledProperty = new view_base_1.InheritedProperty({
  name: "iosOverflowSafeAreaEnabled",
  defaultValue: true,
  valueConverter: view_base_1.booleanConverter
});
exports.iosOverflowSafeAreaEnabledProperty.register(ViewCommon);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/core/view/view.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view-common.js");

var style_properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js");

var background_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/background.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var frame_stack_1 = __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame-stack.js");

var application_1 = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view-common.js"));

var DOMID = "_domId";
var androidBackPressedEvent = "androidBackPressed";
var modalMap = new Map();
var TouchListener;
var DialogFragment;

function initializeTouchListener() {
  if (TouchListener) {
    return;
  }

  var TouchListenerImpl = function (_super) {
    __extends(TouchListenerImpl, _super);

    function TouchListenerImpl(owner) {
      var _this = _super.call(this) || this;

      _this.owner = owner;
      return global.__native(_this);
    }

    TouchListenerImpl.prototype.onTouch = function (view, event) {
      var owner = this.owner;
      owner.handleGestureTouch(event);
      var nativeView = owner.nativeViewProtected;

      if (!nativeView || !nativeView.onTouchEvent) {
        return false;
      }

      return nativeView.onTouchEvent(event);
    };

    TouchListenerImpl = __decorate([Interfaces([android.view.View.OnTouchListener])], TouchListenerImpl);
    return TouchListenerImpl;
  }(java.lang.Object);

  TouchListener = TouchListenerImpl;
}

function initializeDialogFragment() {
  if (DialogFragment) {
    return;
  }

  var DialogImpl = function (_super) {
    __extends(DialogImpl, _super);

    function DialogImpl(fragment, context, themeResId) {
      var _this = _super.call(this, context, themeResId) || this;

      _this.fragment = fragment;
      return global.__native(_this);
    }

    DialogImpl.prototype.onBackPressed = function () {
      var view = this.fragment.owner;
      var args = {
        eventName: "activityBackPressed",
        object: view,
        activity: view._context,
        cancel: false
      };
      application_1.android.notify(args);

      if (args.cancel) {
        return;
      }

      view.notify(args);

      if (!args.cancel && !view.onBackPressed()) {
        _super.prototype.onBackPressed.call(this);
      }
    };

    return DialogImpl;
  }(android.app.Dialog);

  var DialogFragmentImpl = function (_super) {
    __extends(DialogFragmentImpl, _super);

    function DialogFragmentImpl() {
      var _this = _super.call(this) || this;

      return global.__native(_this);
    }

    DialogFragmentImpl.prototype.onCreateDialog = function (savedInstanceState) {
      var ownerId = this.getArguments().getInt(DOMID);
      var options = getModalOptions(ownerId);
      this.owner = options.owner;
      this._fullscreen = options.fullscreen;
      this._stretched = options.stretched;
      this._dismissCallback = options.dismissCallback;
      this._shownCallback = options.shownCallback;
      this.owner._dialogFragment = this;
      this.setStyle(android.support.v4.app.DialogFragment.STYLE_NO_TITLE, 0);
      var dialog = new DialogImpl(this, this.getActivity(), this.getTheme());

      if (!this._fullscreen && !this._stretched) {
        this.owner.horizontalAlignment = "center";
        this.owner.verticalAlignment = "middle";
      } else {
        this.owner.horizontalAlignment = "stretch";
        this.owner.verticalAlignment = "stretch";
      }

      return dialog;
    };

    DialogFragmentImpl.prototype.onCreateView = function (inflater, container, savedInstanceState) {
      var owner = this.owner;

      owner._setupAsRootView(this.getActivity());

      owner._isAddedToNativeVisualTree = true;
      return owner.nativeViewProtected;
    };

    DialogFragmentImpl.prototype.onStart = function () {
      _super.prototype.onStart.call(this);

      if (this._fullscreen) {
        var window_1 = this.getDialog().getWindow();
        var length_1 = android.view.ViewGroup.LayoutParams.MATCH_PARENT;
        window_1.setLayout(length_1, length_1);
        window_1.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.WHITE));
      }

      var owner = this.owner;

      if (owner && !owner.isLoaded) {
        owner.callLoaded();
      }

      this._shownCallback();
    };

    DialogFragmentImpl.prototype.onDismiss = function (dialog) {
      _super.prototype.onDismiss.call(this, dialog);

      var manager = this.getFragmentManager();

      if (manager) {
        removeModal(this.owner._domId);

        this._dismissCallback();
      }

      var owner = this.owner;

      if (owner && owner.isLoaded) {
        owner.callUnloaded();
      }
    };

    DialogFragmentImpl.prototype.onDestroy = function () {
      _super.prototype.onDestroy.call(this);

      var owner = this.owner;
      owner._isAddedToNativeVisualTree = false;

      owner._tearDownUI(true);
    };

    return DialogFragmentImpl;
  }(android.support.v4.app.DialogFragment);

  DialogFragment = DialogFragmentImpl;
}

function saveModal(options) {
  modalMap.set(options.owner._domId, options);
}

function removeModal(domId) {
  modalMap.delete(domId);
}

function getModalOptions(domId) {
  return modalMap.get(domId);
}

var View = function (_super) {
  __extends(View, _super);

  function View() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  View.prototype.observe = function (type, callback, thisArg) {
    _super.prototype.observe.call(this, type, callback, thisArg);

    if (this.isLoaded && !this.touchListenerIsSet) {
      this.setOnTouchListener();
    }
  };

  View.prototype.on = function (eventNames, callback, thisArg) {
    _super.prototype.on.call(this, eventNames, callback, thisArg);

    var isLayoutEvent = typeof eventNames === "string" ? eventNames.indexOf(view_common_1.ViewCommon.layoutChangedEvent) !== -1 : false;

    if (this.isLoaded && !this.layoutChangeListenerIsSet && isLayoutEvent) {
      this.setOnLayoutChangeListener();
    }
  };

  View.prototype.off = function (eventNames, callback, thisArg) {
    _super.prototype.off.call(this, eventNames, callback, thisArg);

    var isLayoutEvent = typeof eventNames === "string" ? eventNames.indexOf(view_common_1.ViewCommon.layoutChangedEvent) !== -1 : false;

    if (this.isLoaded && this.layoutChangeListenerIsSet && isLayoutEvent && !this.hasListeners(view_common_1.ViewCommon.layoutChangedEvent)) {
      this.nativeViewProtected.removeOnLayoutChangeListener(this.layoutChangeListener);
      this.layoutChangeListenerIsSet = false;
    }
  };

  View.prototype._getChildFragmentManager = function () {
    return null;
  };

  View.prototype._getRootFragmentManager = function () {
    if (!this._rootManager && this._context) {
      this._rootManager = this._context.getSupportFragmentManager();
    }

    return this._rootManager;
  };

  View.prototype._getFragmentManager = function () {
    var manager = this._manager;

    if (!manager) {
      var view = this;
      var frameOrTabViewItemFound = false;

      while (view) {
        var dialogFragment = view._dialogFragment;

        if (dialogFragment) {
          manager = dialogFragment.getChildFragmentManager();
          break;
        }

        if (view._hasFragments) {
          if (frameOrTabViewItemFound) {
            manager = view._getChildFragmentManager();
            break;
          }

          frameOrTabViewItemFound = true;
        }

        view = view.parent;
      }

      if (!manager) {
        manager = this._getRootFragmentManager();
      }

      this._manager = manager;
    }

    return manager;
  };

  View.prototype.onLoaded = function () {
    this._manager = null;
    this._rootManager = null;

    _super.prototype.onLoaded.call(this);

    this.setOnTouchListener();
  };

  View.prototype.onUnloaded = function () {
    if (this.touchListenerIsSet) {
      this.nativeViewProtected.setOnTouchListener(null);
      this.touchListenerIsSet = false;
      this.nativeViewProtected.setClickable(this._isClickable);
    }

    this._manager = null;
    this._rootManager = null;

    _super.prototype.onUnloaded.call(this);
  };

  View.prototype.onBackPressed = function () {
    var topmostFrame = frame_stack_1.topmost();

    if (topmostFrame && topmostFrame._hasAncestorView(this)) {
      return topmostFrame.onBackPressed();
    }

    return false;
  };

  View.prototype.handleGestureTouch = function (event) {
    for (var type in this._gestureObservers) {
      var list = this._gestureObservers[type];
      list.forEach(function (element) {
        element.androidOnTouchEvent(event);
      });
    }

    if (this.parent instanceof View) {
      this.parent.handleGestureTouch(event);
    }
  };

  View.prototype.hasGestureObservers = function () {
    return this._gestureObservers && Object.keys(this._gestureObservers).length > 0;
  };

  View.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    this._isClickable = this.nativeViewProtected.isClickable();

    if (this.hasListeners(view_common_1.ViewCommon.layoutChangedEvent)) {
      this.setOnLayoutChangeListener();
    }
  };

  View.prototype.disposeNativeView = function () {
    _super.prototype.disposeNativeView.call(this);

    if (this.layoutChangeListenerIsSet) {
      this.layoutChangeListenerIsSet = false;
      this.nativeViewProtected.removeOnLayoutChangeListener(this.layoutChangeListener);
    }
  };

  View.prototype.setOnTouchListener = function () {
    if (!this.nativeViewProtected || !this.hasGestureObservers()) {
      return;
    }

    initializeTouchListener();
    this.touchListener = this.touchListener || new TouchListener(this);
    this.nativeViewProtected.setOnTouchListener(this.touchListener);
    this.touchListenerIsSet = true;

    if (this.nativeViewProtected.setClickable) {
      this.nativeViewProtected.setClickable(this.isUserInteractionEnabled);
    }
  };

  View.prototype.setOnLayoutChangeListener = function () {
    if (this.nativeViewProtected) {
      var owner_1 = this;
      this.layoutChangeListenerIsSet = true;
      this.layoutChangeListener = this.layoutChangeListener || new android.view.View.OnLayoutChangeListener({
        onLayoutChange: function onLayoutChange(v, left, top, right, bottom, oldLeft, oldTop, oldRight, oldBottom) {
          if (left !== oldLeft || top !== oldTop || right !== oldRight || bottom !== oldBottom) {
            owner_1._raiseLayoutChangedEvent();
          }
        }
      });
      this.nativeViewProtected.addOnLayoutChangeListener(this.layoutChangeListener);
    }
  };

  Object.defineProperty(View.prototype, "isLayoutRequired", {
    get: function get() {
      return !this.isLayoutValid;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(View.prototype, "isLayoutValid", {
    get: function get() {
      if (this.nativeViewProtected) {
        return !this.nativeViewProtected.isLayoutRequested();
      }

      return false;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(View.prototype, "_hasFragments", {
    get: function get() {
      return false;
    },
    enumerable: true,
    configurable: true
  });

  View.prototype.layoutNativeView = function (left, top, right, bottom) {
    if (this.nativeViewProtected) {
      this.nativeViewProtected.layout(left, top, right, bottom);
    }
  };

  View.prototype.requestLayout = function () {
    _super.prototype.requestLayout.call(this);

    if (this.nativeViewProtected) {
      this.nativeViewProtected.requestLayout();
    }
  };

  View.prototype.measure = function (widthMeasureSpec, heightMeasureSpec) {
    _super.prototype.measure.call(this, widthMeasureSpec, heightMeasureSpec);

    this.onMeasure(widthMeasureSpec, heightMeasureSpec);
  };

  View.prototype.layout = function (left, top, right, bottom) {
    _super.prototype.layout.call(this, left, top, right, bottom);

    this.onLayout(left, top, right, bottom);
  };

  View.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var view = this.nativeViewProtected;

    if (view) {
      view.measure(widthMeasureSpec, heightMeasureSpec);
      this.setMeasuredDimension(view.getMeasuredWidth(), view.getMeasuredHeight());
    }
  };

  View.prototype.onLayout = function (left, top, right, bottom) {
    var view = this.nativeViewProtected;

    if (view) {
      this.layoutNativeView(left, top, right, bottom);
    }
  };

  View.prototype._getCurrentLayoutBounds = function () {
    if (this.nativeViewProtected && !this.isCollapsed) {
      return {
        left: this.nativeViewProtected.getLeft(),
        top: this.nativeViewProtected.getTop(),
        right: this.nativeViewProtected.getRight(),
        bottom: this.nativeViewProtected.getBottom()
      };
    } else {
      return {
        left: 0,
        top: 0,
        right: 0,
        bottom: 0
      };
    }
  };

  View.prototype.getMeasuredWidth = function () {
    if (this.nativeViewProtected) {
      return this.nativeViewProtected.getMeasuredWidth();
    }

    return _super.prototype.getMeasuredWidth.call(this);
  };

  View.prototype.getMeasuredHeight = function () {
    if (this.nativeViewProtected) {
      return this.nativeViewProtected.getMeasuredHeight();
    }

    return _super.prototype.getMeasuredHeight.call(this);
  };

  View.prototype.focus = function () {
    if (this.nativeViewProtected) {
      return this.nativeViewProtected.requestFocus();
    }

    return false;
  };

  View.prototype.getLocationInWindow = function () {
    if (!this.nativeViewProtected || !this.nativeViewProtected.getWindowToken()) {
      return undefined;
    }

    var nativeArray = Array.create("int", 2);
    this.nativeViewProtected.getLocationInWindow(nativeArray);
    return {
      x: view_common_1.layout.toDeviceIndependentPixels(nativeArray[0]),
      y: view_common_1.layout.toDeviceIndependentPixels(nativeArray[1])
    };
  };

  View.prototype.getLocationOnScreen = function () {
    if (!this.nativeViewProtected || !this.nativeViewProtected.getWindowToken()) {
      return undefined;
    }

    var nativeArray = Array.create("int", 2);
    this.nativeViewProtected.getLocationOnScreen(nativeArray);
    return {
      x: view_common_1.layout.toDeviceIndependentPixels(nativeArray[0]),
      y: view_common_1.layout.toDeviceIndependentPixels(nativeArray[1])
    };
  };

  View.prototype.getLocationRelativeTo = function (otherView) {
    if (!this.nativeViewProtected || !this.nativeViewProtected.getWindowToken() || !otherView || !otherView.nativeViewProtected || !otherView.nativeViewProtected.getWindowToken() || this.nativeViewProtected.getWindowToken() !== otherView.nativeViewProtected.getWindowToken()) {
      return undefined;
    }

    var myArray = Array.create("int", 2);
    this.nativeViewProtected.getLocationOnScreen(myArray);
    var otherArray = Array.create("int", 2);
    otherView.nativeViewProtected.getLocationOnScreen(otherArray);
    return {
      x: view_common_1.layout.toDeviceIndependentPixels(myArray[0] - otherArray[0]),
      y: view_common_1.layout.toDeviceIndependentPixels(myArray[1] - otherArray[1])
    };
  };

  View.resolveSizeAndState = function (size, specSize, specMode, childMeasuredState) {
    var result = size;

    switch (specMode) {
      case view_common_1.layout.UNSPECIFIED:
        result = size;
        break;

      case view_common_1.layout.AT_MOST:
        if (specSize < size) {
          result = specSize | view_common_1.layout.MEASURED_STATE_TOO_SMALL;
        }

        break;

      case view_common_1.layout.EXACTLY:
        result = specSize;
        break;
    }

    return result | childMeasuredState & view_common_1.layout.MEASURED_STATE_MASK;
  };

  View.prototype._showNativeModalView = function (parent, options) {
    var _this = this;

    _super.prototype._showNativeModalView.call(this, parent, options);

    if (!this.backgroundColor) {
      this.backgroundColor = new view_common_1.Color("White");
    }

    initializeDialogFragment();
    var df = new DialogFragment();
    var args = new android.os.Bundle();
    args.putInt(DOMID, this._domId);
    df.setArguments(args);
    var dialogOptions = {
      owner: this,
      fullscreen: !!options.fullscreen,
      stretched: !!options.stretched,
      shownCallback: function shownCallback() {
        return _this._raiseShownModallyEvent();
      },
      dismissCallback: function dismissCallback() {
        return _this.closeModal();
      }
    };
    saveModal(dialogOptions);
    this._dialogFragment = df;

    this._raiseShowingModallyEvent();

    this._dialogFragment.show(parent._getRootFragmentManager(), this._domId.toString());
  };

  View.prototype._hideNativeModalView = function (parent, whenClosedCallback) {
    var manager = this._dialogFragment.getFragmentManager();

    if (manager) {
      this._dialogFragment.dismissAllowingStateLoss();
    }

    this._dialogFragment = null;
    whenClosedCallback();
  };

  View.prototype[view_common_1.isEnabledProperty.setNative] = function (value) {
    this.nativeViewProtected.setEnabled(value);
  };

  View.prototype[view_common_1.originXProperty.getDefault] = function () {
    return this.nativeViewProtected.getPivotX();
  };

  View.prototype[view_common_1.originXProperty.setNative] = function (value) {
    org.nativescript.widgets.OriginPoint.setX(this.nativeViewProtected, value);
  };

  View.prototype[view_common_1.originYProperty.getDefault] = function () {
    return this.nativeViewProtected.getPivotY();
  };

  View.prototype[view_common_1.originYProperty.setNative] = function (value) {
    org.nativescript.widgets.OriginPoint.setY(this.nativeViewProtected, value);
  };

  View.prototype[view_common_1.automationTextProperty.getDefault] = function () {
    return this.nativeViewProtected.getContentDescription();
  };

  View.prototype[view_common_1.automationTextProperty.setNative] = function (value) {
    this.nativeViewProtected.setContentDescription(value);
  };

  View.prototype[view_common_1.isUserInteractionEnabledProperty.setNative] = function (value) {
    this.nativeViewProtected.setClickable(value);
    this.nativeViewProtected.setFocusable(value);
  };

  View.prototype[style_properties_1.visibilityProperty.getDefault] = function () {
    var nativeVisibility = this.nativeViewProtected.getVisibility();

    switch (nativeVisibility) {
      case android.view.View.VISIBLE:
        return "visible";

      case android.view.View.INVISIBLE:
        return "hidden";

      case android.view.View.GONE:
        return "collapse";

      default:
        throw new Error("Unsupported android.view.View visibility: " + nativeVisibility + ". Currently supported values are android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE.");
    }
  };

  View.prototype[style_properties_1.visibilityProperty.setNative] = function (value) {
    switch (value) {
      case "visible":
        this.nativeViewProtected.setVisibility(android.view.View.VISIBLE);
        break;

      case "hidden":
        this.nativeViewProtected.setVisibility(android.view.View.INVISIBLE);
        break;

      case "collapse":
        this.nativeViewProtected.setVisibility(android.view.View.GONE);
        break;

      default:
        throw new Error("Invalid visibility value: " + value + ". Valid values are: visible, hidden, collapse.");
    }
  };

  View.prototype[style_properties_1.opacityProperty.getDefault] = function () {
    return this.nativeViewProtected.getAlpha();
  };

  View.prototype[style_properties_1.opacityProperty.setNative] = function (value) {
    this.nativeViewProtected.setAlpha(float(value));
  };

  View.prototype[style_properties_1.horizontalAlignmentProperty.getDefault] = function () {
    return org.nativescript.widgets.ViewHelper.getHorizontalAlignment(this.nativeViewProtected);
  };

  View.prototype[style_properties_1.horizontalAlignmentProperty.setNative] = function (value) {
    var nativeView = this.nativeViewProtected;
    var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.CommonLayoutParams();

    if (lp.gravity !== undefined) {
      switch (value) {
        case "left":
          lp.gravity = android.view.Gravity.LEFT | lp.gravity & android.view.Gravity.VERTICAL_GRAVITY_MASK;

          if (lp.weight < 0) {
            lp.weight = -2;
          }

          break;

        case "center":
          lp.gravity = android.view.Gravity.CENTER_HORIZONTAL | lp.gravity & android.view.Gravity.VERTICAL_GRAVITY_MASK;

          if (lp.weight < 0) {
            lp.weight = -2;
          }

          break;

        case "right":
          lp.gravity = android.view.Gravity.RIGHT | lp.gravity & android.view.Gravity.VERTICAL_GRAVITY_MASK;

          if (lp.weight < 0) {
            lp.weight = -2;
          }

          break;

        case "stretch":
          lp.gravity = android.view.Gravity.FILL_HORIZONTAL | lp.gravity & android.view.Gravity.VERTICAL_GRAVITY_MASK;

          if (lp.weight < 0) {
            lp.weight = -1;
          }

          break;
      }

      nativeView.setLayoutParams(lp);
    }
  };

  View.prototype[style_properties_1.verticalAlignmentProperty.getDefault] = function () {
    return org.nativescript.widgets.ViewHelper.getVerticalAlignment(this.nativeViewProtected);
  };

  View.prototype[style_properties_1.verticalAlignmentProperty.setNative] = function (value) {
    var nativeView = this.nativeViewProtected;
    var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.CommonLayoutParams();

    if (lp.gravity !== undefined) {
      switch (value) {
        case "top":
          lp.gravity = android.view.Gravity.TOP | lp.gravity & android.view.Gravity.HORIZONTAL_GRAVITY_MASK;

          if (lp.height < 0) {
            lp.height = -2;
          }

          break;

        case "middle":
          lp.gravity = android.view.Gravity.CENTER_VERTICAL | lp.gravity & android.view.Gravity.HORIZONTAL_GRAVITY_MASK;

          if (lp.height < 0) {
            lp.height = -2;
          }

          break;

        case "bottom":
          lp.gravity = android.view.Gravity.BOTTOM | lp.gravity & android.view.Gravity.HORIZONTAL_GRAVITY_MASK;

          if (lp.height < 0) {
            lp.height = -2;
          }

          break;

        case "stretch":
          lp.gravity = android.view.Gravity.FILL_VERTICAL | lp.gravity & android.view.Gravity.HORIZONTAL_GRAVITY_MASK;

          if (lp.height < 0) {
            lp.height = -1;
          }

          break;
      }

      nativeView.setLayoutParams(lp);
    }
  };

  View.prototype[style_properties_1.rotateProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setRotate(this.nativeViewProtected, float(value));
  };

  View.prototype[style_properties_1.scaleXProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setScaleX(this.nativeViewProtected, float(value));
  };

  View.prototype[style_properties_1.scaleYProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setScaleY(this.nativeViewProtected, float(value));
  };

  View.prototype[style_properties_1.translateXProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setTranslateX(this.nativeViewProtected, view_common_1.layout.toDevicePixels(value));
  };

  View.prototype[style_properties_1.translateYProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setTranslateY(this.nativeViewProtected, view_common_1.layout.toDevicePixels(value));
  };

  View.prototype[style_properties_1.zIndexProperty.getDefault] = function () {
    return 0;
  };

  View.prototype[style_properties_1.zIndexProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setZIndex(this.nativeViewProtected, value);
  };

  View.prototype[style_properties_1.backgroundInternalProperty.getDefault] = function () {
    var nativeView = this.nativeViewProtected;
    var drawable = nativeView.getBackground();

    if (drawable) {
      var constantState = drawable.getConstantState();

      if (constantState) {
        try {
          return constantState.newDrawable(nativeView.getResources());
        } catch (e) {
          return drawable;
        }
      } else {
        return drawable;
      }
    }

    return null;
  };

  View.prototype[style_properties_1.backgroundInternalProperty.setNative] = function (value) {
    this._redrawNativeBackground(value);
  };

  View.prototype[style_properties_1.minWidthProperty.setNative] = function (value) {
    if (this.parent instanceof CustomLayoutView && this.parent.nativeViewProtected) {
      this.parent._setChildMinWidthNative(this);
    } else {
      this._setMinWidthNative(this.minWidth);
    }
  };

  View.prototype[style_properties_1.minHeightProperty.setNative] = function (value) {
    if (this.parent instanceof CustomLayoutView && this.parent.nativeViewProtected) {
      this.parent._setChildMinHeightNative(this);
    } else {
      this._setMinHeightNative(this.minHeight);
    }
  };

  View.prototype._redrawNativeBackground = function (value) {
    if (value instanceof background_1.Background) {
      background_1.ad.onBackgroundOrBorderPropertyChanged(this);
    } else {
      var nativeView = this.nativeViewProtected;
      nativeView.setBackground(value);
      var style = this.style;
      var paddingTop = view_common_1.paddingTopProperty.isSet(style) ? this.effectivePaddingTop : this._defaultPaddingTop;
      var paddingRight = view_common_1.paddingRightProperty.isSet(style) ? this.effectivePaddingRight : this._defaultPaddingRight;
      var paddingBottom = view_common_1.paddingBottomProperty.isSet(style) ? this.effectivePaddingBottom : this._defaultPaddingBottom;
      var paddingLeft = view_common_1.paddingLeftProperty.isSet(style) ? this.effectivePaddingLeft : this._defaultPaddingLeft;

      if (this._isPaddingRelative) {
        nativeView.setPaddingRelative(paddingLeft, paddingTop, paddingRight, paddingBottom);
      } else {
        nativeView.setPadding(paddingLeft, paddingTop, paddingRight, paddingBottom);
      }

      nativeView.background = undefined;
    }
  };

  View.androidBackPressedEvent = androidBackPressedEvent;

  __decorate([profiling_1.profile], View.prototype, "onLoaded", null);

  __decorate([profiling_1.profile], View.prototype, "onUnloaded", null);

  __decorate([profiling_1.profile], View.prototype, "requestLayout", null);

  return View;
}(view_common_1.ViewCommon);

exports.View = View;

var ContainerView = function (_super) {
  __extends(ContainerView, _super);

  function ContainerView() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  return ContainerView;
}(View);

exports.ContainerView = ContainerView;

var CustomLayoutView = function (_super) {
  __extends(CustomLayoutView, _super);

  function CustomLayoutView() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  CustomLayoutView.prototype.createNativeView = function () {
    return new org.nativescript.widgets.ContentLayout(this._context);
  };

  CustomLayoutView.prototype._addViewToNativeVisualTree = function (child, atIndex) {
    if (atIndex === void 0) {
      atIndex = Number.MAX_SAFE_INTEGER;
    }

    _super.prototype._addViewToNativeVisualTree.call(this, child);

    if (this.nativeViewProtected && child.nativeViewProtected) {
      if (view_common_1.traceEnabled()) {
        view_common_1.traceWrite(this + ".nativeView.addView(" + child + ".nativeView, " + atIndex + ")", view_common_1.traceCategories.VisualTreeEvents);
      }

      this.nativeViewProtected.addView(child.nativeViewProtected, atIndex);

      if (child instanceof View) {
        this._updateNativeLayoutParams(child);
      }

      return true;
    }

    return false;
  };

  CustomLayoutView.prototype._updateNativeLayoutParams = function (child) {
    this._setChildMinWidthNative(child);

    this._setChildMinHeightNative(child);
  };

  CustomLayoutView.prototype._setChildMinWidthNative = function (child) {
    child._setMinWidthNative(child.minWidth);
  };

  CustomLayoutView.prototype._setChildMinHeightNative = function (child) {
    child._setMinHeightNative(child.minHeight);
  };

  CustomLayoutView.prototype._removeViewFromNativeVisualTree = function (child) {
    _super.prototype._removeViewFromNativeVisualTree.call(this, child);

    var nativeView = this.nativeViewProtected;
    var childView = child.nativeViewProtected;

    if (nativeView && childView) {
      nativeView.removeView(childView);

      if (view_common_1.traceEnabled()) {
        view_common_1.traceWrite(nativeView + ".removeView(" + childView + ")", view_common_1.traceCategories.VisualTreeEvents);
        view_common_1.traceNotifyEvent(child, "childInLayoutRemovedFromNativeVisualTree");
      }
    }
  };

  return CustomLayoutView;
}(ContainerView);

exports.CustomLayoutView = CustomLayoutView;

var percentNotSupported = function percentNotSupported(view, value) {
  throw new Error("PercentLength is not supported.");
};

function createNativePercentLengthProperty(options) {
  var getter = options.getter,
      setter = options.setter,
      _a = options.auto,
      auto = _a === void 0 ? 0 : _a;
  var setPixels, getPixels, setPercent;

  if (getter) {
    View.prototype[getter] = function () {
      if (options) {
        setPixels = options.setPixels;
        getPixels = options.getPixels;
        setPercent = options.setPercent || percentNotSupported;
        options = null;
      }

      var value = getPixels(this.nativeViewProtected);

      if (value == auto) {
        return "auto";
      } else {
        return {
          value: value,
          unit: "px"
        };
      }
    };
  }

  if (setter) {
    View.prototype[setter] = function (length) {
      if (options) {
        setPixels = options.setPixels;
        getPixels = options.getPixels;
        setPercent = options.setPercent || percentNotSupported;
        options = null;
      }

      if (length == "auto") {
        setPixels(this.nativeViewProtected, auto);
      } else if (typeof length === "number") {
        setPixels(this.nativeViewProtected, view_common_1.layout.round(view_common_1.layout.toDevicePixels(length)));
      } else if (length.unit == "dip") {
        setPixels(this.nativeViewProtected, view_common_1.layout.round(view_common_1.layout.toDevicePixels(length.value)));
      } else if (length.unit == "px") {
        setPixels(this.nativeViewProtected, view_common_1.layout.round(length.value));
      } else if (length.unit == "%") {
        setPercent(this.nativeViewProtected, length.value);
      } else {
        throw new Error("Unsupported PercentLength " + length);
      }
    };
  }
}

createNativePercentLengthProperty({
  setter: style_properties_1.marginTopProperty.setNative,

  get setPixels() {
    return org.nativescript.widgets.ViewHelper.setMarginTop;
  },

  get setPercent() {
    return org.nativescript.widgets.ViewHelper.setMarginTopPercent;
  }

});
createNativePercentLengthProperty({
  setter: style_properties_1.marginRightProperty.setNative,

  get setPixels() {
    return org.nativescript.widgets.ViewHelper.setMarginRight;
  },

  get setPercent() {
    return org.nativescript.widgets.ViewHelper.setMarginRightPercent;
  }

});
createNativePercentLengthProperty({
  setter: style_properties_1.marginBottomProperty.setNative,

  get setPixels() {
    return org.nativescript.widgets.ViewHelper.setMarginBottom;
  },

  get setPercent() {
    return org.nativescript.widgets.ViewHelper.setMarginBottomPercent;
  }

});
createNativePercentLengthProperty({
  setter: style_properties_1.marginLeftProperty.setNative,

  get setPixels() {
    return org.nativescript.widgets.ViewHelper.setMarginLeft;
  },

  get setPercent() {
    return org.nativescript.widgets.ViewHelper.setMarginLeftPercent;
  }

});
createNativePercentLengthProperty({
  setter: style_properties_1.widthProperty.setNative,
  auto: -1,

  get setPixels() {
    return org.nativescript.widgets.ViewHelper.setWidth;
  },

  get setPercent() {
    return org.nativescript.widgets.ViewHelper.setWidthPercent;
  }

});
createNativePercentLengthProperty({
  setter: style_properties_1.heightProperty.setNative,
  auto: -1,

  get setPixels() {
    return org.nativescript.widgets.ViewHelper.setHeight;
  },

  get setPercent() {
    return org.nativescript.widgets.ViewHelper.setHeightPercent;
  }

});
createNativePercentLengthProperty({
  setter: "_setMinWidthNative",

  get setPixels() {
    return org.nativescript.widgets.ViewHelper.setMinWidth;
  }

});
createNativePercentLengthProperty({
  setter: "_setMinHeightNative",

  get setPixels() {
    return org.nativescript.widgets.ViewHelper.setMinHeight;
  }

});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/core/weak-event-listener/weak-event-listener.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var handlersForEventName = new Map();
var sourcesMap = new WeakMap();

var TargetHandlerPair = function () {
  function TargetHandlerPair(target, handler) {
    this.tagetRef = new WeakRef(target);
    this.handler = handler;
  }

  return TargetHandlerPair;
}();

function getHandlerForEventName(eventName) {
  var handler = handlersForEventName.get(eventName);

  if (!handler) {
    handler = function handler(eventData) {
      var source = eventData.object;
      var sourceEventMap = sourcesMap.get(source);

      if (!sourceEventMap) {
        source.removeEventListener(eventName, handlersForEventName.get(eventName));
        return;
      }

      var targetHandlerPairList = sourceEventMap.get(eventName);

      if (!targetHandlerPairList) {
        return;
      }

      var deadPairsIndexes = [];

      for (var i = 0; i < targetHandlerPairList.length; i++) {
        var pair = targetHandlerPairList[i];
        var target = pair.tagetRef.get();

        if (target) {
          pair.handler.call(target, eventData);
        } else {
          deadPairsIndexes.push(i);
        }
      }

      if (deadPairsIndexes.length === targetHandlerPairList.length) {
        source.removeEventListener(eventName, handlersForEventName.get(eventName));
        sourceEventMap.delete(eventName);
      } else {
        for (var j = deadPairsIndexes.length - 1; j >= 0; j--) {
          targetHandlerPairList.splice(deadPairsIndexes[j], 1);
        }
      }
    };

    handlersForEventName.set(eventName, handler);
  }

  return handler;
}

function validateArgs(source, eventName, handler, target) {
  if (!source) {
    throw new Error("source is null or undefined");
  }

  if (!target) {
    throw new Error("target is null or undefined");
  }

  if (typeof eventName !== "string") {
    throw new Error("eventName is not a string");
  }

  if (typeof handler !== "function") {
    throw new Error("handler is not a function");
  }
}

function addWeakEventListener(source, eventName, handler, target) {
  validateArgs(source, eventName, handler, target);
  var shouldAttach = false;
  var sourceEventMap = sourcesMap.get(source);

  if (!sourceEventMap) {
    sourceEventMap = new Map();
    sourcesMap.set(source, sourceEventMap);
    shouldAttach = true;
  }

  var pairList = sourceEventMap.get(eventName);

  if (!pairList) {
    pairList = new Array();
    sourceEventMap.set(eventName, pairList);
    shouldAttach = true;
  }

  pairList.push(new TargetHandlerPair(target, handler));

  if (shouldAttach) {
    source.addEventListener(eventName, getHandlerForEventName(eventName));
  }
}

exports.addWeakEventListener = addWeakEventListener;

function removeWeakEventListener(source, eventName, handler, target) {
  validateArgs(source, eventName, handler, target);
  var handlerForEventWithName = handlersForEventName.get(eventName);

  if (!handlerForEventWithName) {
    return;
  }

  var sourceEventMap = sourcesMap.get(source);

  if (!sourceEventMap) {
    return;
  }

  var targetHandlerPairList = sourceEventMap.get(eventName);

  if (!targetHandlerPairList) {
    return;
  }

  var targetHandlerPairsToRemove = [];

  for (var i = 0; i < targetHandlerPairList.length; i++) {
    var pair = targetHandlerPairList[i];
    var registeredTarget = pair.tagetRef.get();

    if (!registeredTarget || registeredTarget === target && handler === pair.handler) {
      targetHandlerPairsToRemove.push(i);
    }
  }

  if (targetHandlerPairsToRemove.length === targetHandlerPairList.length) {
    source.removeEventListener(eventName, handlerForEventWithName);
    sourceEventMap.delete(eventName);
  } else {
    for (var j = targetHandlerPairsToRemove.length - 1; j >= 0; j--) {
      targetHandlerPairList.splice(targetHandlerPairsToRemove[j], 1);
    }
  }
}

exports.removeWeakEventListener = removeWeakEventListener;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/date-picker/date-picker-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var defaultDate = new Date();

var dateComparer = function dateComparer(x, y) {
  return x <= y && x >= y;
};

var DatePickerBase = function (_super) {
  __extends(DatePickerBase, _super);

  function DatePickerBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  DatePickerBase = __decorate([view_1.CSSType("DatePicker")], DatePickerBase);
  return DatePickerBase;
}(view_1.View);

exports.DatePickerBase = DatePickerBase;
DatePickerBase.prototype.recycleNativeView = "auto";
exports.yearProperty = new view_1.Property({
  name: "year",
  defaultValue: defaultDate.getFullYear(),
  valueConverter: function valueConverter(v) {
    return parseInt(v);
  }
});
exports.yearProperty.register(DatePickerBase);
exports.monthProperty = new view_1.Property({
  name: "month",
  defaultValue: defaultDate.getMonth() + 1,
  valueConverter: function valueConverter(v) {
    return parseInt(v);
  }
});
exports.monthProperty.register(DatePickerBase);
exports.dayProperty = new view_1.Property({
  name: "day",
  defaultValue: defaultDate.getDate(),
  valueConverter: function valueConverter(v) {
    return parseInt(v);
  }
});
exports.dayProperty.register(DatePickerBase);
exports.maxDateProperty = new view_1.Property({
  name: "maxDate",
  equalityComparer: dateComparer,
  valueConverter: function valueConverter(v) {
    return new Date(v);
  }
});
exports.maxDateProperty.register(DatePickerBase);
exports.minDateProperty = new view_1.Property({
  name: "minDate",
  equalityComparer: dateComparer,
  valueConverter: function valueConverter(v) {
    return new Date(v);
  }
});
exports.minDateProperty.register(DatePickerBase);
exports.dateProperty = new view_1.Property({
  name: "date",
  defaultValue: defaultDate,
  equalityComparer: dateComparer,
  valueConverter: function valueConverter(v) {
    return new Date(v);
  }
});
exports.dateProperty.register(DatePickerBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/date-picker/date-picker.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var date_picker_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/date-picker/date-picker-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/date-picker/date-picker-common.js"));

var DateChangedListener;

function initializeDateChangedListener() {
  if (DateChangedListener) {
    return;
  }

  var DateChangedListenerImpl = function (_super) {
    __extends(DateChangedListenerImpl, _super);

    function DateChangedListenerImpl(owner) {
      var _this = _super.call(this) || this;

      _this.owner = owner;
      return global.__native(_this);
    }

    DateChangedListenerImpl.prototype.onDateChanged = function (picker, year, month, day) {
      var owner = this.owner;
      var dateChanged = false;

      if (year !== owner.year) {
        date_picker_common_1.yearProperty.nativeValueChange(owner, year);
        dateChanged = true;
      }

      if (month !== owner.month - 1) {
        date_picker_common_1.monthProperty.nativeValueChange(owner, month + 1);
        dateChanged = true;
      }

      if (day !== owner.day) {
        date_picker_common_1.dayProperty.nativeValueChange(owner, day);
        dateChanged = true;
      }

      if (dateChanged) {
        date_picker_common_1.dateProperty.nativeValueChange(owner, new Date(year, month, day));
      }
    };

    DateChangedListenerImpl = __decorate([Interfaces([android.widget.DatePicker.OnDateChangedListener])], DateChangedListenerImpl);
    return DateChangedListenerImpl;
  }(java.lang.Object);

  DateChangedListener = DateChangedListenerImpl;
}

var DatePicker = function (_super) {
  __extends(DatePicker, _super);

  function DatePicker() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  DatePicker.prototype.createNativeView = function () {
    var picker = new android.widget.DatePicker(this._context);
    picker.setCalendarViewShown(false);
    return picker;
  };

  DatePicker.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    initializeDateChangedListener();
    var nativeView = this.nativeViewProtected;
    var listener = new DateChangedListener(this);
    nativeView.init(this.year, this.month - 1, this.day, listener);
    nativeView.listener = listener;
  };

  DatePicker.prototype.disposeNativeView = function () {
    this.nativeViewProtected.listener.owner = null;

    _super.prototype.disposeNativeView.call(this);
  };

  DatePicker.prototype.updateNativeDate = function () {
    var nativeView = this.nativeViewProtected;
    var year = typeof this.year === "number" ? this.year : nativeView.getYear();
    var month = typeof this.month === "number" ? this.month - 1 : nativeView.getMonth();
    var day = typeof this.day === "number" ? this.day : nativeView.getDayOfMonth();
    this.date = new Date(year, month, day);
  };

  DatePicker.prototype[date_picker_common_1.yearProperty.setNative] = function (value) {
    if (this.nativeViewProtected.getYear() !== value) {
      this.updateNativeDate();
    }
  };

  DatePicker.prototype[date_picker_common_1.monthProperty.setNative] = function (value) {
    if (this.nativeViewProtected.getMonth() !== value - 1) {
      this.updateNativeDate();
    }
  };

  DatePicker.prototype[date_picker_common_1.dayProperty.setNative] = function (value) {
    if (this.nativeViewProtected.getDayOfMonth() !== value) {
      this.updateNativeDate();
    }
  };

  DatePicker.prototype[date_picker_common_1.dateProperty.setNative] = function (value) {
    var nativeView = this.nativeViewProtected;

    if (nativeView.getDayOfMonth() !== value.getDate() || nativeView.getMonth() !== value.getMonth() || nativeView.getYear() !== value.getFullYear()) {
      nativeView.updateDate(value.getFullYear(), value.getMonth(), value.getDate());
    }
  };

  DatePicker.prototype[date_picker_common_1.maxDateProperty.getDefault] = function () {
    return this.nativeViewProtected.getMaxDate();
  };

  DatePicker.prototype[date_picker_common_1.maxDateProperty.setNative] = function (value) {
    var newValue = value instanceof Date ? value.getTime() : value;
    this.nativeViewProtected.setMaxDate(newValue);
  };

  DatePicker.prototype[date_picker_common_1.minDateProperty.getDefault] = function () {
    return this.nativeViewProtected.getMinDate();
  };

  DatePicker.prototype[date_picker_common_1.minDateProperty.setNative] = function (value) {
    var newValue = value instanceof Date ? value.getTime() : value;
    this.nativeViewProtected.setMinDate(newValue);
  };

  return DatePicker;
}(date_picker_common_1.DatePickerBase);

exports.DatePicker = DatePicker;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/dialogs/dialogs-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var types_1 = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

exports.STRING = "string";
exports.PROMPT = "Prompt";
exports.CONFIRM = "Confirm";
exports.ALERT = "Alert";
exports.LOGIN = "Login";
exports.OK = "OK";
exports.CANCEL = "Cancel";
var inputType;

(function (inputType) {
  inputType.text = "text";
  inputType.password = "password";
  inputType.email = "email";
  inputType.number = "number";
  inputType.phone = "phone";
})(inputType = exports.inputType || (exports.inputType = {}));

var capitalizationType;

(function (capitalizationType) {
  capitalizationType.none = "none";
  capitalizationType.all = "all";
  capitalizationType.sentences = "sentences";
  capitalizationType.words = "words";
})(capitalizationType = exports.capitalizationType || (exports.capitalizationType = {}));

var frame;

function getCurrentPage() {
  if (!frame) {
    frame = __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame.js");
  }

  var topmostFrame = frame.topmost();

  if (topmostFrame) {
    return topmostFrame.currentPage;
  }

  return undefined;
}

exports.getCurrentPage = getCurrentPage;

function applySelectors(view, callback) {
  var currentPage = getCurrentPage();

  if (currentPage) {
    var styleScope = currentPage._styleScope;

    if (styleScope) {
      view._inheritStyleScope(styleScope);

      view.onLoaded();
      callback(view);
      view.onUnloaded();
    }
  }
}

var button;
var label;
var textField;

function getButtonColors() {
  if (!button) {
    var Button = __webpack_require__("../node_modules/tns-core-modules/ui/button/button.js").Button;

    button = new Button();

    if (platform_1.isIOS) {
      button._setupUI({});
    }
  }

  var buttonColor;
  var buttonBackgroundColor;
  applySelectors(button, function (btn) {
    buttonColor = btn.color;
    buttonBackgroundColor = btn.backgroundColor;
  });
  return {
    color: buttonColor,
    backgroundColor: buttonBackgroundColor
  };
}

exports.getButtonColors = getButtonColors;

function getLabelColor() {
  if (!label) {
    var Label = __webpack_require__("../node_modules/tns-core-modules/ui/label/label.js").Label;

    label = new Label();

    if (platform_1.isIOS) {
      label._setupUI({});
    }
  }

  var labelColor;
  applySelectors(label, function (lbl) {
    labelColor = lbl.color;
  });
  return labelColor;
}

exports.getLabelColor = getLabelColor;

function getTextFieldColor() {
  if (!textField) {
    var TextField = __webpack_require__("../node_modules/tns-core-modules/ui/text-field/text-field.js").TextField;

    textField = new TextField();

    if (platform_1.isIOS) {
      textField._setupUI({});
    }
  }

  var textFieldColor;
  applySelectors(textField, function (tf) {
    textFieldColor = tf.color;
  });
  return textFieldColor;
}

exports.getTextFieldColor = getTextFieldColor;

function isDialogOptions(arg) {
  return arg && (arg.message || arg.title);
}

exports.isDialogOptions = isDialogOptions;

function parseLoginOptions(args) {
  if (args.length === 1 && types_1.isObject(args[0])) {
    return args[0];
  }

  var options = {
    title: exports.LOGIN,
    okButtonText: exports.OK,
    cancelButtonText: exports.CANCEL
  };

  if (types_1.isString(args[0])) {
    options.message = args[0];
  }

  if (types_1.isString(args[1])) {
    options.userNameHint = args[1];
  }

  if (types_1.isString(args[2])) {
    options.passwordHint = args[2];
  }

  if (types_1.isString(args[3])) {
    options.userName = args[3];
  }

  if (types_1.isString(args[4])) {
    options.password = args[4];
  }

  return options;
}

exports.parseLoginOptions = parseLoginOptions;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/dialogs/dialogs.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var dialogs_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/dialogs/dialogs-common.js");

var application_1 = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/dialogs/dialogs-common.js"));

function isString(value) {
  return typeof value === "string";
}

function createAlertDialog(options) {
  var alert = new android.app.AlertDialog.Builder(application_1.android.foregroundActivity);
  alert.setTitle(options && isString(options.title) ? options.title : "");
  alert.setMessage(options && isString(options.message) ? options.message : "");

  if (options && options.cancelable === false) {
    alert.setCancelable(false);
  }

  return alert;
}

function showDialog(builder) {
  var dlg = builder.show();
  var labelColor = dialogs_common_1.getLabelColor();

  if (labelColor) {
    var textViewId = dlg.getContext().getResources().getIdentifier("android:id/alertTitle", null, null);

    if (textViewId) {
      var tv = dlg.findViewById(textViewId);

      if (tv) {
        tv.setTextColor(labelColor.android);
      }
    }

    var messageTextViewId = dlg.getContext().getResources().getIdentifier("android:id/message", null, null);

    if (messageTextViewId) {
      var messageTextView = dlg.findViewById(messageTextViewId);

      if (messageTextView) {
        messageTextView.setTextColor(labelColor.android);
      }
    }
  }

  var _a = dialogs_common_1.getButtonColors(),
      color = _a.color,
      backgroundColor = _a.backgroundColor;

  if (color) {
    var buttons = [];

    for (var i = 0; i < 3; i++) {
      var id = dlg.getContext().getResources().getIdentifier("android:id/button" + i, null, null);
      buttons[i] = dlg.findViewById(id);
    }

    buttons.forEach(function (button) {
      if (button) {
        if (color) {
          button.setTextColor(color.android);
        }

        if (backgroundColor) {
          button.setBackgroundColor(backgroundColor.android);
        }
      }
    });
  }
}

function addButtonsToAlertDialog(alert, options, callback) {
  if (!options) {
    return;
  }

  if (options.okButtonText) {
    alert.setPositiveButton(options.okButtonText, new android.content.DialogInterface.OnClickListener({
      onClick: function onClick(dialog, id) {
        dialog.cancel();
        callback(true);
      }
    }));
  }

  if (options.cancelButtonText) {
    alert.setNegativeButton(options.cancelButtonText, new android.content.DialogInterface.OnClickListener({
      onClick: function onClick(dialog, id) {
        dialog.cancel();
        callback(false);
      }
    }));
  }

  if (options.neutralButtonText) {
    alert.setNeutralButton(options.neutralButtonText, new android.content.DialogInterface.OnClickListener({
      onClick: function onClick(dialog, id) {
        dialog.cancel();
        callback(undefined);
      }
    }));
  }

  alert.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
    onDismiss: function onDismiss() {
      callback(false);
    }
  }));
}

function alert(arg) {
  return new Promise(function (resolve, reject) {
    try {
      var options = !dialogs_common_1.isDialogOptions(arg) ? {
        title: dialogs_common_1.ALERT,
        okButtonText: dialogs_common_1.OK,
        message: arg + ""
      } : arg;
      var alert_1 = createAlertDialog(options);
      alert_1.setPositiveButton(options.okButtonText, new android.content.DialogInterface.OnClickListener({
        onClick: function onClick(dialog, id) {
          dialog.cancel();
          resolve();
        }
      }));
      alert_1.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
        onDismiss: function onDismiss() {
          resolve();
        }
      }));
      showDialog(alert_1);
    } catch (ex) {
      reject(ex);
    }
  });
}

exports.alert = alert;

function confirm(arg) {
  return new Promise(function (resolve, reject) {
    try {
      var options = !dialogs_common_1.isDialogOptions(arg) ? {
        title: dialogs_common_1.CONFIRM,
        okButtonText: dialogs_common_1.OK,
        cancelButtonText: dialogs_common_1.CANCEL,
        message: arg + ""
      } : arg;
      var alert_2 = createAlertDialog(options);
      addButtonsToAlertDialog(alert_2, options, function (result) {
        resolve(result);
      });
      showDialog(alert_2);
    } catch (ex) {
      reject(ex);
    }
  });
}

exports.confirm = confirm;

function prompt(arg) {
  var options;
  var defaultOptions = {
    title: dialogs_common_1.PROMPT,
    okButtonText: dialogs_common_1.OK,
    cancelButtonText: dialogs_common_1.CANCEL,
    inputType: dialogs_common_1.inputType.text
  };

  if (arguments.length === 1) {
    if (isString(arg)) {
      options = defaultOptions;
      options.message = arg;
    } else {
      options = arg;
    }
  } else if (arguments.length === 2) {
    if (isString(arguments[0]) && isString(arguments[1])) {
      options = defaultOptions;
      options.message = arguments[0];
      options.defaultText = arguments[1];
    }
  }

  return new Promise(function (resolve, reject) {
    try {
      var alert_3 = createAlertDialog(options);
      var input_1 = new android.widget.EditText(application_1.android.foregroundActivity);

      if (options) {
        if (options.inputType === dialogs_common_1.inputType.password) {
          input_1.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD);
        } else if (options.inputType === dialogs_common_1.inputType.email) {
          input_1.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS);
        } else if (options.inputType === dialogs_common_1.inputType.number) {
          input_1.setInputType(android.text.InputType.TYPE_CLASS_NUMBER);
        } else if (options.inputType === dialogs_common_1.inputType.phone) {
          input_1.setInputType(android.text.InputType.TYPE_CLASS_PHONE);
        }

        switch (options.capitalizationType) {
          case dialogs_common_1.capitalizationType.all:
            {
              input_1.setInputType(input_1.getInputType() | android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS);
              break;
            }

          case dialogs_common_1.capitalizationType.sentences:
            {
              input_1.setInputType(input_1.getInputType() | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);
              break;
            }

          case dialogs_common_1.capitalizationType.words:
            {
              input_1.setInputType(input_1.getInputType() | android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS);
              break;
            }
        }
      }

      input_1.setText(options && options.defaultText || "");
      alert_3.setView(input_1);

      var getText_1 = function getText_1() {
        return input_1.getText().toString();
      };

      addButtonsToAlertDialog(alert_3, options, function (r) {
        resolve({
          result: r,
          text: getText_1()
        });
      });
      showDialog(alert_3);
    } catch (ex) {
      reject(ex);
    }
  });
}

exports.prompt = prompt;

function login() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  var options = dialogs_common_1.parseLoginOptions(args);
  return new Promise(function (resolve, reject) {
    try {
      var context_1 = application_1.android.foregroundActivity;
      var alert_4 = createAlertDialog(options);
      var userNameInput_1 = new android.widget.EditText(context_1);
      userNameInput_1.setHint(options.userNameHint ? options.userNameHint : "");
      userNameInput_1.setText(options.userName ? options.userName : "");
      var passwordInput_1 = new android.widget.EditText(context_1);
      passwordInput_1.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD);
      passwordInput_1.setTypeface(android.graphics.Typeface.DEFAULT);
      passwordInput_1.setHint(options.userNameHint ? options.userNameHint : "");
      passwordInput_1.setText(options.password ? options.password : "");
      var layout = new android.widget.LinearLayout(context_1);
      layout.setOrientation(1);
      layout.addView(userNameInput_1);
      layout.addView(passwordInput_1);
      alert_4.setView(layout);
      addButtonsToAlertDialog(alert_4, options, function (r) {
        resolve({
          result: r,
          userName: userNameInput_1.getText().toString(),
          password: passwordInput_1.getText().toString()
        });
      });
      showDialog(alert_4);
    } catch (ex) {
      reject(ex);
    }
  });
}

exports.login = login;

function action(arg) {
  var options;
  var defaultOptions = {
    title: null,
    cancelButtonText: dialogs_common_1.CANCEL
  };

  if (arguments.length === 1) {
    if (isString(arguments[0])) {
      options = defaultOptions;
      options.message = arguments[0];
    } else {
      options = arguments[0];
    }
  } else if (arguments.length === 2) {
    if (isString(arguments[0]) && isString(arguments[1])) {
      options = defaultOptions;
      options.message = arguments[0];
      options.cancelButtonText = arguments[1];
    }
  } else if (arguments.length === 3) {
    if (isString(arguments[0]) && isString(arguments[1]) && typeof arguments[2] !== "undefined") {
      options = defaultOptions;
      options.message = arguments[0];
      options.cancelButtonText = arguments[1];
      options.actions = arguments[2];
    }
  }

  return new Promise(function (resolve, reject) {
    try {
      var activity = application_1.android.foregroundActivity || application_1.android.startActivity;
      var alert_5 = new android.app.AlertDialog.Builder(activity);
      var message = options && isString(options.message) ? options.message : "";
      var title = options && isString(options.title) ? options.title : "";

      if (options && options.cancelable === false) {
        alert_5.setCancelable(false);
      }

      if (title) {
        alert_5.setTitle(title);

        if (!options.actions) {
          alert_5.setMessage(message);
        }
      } else {
        alert_5.setTitle(message);
      }

      if (options.actions) {
        alert_5.setItems(options.actions, new android.content.DialogInterface.OnClickListener({
          onClick: function onClick(dialog, which) {
            resolve(options.actions[which]);
          }
        }));
      }

      if (isString(options.cancelButtonText)) {
        alert_5.setNegativeButton(options.cancelButtonText, new android.content.DialogInterface.OnClickListener({
          onClick: function onClick(dialog, id) {
            dialog.cancel();
            resolve(options.cancelButtonText);
          }
        }));
      }

      alert_5.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
        onDismiss: function onDismiss() {
          if (isString(options.cancelButtonText)) {
            resolve(options.cancelButtonText);
          } else {
            resolve("");
          }
        }
      }));
      showDialog(alert_5);
    } catch (ex) {
      reject(ex);
    }
  });
}

exports.action = action;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var text_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base.js"));

var EditableTextBase = function (_super) {
  __extends(EditableTextBase, _super);

  function EditableTextBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  EditableTextBase.blurEvent = "blur";
  EditableTextBase.focusEvent = "focus";
  return EditableTextBase;
}(text_base_1.TextBase);

exports.EditableTextBase = EditableTextBase;
exports.placeholderColorProperty = new text_base_1.CssProperty({
  name: "placeholderColor",
  cssName: "placeholder-color",
  equalityComparer: text_base_1.Color.equals,
  valueConverter: function valueConverter(v) {
    return new text_base_1.Color(v);
  }
});
exports.placeholderColorProperty.register(text_base_1.Style);
var keyboardTypeConverter = text_base_1.makeParser(text_base_1.makeValidator("datetime", "phone", "number", "url", "email"));
exports.keyboardTypeProperty = new text_base_1.Property({
  name: "keyboardType",
  valueConverter: keyboardTypeConverter
});
exports.keyboardTypeProperty.register(EditableTextBase);
var returnKeyTypeConverter = text_base_1.makeParser(text_base_1.makeValidator("done", "next", "go", "search", "send"));
exports.returnKeyTypeProperty = new text_base_1.Property({
  name: "returnKeyType",
  valueConverter: returnKeyTypeConverter
});
exports.returnKeyTypeProperty.register(EditableTextBase);
exports.editableProperty = new text_base_1.Property({
  name: "editable",
  defaultValue: true,
  valueConverter: text_base_1.booleanConverter
});
exports.editableProperty.register(EditableTextBase);
exports.updateTextTriggerProperty = new text_base_1.Property({
  name: "updateTextTrigger",
  defaultValue: "textChanged"
});
exports.updateTextTriggerProperty.register(EditableTextBase);
var autocapitalizationTypeConverter = text_base_1.makeParser(text_base_1.makeValidator("none", "words", "sentences", "allcharacters"));
exports.autocapitalizationTypeProperty = new text_base_1.Property({
  name: "autocapitalizationType",
  defaultValue: "sentences",
  valueConverter: autocapitalizationTypeConverter
});
exports.autocapitalizationTypeProperty.register(EditableTextBase);
exports.autocorrectProperty = new text_base_1.Property({
  name: "autocorrect",
  valueConverter: text_base_1.booleanConverter
});
exports.autocorrectProperty.register(EditableTextBase);
exports.hintProperty = new text_base_1.Property({
  name: "hint",
  defaultValue: ""
});
exports.hintProperty.register(EditableTextBase);
exports.maxLengthProperty = new text_base_1.Property({
  name: "maxLength",
  defaultValue: Number.POSITIVE_INFINITY,
  valueConverter: parseInt
});
exports.maxLengthProperty.register(EditableTextBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var editable_text_base_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base-common.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base-common.js"));

var EditTextListeners;

function clearDismissTimer() {
  exports.dismissKeyboardOwner = null;

  if (exports.dismissKeyboardTimeoutId) {
    clearTimeout(exports.dismissKeyboardTimeoutId);
    exports.dismissKeyboardTimeoutId = null;
  }
}

function dismissSoftInput(owner) {
  clearDismissTimer();

  if (!exports.dismissKeyboardTimeoutId) {
    exports.dismissKeyboardTimeoutId = setTimeout(function () {
      var owner = exports.dismissKeyboardOwner && exports.dismissKeyboardOwner.get();
      var activity = owner && owner._context;
      var nativeView = owner && owner.nativeViewProtected;
      exports.dismissKeyboardTimeoutId = null;
      exports.dismissKeyboardOwner = null;
      var focused = activity && activity.getCurrentFocus();

      if (!focused || !(focused instanceof android.widget.EditText)) {
        utils_1.ad.dismissSoftInput(nativeView);
      }
    }, 10);
  }
}

function initializeEditTextListeners() {
  if (EditTextListeners) {
    return;
  }

  var EditTextListenersImpl = function (_super) {
    __extends(EditTextListenersImpl, _super);

    function EditTextListenersImpl(owner) {
      var _this = _super.call(this) || this;

      _this.owner = owner;
      return global.__native(_this);
    }

    EditTextListenersImpl.prototype.beforeTextChanged = function (text, start, count, after) {};

    EditTextListenersImpl.prototype.onTextChanged = function (text, start, before, count) {};

    EditTextListenersImpl.prototype.afterTextChanged = function (editable) {
      var owner = this.owner;

      if (!owner || owner._changeFromCode) {
        return;
      }

      switch (owner.updateTextTrigger) {
        case "focusLost":
          owner._dirtyTextAccumulator = editable.toString();
          break;

        case "textChanged":
          editable_text_base_common_1.textProperty.nativeValueChange(owner, editable.toString());
          break;

        default:
          throw new Error("Invalid updateTextTrigger: " + owner.updateTextTrigger);
      }
    };

    EditTextListenersImpl.prototype.onFocusChange = function (view, hasFocus) {
      var owner = this.owner;

      if (!owner) {
        return;
      }

      if (hasFocus) {
        clearDismissTimer();
        owner.notify({
          eventName: EditableTextBase.focusEvent,
          object: owner
        });
      } else {
        if (owner._dirtyTextAccumulator || owner._dirtyTextAccumulator === "") {
          editable_text_base_common_1.textProperty.nativeValueChange(owner, owner._dirtyTextAccumulator);
          owner._dirtyTextAccumulator = undefined;
        }

        owner.notify({
          eventName: EditableTextBase.blurEvent,
          object: owner
        });
        dismissSoftInput(owner);
      }
    };

    EditTextListenersImpl.prototype.onEditorAction = function (textView, actionId, event) {
      var owner = this.owner;

      if (!owner) {
        return false;
      }

      if (actionId === android.view.inputmethod.EditorInfo.IME_ACTION_DONE || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_UNSPECIFIED || event && event.getKeyCode() === android.view.KeyEvent.KEYCODE_ENTER) {
        if (textView.getMaxLines() === 1) {
          owner.dismissSoftInput();
        }

        owner._onReturnPress();
      } else if (actionId === android.view.inputmethod.EditorInfo.IME_ACTION_NEXT || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_PREVIOUS) {
        owner._onReturnPress();
      }

      return false;
    };

    EditTextListenersImpl = __decorate([Interfaces([android.text.TextWatcher, android.view.View.OnFocusChangeListener, android.widget.TextView.OnEditorActionListener])], EditTextListenersImpl);
    return EditTextListenersImpl;
  }(java.lang.Object);

  EditTextListeners = EditTextListenersImpl;
}

var EditableTextBase = function (_super) {
  __extends(EditableTextBase, _super);

  function EditableTextBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  EditableTextBase.prototype._onReturnPress = function () {};

  EditableTextBase.prototype.createNativeView = function () {
    return new android.widget.EditText(this._context);
  };

  EditableTextBase.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    var editText = this.nativeTextViewProtected;

    this._configureEditText(editText);

    initializeEditTextListeners();
    var listeners = new EditTextListeners(this);
    editText.addTextChangedListener(listeners);
    editText.setOnFocusChangeListener(listeners);
    editText.setOnEditorActionListener(listeners);
    editText.listener = listeners;
    this._inputType = editText.getInputType();
  };

  EditableTextBase.prototype.disposeNativeView = function () {
    this.nativeTextViewProtected.listener.owner = null;
    this._keyListenerCache = null;

    _super.prototype.disposeNativeView.call(this);
  };

  EditableTextBase.prototype.resetNativeView = function () {
    _super.prototype.resetNativeView.call(this);

    this.nativeTextViewProtected.setInputType(this._inputType);
  };

  EditableTextBase.prototype.onUnloaded = function () {
    this.dismissSoftInput();

    _super.prototype.onUnloaded.call(this);
  };

  EditableTextBase.prototype.dismissSoftInput = function () {
    var nativeView = this.nativeTextViewProtected;

    if (!nativeView) {
      return;
    }

    utils_1.ad.dismissSoftInput(nativeView);
  };

  EditableTextBase.prototype.focus = function () {
    var nativeView = this.nativeTextViewProtected;

    if (!nativeView) {
      return;
    }

    var result = _super.prototype.focus.call(this);

    if (result) {
      utils_1.ad.showSoftInput(this.nativeTextViewProtected);
    }

    return result;
  };

  EditableTextBase.prototype._setInputType = function (inputType) {
    var nativeView = this.nativeTextViewProtected;

    try {
      this._changeFromCode = true;
      nativeView.setInputType(inputType);
    } finally {
      this._changeFromCode = false;
    }

    var listener = nativeView.getKeyListener();

    if (listener) {
      this._keyListenerCache = listener;
    }

    if (!this.editable) {
      nativeView.setKeyListener(null);
    }
  };

  EditableTextBase.prototype[editable_text_base_common_1.textProperty.getDefault] = function () {
    return editable_text_base_common_1.resetSymbol;
  };

  EditableTextBase.prototype[editable_text_base_common_1.textProperty.setNative] = function (value) {
    try {
      this._changeFromCode = true;

      this._setNativeText(value === editable_text_base_common_1.resetSymbol);
    } finally {
      this._changeFromCode = false;
    }
  };

  EditableTextBase.prototype[editable_text_base_common_1.keyboardTypeProperty.getDefault] = function () {
    return this.nativeTextViewProtected.getInputType();
  };

  EditableTextBase.prototype[editable_text_base_common_1.keyboardTypeProperty.setNative] = function (value) {
    var newInputType;

    switch (value) {
      case "datetime":
        newInputType = android.text.InputType.TYPE_CLASS_DATETIME | android.text.InputType.TYPE_DATETIME_VARIATION_NORMAL;
        break;

      case "phone":
        newInputType = android.text.InputType.TYPE_CLASS_PHONE;
        break;

      case "number":
        newInputType = android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_VARIATION_NORMAL | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED | android.text.InputType.TYPE_NUMBER_FLAG_DECIMAL;
        break;

      case "url":
        newInputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_URI;
        break;

      case "email":
        newInputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS;
        break;

      default:
        newInputType = value;
        break;
    }

    this._setInputType(newInputType);
  };

  EditableTextBase.prototype[editable_text_base_common_1.returnKeyTypeProperty.getDefault] = function () {
    var ime = this.nativeTextViewProtected.getImeOptions();

    switch (ime) {
      case android.view.inputmethod.EditorInfo.IME_ACTION_DONE:
        return "done";

      case android.view.inputmethod.EditorInfo.IME_ACTION_GO:
        return "go";

      case android.view.inputmethod.EditorInfo.IME_ACTION_NEXT:
        return "next";

      case android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH:
        return "search";

      case android.view.inputmethod.EditorInfo.IME_ACTION_SEND:
        return "send";

      default:
        return ime.toString();
    }
  };

  EditableTextBase.prototype[editable_text_base_common_1.returnKeyTypeProperty.setNative] = function (value) {
    var newImeOptions;

    switch (value) {
      case "done":
        newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_DONE;
        break;

      case "go":
        newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_GO;
        break;

      case "next":
        newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_NEXT;
        break;

      case "search":
        newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH;
        break;

      case "send":
        newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_SEND;
        break;

      default:
        var ime = +value;

        if (!isNaN(ime)) {
          newImeOptions = ime;
        } else {
          newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_UNSPECIFIED;
        }

        break;
    }

    this.nativeTextViewProtected.setImeOptions(newImeOptions);
  };

  EditableTextBase.prototype[editable_text_base_common_1.editableProperty.setNative] = function (value) {
    var nativeView = this.nativeTextViewProtected;

    if (value) {
      nativeView.setKeyListener(this._keyListenerCache);
    } else {
      if (!this._keyListenerCache) {
        this._keyListenerCache = nativeView.getKeyListener();
      }

      nativeView.setKeyListener(null);
    }
  };

  EditableTextBase.prototype[editable_text_base_common_1.autocapitalizationTypeProperty.getDefault] = function () {
    var inputType = this.nativeTextViewProtected.getInputType();

    if ((inputType & android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS) === android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS) {
      return "words";
    } else if ((inputType & android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES) === android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES) {
      return "sentences";
    } else if ((inputType & android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS) === android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS) {
      return "allcharacters";
    } else {
      return inputType.toString();
    }
  };

  EditableTextBase.prototype[editable_text_base_common_1.autocapitalizationTypeProperty.setNative] = function (value) {
    var inputType = this.nativeTextViewProtected.getInputType();
    inputType = inputType & ~28672;

    switch (value) {
      case "none":
        break;

      case "words":
        inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS;
        break;

      case "sentences":
        inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
        break;

      case "allcharacters":
        inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS;
        break;

      default:
        var number = +value;

        if (!isNaN(number)) {
          inputType = number;
        } else {
          inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
        }

        break;
    }

    this._setInputType(inputType);
  };

  EditableTextBase.prototype[editable_text_base_common_1.autocorrectProperty.getDefault] = function () {
    var autocorrect = this.nativeTextViewProtected.getInputType();

    if ((autocorrect & android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT) === android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT) {
      return true;
    }

    return false;
  };

  EditableTextBase.prototype[editable_text_base_common_1.autocorrectProperty.setNative] = function (value) {
    var inputType = this.nativeTextViewProtected.getInputType();

    switch (value) {
      case true:
        inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE;
        inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
        inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
        break;

      case false:
        inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE;
        inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
        inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
        break;

      default:
        break;
    }

    this._setInputType(inputType);
  };

  EditableTextBase.prototype[editable_text_base_common_1.hintProperty.getDefault] = function () {
    return this.nativeTextViewProtected.getHint();
  };

  EditableTextBase.prototype[editable_text_base_common_1.hintProperty.setNative] = function (value) {
    var text = value === null || value === undefined ? null : value.toString();
    this.nativeTextViewProtected.setHint(text);
  };

  EditableTextBase.prototype[editable_text_base_common_1.placeholderColorProperty.getDefault] = function () {
    return this.nativeTextViewProtected.getHintTextColors();
  };

  EditableTextBase.prototype[editable_text_base_common_1.placeholderColorProperty.setNative] = function (value) {
    var color = value instanceof editable_text_base_common_1.Color ? value.android : value;
    this.nativeTextViewProtected.setHintTextColor(color);
  };

  EditableTextBase.prototype[editable_text_base_common_1.textTransformProperty.setNative] = function (value) {};

  EditableTextBase.prototype[editable_text_base_common_1.maxLengthProperty.setNative] = function (value) {
    if (value === Number.POSITIVE_INFINITY) {
      this.nativeTextViewProtected.setFilters([]);
    } else {
      var lengthFilter = new android.text.InputFilter.LengthFilter(value);
      var filters = this.nativeTextViewProtected.getFilters();
      var newFilters = [];

      for (var i = 0; i < filters.length; i++) {
        var filter = filters[i];

        if (!(filter instanceof android.text.InputFilter.LengthFilter)) {
          newFilters.push(filter);
        }
      }

      newFilters.push(lengthFilter);
      this.nativeTextViewProtected.setFilters(newFilters);
    }
  };

  return EditableTextBase;
}(editable_text_base_common_1.EditableTextBase);

exports.EditableTextBase = EditableTextBase;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/enums/enums.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var KeyboardType;

(function (KeyboardType) {
  KeyboardType.datetime = "datetime";
  KeyboardType.phone = "phone";
  KeyboardType.number = "number";
  KeyboardType.url = "url";
  KeyboardType.email = "email";
})(KeyboardType = exports.KeyboardType || (exports.KeyboardType = {}));

var ReturnKeyType;

(function (ReturnKeyType) {
  ReturnKeyType.done = "done";
  ReturnKeyType.next = "next";
  ReturnKeyType.go = "go";
  ReturnKeyType.search = "search";
  ReturnKeyType.send = "send";
})(ReturnKeyType = exports.ReturnKeyType || (exports.ReturnKeyType = {}));

var TextAlignment;

(function (TextAlignment) {
  TextAlignment.left = "left";
  TextAlignment.center = "center";
  TextAlignment.right = "right";
})(TextAlignment = exports.TextAlignment || (exports.TextAlignment = {}));

var TextDecoration;

(function (TextDecoration) {
  TextDecoration.none = "none";
  TextDecoration.underline = "underline";
  TextDecoration.lineThrough = "line-through";
})(TextDecoration = exports.TextDecoration || (exports.TextDecoration = {}));

var TextTransform;

(function (TextTransform) {
  TextTransform.none = "none";
  TextTransform.capitalize = "capitalize";
  TextTransform.uppercase = "uppercase";
  TextTransform.lowercase = "lowercase";
})(TextTransform = exports.TextTransform || (exports.TextTransform = {}));

var WhiteSpace;

(function (WhiteSpace) {
  WhiteSpace.normal = "normal";
  WhiteSpace.nowrap = "nowrap";
})(WhiteSpace = exports.WhiteSpace || (exports.WhiteSpace = {}));

var Orientation;

(function (Orientation) {
  Orientation.horizontal = "horizontal";
  Orientation.vertical = "vertical";
})(Orientation = exports.Orientation || (exports.Orientation = {}));

var DeviceOrientation;

(function (DeviceOrientation) {
  DeviceOrientation.portrait = "portrait";
  DeviceOrientation.landscape = "landscape";
  DeviceOrientation.unknown = "unknown";
})(DeviceOrientation = exports.DeviceOrientation || (exports.DeviceOrientation = {}));

var HorizontalAlignment;

(function (HorizontalAlignment) {
  HorizontalAlignment.left = "left";
  HorizontalAlignment.center = "center";
  HorizontalAlignment.right = "right";
  HorizontalAlignment.stretch = "stretch";
})(HorizontalAlignment = exports.HorizontalAlignment || (exports.HorizontalAlignment = {}));

var VerticalAlignment;

(function (VerticalAlignment) {
  VerticalAlignment.top = "top";
  VerticalAlignment.middle = "middle";
  VerticalAlignment.bottom = "bottom";
  VerticalAlignment.stretch = "stretch";
})(VerticalAlignment = exports.VerticalAlignment || (exports.VerticalAlignment = {}));

var Stretch;

(function (Stretch) {
  Stretch.none = "none";
  Stretch.aspectFill = "aspectFill";
  Stretch.aspectFit = "aspectFit";
  Stretch.fill = "fill";
})(Stretch = exports.Stretch || (exports.Stretch = {}));

var Visibility;

(function (Visibility) {
  Visibility.visible = "visible";
  Visibility.collapse = "collapse";
  Visibility.collapsed = "collapsed";
})(Visibility = exports.Visibility || (exports.Visibility = {}));

var FontAttributes;

(function (FontAttributes) {
  FontAttributes.Normal = 0;
  FontAttributes.Bold = 1;
  FontAttributes.Italic = 1 << 1;
})(FontAttributes = exports.FontAttributes || (exports.FontAttributes = {}));

var DeviceType;

(function (DeviceType) {
  DeviceType.Phone = "Phone";
  DeviceType.Tablet = "Tablet";
})(DeviceType = exports.DeviceType || (exports.DeviceType = {}));

var UpdateTextTrigger;

(function (UpdateTextTrigger) {
  UpdateTextTrigger.focusLost = "focusLost";
  UpdateTextTrigger.textChanged = "textChanged";
})(UpdateTextTrigger = exports.UpdateTextTrigger || (exports.UpdateTextTrigger = {}));

var Accuracy;

(function (Accuracy) {
  Accuracy.any = 300;
  Accuracy.high = 3;
})(Accuracy = exports.Accuracy || (exports.Accuracy = {}));

var Dock;

(function (Dock) {
  Dock.left = "left";
  Dock.top = "top";
  Dock.right = "right";
  Dock.bottom = "bottom";
})(Dock = exports.Dock || (exports.Dock = {}));

var AutocapitalizationType;

(function (AutocapitalizationType) {
  AutocapitalizationType.none = "none";
  AutocapitalizationType.words = "words";
  AutocapitalizationType.sentences = "sentences";
  AutocapitalizationType.allCharacters = "allcharacters";
})(AutocapitalizationType = exports.AutocapitalizationType || (exports.AutocapitalizationType = {}));

var NavigationBarVisibility;

(function (NavigationBarVisibility) {
  NavigationBarVisibility.auto = "auto";
  NavigationBarVisibility.never = "never";
  NavigationBarVisibility.always = "always";
})(NavigationBarVisibility = exports.NavigationBarVisibility || (exports.NavigationBarVisibility = {}));

var AndroidActionBarIconVisibility;

(function (AndroidActionBarIconVisibility) {
  AndroidActionBarIconVisibility.auto = "auto";
  AndroidActionBarIconVisibility.never = "never";
  AndroidActionBarIconVisibility.always = "always";
})(AndroidActionBarIconVisibility = exports.AndroidActionBarIconVisibility || (exports.AndroidActionBarIconVisibility = {}));

var AndroidActionItemPosition;

(function (AndroidActionItemPosition) {
  AndroidActionItemPosition.actionBar = "actionBar";
  AndroidActionItemPosition.actionBarIfRoom = "actionBarIfRoom";
  AndroidActionItemPosition.popup = "popup";
})(AndroidActionItemPosition = exports.AndroidActionItemPosition || (exports.AndroidActionItemPosition = {}));

var IOSActionItemPosition;

(function (IOSActionItemPosition) {
  IOSActionItemPosition.left = "left";
  IOSActionItemPosition.right = "right";
})(IOSActionItemPosition = exports.IOSActionItemPosition || (exports.IOSActionItemPosition = {}));

var ImageFormat;

(function (ImageFormat) {
  ImageFormat.png = "png";
  ImageFormat.jpeg = "jpeg";
  ImageFormat.jpg = "jpg";
})(ImageFormat = exports.ImageFormat || (exports.ImageFormat = {}));

var FontStyle;

(function (FontStyle) {
  FontStyle.normal = "normal";
  FontStyle.italic = "italic";
})(FontStyle = exports.FontStyle || (exports.FontStyle = {}));

var FontWeight;

(function (FontWeight) {
  FontWeight.thin = "100";
  FontWeight.extraLight = "200";
  FontWeight.light = "300";
  FontWeight.normal = "normal";
  FontWeight.medium = "500";
  FontWeight.semiBold = "600";
  FontWeight.bold = "bold";
  FontWeight.extraBold = "800";
  FontWeight.black = "900";
})(FontWeight = exports.FontWeight || (exports.FontWeight = {}));

var BackgroundRepeat;

(function (BackgroundRepeat) {
  BackgroundRepeat.repeat = "repeat";
  BackgroundRepeat.repeatX = "repeat-x";
  BackgroundRepeat.repeatY = "repeat-y";
  BackgroundRepeat.noRepeat = "no-repeat";
})(BackgroundRepeat = exports.BackgroundRepeat || (exports.BackgroundRepeat = {}));

var animationModule;
var AnimationCurve;

(function (AnimationCurve) {
  AnimationCurve.ease = "ease";
  AnimationCurve.easeIn = "easeIn";
  AnimationCurve.easeOut = "easeOut";
  AnimationCurve.easeInOut = "easeInOut";
  AnimationCurve.linear = "linear";
  AnimationCurve.spring = "spring";

  function cubicBezier(x1, y1, x2, y2) {
    animationModule = animationModule || __webpack_require__("../node_modules/tns-core-modules/ui/animation/animation.js");
    return new animationModule.CubicBezierAnimationCurve(x1, y1, x2, y2);
  }

  AnimationCurve.cubicBezier = cubicBezier;
})(AnimationCurve = exports.AnimationCurve || (exports.AnimationCurve = {}));

var StatusBarStyle;

(function (StatusBarStyle) {
  StatusBarStyle.light = "light";
  StatusBarStyle.dark = "dark";
})(StatusBarStyle = exports.StatusBarStyle || (exports.StatusBarStyle = {}));

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/frame/activity.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var frame_1 = __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame.js");

var globals = __webpack_require__("../node_modules/tns-core-modules/globals/globals.js");

var appModule = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

if (global.__snapshot || global.__snapshotEnabled) {
  globals.install();
}

var NativeScriptActivity = function (_super) {
  __extends(NativeScriptActivity, _super);

  function NativeScriptActivity() {
    var _this = _super.call(this) || this;

    return global.__native(_this);
  }

  NativeScriptActivity.prototype.onCreate = function (savedInstanceState) {
    appModule.android.init(this.getApplication());
    this.isNativeScriptActivity = true;

    if (!this._callbacks) {
      frame_1.setActivityCallbacks(this);
    }

    this._callbacks.onCreate(this, savedInstanceState, _super.prototype.onCreate);
  };

  NativeScriptActivity.prototype.onNewIntent = function (intent) {
    _super.prototype.onNewIntent.call(this, intent);

    _super.prototype.setIntent.call(this, intent);
  };

  NativeScriptActivity.prototype.onSaveInstanceState = function (outState) {
    this._callbacks.onSaveInstanceState(this, outState, _super.prototype.onSaveInstanceState);
  };

  NativeScriptActivity.prototype.onStart = function () {
    this._callbacks.onStart(this, _super.prototype.onStart);
  };

  NativeScriptActivity.prototype.onStop = function () {
    this._callbacks.onStop(this, _super.prototype.onStop);
  };

  NativeScriptActivity.prototype.onDestroy = function () {
    this._callbacks.onDestroy(this, _super.prototype.onDestroy);
  };

  NativeScriptActivity.prototype.onBackPressed = function () {
    this._callbacks.onBackPressed(this, _super.prototype.onBackPressed);
  };

  NativeScriptActivity.prototype.onRequestPermissionsResult = function (requestCode, permissions, grantResults) {
    this._callbacks.onRequestPermissionsResult(this, requestCode, permissions, grantResults, undefined);
  };

  NativeScriptActivity.prototype.onActivityResult = function (requestCode, resultCode, data) {
    this._callbacks.onActivityResult(this, requestCode, resultCode, data, _super.prototype.onActivityResult);
  };

  NativeScriptActivity = __decorate([JavaProxy("com.tns.NativeScriptActivity")], NativeScriptActivity);
  return NativeScriptActivity;
}(android.support.v7.app.AppCompatActivity);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/frame/fragment.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var frame_1 = __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame.js");

var FragmentClass = function (_super) {
  __extends(FragmentClass, _super);

  function FragmentClass() {
    var _this = _super.call(this) || this;

    return global.__native(_this);
  }

  FragmentClass.prototype.onHiddenChanged = function (hidden) {
    this._callbacks.onHiddenChanged(this, hidden, _super.prototype.onHiddenChanged);
  };

  FragmentClass.prototype.onCreateAnimator = function (transit, enter, nextAnim) {
    return this._callbacks.onCreateAnimator(this, transit, enter, nextAnim, _super.prototype.onCreateAnimator);
  };

  FragmentClass.prototype.onStop = function () {
    this._callbacks.onStop(this, _super.prototype.onStop);
  };

  FragmentClass.prototype.onCreate = function (savedInstanceState) {
    if (!this._callbacks) {
      frame_1.setFragmentCallbacks(this);
    }

    this.setHasOptionsMenu(true);

    this._callbacks.onCreate(this, savedInstanceState, _super.prototype.onCreate);
  };

  FragmentClass.prototype.onCreateView = function (inflater, container, savedInstanceState) {
    var result = this._callbacks.onCreateView(this, inflater, container, savedInstanceState, _super.prototype.onCreateView);

    return result;
  };

  FragmentClass.prototype.onSaveInstanceState = function (outState) {
    this._callbacks.onSaveInstanceState(this, outState, _super.prototype.onSaveInstanceState);
  };

  FragmentClass.prototype.onDestroyView = function () {
    this._callbacks.onDestroyView(this, _super.prototype.onDestroyView);
  };

  FragmentClass.prototype.onDestroy = function () {
    this._callbacks.onDestroy(this, _super.prototype.onDestroy);
  };

  FragmentClass.prototype.toString = function () {
    var callbacks = this._callbacks;

    if (callbacks) {
      return callbacks.toStringOverride(this, _super.prototype.toString);
    } else {
      _super.prototype.toString.call(this);
    }
  };

  FragmentClass = __decorate([JavaProxy("com.tns.FragmentClass")], FragmentClass);
  return FragmentClass;
}(org.nativescript.widgets.FragmentBase);

frame_1.setFragmentClass(FragmentClass);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/frame/fragment.transitions.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var transition_1 = __webpack_require__("../node_modules/tns-core-modules/ui/transition/transition.js");

var slide_transition_1 = __webpack_require__("../node_modules/tns-core-modules/ui/transition/slide-transition.js");

var fade_transition_1 = __webpack_require__("../node_modules/tns-core-modules/ui/transition/fade-transition.js");

var flip_transition_1 = __webpack_require__("../node_modules/tns-core-modules/ui/transition/flip-transition.js");

var animation_1 = __webpack_require__("../node_modules/tns-core-modules/ui/animation/animation.js");

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var lazy_1 = __webpack_require__("../node_modules/tns-core-modules/utils/lazy.js");

var trace_1 = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

var sdkVersion = lazy_1.default(function () {
  return parseInt(platform_1.device.sdkVersion);
});
var intEvaluator = lazy_1.default(function () {
  return new android.animation.IntEvaluator();
});
var defaultInterpolator = lazy_1.default(function () {
  return new android.view.animation.AccelerateDecelerateInterpolator();
});
exports.waitingQueue = new Map();
exports.completedEntries = new Map();
var TransitionListener;
var AnimationListener;

function _setAndroidFragmentTransitions(animated, navigationTransition, currentEntry, newEntry, fragmentTransaction, frameId) {
  var currentFragment = currentEntry ? currentEntry.fragment : null;
  var newFragment = newEntry.fragment;
  var entries = exports.waitingQueue.get(frameId);

  if (entries && entries.size > 0) {
    throw new Error("Calling navigation before previous navigation finish.");
  }

  if (sdkVersion() >= 21) {
    allowTransitionOverlap(currentFragment);
    allowTransitionOverlap(newFragment);
  }

  var name = "";
  var transition;

  if (navigationTransition) {
    transition = navigationTransition.instance;
    name = navigationTransition.name ? navigationTransition.name.toLowerCase() : "";
  }

  var useLollipopTransition = !!(name && (name.indexOf("slide") === 0 || name === "fade" || name === "explode") && sdkVersion() >= 21);

  if (currentFragment && currentFragment.getChildFragmentManager() && currentFragment.getChildFragmentManager().getFragments().toArray().length > 0) {
    useLollipopTransition = false;
  }

  if (!animated) {
    name = "none";
  } else if (transition) {
    name = "custom";
    useLollipopTransition = false;
  } else if (!useLollipopTransition && name.indexOf("slide") !== 0 && name !== "fade" && name.indexOf("flip") !== 0) {
    name = "default";
  }

  var currentFragmentNeedsDifferentAnimation = false;

  if (currentEntry) {
    _updateTransitions(currentEntry);

    if (currentEntry.transitionName !== name || currentEntry.transition !== transition) {
      clearExitAndReenterTransitions(currentEntry, true);
      currentFragmentNeedsDifferentAnimation = true;
    }
  }

  if (name === "none") {
    transition = new NoTransition(0, null);
  } else if (name === "default") {
    transition = new fade_transition_1.FadeTransition(150, null);
  } else if (useLollipopTransition) {
    if (name.indexOf("slide") === 0) {
      setupNewFragmentSlideTransition(navigationTransition, newEntry, name);

      if (currentFragmentNeedsDifferentAnimation) {
        setupCurrentFragmentSlideTransition(navigationTransition, currentEntry, name);
      }
    } else if (name === "fade") {
      setupNewFragmentFadeTransition(navigationTransition, newEntry);

      if (currentFragmentNeedsDifferentAnimation) {
        setupCurrentFragmentFadeTransition(navigationTransition, currentEntry);
      }
    } else if (name === "explode") {
      setupNewFragmentExplodeTransition(navigationTransition, newEntry);

      if (currentFragmentNeedsDifferentAnimation) {
        setupCurrentFragmentExplodeTransition(navigationTransition, currentEntry);
      }
    }
  } else if (name.indexOf("slide") === 0) {
    var direction = name.substr("slide".length) || "left";
    transition = new slide_transition_1.SlideTransition(direction, navigationTransition.duration, navigationTransition.curve);
  } else if (name === "fade") {
    transition = new fade_transition_1.FadeTransition(navigationTransition.duration, navigationTransition.curve);
  } else if (name.indexOf("flip") === 0) {
    var direction = name.substr("flip".length) || "right";
    transition = new flip_transition_1.FlipTransition(direction, navigationTransition.duration, navigationTransition.curve);
  }

  newEntry.transitionName = name;

  if (name === "custom") {
    newEntry.transition = transition;
  }

  if (transition) {
    fragmentTransaction.setCustomAnimations(-10, -20);
    setupAllAnimation(newEntry, transition);

    if (currentFragmentNeedsDifferentAnimation) {
      setupExitAndPopEnterAnimation(currentEntry, transition);
    }
  }

  if (currentEntry) {
    currentEntry.transitionName = name;

    if (name === "custom") {
      currentEntry.transition = transition;
    }
  }

  setupDefaultAnimations(newEntry, new fade_transition_1.FadeTransition(150, null));
  printTransitions(currentEntry);
  printTransitions(newEntry);
}

exports._setAndroidFragmentTransitions = _setAndroidFragmentTransitions;

function _onFragmentCreateAnimator(entry, fragment, nextAnim, enter) {
  var animator;

  switch (nextAnim) {
    case -10:
      animator = entry.enterAnimator;
      break;

    case -20:
      animator = entry.exitAnimator;
      break;

    case -30:
      animator = entry.popEnterAnimator;
      break;

    case -40:
      animator = entry.popExitAnimator;
      break;
  }

  if (!animator && sdkVersion() >= 21) {
    var view = fragment.getView();
    var jsParent = entry.resolvedPage.parent;
    var parent_1 = view.getParent() || jsParent && jsParent.nativeViewProtected;

    var animatedEntries = _getAnimatedEntries(entry.frameId);

    if (!animatedEntries || !animatedEntries.has(entry)) {
      if (parent_1 && !parent_1.isLaidOut()) {
        animator = enter ? entry.defaultEnterAnimator : entry.defaultExitAnimator;
      }
    }
  }

  return animator;
}

exports._onFragmentCreateAnimator = _onFragmentCreateAnimator;

function _getAnimatedEntries(frameId) {
  return exports.waitingQueue.get(frameId);
}

exports._getAnimatedEntries = _getAnimatedEntries;

function _updateTransitions(entry) {
  var fragment = entry.fragment;
  var enterTransitionListener = entry.enterTransitionListener;

  if (enterTransitionListener) {
    fragment.setEnterTransition(enterTransitionListener.transition);
  }

  var exitTransitionListener = entry.exitTransitionListener;

  if (exitTransitionListener) {
    fragment.setExitTransition(exitTransitionListener.transition);
  }

  var reenterTransitionListener = entry.reenterTransitionListener;

  if (reenterTransitionListener) {
    fragment.setReenterTransition(reenterTransitionListener.transition);
  }

  var returnTransitionListener = entry.returnTransitionListener;

  if (returnTransitionListener) {
    fragment.setReturnTransition(returnTransitionListener.transition);
  }
}

exports._updateTransitions = _updateTransitions;

function _reverseTransitions(previousEntry, currentEntry) {
  var previousFragment = previousEntry.fragment;
  var currentFragment = currentEntry.fragment;
  var transitionUsed = false;

  if (sdkVersion() >= 21) {
    var returnTransitionListener = currentEntry.returnTransitionListener;

    if (returnTransitionListener) {
      transitionUsed = true;
      currentFragment.setExitTransition(returnTransitionListener.transition);
    } else {
      currentFragment.setExitTransition(null);
    }

    var reenterTransitionListener = previousEntry.reenterTransitionListener;

    if (reenterTransitionListener) {
      transitionUsed = true;
      previousFragment.setEnterTransition(reenterTransitionListener.transition);
    } else {
      previousFragment.setEnterTransition(null);
    }
  }

  return transitionUsed;
}

exports._reverseTransitions = _reverseTransitions;

function getTransitionListener(entry, transition) {
  if (!TransitionListener) {
    var TransitionListenerImpl = function (_super) {
      __extends(TransitionListenerImpl, _super);

      function TransitionListenerImpl(entry, transition) {
        var _this = _super.call(this) || this;

        _this.entry = entry;
        _this.transition = transition;
        return global.__native(_this);
      }

      TransitionListenerImpl.prototype.onTransitionStart = function (transition) {
        var entry = this.entry;
        addToWaitingQueue(entry);

        if (trace_1.isEnabled()) {
          trace_1.write("START " + toShortString(transition) + " transition for " + entry.fragmentTag, trace_1.categories.Transition);
        }
      };

      TransitionListenerImpl.prototype.onTransitionEnd = function (transition) {
        var entry = this.entry;

        if (trace_1.isEnabled()) {
          trace_1.write("END " + toShortString(transition) + " transition for " + entry.fragmentTag, trace_1.categories.Transition);
        }

        transitionOrAnimationCompleted(entry);
      };

      TransitionListenerImpl.prototype.onTransitionResume = function (transition) {
        if (trace_1.isEnabled()) {
          var fragment = this.entry.fragmentTag;
          trace_1.write("RESUME " + toShortString(transition) + " transition for " + fragment, trace_1.categories.Transition);
        }
      };

      TransitionListenerImpl.prototype.onTransitionPause = function (transition) {
        if (trace_1.isEnabled()) {
          trace_1.write("PAUSE " + toShortString(transition) + " transition for " + this.entry.fragmentTag, trace_1.categories.Transition);
        }
      };

      TransitionListenerImpl.prototype.onTransitionCancel = function (transition) {
        if (trace_1.isEnabled()) {
          trace_1.write("CANCEL " + toShortString(transition) + " transition for " + this.entry.fragmentTag, trace_1.categories.Transition);
        }
      };

      TransitionListenerImpl = __decorate([Interfaces([android.transition.Transition.TransitionListener])], TransitionListenerImpl);
      return TransitionListenerImpl;
    }(java.lang.Object);

    TransitionListener = TransitionListenerImpl;
  }

  return new TransitionListener(entry, transition);
}

function getAnimationListener() {
  if (!AnimationListener) {
    var AnimationListenerImpl = function (_super) {
      __extends(AnimationListenerImpl, _super);

      function AnimationListenerImpl() {
        var _this = _super.call(this) || this;

        return global.__native(_this);
      }

      AnimationListenerImpl.prototype.onAnimationStart = function (animator) {
        var entry = animator.entry;
        addToWaitingQueue(entry);

        if (trace_1.isEnabled()) {
          trace_1.write("START " + animator.transitionType + " for " + entry.fragmentTag, trace_1.categories.Transition);
        }
      };

      AnimationListenerImpl.prototype.onAnimationRepeat = function (animator) {
        if (trace_1.isEnabled()) {
          trace_1.write("REPEAT " + animator.transitionType + " for " + animator.entry.fragmentTag, trace_1.categories.Transition);
        }
      };

      AnimationListenerImpl.prototype.onAnimationEnd = function (animator) {
        if (trace_1.isEnabled()) {
          trace_1.write("END " + animator.transitionType + " for " + animator.entry.fragmentTag, trace_1.categories.Transition);
        }

        transitionOrAnimationCompleted(animator.entry);
      };

      AnimationListenerImpl.prototype.onAnimationCancel = function (animator) {
        if (trace_1.isEnabled()) {
          trace_1.write("CANCEL " + animator.transitionType + " for " + animator.entry.fragmentTag, trace_1.categories.Transition);
        }
      };

      AnimationListenerImpl = __decorate([Interfaces([android.animation.Animator.AnimatorListener])], AnimationListenerImpl);
      return AnimationListenerImpl;
    }(java.lang.Object);

    AnimationListener = new AnimationListenerImpl();
  }

  return AnimationListener;
}

function addToWaitingQueue(entry) {
  var frameId = entry.frameId;
  var entries = exports.waitingQueue.get(frameId);

  if (!entries) {
    entries = new Set();
    exports.waitingQueue.set(frameId, entries);
  }

  entries.add(entry);
}

function clearAnimationListener(animator, listener) {
  if (!animator) {
    return;
  }

  animator.removeListener(listener);

  if (animator.entry && trace_1.isEnabled()) {
    var entry = animator.entry;
    trace_1.write("Clear " + animator.transitionType + " - " + entry.transition + " for " + entry.fragmentTag, trace_1.categories.Transition);
  }

  animator.entry = null;
}

function clearExitAndReenterTransitions(entry, removeListener) {
  if (sdkVersion() >= 21) {
    var fragment = entry.fragment;
    var exitListener = entry.exitTransitionListener;

    if (exitListener) {
      var exitTransition = fragment.getExitTransition();

      if (exitTransition) {
        if (removeListener) {
          exitTransition.removeListener(exitListener);
        }

        fragment.setExitTransition(null);

        if (trace_1.isEnabled()) {
          trace_1.write("Cleared Exit " + exitTransition.getClass().getSimpleName() + " transition for " + fragment, trace_1.categories.Transition);
        }
      }

      if (removeListener) {
        entry.exitTransitionListener = null;
      }
    }

    var reenterListener = entry.reenterTransitionListener;

    if (reenterListener) {
      var reenterTransition = fragment.getReenterTransition();

      if (reenterTransition) {
        if (removeListener) {
          reenterTransition.removeListener(reenterListener);
        }

        fragment.setReenterTransition(null);

        if (trace_1.isEnabled()) {
          trace_1.write("Cleared Reenter " + reenterTransition.getClass().getSimpleName() + " transition for " + fragment, trace_1.categories.Transition);
        }
      }

      if (removeListener) {
        entry.reenterTransitionListener = null;
      }
    }
  }
}

function _clearFragment(entry) {
  clearEntry(entry, false);
}

exports._clearFragment = _clearFragment;

function _clearEntry(entry) {
  clearEntry(entry, true);
}

exports._clearEntry = _clearEntry;

function clearEntry(entry, removeListener) {
  clearExitAndReenterTransitions(entry, removeListener);

  if (sdkVersion() >= 21) {
    var fragment = entry.fragment;
    var enterListener = entry.enterTransitionListener;

    if (enterListener) {
      var enterTransition = fragment.getEnterTransition();

      if (enterTransition) {
        if (removeListener) {
          enterTransition.removeListener(enterListener);
        }

        fragment.setEnterTransition(null);

        if (trace_1.isEnabled()) {
          trace_1.write("Cleared Enter " + enterTransition.getClass().getSimpleName() + " transition for " + fragment, trace_1.categories.Transition);
        }
      }

      if (removeListener) {
        entry.enterTransitionListener = null;
      }
    }

    var returnListener = entry.returnTransitionListener;

    if (returnListener) {
      var returnTransition = fragment.getReturnTransition();

      if (returnTransition) {
        if (removeListener) {
          returnTransition.removeListener(returnListener);
        }

        fragment.setReturnTransition(null);

        if (trace_1.isEnabled()) {
          trace_1.write("Cleared Return " + returnTransition.getClass().getSimpleName() + " transition for " + fragment, trace_1.categories.Transition);
        }
      }

      if (removeListener) {
        entry.returnTransitionListener = null;
      }
    }
  }

  if (removeListener) {
    var listener = getAnimationListener();
    clearAnimationListener(entry.enterAnimator, listener);
    clearAnimationListener(entry.exitAnimator, listener);
    clearAnimationListener(entry.popEnterAnimator, listener);
    clearAnimationListener(entry.popExitAnimator, listener);
  }
}

function allowTransitionOverlap(fragment) {
  if (fragment) {
    fragment.setAllowEnterTransitionOverlap(true);
    fragment.setAllowReturnTransitionOverlap(true);
  }
}

function setEnterTransition(navigationTransition, entry, transition) {
  setUpNativeTransition(navigationTransition, transition);
  var listener = addNativeTransitionListener(entry, transition);
  entry.enterTransitionListener = listener;
  var fragment = entry.fragment;
  fragment.setEnterTransition(transition);
}

function setExitTransition(navigationTransition, entry, transition) {
  setUpNativeTransition(navigationTransition, transition);
  var listener = addNativeTransitionListener(entry, transition);
  entry.exitTransitionListener = listener;
  var fragment = entry.fragment;
  fragment.setExitTransition(transition);
}

function setReenterTransition(navigationTransition, entry, transition) {
  setUpNativeTransition(navigationTransition, transition);
  var listener = addNativeTransitionListener(entry, transition);
  entry.reenterTransitionListener = listener;
  var fragment = entry.fragment;
  fragment.setReenterTransition(transition);
}

function setReturnTransition(navigationTransition, entry, transition) {
  setUpNativeTransition(navigationTransition, transition);
  var listener = addNativeTransitionListener(entry, transition);
  entry.returnTransitionListener = listener;
  var fragment = entry.fragment;
  fragment.setReturnTransition(transition);
}

function setupNewFragmentSlideTransition(navTransition, entry, name) {
  setupCurrentFragmentSlideTransition(navTransition, entry, name);
  var direction = name.substr("slide".length) || "left";

  switch (direction) {
    case "left":
      setEnterTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.RIGHT));
      setReturnTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.RIGHT));
      break;

    case "right":
      setEnterTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.LEFT));
      setReturnTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.LEFT));
      break;

    case "top":
      setEnterTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.BOTTOM));
      setReturnTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.BOTTOM));
      break;

    case "bottom":
      setEnterTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.TOP));
      setReturnTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.TOP));
      break;
  }
}

function setupCurrentFragmentSlideTransition(navTransition, entry, name) {
  var direction = name.substr("slide".length) || "left";

  switch (direction) {
    case "left":
      setExitTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.LEFT));
      setReenterTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.LEFT));
      break;

    case "right":
      setExitTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.RIGHT));
      setReenterTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.RIGHT));
      break;

    case "top":
      setExitTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.TOP));
      setReenterTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.TOP));
      break;

    case "bottom":
      setExitTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.BOTTOM));
      setReenterTransition(navTransition, entry, new android.transition.Slide(android.view.Gravity.BOTTOM));
      break;
  }
}

function setupNewFragmentFadeTransition(navTransition, entry) {
  setupCurrentFragmentFadeTransition(navTransition, entry);
  var fadeInEnter = new android.transition.Fade(android.transition.Fade.IN);
  setEnterTransition(navTransition, entry, fadeInEnter);
  var fadeOutReturn = new android.transition.Fade(android.transition.Fade.OUT);
  setReturnTransition(navTransition, entry, fadeOutReturn);
}

function setupCurrentFragmentFadeTransition(navTransition, entry) {
  var fadeOutExit = new android.transition.Fade(android.transition.Fade.OUT);
  setExitTransition(navTransition, entry, fadeOutExit);
  var fadeInReenter = new android.transition.Fade(android.transition.Fade.IN);
  setReenterTransition(navTransition, entry, fadeInReenter);
}

function setupCurrentFragmentExplodeTransition(navTransition, entry) {
  setExitTransition(navTransition, entry, new android.transition.Explode());
  setReenterTransition(navTransition, entry, new android.transition.Explode());
}

function setupNewFragmentExplodeTransition(navTransition, entry) {
  setupCurrentFragmentExplodeTransition(navTransition, entry);
  setEnterTransition(navTransition, entry, new android.transition.Explode());
  setReturnTransition(navTransition, entry, new android.transition.Explode());
}

function setupExitAndPopEnterAnimation(entry, transition) {
  var listener = getAnimationListener();
  clearAnimationListener(entry.exitAnimator, listener);
  clearAnimationListener(entry.popEnterAnimator, listener);
  var exitAnimator = transition.createAndroidAnimator(transition_1.AndroidTransitionType.exit);
  exitAnimator.transitionType = transition_1.AndroidTransitionType.exit;
  exitAnimator.entry = entry;
  exitAnimator.addListener(listener);
  entry.exitAnimator = exitAnimator;
  var popEnterAnimator = transition.createAndroidAnimator(transition_1.AndroidTransitionType.popEnter);
  popEnterAnimator.transitionType = transition_1.AndroidTransitionType.popEnter;
  popEnterAnimator.entry = entry;
  popEnterAnimator.addListener(listener);
  entry.popEnterAnimator = popEnterAnimator;
}

function setupAllAnimation(entry, transition) {
  setupExitAndPopEnterAnimation(entry, transition);
  var listener = getAnimationListener();
  var enterAnimator = transition.createAndroidAnimator(transition_1.AndroidTransitionType.enter);
  enterAnimator.transitionType = transition_1.AndroidTransitionType.enter;
  enterAnimator.entry = entry;
  enterAnimator.addListener(listener);
  entry.enterAnimator = enterAnimator;
  var popExitAnimator = transition.createAndroidAnimator(transition_1.AndroidTransitionType.popExit);
  popExitAnimator.transitionType = transition_1.AndroidTransitionType.popExit;
  popExitAnimator.entry = entry;
  popExitAnimator.addListener(listener);
  entry.popExitAnimator = popExitAnimator;
}

function setupDefaultAnimations(entry, transition) {
  var listener = getAnimationListener();
  var enterAnimator = transition.createAndroidAnimator(transition_1.AndroidTransitionType.enter);
  enterAnimator.transitionType = transition_1.AndroidTransitionType.enter;
  enterAnimator.entry = entry;
  enterAnimator.addListener(listener);
  entry.defaultEnterAnimator = enterAnimator;
  var exitAnimator = transition.createAndroidAnimator(transition_1.AndroidTransitionType.exit);
  exitAnimator.transitionType = transition_1.AndroidTransitionType.exit;
  exitAnimator.entry = entry;
  exitAnimator.addListener(listener);
  entry.defaultExitAnimator = exitAnimator;
}

function setUpNativeTransition(navigationTransition, nativeTransition) {
  if (navigationTransition.duration) {
    nativeTransition.setDuration(navigationTransition.duration);
  }

  var interpolator = navigationTransition.curve ? animation_1._resolveAnimationCurve(navigationTransition.curve) : defaultInterpolator();
  nativeTransition.setInterpolator(interpolator);
}

function addNativeTransitionListener(entry, nativeTransition) {
  var listener = getTransitionListener(entry, nativeTransition);
  nativeTransition.addListener(listener);
  return listener;
}

function transitionOrAnimationCompleted(entry) {
  var frameId = entry.frameId;
  var entries = exports.waitingQueue.get(frameId);

  if (!entries) {
    return;
  }

  entries.delete(entry);

  if (entries.size === 0) {
    var frame_1 = entry.resolvedPage.frame;
    var previousCompletedAnimationEntry = exports.completedEntries.get(frameId);
    exports.completedEntries.delete(frameId);
    exports.waitingQueue.delete(frameId);
    var current_1 = frame_1.isCurrent(entry) ? previousCompletedAnimationEntry : entry;
    current_1 = current_1 || entry;

    if (current_1) {
      var isBack_1 = frame_1._isBack;
      setTimeout(function () {
        return frame_1.setCurrent(current_1, isBack_1);
      });
    }
  } else {
    exports.completedEntries.set(frameId, entry);
  }
}

function toShortString(nativeTransition) {
  return nativeTransition.getClass().getSimpleName() + "@" + nativeTransition.hashCode().toString(16);
}

function printTransitions(entry) {
  if (entry && trace_1.isEnabled()) {
    var result = entry.fragmentTag + " Transitions:";

    if (entry.transitionName) {
      result += "transitionName=" + entry.transitionName + ", ";
    }

    if (entry.transition) {
      result += "enterAnimator=" + entry.enterAnimator + ", ";
      result += "exitAnimator=" + entry.exitAnimator + ", ";
      result += "popEnterAnimator=" + entry.popEnterAnimator + ", ";
      result += "popExitAnimator=" + entry.popExitAnimator + ", ";
    }

    if (sdkVersion() >= 21) {
      var fragment = entry.fragment;
      result += "" + (fragment.getEnterTransition() ? " enter=" + toShortString(fragment.getEnterTransition()) : "");
      result += "" + (fragment.getExitTransition() ? " exit=" + toShortString(fragment.getExitTransition()) : "");
      result += "" + (fragment.getReenterTransition() ? " popEnter=" + toShortString(fragment.getReenterTransition()) : "");
      result += "" + (fragment.getReturnTransition() ? " popExit=" + toShortString(fragment.getReturnTransition()) : "");
    }

    trace_1.write(result, trace_1.categories.Transition);
  }
}

function javaObjectArray() {
  var params = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    params[_i] = arguments[_i];
  }

  var nativeArray = Array.create(java.lang.Object, params.length);
  params.forEach(function (value, i) {
    return nativeArray[i] = value;
  });
  return nativeArray;
}

function createDummyZeroDurationAnimator() {
  var animator = android.animation.ValueAnimator.ofObject(intEvaluator(), javaObjectArray(java.lang.Integer.valueOf(0), java.lang.Integer.valueOf(1)));
  animator.setDuration(0);
  return animator;
}

var NoTransition = function (_super) {
  __extends(NoTransition, _super);

  function NoTransition() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  NoTransition.prototype.createAndroidAnimator = function (transitionType) {
    return createDummyZeroDurationAnimator();
  };

  return NoTransition;
}(transition_1.Transition);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/frame/frame-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view-common.js");

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var builder_1 = __webpack_require__("../node_modules/tns-core-modules/ui/builder/builder.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var frame_stack_1 = __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame-stack.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

function buildEntryFromArgs(arg) {
  var entry;

  if (typeof arg === "string") {
    entry = {
      moduleName: arg
    };
  } else if (typeof arg === "function") {
    entry = {
      create: arg
    };
  } else {
    entry = arg;
  }

  return entry;
}

var FrameBase = function (_super) {
  __extends(FrameBase, _super);

  function FrameBase() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._backStack = new Array();
    _this._navigationQueue = new Array();
    _this._isInFrameStack = false;
    return _this;
  }

  FrameBase_1 = FrameBase;

  FrameBase.prototype._addChildFromBuilder = function (name, value) {
    throw new Error("Frame should not have a view. Use 'defaultPage' property instead.");
  };

  FrameBase.prototype.onLoaded = function () {
    _super.prototype.onLoaded.call(this);

    this._processNextNavigationEntry();
  };

  FrameBase.prototype.canGoBack = function () {
    var _this = this;

    var backstack = this._backStack.length;
    var previousForwardNotInBackstack = false;

    this._navigationQueue.forEach(function (item) {
      var entry = item.entry;

      if (item.isBackNavigation) {
        previousForwardNotInBackstack = false;

        if (!entry) {
          backstack--;
        } else {
          var backstackIndex = _this._backStack.indexOf(entry);

          if (backstackIndex !== -1) {
            backstack = backstackIndex;
          } else {
            backstack--;
          }
        }
      } else if (entry.entry.clearHistory) {
        previousForwardNotInBackstack = false;
        backstack = 0;
      } else {
        backstack++;

        if (previousForwardNotInBackstack) {
          backstack--;
        }

        previousForwardNotInBackstack = entry.entry.backstackVisible === false;
      }
    });

    if (this._navigationQueue.length > 0 && !this._currentEntry) {
      backstack--;
    }

    return backstack > 0;
  };

  FrameBase.prototype.goBack = function (backstackEntry) {
    if (view_1.traceEnabled()) {
      view_1.traceWrite("GO BACK", view_1.traceCategories.Navigation);
    }

    if (!this.canGoBack()) {
      return;
    }

    if (backstackEntry) {
      var index_1 = this._backStack.indexOf(backstackEntry);

      if (index_1 < 0) {
        return;
      }
    }

    var navigationContext = {
      entry: backstackEntry,
      isBackNavigation: true
    };

    this._navigationQueue.push(navigationContext);

    this._processNextNavigationEntry();
  };

  FrameBase.prototype._removeEntry = function (removed) {
    var page = removed.resolvedPage;
    var frame = page.frame;
    page._frame = null;

    if (frame) {
      frame._removeView(page);
    } else {
      page._tearDownUI(true);
    }
  };

  FrameBase.prototype.navigate = function (param) {
    if (view_1.traceEnabled()) {
      view_1.traceWrite("NAVIGATE", view_1.traceCategories.Navigation);
    }

    var entry = buildEntryFromArgs(param);
    var page = builder_1.createViewFromEntry(entry);

    this._pushInFrameStack();

    var backstackEntry = {
      entry: entry,
      resolvedPage: page,
      navDepth: undefined,
      fragmentTag: undefined
    };
    var navigationContext = {
      entry: backstackEntry,
      isBackNavigation: false
    };

    this._navigationQueue.push(navigationContext);

    this._processNextNavigationEntry();
  };

  FrameBase.prototype.isCurrent = function (entry) {
    return this._currentEntry === entry;
  };

  FrameBase.prototype.setCurrent = function (entry, isBack) {
    var newPage = entry.resolvedPage;

    if (!newPage.frame) {
      this._addView(newPage);

      newPage._frame = this;
    }

    this._currentEntry = entry;

    if (isBack) {
      this._pushInFrameStack();
    }

    newPage.onNavigatedTo(isBack);
    this._executingEntry = null;
  };

  FrameBase.prototype._updateBackstack = function (entry, isBack) {
    var _this = this;

    this.raiseCurrentPageNavigatedEvents(isBack);
    var current = this._currentEntry;

    if (isBack) {
      var index_2 = this._backStack.indexOf(entry);

      this._backStack.splice(index_2 + 1).forEach(function (e) {
        return _this._removeEntry(e);
      });

      this._backStack.pop();
    } else {
      if (entry.entry.clearHistory) {
        this._backStack.forEach(function (e) {
          return _this._removeEntry(e);
        });

        this._backStack.length = 0;
      } else if (FrameBase_1._isEntryBackstackVisible(current)) {
        this._backStack.push(current);
      }
    }

    if (current && this._backStack.indexOf(current) < 0) {
      this._removeEntry(current);
    }
  };

  FrameBase.prototype.isNestedWithin = function (parentFrameCandidate) {
    var frameAncestor = this;

    while (frameAncestor) {
      frameAncestor = view_common_1.getAncestor(frameAncestor, FrameBase_1);

      if (frameAncestor === parentFrameCandidate) {
        return true;
      }
    }

    return false;
  };

  FrameBase.prototype.raiseCurrentPageNavigatedEvents = function (isBack) {
    var page = this.currentPage;

    if (page) {
      if (page.isLoaded) {
        page.callUnloaded();
      }

      page.onNavigatedFrom(isBack);
    }
  };

  FrameBase.prototype._processNavigationQueue = function (page) {
    if (this._navigationQueue.length === 0) {
      return;
    }

    var entry = this._navigationQueue[0].entry;
    var currentNavigationPage = entry.resolvedPage;

    if (page !== currentNavigationPage) {
      return;
    }

    this._navigationQueue.shift();

    this._processNextNavigationEntry();

    this._updateActionBar();
  };

  FrameBase.prototype._findEntryForTag = function (fragmentTag) {
    var entry;

    if (this._currentEntry && this._currentEntry.fragmentTag === fragmentTag) {
      entry = this._currentEntry;
    } else {
      entry = this._backStack.find(function (value) {
        return value.fragmentTag === fragmentTag;
      });

      if (!entry) {
        var navigationItem = this._navigationQueue.find(function (value) {
          return value.entry.fragmentTag === fragmentTag;
        });

        entry = navigationItem ? navigationItem.entry : undefined;
      }
    }

    return entry;
  };

  FrameBase.prototype.navigationQueueIsEmpty = function () {
    return this._navigationQueue.length === 0;
  };

  FrameBase._isEntryBackstackVisible = function (entry) {
    if (!entry) {
      return false;
    }

    var backstackVisibleValue = entry.entry.backstackVisible;
    var backstackHidden = backstackVisibleValue !== undefined && !backstackVisibleValue;
    return !backstackHidden;
  };

  FrameBase.prototype._updateActionBar = function (page, disableNavBarAnimation) {};

  FrameBase.prototype._processNextNavigationEntry = function () {
    if (!this.isLoaded || this._executingEntry) {
      return;
    }

    if (this._navigationQueue.length > 0) {
      var navigationContext = this._navigationQueue[0];

      if (navigationContext.isBackNavigation) {
        this.performGoBack(navigationContext);
      } else {
        this.performNavigation(navigationContext);
      }
    }
  };

  FrameBase.prototype.performNavigation = function (navigationContext) {
    var navContext = navigationContext.entry;
    this._executingEntry = navContext;

    this._onNavigatingTo(navContext, navigationContext.isBackNavigation);

    this._navigateCore(navContext);
  };

  FrameBase.prototype.performGoBack = function (navigationContext) {
    var backstackEntry = navigationContext.entry;
    var backstack = this._backStack;

    if (!backstackEntry) {
      backstackEntry = backstack[backstack.length - 1];
      navigationContext.entry = backstackEntry;
    }

    this._executingEntry = backstackEntry;

    this._onNavigatingTo(backstackEntry, true);

    this._goBackCore(backstackEntry);
  };

  FrameBase.prototype._goBackCore = function (backstackEntry) {
    if (view_1.traceEnabled()) {
      view_1.traceWrite("GO BACK CORE(" + this._backstackEntryTrace(backstackEntry) + "); currentPage: " + this.currentPage, view_1.traceCategories.Navigation);
    }
  };

  FrameBase.prototype._navigateCore = function (backstackEntry) {
    if (view_1.traceEnabled()) {
      view_1.traceWrite("NAVIGATE CORE(" + this._backstackEntryTrace(backstackEntry) + "); currentPage: " + this.currentPage, view_1.traceCategories.Navigation);
    }
  };

  FrameBase.prototype._onNavigatingTo = function (backstackEntry, isBack) {
    if (this.currentPage) {
      this.currentPage.onNavigatingFrom(isBack);
    }

    backstackEntry.resolvedPage.onNavigatingTo(backstackEntry.entry.context, isBack, backstackEntry.entry.bindingContext);
  };

  Object.defineProperty(FrameBase.prototype, "animated", {
    get: function get() {
      return this._animated;
    },
    set: function set(value) {
      this._animated = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FrameBase.prototype, "transition", {
    get: function get() {
      return this._transition;
    },
    set: function set(value) {
      this._transition = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FrameBase.prototype, "backStack", {
    get: function get() {
      return this._backStack.slice();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FrameBase.prototype, "currentPage", {
    get: function get() {
      if (this._currentEntry) {
        return this._currentEntry.resolvedPage;
      }

      return null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FrameBase.prototype, "currentEntry", {
    get: function get() {
      if (this._currentEntry) {
        return this._currentEntry.entry;
      }

      return null;
    },
    enumerable: true,
    configurable: true
  });

  FrameBase.prototype._pushInFrameStackRecursive = function () {
    this._pushInFrameStack();

    var framesToPush = [];

    for (var _i = 0, frameStack_1 = frame_stack_1.frameStack; _i < frameStack_1.length; _i++) {
      var frame = frameStack_1[_i];

      if (frame.isNestedWithin(this)) {
        framesToPush.push(frame);
      }
    }

    for (var _a = 0, framesToPush_1 = framesToPush; _a < framesToPush_1.length; _a++) {
      var frame = framesToPush_1[_a];

      frame._pushInFrameStack();
    }
  };

  FrameBase.prototype._pushInFrameStack = function () {
    frame_stack_1._pushInFrameStack(this);
  };

  FrameBase.prototype._popFromFrameStack = function () {
    frame_stack_1._popFromFrameStack(this);
  };

  FrameBase.prototype._removeFromFrameStack = function () {
    frame_stack_1._removeFromFrameStack(this);
  };

  FrameBase.prototype._dialogClosed = function () {
    this._removeFromFrameStack();
  };

  FrameBase.prototype._onRootViewReset = function () {
    _super.prototype._onRootViewReset.call(this);

    this._removeFromFrameStack();
  };

  Object.defineProperty(FrameBase.prototype, "_childrenCount", {
    get: function get() {
      if (this.currentPage) {
        return 1;
      }

      return 0;
    },
    enumerable: true,
    configurable: true
  });

  FrameBase.prototype.eachChildView = function (callback) {
    var page = this.currentPage;

    if (page) {
      callback(page);
    }
  };

  FrameBase.prototype._getIsAnimatedNavigation = function (entry) {
    if (entry && entry.animated !== undefined) {
      return entry.animated;
    }

    if (this.animated !== undefined) {
      return this.animated;
    }

    return FrameBase_1.defaultAnimatedNavigation;
  };

  FrameBase.prototype._getNavigationTransition = function (entry) {
    if (entry) {
      if (view_1.isIOS && entry.transitioniOS !== undefined) {
        return entry.transitioniOS;
      }

      if (view_1.isAndroid && entry.transitionAndroid !== undefined) {
        return entry.transitionAndroid;
      }

      if (entry.transition !== undefined) {
        return entry.transition;
      }
    }

    if (this.transition !== undefined) {
      return this.transition;
    }

    return FrameBase_1.defaultTransition;
  };

  Object.defineProperty(FrameBase.prototype, "navigationBarHeight", {
    get: function get() {
      return 0;
    },
    enumerable: true,
    configurable: true
  });

  FrameBase.prototype._getNavBarVisible = function (page) {
    throw new Error();
  };

  FrameBase.prototype._addViewToNativeVisualTree = function (child) {
    return true;
  };

  FrameBase.prototype._removeViewFromNativeVisualTree = function (child) {
    child._isAddedToNativeVisualTree = false;
  };

  FrameBase.prototype._printFrameBackStack = function () {
    var length = this.backStack.length;
    var i = length - 1;
    console.log("Frame Back Stack: ");

    while (i >= 0) {
      var backstackEntry = this.backStack[i--];
      console.log("\t" + backstackEntry.resolvedPage);
    }
  };

  FrameBase.prototype._backstackEntryTrace = function (b) {
    var result = "" + b.resolvedPage;

    var backstackVisible = FrameBase_1._isEntryBackstackVisible(b);

    if (!backstackVisible) {
      result += " | INVISIBLE";
    }

    if (b.entry.clearHistory) {
      result += " | CLEAR HISTORY";
    }

    var animated = this._getIsAnimatedNavigation(b.entry);

    if (!animated) {
      result += " | NOT ANIMATED";
    }

    var t = this._getNavigationTransition(b.entry);

    if (t) {
      result += " | Transition[" + JSON.stringify(t) + "]";
    }

    return result;
  };

  FrameBase.prototype._onLivesync = function () {
    _super.prototype._onLivesync.call(this);

    if (!this._currentEntry || !this._currentEntry.entry) {
      return false;
    }

    var currentEntry = this._currentEntry.entry;
    var newEntry = {
      animated: false,
      clearHistory: true,
      context: currentEntry.context,
      create: currentEntry.create,
      moduleName: currentEntry.moduleName,
      backstackVisible: currentEntry.backstackVisible
    };

    if (newEntry.create) {
      var page = newEntry.create();

      if (page === this.currentPage) {
        return false;
      }
    }

    this.navigate(newEntry);
    return true;
  };

  var FrameBase_1;
  FrameBase.androidOptionSelectedEvent = "optionSelected";
  FrameBase.defaultAnimatedNavigation = true;

  __decorate([profiling_1.profile], FrameBase.prototype, "onLoaded", null);

  __decorate([profiling_1.profile], FrameBase.prototype, "performNavigation", null);

  __decorate([profiling_1.profile], FrameBase.prototype, "performGoBack", null);

  FrameBase = FrameBase_1 = __decorate([view_1.CSSType("Frame")], FrameBase);
  return FrameBase;
}(view_1.CustomLayoutView);

exports.FrameBase = FrameBase;

function getFrameById(id) {
  return frame_stack_1.frameStack.find(function (frame) {
    return frame.id && frame.id === id;
  });
}

exports.getFrameById = getFrameById;

function topmost() {
  return frame_stack_1.topmost();
}

exports.topmost = topmost;

function goBack() {
  var top = topmost();

  if (top && top.canGoBack()) {
    top.goBack();
    return true;
  } else if (top) {
    var parentFrameCanGoBack = false;
    var parentFrame = view_common_1.getAncestor(top, "Frame");

    while (parentFrame && !parentFrameCanGoBack) {
      if (parentFrame && parentFrame.canGoBack()) {
        parentFrameCanGoBack = true;
      } else {
        parentFrame = view_common_1.getAncestor(parentFrame, "Frame");
      }
    }

    if (parentFrame && parentFrameCanGoBack) {
      parentFrame.goBack();
      return true;
    }
  }

  if (frame_stack_1.frameStack.length > 1) {
    top._popFromFrameStack();
  }

  return false;
}

exports.goBack = goBack;

function stack() {
  return frame_stack_1.frameStack;
}

exports.stack = stack;
exports.defaultPage = new view_1.Property({
  name: "defaultPage",
  valueChanged: function valueChanged(frame, oldValue, newValue) {
    frame.navigate({
      moduleName: newValue
    });
  }
});
exports.defaultPage.register(FrameBase);
exports.actionBarVisibilityProperty = new view_1.Property({
  name: "actionBarVisibility",
  defaultValue: "auto",
  affectsLayout: view_1.isIOS
});
exports.actionBarVisibilityProperty.register(FrameBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/frame/frame-stack.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.frameStack = [];

function topmost() {
  if (exports.frameStack.length > 0) {
    return exports.frameStack[exports.frameStack.length - 1];
  }

  return undefined;
}

exports.topmost = topmost;

function _pushInFrameStack(frame) {
  if (frame._isInFrameStack && exports.frameStack[exports.frameStack.length - 1] === frame) {
    return;
  }

  if (frame._isInFrameStack) {
    var indexOfFrame = exports.frameStack.indexOf(frame);
    exports.frameStack.splice(indexOfFrame, 1);
  }

  exports.frameStack.push(frame);
  frame._isInFrameStack = true;
}

exports._pushInFrameStack = _pushInFrameStack;

function _popFromFrameStack(frame) {
  if (!frame._isInFrameStack) {
    return;
  }

  var top = topmost();

  if (top !== frame) {
    throw new Error("Cannot pop a Frame which is not at the top of the navigation stack.");
  }

  exports.frameStack.pop();
  frame._isInFrameStack = false;
}

exports._popFromFrameStack = _popFromFrameStack;

function _removeFromFrameStack(frame) {
  if (!frame._isInFrameStack) {
    return;
  }

  var index = exports.frameStack.indexOf(frame);
  exports.frameStack.splice(index, 1);
  frame._isInFrameStack = false;
}

exports._removeFromFrameStack = _removeFromFrameStack;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/frame/frame.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var application = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

var frame_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame-common.js");

var fragment_transitions_1 = __webpack_require__("../node_modules/tns-core-modules/ui/frame/fragment.transitions.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var builder_1 = __webpack_require__("../node_modules/tns-core-modules/ui/builder/builder.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/frame/frame-common.js"));

var INTENT_EXTRA = "com.tns.activity";
var ROOT_VIEW_ID_EXTRA = "com.tns.activity.rootViewId";
var FRAMEID = "_frameId";
var CALLBACKS = "_callbacks";
var ownerSymbol = Symbol("_owner");
var activityRootViewsMap = new Map();
var navDepth = -1;
var fragmentId = -1;

if (global && global.__inspector) {
  var devtools = __webpack_require__("../node_modules/tns-core-modules/debugger/devtools-elements.js");

  devtools.attachDOMInspectorEventCallbacks(global.__inspector);
  devtools.attachDOMInspectorCommandCallbacks(global.__inspector);
}

function getAttachListener() {
  if (!exports.attachStateChangeListener) {
    var AttachListener = function (_super) {
      __extends(AttachListener, _super);

      function AttachListener() {
        var _this = _super.call(this) || this;

        return global.__native(_this);
      }

      AttachListener.prototype.onViewAttachedToWindow = function (view) {
        var owner = view[ownerSymbol];

        if (owner) {
          owner._onAttachedToWindow();
        }
      };

      AttachListener.prototype.onViewDetachedFromWindow = function (view) {
        var owner = view[ownerSymbol];

        if (owner) {
          owner._onDetachedFromWindow();
        }
      };

      AttachListener = __decorate([Interfaces([android.view.View.OnAttachStateChangeListener])], AttachListener);
      return AttachListener;
    }(java.lang.Object);

    exports.attachStateChangeListener = new AttachListener();
  }

  return exports.attachStateChangeListener;
}

function reloadPage() {
  var activity = application.android.foregroundActivity;
  var callbacks = activity[CALLBACKS];
  var rootView = callbacks.getRootView();

  if (!rootView || !rootView._onLivesync()) {
    callbacks.resetActivityContent(activity);
  }
}

exports.reloadPage = reloadPage;
global.__onLiveSyncCore = reloadPage;

var Frame = function (_super) {
  __extends(Frame, _super);

  function Frame() {
    var _this = _super.call(this) || this;

    _this._containerViewId = -1;
    _this._tearDownPending = false;
    _this._attachedToWindow = false;
    _this._isBack = true;
    _this._android = new AndroidFrame(_this);
    return _this;
  }

  Object.defineProperty(Frame, "defaultAnimatedNavigation", {
    get: function get() {
      return frame_common_1.FrameBase.defaultAnimatedNavigation;
    },
    set: function set(value) {
      frame_common_1.FrameBase.defaultAnimatedNavigation = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Frame, "defaultTransition", {
    get: function get() {
      return frame_common_1.FrameBase.defaultTransition;
    },
    set: function set(value) {
      frame_common_1.FrameBase.defaultTransition = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Frame.prototype, "containerViewId", {
    get: function get() {
      return this._containerViewId;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Frame.prototype, "android", {
    get: function get() {
      return this._android;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Frame.prototype, "_hasFragments", {
    get: function get() {
      return true;
    },
    enumerable: true,
    configurable: true
  });

  Frame.prototype._onAttachedToWindow = function () {
    _super.prototype._onAttachedToWindow.call(this);

    this._attachedToWindow = true;

    this._processNextNavigationEntry();
  };

  Frame.prototype._onDetachedFromWindow = function () {
    _super.prototype._onDetachedFromWindow.call(this);

    this._attachedToWindow = false;
  };

  Frame.prototype._processNextNavigationEntry = function () {
    if (!this.isLoaded || this._executingEntry || !this._attachedToWindow) {
      return;
    }

    var animatedEntries = fragment_transitions_1._getAnimatedEntries(this._android.frameId);

    if (animatedEntries) {
      if (animatedEntries.size > 0) {
        return;
      }
    }

    var manager = this._getFragmentManager();

    var entry = this._currentEntry;

    if (entry && manager && !manager.findFragmentByTag(entry.fragmentTag)) {
      this._cachedAnimatorState = getAnimatorState(this._currentEntry);
      this._currentEntry = null;

      this._navigateCore(entry);

      this._currentEntry = entry;
    } else {
      _super.prototype._processNextNavigationEntry.call(this);
    }
  };

  Frame.prototype._getChildFragmentManager = function () {
    var backstackEntry = this._executingEntry || this._currentEntry;

    if (backstackEntry && backstackEntry.fragment && backstackEntry.fragment.isAdded()) {
      return backstackEntry.fragment.getChildFragmentManager();
    }

    return null;
  };

  Frame.prototype._onRootViewReset = function () {
    _super.prototype._onRootViewReset.call(this);

    this.disposeCurrentFragment();
  };

  Frame.prototype.onUnloaded = function () {
    _super.prototype.onUnloaded.call(this);

    this.disposeCurrentFragment();
  };

  Frame.prototype.disposeCurrentFragment = function () {
    if (!this._currentEntry || !this._currentEntry.fragment || !this._currentEntry.fragment.isAdded()) {
      return;
    }

    var manager = this._getFragmentManager();

    var transaction = manager.beginTransaction();
    transaction.remove(this._currentEntry.fragment);
    transaction.commitNowAllowingStateLoss();
  };

  Frame.prototype.createFragment = function (backstackEntry, fragmentTag) {
    ensureFragmentClass();
    var newFragment = new fragmentClass();
    var args = new android.os.Bundle();
    args.putInt(FRAMEID, this._android.frameId);
    newFragment.setArguments(args);
    setFragmentCallbacks(newFragment);
    var callbacks = newFragment[CALLBACKS];
    callbacks.frame = this;
    callbacks.entry = backstackEntry;
    backstackEntry.fragment = newFragment;
    backstackEntry.fragmentTag = fragmentTag;
    backstackEntry.navDepth = navDepth;
    return newFragment;
  };

  Frame.prototype.setCurrent = function (entry, isBack) {
    var current = this._currentEntry;
    var currentEntryChanged = current !== entry;

    if (currentEntryChanged) {
      this._updateBackstack(entry, isBack);

      if (this._tearDownPending) {
        this._tearDownPending = false;

        if (!entry.recreated) {
          clearEntry(entry);
        }

        if (current && !current.recreated) {
          clearEntry(current);
        }

        var context_1 = this._context;

        if (context_1 && !entry.recreated) {
          entry.fragment = this.createFragment(entry, entry.fragmentTag);

          entry.resolvedPage._setupUI(context_1);
        }

        entry.recreated = false;

        if (current) {
          current.recreated = false;
        }
      }

      _super.prototype.setCurrent.call(this, entry, isBack);

      this._processNavigationQueue(entry.resolvedPage);
    } else {
      this._processNextNavigationEntry();
    }

    if (this._cachedAnimatorState) {
      restoreAnimatorState(this._currentEntry, this._cachedAnimatorState);
      this._cachedAnimatorState = null;
    }
  };

  Frame.prototype.onBackPressed = function () {
    if (this.canGoBack()) {
      this.goBack();
      return true;
    }

    if (!this.navigationQueueIsEmpty()) {
      var manager = this._getFragmentManager();

      if (manager) {
        manager.executePendingTransactions();
        return true;
      }
    }

    return false;
  };

  Frame.prototype._navigateCore = function (newEntry) {
    _super.prototype._navigateCore.call(this, newEntry);

    this._isBack = false;
    newEntry.frameId = this._android.frameId;
    var activity = this._android.activity;

    if (!activity) {
      var currentActivity = this._android.currentActivity;

      if (currentActivity) {
        startActivity(currentActivity, this._android.frameId);
      }

      return;
    }

    var manager = this._getFragmentManager();

    var clearHistory = newEntry.entry.clearHistory;
    var currentEntry = this._currentEntry;

    if (clearHistory) {
      navDepth = -1;
    }

    navDepth++;
    fragmentId++;
    var newFragmentTag = "fragment" + fragmentId + "[" + navDepth + "]";
    var newFragment = this.createFragment(newEntry, newFragmentTag);
    var transaction = manager.beginTransaction();
    var animated = currentEntry ? this._getIsAnimatedNavigation(newEntry.entry) : false;
    var navigationTransition = this._currentEntry ? this._getNavigationTransition(newEntry.entry) : null;

    fragment_transitions_1._setAndroidFragmentTransitions(animated, navigationTransition, currentEntry, newEntry, transaction, this._android.frameId);

    if (currentEntry && animated && !navigationTransition) {
      transaction.setTransition(android.support.v4.app.FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
    }

    transaction.replace(this.containerViewId, newFragment, newFragmentTag);
    transaction.commitAllowingStateLoss();
  };

  Frame.prototype._goBackCore = function (backstackEntry) {
    this._isBack = true;

    _super.prototype._goBackCore.call(this, backstackEntry);

    navDepth = backstackEntry.navDepth;

    var manager = this._getFragmentManager();

    var transaction = manager.beginTransaction();

    if (!backstackEntry.fragment) {
      backstackEntry.fragment = this.createFragment(backstackEntry, backstackEntry.fragmentTag);

      fragment_transitions_1._updateTransitions(backstackEntry);
    }

    var transitionReversed = fragment_transitions_1._reverseTransitions(backstackEntry, this._currentEntry);

    if (!transitionReversed) {
      transaction.setCustomAnimations(-30, -40);
    }

    transaction.replace(this.containerViewId, backstackEntry.fragment, backstackEntry.fragmentTag);
    transaction.commitAllowingStateLoss();
  };

  Frame.prototype._removeEntry = function (removed) {
    _super.prototype._removeEntry.call(this, removed);

    if (removed.fragment) {
      fragment_transitions_1._clearEntry(removed);
    }

    removed.fragment = null;
    removed.viewSavedState = null;
  };

  Frame.prototype.createNativeView = function () {
    return new org.nativescript.widgets.ContentLayout(this._context);
  };

  Frame.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    var listener = getAttachListener();
    this.nativeViewProtected.addOnAttachStateChangeListener(listener);
    this.nativeViewProtected[ownerSymbol] = this;
    this._android.rootViewGroup = this.nativeViewProtected;

    if (this._containerViewId < 0) {
      this._containerViewId = android.view.View.generateViewId();
    }

    this._android.rootViewGroup.setId(this._containerViewId);
  };

  Frame.prototype.disposeNativeView = function () {
    var _this = this;

    var listener = getAttachListener();
    this.nativeViewProtected.removeOnAttachStateChangeListener(listener);
    this.nativeViewProtected[ownerSymbol] = null;
    this._tearDownPending = !!this._executingEntry;
    var current = this._currentEntry;
    this.backStack.forEach(function (entry) {
      if (entry !== _this._executingEntry) {
        clearEntry(entry);
      }
    });

    if (current && !this._executingEntry) {
      clearEntry(current);
    }

    this._android.rootViewGroup = null;

    this._removeFromFrameStack();

    _super.prototype.disposeNativeView.call(this);
  };

  Frame.prototype._popFromFrameStack = function () {
    if (!this._isInFrameStack) {
      return;
    }

    _super.prototype._popFromFrameStack.call(this);
  };

  Frame.prototype._getNavBarVisible = function (page) {
    switch (this.actionBarVisibility) {
      case "never":
        return false;

      case "always":
        return true;

      default:
        if (page.actionBarHidden !== undefined) {
          return !page.actionBarHidden;
        }

        if (this._android && this._android.showActionBar !== undefined) {
          return this._android.showActionBar;
        }

        return true;
    }
  };

  Frame.prototype._saveFragmentsState = function () {
    this.backStack.forEach(function (entry) {
      var view = entry.resolvedPage.nativeViewProtected;

      if (!entry.viewSavedState && view) {
        var viewState = new android.util.SparseArray();
        view.saveHierarchyState(viewState);
        entry.viewSavedState = viewState;
      }
    });
  };

  __decorate([profiling_1.profile], Frame.prototype, "_navigateCore", null);

  return Frame;
}(frame_common_1.FrameBase);

exports.Frame = Frame;

function cloneExpandedAnimator(expandedAnimator) {
  if (!expandedAnimator) {
    return null;
  }

  var clone = expandedAnimator.clone();
  clone.entry = expandedAnimator.entry;
  clone.transitionType = expandedAnimator.transitionType;
  return clone;
}

function getAnimatorState(entry) {
  var expandedEntry = entry;
  var animatorState = {};
  animatorState.enterAnimator = cloneExpandedAnimator(expandedEntry.enterAnimator);
  animatorState.exitAnimator = cloneExpandedAnimator(expandedEntry.exitAnimator);
  animatorState.popEnterAnimator = cloneExpandedAnimator(expandedEntry.popEnterAnimator);
  animatorState.popExitAnimator = cloneExpandedAnimator(expandedEntry.popExitAnimator);
  animatorState.transitionName = expandedEntry.transitionName;
  return animatorState;
}

function restoreAnimatorState(entry, snapshot) {
  var expandedEntry = entry;

  if (snapshot.enterAnimator) {
    expandedEntry.enterAnimator = snapshot.enterAnimator;
  }

  if (snapshot.exitAnimator) {
    expandedEntry.exitAnimator = snapshot.exitAnimator;
  }

  if (snapshot.popEnterAnimator) {
    expandedEntry.popEnterAnimator = snapshot.popEnterAnimator;
  }

  if (snapshot.popExitAnimator) {
    expandedEntry.popExitAnimator = snapshot.popExitAnimator;
  }

  expandedEntry.transitionName = snapshot.transitionName;
}

function clearEntry(entry) {
  if (entry.fragment) {
    fragment_transitions_1._clearFragment(entry);
  }

  entry.recreated = false;
  entry.fragment = null;
  var page = entry.resolvedPage;

  if (page._context) {
    entry.resolvedPage._tearDownUI(true);
  }
}

var framesCounter = 0;
var framesCache = new Array();

var AndroidFrame = function (_super) {
  __extends(AndroidFrame, _super);

  function AndroidFrame(owner) {
    var _this = _super.call(this) || this;

    _this._showActionBar = true;
    _this.cachePagesOnNavigate = true;
    _this._owner = owner;
    _this.frameId = framesCounter++;
    framesCache.push(new WeakRef(_this));
    return _this;
  }

  Object.defineProperty(AndroidFrame.prototype, "showActionBar", {
    get: function get() {
      return this._showActionBar;
    },
    set: function set(value) {
      if (this._showActionBar !== value) {
        this._showActionBar = value;

        if (this.owner.currentPage) {
          this.owner.currentPage.actionBar.update();
        }
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(AndroidFrame.prototype, "activity", {
    get: function get() {
      var activity = this.owner._context;

      if (activity) {
        return activity;
      }

      var currView = this._owner.parent;

      while (currView) {
        if (currView instanceof Frame) {
          return currView.android.activity;
        }

        currView = currView.parent;
      }

      return undefined;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(AndroidFrame.prototype, "actionBar", {
    get: function get() {
      var activity = this.currentActivity;

      if (!activity) {
        return undefined;
      }

      var bar = activity.getActionBar();

      if (!bar) {
        return undefined;
      }

      return bar;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(AndroidFrame.prototype, "currentActivity", {
    get: function get() {
      var activity = this.activity;

      if (activity) {
        return activity;
      }

      var frames = frame_common_1.stack();

      for (var length_1 = frames.length, i = length_1 - 1; i >= 0; i--) {
        activity = frames[i].android.activity;

        if (activity) {
          return activity;
        }
      }

      return undefined;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(AndroidFrame.prototype, "owner", {
    get: function get() {
      return this._owner;
    },
    enumerable: true,
    configurable: true
  });

  AndroidFrame.prototype.canGoBack = function () {
    if (!this.activity) {
      return false;
    }

    return this.activity.getIntent().getAction() !== android.content.Intent.ACTION_MAIN;
  };

  AndroidFrame.prototype.fragmentForPage = function (entry) {
    var tag = entry && entry.fragmentTag;

    if (tag) {
      return this.owner._getFragmentManager().findFragmentByTag(tag);
    }

    return undefined;
  };

  return AndroidFrame;
}(frame_common_1.Observable);

function findPageForFragment(fragment, frame) {
  var fragmentTag = fragment.getTag();

  if (frame_common_1.traceEnabled()) {
    frame_common_1.traceWrite("Finding page for " + fragmentTag + ".", frame_common_1.traceCategories.NativeLifecycle);
  }

  var entry;
  var current = frame._currentEntry;
  var navigating = frame._executingEntry;

  if (current && current.fragmentTag === fragmentTag) {
    entry = current;
  } else if (navigating && navigating.fragmentTag === fragmentTag) {
    entry = navigating;
  }

  var page;

  if (entry) {
    entry.recreated = true;
    page = entry.resolvedPage;
  }

  if (page) {
    var callbacks = fragment[CALLBACKS];
    callbacks.frame = frame;
    callbacks.entry = entry;
    entry.fragment = fragment;

    fragment_transitions_1._updateTransitions(entry);
  } else {
    throw new Error("Could not find a page for " + fragmentTag + ".");
  }
}

function startActivity(activity, frameId) {
  var intent = new android.content.Intent(activity, activity.getClass());
  intent.setAction(android.content.Intent.ACTION_DEFAULT);
  intent.putExtra(INTENT_EXTRA, frameId);
  activity.startActivity(intent);
}

function getFrameByNumberId(frameId) {
  for (var i = 0; i < framesCache.length; i++) {
    var aliveFrame = framesCache[i].get();

    if (aliveFrame && aliveFrame.frameId === frameId) {
      return aliveFrame.owner;
    }
  }

  return null;
}

function ensureFragmentClass() {
  if (fragmentClass) {
    return;
  }

  __webpack_require__("../node_modules/tns-core-modules/ui/frame/fragment.js");

  if (!fragmentClass) {
    throw new Error("Failed to initialize the extended android.support.v4.app.Fragment class");
  }
}

var fragmentClass;

function setFragmentClass(clazz) {
  if (fragmentClass) {
    throw new Error("Fragment class already initialized");
  }

  fragmentClass = clazz;
}

exports.setFragmentClass = setFragmentClass;

var FragmentCallbacksImplementation = function () {
  function FragmentCallbacksImplementation() {}

  FragmentCallbacksImplementation.prototype.onHiddenChanged = function (fragment, hidden, superFunc) {
    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite(fragment + ".onHiddenChanged(" + hidden + ")", frame_common_1.traceCategories.NativeLifecycle);
    }

    superFunc.call(fragment, hidden);
  };

  FragmentCallbacksImplementation.prototype.onCreateAnimator = function (fragment, transit, enter, nextAnim, superFunc) {
    if (!enter && fragment.getRemovingParentFragment()) {
      return superFunc.call(fragment, transit, enter, nextAnim);
    }

    var nextAnimString;

    switch (nextAnim) {
      case -10:
        nextAnimString = "enter";
        break;

      case -20:
        nextAnimString = "exit";
        break;

      case -30:
        nextAnimString = "popEnter";
        break;

      case -40:
        nextAnimString = "popExit";
        break;
    }

    var animator = fragment_transitions_1._onFragmentCreateAnimator(this.entry, fragment, nextAnim, enter);

    if (!animator) {
      animator = superFunc.call(fragment, transit, enter, nextAnim);
    }

    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite(fragment + ".onCreateAnimator(" + transit + ", " + (enter ? "enter" : "exit") + ", " + nextAnimString + "): " + (animator ? "animator" : "no animator"), frame_common_1.traceCategories.NativeLifecycle);
    }

    return animator;
  };

  FragmentCallbacksImplementation.prototype.onCreate = function (fragment, savedInstanceState, superFunc) {
    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite(fragment + ".onCreate(" + savedInstanceState + ")", frame_common_1.traceCategories.NativeLifecycle);
    }

    superFunc.call(fragment, savedInstanceState);

    if (!this.entry) {
      var args = fragment.getArguments();
      var frameId = args.getInt(FRAMEID);
      var frame = getFrameByNumberId(frameId);

      if (!frame) {
        throw new Error("Cannot find Frame for " + fragment);
      }

      findPageForFragment(fragment, frame);
    }
  };

  FragmentCallbacksImplementation.prototype.onCreateView = function (fragment, inflater, container, savedInstanceState, superFunc) {
    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite(fragment + ".onCreateView(inflater, container, " + savedInstanceState + ")", frame_common_1.traceCategories.NativeLifecycle);
    }

    var entry = this.entry;

    if (!entry) {
      frame_common_1.traceError(fragment + ".onCreateView: entry is null or undefined");
      return null;
    }

    var page = entry.resolvedPage;

    if (!page) {
      frame_common_1.traceError(fragment + ".onCreateView: entry has no resolvedPage");
      return null;
    }

    var frame = this.frame;

    if (!frame) {
      frame_common_1.traceError(fragment + ".onCreateView: this.frame is null or undefined");
      return null;
    }

    if (page.parent === frame) {
      if (!page._context) {
        var context_2 = container && container.getContext() || inflater && inflater.getContext();

        page._setupUI(context_2);
      }
    } else {
      if (!frame._styleScope) {
        page._updateStyleScope();
      }

      frame._addView(page);
    }

    if (frame.isLoaded && !page.isLoaded) {
      page.callLoaded();
    }

    var savedState = entry.viewSavedState;

    if (savedState) {
      page.nativeViewProtected.restoreHierarchyState(savedState);
      entry.viewSavedState = null;
    }

    var nativeView = page.nativeViewProtected;

    if (nativeView != null) {
      var parentView = nativeView.getParent();

      if (parentView instanceof android.view.ViewGroup) {
        if (parentView.getChildCount() === 0) {
          parentView.addViewInLayout(nativeView, -1, new org.nativescript.widgets.CommonLayoutParams());
        }

        parentView.removeView(nativeView);
      }
    }

    return page.nativeViewProtected;
  };

  FragmentCallbacksImplementation.prototype.onSaveInstanceState = function (fragment, outState, superFunc) {
    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite(fragment + ".onSaveInstanceState(" + outState + ")", frame_common_1.traceCategories.NativeLifecycle);
    }

    superFunc.call(fragment, outState);
  };

  FragmentCallbacksImplementation.prototype.onDestroyView = function (fragment, superFunc) {
    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite(fragment + ".onDestroyView()", frame_common_1.traceCategories.NativeLifecycle);
    }

    superFunc.call(fragment);
  };

  FragmentCallbacksImplementation.prototype.onDestroy = function (fragment, superFunc) {
    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite(fragment + ".onDestroy()", frame_common_1.traceCategories.NativeLifecycle);
    }

    superFunc.call(fragment);
    var entry = this.entry;

    if (!entry) {
      frame_common_1.traceError(fragment + ".onDestroy: entry is null or undefined");
      return null;
    }

    entry.fragment = null;
    var page = entry.resolvedPage;

    if (!page) {
      frame_common_1.traceError(fragment + ".onDestroy: entry has no resolvedPage");
      return null;
    }
  };

  FragmentCallbacksImplementation.prototype.onStop = function (fragment, superFunc) {
    superFunc.call(fragment);
  };

  FragmentCallbacksImplementation.prototype.toStringOverride = function (fragment, superFunc) {
    var entry = this.entry;

    if (entry) {
      return entry.fragmentTag + "<" + entry.resolvedPage + ">";
    } else {
      return "NO ENTRY, " + superFunc.call(fragment);
    }
  };

  __decorate([profiling_1.profile], FragmentCallbacksImplementation.prototype, "onHiddenChanged", null);

  __decorate([profiling_1.profile], FragmentCallbacksImplementation.prototype, "onCreateAnimator", null);

  __decorate([profiling_1.profile], FragmentCallbacksImplementation.prototype, "onCreate", null);

  __decorate([profiling_1.profile], FragmentCallbacksImplementation.prototype, "onCreateView", null);

  __decorate([profiling_1.profile], FragmentCallbacksImplementation.prototype, "onSaveInstanceState", null);

  __decorate([profiling_1.profile], FragmentCallbacksImplementation.prototype, "onDestroyView", null);

  __decorate([profiling_1.profile], FragmentCallbacksImplementation.prototype, "onDestroy", null);

  __decorate([profiling_1.profile], FragmentCallbacksImplementation.prototype, "onStop", null);

  __decorate([profiling_1.profile], FragmentCallbacksImplementation.prototype, "toStringOverride", null);

  return FragmentCallbacksImplementation;
}();

var ActivityCallbacksImplementation = function () {
  function ActivityCallbacksImplementation() {}

  ActivityCallbacksImplementation.prototype.getRootView = function () {
    return this._rootView;
  };

  ActivityCallbacksImplementation.prototype.onCreate = function (activity, savedInstanceState, superFunc) {
    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite("Activity.onCreate(" + savedInstanceState + ")", frame_common_1.traceCategories.NativeLifecycle);
    }

    var isRestart = !!savedInstanceState && exports.moduleLoaded;
    superFunc.call(activity, isRestart ? savedInstanceState : null);

    if (savedInstanceState) {
      var rootViewId = savedInstanceState.getInt(ROOT_VIEW_ID_EXTRA, -1);

      if (rootViewId !== -1 && activityRootViewsMap.has(rootViewId)) {
        this._rootView = activityRootViewsMap.get(rootViewId).get();
      }
    }

    this.setActivityContent(activity, savedInstanceState, true);
    exports.moduleLoaded = true;
  };

  ActivityCallbacksImplementation.prototype.onSaveInstanceState = function (activity, outState, superFunc) {
    superFunc.call(activity, outState);
    var rootView = this._rootView;

    if (rootView instanceof Frame) {
      outState.putInt(INTENT_EXTRA, rootView.android.frameId);

      rootView._saveFragmentsState();
    }

    outState.putInt(ROOT_VIEW_ID_EXTRA, rootView._domId);
  };

  ActivityCallbacksImplementation.prototype.onStart = function (activity, superFunc) {
    superFunc.call(activity);

    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite("NativeScriptActivity.onStart();", frame_common_1.traceCategories.NativeLifecycle);
    }

    var rootView = this._rootView;

    if (rootView && !rootView.isLoaded) {
      rootView.callLoaded();
    }
  };

  ActivityCallbacksImplementation.prototype.onStop = function (activity, superFunc) {
    superFunc.call(activity);

    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite("NativeScriptActivity.onStop();", frame_common_1.traceCategories.NativeLifecycle);
    }

    var rootView = this._rootView;

    if (rootView && rootView.isLoaded) {
      rootView.callUnloaded();
    }
  };

  ActivityCallbacksImplementation.prototype.onDestroy = function (activity, superFunc) {
    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite("NativeScriptActivity.onDestroy();", frame_common_1.traceCategories.NativeLifecycle);
    }

    var rootView = this._rootView;

    if (rootView) {
      rootView._tearDownUI(true);
    }

    var exitArgs = {
      eventName: application.exitEvent,
      object: application.android,
      android: activity
    };
    application.notify(exitArgs);
    superFunc.call(activity);
  };

  ActivityCallbacksImplementation.prototype.onBackPressed = function (activity, superFunc) {
    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite("NativeScriptActivity.onBackPressed;", frame_common_1.traceCategories.NativeLifecycle);
    }

    var args = {
      eventName: "activityBackPressed",
      object: application.android,
      activity: activity,
      cancel: false
    };
    application.android.notify(args);

    if (args.cancel) {
      return;
    }

    var view = this._rootView;
    var callSuper = false;

    if (view instanceof Frame) {
      callSuper = !frame_common_1.goBack();
    } else {
      var viewArgs = {
        eventName: "activityBackPressed",
        object: view,
        activity: activity,
        cancel: false
      };
      view.notify(viewArgs);

      if (!viewArgs.cancel && !view.onBackPressed()) {
        callSuper = true;
      }
    }

    if (callSuper) {
      superFunc.call(activity);
    }
  };

  ActivityCallbacksImplementation.prototype.onRequestPermissionsResult = function (activity, requestCode, permissions, grantResults, superFunc) {
    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite("NativeScriptActivity.onRequestPermissionsResult;", frame_common_1.traceCategories.NativeLifecycle);
    }

    application.android.notify({
      eventName: "activityRequestPermissions",
      object: application.android,
      activity: activity,
      requestCode: requestCode,
      permissions: permissions,
      grantResults: grantResults
    });
  };

  ActivityCallbacksImplementation.prototype.onActivityResult = function (activity, requestCode, resultCode, data, superFunc) {
    superFunc.call(activity, requestCode, resultCode, data);

    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite("NativeScriptActivity.onActivityResult(" + requestCode + ", " + resultCode + ", " + data + ")", frame_common_1.traceCategories.NativeLifecycle);
    }

    application.android.notify({
      eventName: "activityResult",
      object: application.android,
      activity: activity,
      requestCode: requestCode,
      resultCode: resultCode,
      intent: data
    });
  };

  ActivityCallbacksImplementation.prototype.resetActivityContent = function (activity) {
    if (this._rootView) {
      var manager = this._rootView._getFragmentManager();

      manager.executePendingTransactions();

      this._rootView._onRootViewReset();
    }

    this._rootView = null;
    this.setActivityContent(activity, null, false);

    this._rootView.callLoaded();
  };

  ActivityCallbacksImplementation.prototype.setActivityContent = function (activity, savedInstanceState, fireLaunchEvent) {
    var shouldCreateRootFrame = application.shouldCreateRootFrame();
    var rootView = this._rootView;

    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite("Frame.setActivityContent rootView: " + rootView + " shouldCreateRootFrame: " + shouldCreateRootFrame + " fireLaunchEvent: " + fireLaunchEvent, frame_common_1.traceCategories.NativeLifecycle);
    }

    if (!rootView) {
      var mainEntry = application.getMainEntry();
      var intent = activity.getIntent();

      if (fireLaunchEvent) {
        rootView = notifyLaunch(intent, savedInstanceState);
      }

      if (shouldCreateRootFrame) {
        var extras = intent.getExtras();
        var frameId = -1;

        if (extras) {
          frameId = extras.getInt(INTENT_EXTRA, -1);
        }

        if (savedInstanceState && frameId < 0) {
          frameId = savedInstanceState.getInt(INTENT_EXTRA, -1);
        }

        if (!rootView) {
          rootView = getFrameByNumberId(frameId) || new Frame();
        }

        if (rootView instanceof Frame) {
          rootView.navigate(mainEntry);
        } else {
          throw new Error("A Frame must be used to navigate to a Page.");
        }
      } else {
        rootView = rootView || builder_1.createViewFromEntry(mainEntry);
      }

      this._rootView = rootView;
      activityRootViewsMap.set(rootView._domId, new WeakRef(rootView));
    }

    if (shouldCreateRootFrame) {
      rootView._setupUI(activity);
    } else {
      rootView._setupAsRootView(activity);
    }

    activity.setContentView(rootView.nativeViewProtected, new org.nativescript.widgets.CommonLayoutParams());
  };

  __decorate([profiling_1.profile], ActivityCallbacksImplementation.prototype, "onCreate", null);

  __decorate([profiling_1.profile], ActivityCallbacksImplementation.prototype, "onSaveInstanceState", null);

  __decorate([profiling_1.profile], ActivityCallbacksImplementation.prototype, "onStart", null);

  __decorate([profiling_1.profile], ActivityCallbacksImplementation.prototype, "onStop", null);

  __decorate([profiling_1.profile], ActivityCallbacksImplementation.prototype, "onDestroy", null);

  __decorate([profiling_1.profile], ActivityCallbacksImplementation.prototype, "onBackPressed", null);

  __decorate([profiling_1.profile], ActivityCallbacksImplementation.prototype, "onRequestPermissionsResult", null);

  __decorate([profiling_1.profile], ActivityCallbacksImplementation.prototype, "onActivityResult", null);

  return ActivityCallbacksImplementation;
}();

var notifyLaunch = profiling_1.profile("notifyLaunch", function notifyLaunch(intent, savedInstanceState) {
  var launchArgs = {
    eventName: application.launchEvent,
    object: application.android,
    android: intent,
    savedInstanceState: savedInstanceState
  };
  application.notify(launchArgs);
  application.notify({
    eventName: "loadAppCss",
    object: this,
    cssFile: application.getCssFileName()
  });
  return launchArgs.root;
});

function setActivityCallbacks(activity) {
  activity[CALLBACKS] = new ActivityCallbacksImplementation();
}

exports.setActivityCallbacks = setActivityCallbacks;

function setFragmentCallbacks(fragment) {
  fragment[CALLBACKS] = new FragmentCallbacksImplementation();
}

exports.setFragmentCallbacks = setFragmentCallbacks;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/gestures/gestures-common.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var GestureTypes;

(function (GestureTypes) {
  GestureTypes[GestureTypes["tap"] = 1] = "tap";
  GestureTypes[GestureTypes["doubleTap"] = 2] = "doubleTap";
  GestureTypes[GestureTypes["pinch"] = 4] = "pinch";
  GestureTypes[GestureTypes["pan"] = 8] = "pan";
  GestureTypes[GestureTypes["swipe"] = 16] = "swipe";
  GestureTypes[GestureTypes["rotation"] = 32] = "rotation";
  GestureTypes[GestureTypes["longPress"] = 64] = "longPress";
  GestureTypes[GestureTypes["touch"] = 128] = "touch";
})(GestureTypes = exports.GestureTypes || (exports.GestureTypes = {}));

var GestureStateTypes;

(function (GestureStateTypes) {
  GestureStateTypes[GestureStateTypes["cancelled"] = 0] = "cancelled";
  GestureStateTypes[GestureStateTypes["began"] = 1] = "began";
  GestureStateTypes[GestureStateTypes["changed"] = 2] = "changed";
  GestureStateTypes[GestureStateTypes["ended"] = 3] = "ended";
})(GestureStateTypes = exports.GestureStateTypes || (exports.GestureStateTypes = {}));

var SwipeDirection;

(function (SwipeDirection) {
  SwipeDirection[SwipeDirection["right"] = 1] = "right";
  SwipeDirection[SwipeDirection["left"] = 2] = "left";
  SwipeDirection[SwipeDirection["up"] = 4] = "up";
  SwipeDirection[SwipeDirection["down"] = 8] = "down";
})(SwipeDirection = exports.SwipeDirection || (exports.SwipeDirection = {}));

var TouchAction;

(function (TouchAction) {
  TouchAction.down = "down";
  TouchAction.up = "up";
  TouchAction.move = "move";
  TouchAction.cancel = "cancel";
})(TouchAction = exports.TouchAction || (exports.TouchAction = {}));

function toString(type, separator) {
  var types = new Array();

  if (type & GestureTypes.tap) {
    types.push("tap");
  }

  if (type & GestureTypes.doubleTap) {
    types.push("doubleTap");
  }

  if (type & GestureTypes.pinch) {
    types.push("pinch");
  }

  if (type & GestureTypes.pan) {
    types.push("pan");
  }

  if (type & GestureTypes.swipe) {
    types.push("swipe");
  }

  if (type & GestureTypes.rotation) {
    types.push("rotation");
  }

  if (type & GestureTypes.longPress) {
    types.push("longPress");
  }

  if (type & GestureTypes.touch) {
    types.push("touch");
  }

  return types.join(separator);
}

exports.toString = toString;

function fromString(type) {
  var t = type.trim().toLowerCase();

  if (t === "tap") {
    return GestureTypes.tap;
  } else if (t === "doubletap") {
    return GestureTypes.doubleTap;
  } else if (t === "pinch") {
    return GestureTypes.pinch;
  } else if (t === "pan") {
    return GestureTypes.pan;
  } else if (t === "swipe") {
    return GestureTypes.swipe;
  } else if (t === "rotation") {
    return GestureTypes.rotation;
  } else if (t === "longpress") {
    return GestureTypes.longPress;
  } else if (t === "touch") {
    return GestureTypes.touch;
  }

  return undefined;
}

exports.fromString = fromString;

var GesturesObserverBase = function () {
  function GesturesObserverBase(target, callback, context) {
    this._target = target;
    this._callback = callback;
    this._context = context;
  }

  Object.defineProperty(GesturesObserverBase.prototype, "callback", {
    get: function get() {
      return this._callback;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(GesturesObserverBase.prototype, "target", {
    get: function get() {
      return this._target;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(GesturesObserverBase.prototype, "context", {
    get: function get() {
      return this._context;
    },
    enumerable: true,
    configurable: true
  });

  GesturesObserverBase.prototype.disconnect = function () {
    if (this.target) {
      var list = this.target.getGestureObservers(this.type);

      if (list && list.length > 0) {
        for (var i = 0; i < list.length; i++) {
          if (list[i].callback === this.callback) {
            break;
          }
        }

        list.length = 0;
        this.target._gestureObservers[this.type] = undefined;
        delete this.target._gestureObservers[this.type];
      }
    }

    this._target = null;
    this._callback = null;
    this._context = null;
  };

  return GesturesObserverBase;
}();

exports.GesturesObserverBase = GesturesObserverBase;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/gestures/gestures.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var gestures_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/gestures/gestures-common.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/gestures/gestures-common.js"));

var TapAndDoubleTapGestureListener;

function initializeTapAndDoubleTapGestureListener() {
  if (TapAndDoubleTapGestureListener) {
    return;
  }

  var TapAndDoubleTapGestureListenerImpl = function (_super) {
    __extends(TapAndDoubleTapGestureListenerImpl, _super);

    function TapAndDoubleTapGestureListenerImpl(observer, target, type) {
      var _this = _super.call(this) || this;

      _this._observer = observer;
      _this._target = target;
      _this._type = type;
      return global.__native(_this);
    }

    TapAndDoubleTapGestureListenerImpl.prototype.onSingleTapUp = function (motionEvent) {
      if (this._type & gestures_common_1.GestureTypes.tap) {
        var args = _getArgs(gestures_common_1.GestureTypes.tap, this._target, motionEvent);

        _executeCallback(this._observer, args);
      }

      return true;
    };

    TapAndDoubleTapGestureListenerImpl.prototype.onDoubleTap = function (motionEvent) {
      if (this._type & gestures_common_1.GestureTypes.doubleTap) {
        var args = _getArgs(gestures_common_1.GestureTypes.doubleTap, this._target, motionEvent);

        _executeCallback(this._observer, args);
      }

      return true;
    };

    TapAndDoubleTapGestureListenerImpl.prototype.onDown = function (motionEvent) {
      return true;
    };

    TapAndDoubleTapGestureListenerImpl.prototype.onLongPress = function (motionEvent) {
      if (this._type & gestures_common_1.GestureTypes.longPress) {
        var args = _getArgs(gestures_common_1.GestureTypes.longPress, this._target, motionEvent);

        _executeCallback(this._observer, args);
      }
    };

    return TapAndDoubleTapGestureListenerImpl;
  }(android.view.GestureDetector.SimpleOnGestureListener);

  TapAndDoubleTapGestureListener = TapAndDoubleTapGestureListenerImpl;
}

var PinchGestureListener;

function initializePinchGestureListener() {
  if (PinchGestureListener) {
    return;
  }

  var PinchGestureListenerImpl = function (_super) {
    __extends(PinchGestureListenerImpl, _super);

    function PinchGestureListenerImpl(observer, target) {
      var _this = _super.call(this) || this;

      _this._observer = observer;
      _this._target = target;
      return global.__native(_this);
    }

    PinchGestureListenerImpl.prototype.onScaleBegin = function (detector) {
      this._scale = detector.getScaleFactor();
      var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, gestures_common_1.GestureStateTypes.began);

      _executeCallback(this._observer, args);

      return true;
    };

    PinchGestureListenerImpl.prototype.onScale = function (detector) {
      this._scale *= detector.getScaleFactor();
      var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, gestures_common_1.GestureStateTypes.changed);

      _executeCallback(this._observer, args);

      return true;
    };

    PinchGestureListenerImpl.prototype.onScaleEnd = function (detector) {
      this._scale *= detector.getScaleFactor();
      var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, gestures_common_1.GestureStateTypes.ended);

      _executeCallback(this._observer, args);
    };

    return PinchGestureListenerImpl;
  }(android.view.ScaleGestureDetector.SimpleOnScaleGestureListener);

  PinchGestureListener = PinchGestureListenerImpl;
}

var SwipeGestureListener;

function initializeSwipeGestureListener() {
  if (SwipeGestureListener) {
    return;
  }

  var SwipeGestureListenerImpl = function (_super) {
    __extends(SwipeGestureListenerImpl, _super);

    function SwipeGestureListenerImpl(observer, target) {
      var _this = _super.call(this) || this;

      _this._observer = observer;
      _this._target = target;
      return global.__native(_this);
    }

    SwipeGestureListenerImpl.prototype.onDown = function (motionEvent) {
      return true;
    };

    SwipeGestureListenerImpl.prototype.onFling = function (initialEvent, currentEvent, velocityX, velocityY) {
      var result = false;
      var args;

      try {
        var deltaY = currentEvent.getY() - initialEvent.getY();
        var deltaX = currentEvent.getX() - initialEvent.getX();

        if (Math.abs(deltaX) > Math.abs(deltaY)) {
          if (Math.abs(deltaX) > SWIPE_THRESHOLD && Math.abs(velocityX) > SWIPE_VELOCITY_THRESHOLD) {
            if (deltaX > 0) {
              args = _getSwipeArgs(gestures_common_1.SwipeDirection.right, this._target, initialEvent, currentEvent);

              _executeCallback(this._observer, args);

              result = true;
            } else {
              args = _getSwipeArgs(gestures_common_1.SwipeDirection.left, this._target, initialEvent, currentEvent);

              _executeCallback(this._observer, args);

              result = true;
            }
          }
        } else {
          if (Math.abs(deltaY) > SWIPE_THRESHOLD && Math.abs(velocityY) > SWIPE_VELOCITY_THRESHOLD) {
            if (deltaY > 0) {
              args = _getSwipeArgs(gestures_common_1.SwipeDirection.down, this._target, initialEvent, currentEvent);

              _executeCallback(this._observer, args);

              result = true;
            } else {
              args = _getSwipeArgs(gestures_common_1.SwipeDirection.up, this._target, initialEvent, currentEvent);

              _executeCallback(this._observer, args);

              result = true;
            }
          }
        }
      } catch (ex) {}

      return result;
    };

    return SwipeGestureListenerImpl;
  }(android.view.GestureDetector.SimpleOnGestureListener);

  SwipeGestureListener = SwipeGestureListenerImpl;
}

var SWIPE_THRESHOLD = 100;
var SWIPE_VELOCITY_THRESHOLD = 100;
var INVALID_POINTER_ID = -1;
var TO_DEGREES = 180 / Math.PI;

function observe(target, type, callback, context) {
  var observer = new GesturesObserver(target, callback, context);
  observer.observe(type);
  return observer;
}

exports.observe = observe;

var GesturesObserver = function (_super) {
  __extends(GesturesObserver, _super);

  function GesturesObserver() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  GesturesObserver.prototype.observe = function (type) {
    var _this = this;

    if (this.target) {
      this.type = type;

      this._onTargetLoaded = function (args) {
        _this._attach(_this.target, type);
      };

      this._onTargetUnloaded = function (args) {
        _this._detach();
      };

      this.target.on("loaded", this._onTargetLoaded);
      this.target.on("unloaded", this._onTargetUnloaded);

      if (this.target.isLoaded) {
        this._attach(this.target, type);
      }
    }
  };

  GesturesObserver.prototype.disconnect = function () {
    this._detach();

    if (this.target) {
      this.target.off("loaded", this._onTargetLoaded);
      this.target.off("unloaded", this._onTargetUnloaded);
      this._onTargetLoaded = null;
      this._onTargetUnloaded = null;
    }

    _super.prototype.disconnect.call(this);
  };

  GesturesObserver.prototype._detach = function () {
    this._notifyTouch = false;
    this._simpleGestureDetector = null;
    this._scaleGestureDetector = null;
    this._swipeGestureDetector = null;
    this._panGestureDetector = null;
    this._rotateGestureDetector = null;
    this._eventData = null;
  };

  GesturesObserver.prototype._attach = function (target, type) {
    this._detach();

    if (type & gestures_common_1.GestureTypes.tap || type & gestures_common_1.GestureTypes.doubleTap || type & gestures_common_1.GestureTypes.longPress) {
      initializeTapAndDoubleTapGestureListener();
      this._simpleGestureDetector = new android.support.v4.view.GestureDetectorCompat(target._context, new TapAndDoubleTapGestureListener(this, this.target, type));
    }

    if (type & gestures_common_1.GestureTypes.pinch) {
      initializePinchGestureListener();
      this._scaleGestureDetector = new android.view.ScaleGestureDetector(target._context, new PinchGestureListener(this, this.target));
    }

    if (type & gestures_common_1.GestureTypes.swipe) {
      initializeSwipeGestureListener();
      this._swipeGestureDetector = new android.support.v4.view.GestureDetectorCompat(target._context, new SwipeGestureListener(this, this.target));
    }

    if (type & gestures_common_1.GestureTypes.pan) {
      this._panGestureDetector = new CustomPanGestureDetector(this, this.target);
    }

    if (type & gestures_common_1.GestureTypes.rotation) {
      this._rotateGestureDetector = new CustomRotateGestureDetector(this, this.target);
    }

    if (type & gestures_common_1.GestureTypes.touch) {
      this._notifyTouch = true;
    }
  };

  GesturesObserver.prototype.androidOnTouchEvent = function (motionEvent) {
    if (this._notifyTouch) {
      if (!this._eventData) {
        this._eventData = new TouchGestureEventData();
      }

      this._eventData.prepare(this.target, motionEvent);

      _executeCallback(this, this._eventData);
    }

    if (this._simpleGestureDetector) {
      this._simpleGestureDetector.onTouchEvent(motionEvent);
    }

    if (this._scaleGestureDetector) {
      this._scaleGestureDetector.onTouchEvent(motionEvent);
    }

    if (this._swipeGestureDetector) {
      this._swipeGestureDetector.onTouchEvent(motionEvent);
    }

    if (this._panGestureDetector) {
      this._panGestureDetector.onTouchEvent(motionEvent);
    }

    if (this._rotateGestureDetector) {
      this._rotateGestureDetector.onTouchEvent(motionEvent);
    }
  };

  return GesturesObserver;
}(gestures_common_1.GesturesObserverBase);

exports.GesturesObserver = GesturesObserver;

function _getArgs(type, view, e) {
  return {
    type: type,
    view: view,
    android: e,
    ios: undefined,
    object: view,
    eventName: gestures_common_1.toString(type)
  };
}

function _getSwipeArgs(direction, view, initialEvent, currentEvent) {
  return {
    type: gestures_common_1.GestureTypes.swipe,
    view: view,
    android: {
      initial: initialEvent,
      current: currentEvent
    },
    direction: direction,
    ios: undefined,
    object: view,
    eventName: gestures_common_1.toString(gestures_common_1.GestureTypes.swipe)
  };
}

function _getPanArgs(deltaX, deltaY, view, state, initialEvent, currentEvent) {
  return {
    type: gestures_common_1.GestureTypes.pan,
    view: view,
    android: {
      initial: initialEvent,
      current: currentEvent
    },
    deltaX: deltaX,
    deltaY: deltaY,
    ios: undefined,
    object: view,
    eventName: gestures_common_1.toString(gestures_common_1.GestureTypes.pan),
    state: state
  };
}

function _executeCallback(observer, args) {
  if (observer && observer.callback) {
    observer.callback.call(observer._context, args);
  }
}

var PinchGestureEventData = function () {
  function PinchGestureEventData(view, android, scale, object, state) {
    this.view = view;
    this.android = android;
    this.scale = scale;
    this.object = object;
    this.state = state;
    this.type = gestures_common_1.GestureTypes.pinch;
    this.eventName = gestures_common_1.toString(gestures_common_1.GestureTypes.pinch);
  }

  PinchGestureEventData.prototype.getFocusX = function () {
    return this.android.getFocusX() / utils_1.layout.getDisplayDensity();
  };

  PinchGestureEventData.prototype.getFocusY = function () {
    return this.android.getFocusY() / utils_1.layout.getDisplayDensity();
  };

  return PinchGestureEventData;
}();

var CustomPanGestureDetector = function () {
  function CustomPanGestureDetector(observer, target) {
    this.observer = observer;
    this.target = target;
    this.isTracking = false;
    this.density = utils_1.layout.getDisplayDensity();
  }

  CustomPanGestureDetector.prototype.onTouchEvent = function (event) {
    switch (event.getActionMasked()) {
      case android.view.MotionEvent.ACTION_UP:
      case android.view.MotionEvent.ACTION_CANCEL:
        this.trackStop(event, false);
        break;

      case android.view.MotionEvent.ACTION_DOWN:
      case android.view.MotionEvent.ACTION_POINTER_DOWN:
      case android.view.MotionEvent.ACTION_POINTER_UP:
        this.trackStop(event, true);
        break;

      case android.view.MotionEvent.ACTION_MOVE:
        if (!this.isTracking) {
          this.trackStart(event);
        }

        this.trackChange(event);
        break;
    }

    return true;
  };

  CustomPanGestureDetector.prototype.trackStop = function (currentEvent, cahceEvent) {
    if (this.isTracking) {
      var args = _getPanArgs(this.deltaX, this.deltaY, this.target, gestures_common_1.GestureStateTypes.ended, null, currentEvent);

      _executeCallback(this.observer, args);

      this.deltaX = undefined;
      this.deltaY = undefined;
      this.isTracking = false;
    }

    if (cahceEvent) {
      this.lastEventCache = currentEvent;
    } else {
      this.lastEventCache = undefined;
    }
  };

  CustomPanGestureDetector.prototype.trackStart = function (currentEvent) {
    var inital = this.getEventCoordinates(this.lastEventCache ? this.lastEventCache : currentEvent);
    this.initialX = inital.x;
    this.initialY = inital.y;
    this.isTracking = true;

    var args = _getPanArgs(0, 0, this.target, gestures_common_1.GestureStateTypes.began, null, currentEvent);

    _executeCallback(this.observer, args);
  };

  CustomPanGestureDetector.prototype.trackChange = function (currentEvent) {
    var current = this.getEventCoordinates(currentEvent);
    this.deltaX = current.x - this.initialX;
    this.deltaY = current.y - this.initialY;

    var args = _getPanArgs(this.deltaX, this.deltaY, this.target, gestures_common_1.GestureStateTypes.changed, null, currentEvent);

    _executeCallback(this.observer, args);
  };

  CustomPanGestureDetector.prototype.getEventCoordinates = function (event) {
    var count = event.getPointerCount();

    if (count === 1) {
      return {
        x: event.getRawX() / this.density,
        y: event.getRawY() / this.density
      };
    } else {
      var offX = event.getRawX() - event.getX();
      var offY = event.getRawY() - event.getY();
      var res = {
        x: 0,
        y: 0
      };

      for (var i = 0; i < count; i++) {
        res.x += event.getX(i) + offX;
        res.y += event.getY(i) + offY;
      }

      res.x /= count * this.density;
      res.y /= count * this.density;
      return res;
    }
  };

  return CustomPanGestureDetector;
}();

var CustomRotateGestureDetector = function () {
  function CustomRotateGestureDetector(observer, target) {
    this.observer = observer;
    this.target = target;
    this.trackedPtrId1 = INVALID_POINTER_ID;
    this.trackedPtrId2 = INVALID_POINTER_ID;
  }

  Object.defineProperty(CustomRotateGestureDetector.prototype, "isTracking", {
    get: function get() {
      return this.trackedPtrId1 !== INVALID_POINTER_ID && this.trackedPtrId2 !== INVALID_POINTER_ID;
    },
    enumerable: true,
    configurable: true
  });

  CustomRotateGestureDetector.prototype.onTouchEvent = function (event) {
    var pointerID = event.getPointerId(event.getActionIndex());
    var wasTracking = this.isTracking;

    switch (event.getActionMasked()) {
      case android.view.MotionEvent.ACTION_DOWN:
      case android.view.MotionEvent.ACTION_POINTER_DOWN:
        var assigned = false;

        if (this.trackedPtrId1 === INVALID_POINTER_ID && pointerID !== this.trackedPtrId2) {
          this.trackedPtrId1 = pointerID;
          assigned = true;
        } else if (this.trackedPtrId2 === INVALID_POINTER_ID && pointerID !== this.trackedPtrId1) {
          this.trackedPtrId2 = pointerID;
          assigned = true;
        }

        if (assigned && this.isTracking) {
          this.angle = 0;
          this.initalPointersAngle = this.getPointersAngle(event);
          this.executeCallback(event, gestures_common_1.GestureStateTypes.began);
        }

        break;

      case android.view.MotionEvent.ACTION_MOVE:
        if (this.isTracking) {
          this.updateAngle(event);
          this.executeCallback(event, gestures_common_1.GestureStateTypes.changed);
        }

        break;

      case android.view.MotionEvent.ACTION_UP:
      case android.view.MotionEvent.ACTION_POINTER_UP:
        if (pointerID === this.trackedPtrId1) {
          this.trackedPtrId1 = INVALID_POINTER_ID;
        } else if (pointerID === this.trackedPtrId2) {
          this.trackedPtrId2 = INVALID_POINTER_ID;
        }

        if (wasTracking && !this.isTracking) {
          this.executeCallback(event, gestures_common_1.GestureStateTypes.ended);
        }

        break;

      case android.view.MotionEvent.ACTION_CANCEL:
        this.trackedPtrId1 = INVALID_POINTER_ID;
        this.trackedPtrId2 = INVALID_POINTER_ID;

        if (wasTracking) {
          this.executeCallback(event, gestures_common_1.GestureStateTypes.cancelled);
        }

        break;
    }

    return true;
  };

  CustomRotateGestureDetector.prototype.executeCallback = function (event, state) {
    var args = {
      type: gestures_common_1.GestureTypes.rotation,
      view: this.target,
      android: event,
      rotation: this.angle,
      ios: undefined,
      object: this.target,
      eventName: gestures_common_1.toString(gestures_common_1.GestureTypes.rotation),
      state: state
    };

    _executeCallback(this.observer, args);
  };

  CustomRotateGestureDetector.prototype.updateAngle = function (event) {
    var newPointersAngle = this.getPointersAngle(event);
    var result = (newPointersAngle - this.initalPointersAngle) * TO_DEGREES % 360;

    if (result < -180) {
      result += 360;
    }

    if (result > 180) {
      result -= 360;
    }

    this.angle = result;
  };

  CustomRotateGestureDetector.prototype.getPointersAngle = function (event) {
    var firstX = event.getX(event.findPointerIndex(this.trackedPtrId1));
    var firstY = event.getY(event.findPointerIndex(this.trackedPtrId1));
    var secondX = event.getX(event.findPointerIndex(this.trackedPtrId2));
    var secondY = event.getY(event.findPointerIndex(this.trackedPtrId2));
    return Math.atan2(secondY - firstY, secondX - firstX);
  };

  return CustomRotateGestureDetector;
}();

var Pointer = function () {
  function Pointer(id, event) {
    this.event = event;
    this.ios = undefined;
    this.android = id;
  }

  Pointer.prototype.getX = function () {
    return this.event.getX(this.android) / utils_1.layout.getDisplayDensity();
  };

  Pointer.prototype.getY = function () {
    return this.event.getY(this.android) / utils_1.layout.getDisplayDensity();
  };

  return Pointer;
}();

var TouchGestureEventData = function () {
  function TouchGestureEventData() {
    this.eventName = gestures_common_1.toString(gestures_common_1.GestureTypes.touch);
    this.type = gestures_common_1.GestureTypes.touch;
    this.ios = undefined;
  }

  TouchGestureEventData.prototype.prepare = function (view, e) {
    this.view = view;
    this.object = view;
    this.android = e;
    this.action = this.getActionType(e);
    this._activePointers = undefined;
    this._allPointers = undefined;
  };

  TouchGestureEventData.prototype.getPointerCount = function () {
    return this.android.getPointerCount();
  };

  TouchGestureEventData.prototype.getActivePointers = function () {
    if (!this._activePointers) {
      this._activePointers = [new Pointer(this.android.getActionIndex(), this.android)];
    }

    return this._activePointers;
  };

  TouchGestureEventData.prototype.getAllPointers = function () {
    if (!this._allPointers) {
      this._allPointers = [];

      for (var i = 0; i < this.getPointerCount(); i++) {
        this._allPointers.push(new Pointer(i, this.android));
      }
    }

    return this._allPointers;
  };

  TouchGestureEventData.prototype.getX = function () {
    return this.getActivePointers()[0].getX();
  };

  TouchGestureEventData.prototype.getY = function () {
    return this.getActivePointers()[0].getY();
  };

  TouchGestureEventData.prototype.getActionType = function (e) {
    switch (e.getActionMasked()) {
      case android.view.MotionEvent.ACTION_DOWN:
      case android.view.MotionEvent.ACTION_POINTER_DOWN:
        return gestures_common_1.TouchAction.down;

      case android.view.MotionEvent.ACTION_MOVE:
        return gestures_common_1.TouchAction.move;

      case android.view.MotionEvent.ACTION_UP:
      case android.view.MotionEvent.ACTION_POINTER_UP:
        return gestures_common_1.TouchAction.up;

      case android.view.MotionEvent.ACTION_CANCEL:
        return gestures_common_1.TouchAction.cancel;
    }

    return "";
  };

  return TouchGestureEventData;
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/html-view/html-view-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var HtmlViewBase = function (_super) {
  __extends(HtmlViewBase, _super);

  function HtmlViewBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  HtmlViewBase = __decorate([view_1.CSSType("HtmlView")], HtmlViewBase);
  return HtmlViewBase;
}(view_1.View);

exports.HtmlViewBase = HtmlViewBase;
HtmlViewBase.prototype.recycleNativeView = "auto";
exports.htmlProperty = new view_1.Property({
  name: "html",
  defaultValue: "",
  affectsLayout: true
});
exports.htmlProperty.register(HtmlViewBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/html-view/html-view.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var html_view_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/html-view/html-view-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/html-view/html-view-common.js"));

var HtmlView = function (_super) {
  __extends(HtmlView, _super);

  function HtmlView() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  HtmlView.prototype.createNativeView = function () {
    return new android.widget.TextView(this._context);
  };

  HtmlView.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    var nativeView = this.nativeViewProtected;
    nativeView.setLinksClickable(true);
    nativeView.setMovementMethod(android.text.method.LinkMovementMethod.getInstance());
  };

  HtmlView.prototype.resetNativeView = function () {
    _super.prototype.resetNativeView.call(this);

    this.nativeViewProtected.setAutoLinkMask(0);
  };

  HtmlView.prototype[html_view_common_1.htmlProperty.getDefault] = function () {
    return "";
  };

  HtmlView.prototype[html_view_common_1.htmlProperty.setNative] = function (value) {
    var mask = 15;

    if (value.search(/<a\s/i) >= 0) {
      mask = 0;
    }

    this.nativeViewProtected.setAutoLinkMask(mask);
    this.nativeViewProtected.setText(android.text.Html.fromHtml(value));
  };

  return HtmlView;
}(html_view_common_1.HtmlViewBase);

exports.HtmlView = HtmlView;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/image/image-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var image_asset_1 = __webpack_require__("../node_modules/tns-core-modules/image-asset/image-asset.js");

exports.ImageAsset = image_asset_1.ImageAsset;

var image_source_1 = __webpack_require__("../node_modules/tns-core-modules/image-source/image-source.js");

exports.ImageSource = image_source_1.ImageSource;
exports.fromAsset = image_source_1.fromAsset;
exports.fromNativeSource = image_source_1.fromNativeSource;
exports.fromUrl = image_source_1.fromUrl;

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

exports.isDataURI = utils_1.isDataURI;
exports.isFileOrResourcePath = utils_1.isFileOrResourcePath;
exports.RESOURCE_PREFIX = utils_1.RESOURCE_PREFIX;

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var ImageBase = function (_super) {
  __extends(ImageBase, _super);

  function ImageBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(ImageBase.prototype, "tintColor", {
    get: function get() {
      return this.style.tintColor;
    },
    set: function set(value) {
      this.style.tintColor = value;
    },
    enumerable: true,
    configurable: true
  });

  ImageBase.prototype._createImageSourceFromSrc = function (value) {
    var _this = this;

    var originalValue = value;
    var sync = this.loadMode === "sync";

    if (typeof value === "string" || value instanceof String) {
      value = value.trim();
      this.imageSource = null;
      this["_url"] = value;
      this.isLoading = true;
      var source_1 = new image_source_1.ImageSource();

      var imageLoaded = function imageLoaded() {
        var currentValue = _this.src;

        if (currentValue !== originalValue) {
          return;
        }

        _this.imageSource = source_1;
        _this.isLoading = false;
      };

      if (utils_1.isDataURI(value)) {
        var base64Data = value.split(",")[1];

        if (base64Data !== undefined) {
          if (sync) {
            source_1.loadFromBase64(base64Data);
            imageLoaded();
          } else {
            source_1.fromBase64(base64Data).then(imageLoaded);
          }
        }
      } else if (utils_1.isFileOrResourcePath(value)) {
        if (value.indexOf(utils_1.RESOURCE_PREFIX) === 0) {
          var resPath = value.substr(utils_1.RESOURCE_PREFIX.length);

          if (sync) {
            source_1.loadFromResource(resPath);
            imageLoaded();
          } else {
            this.imageSource = null;
            source_1.fromResource(resPath).then(imageLoaded);
          }
        } else {
          if (sync) {
            source_1.loadFromFile(value);
            imageLoaded();
          } else {
            this.imageSource = null;
            source_1.fromFile(value).then(imageLoaded);
          }
        }
      } else {
        this.imageSource = null;
        image_source_1.fromUrl(value).then(function (r) {
          if (_this["_url"] === value) {
            _this.imageSource = r;
            _this.isLoading = false;
          }
        }, function (err) {
          _this.isLoading = false;

          if (view_1.traceEnabled()) {
            if (typeof err === "object" && err.message) {
              err = err.message;
            }

            view_1.traceWrite(err, view_1.traceCategories.Debug);
          }
        });
      }
    } else if (value instanceof image_source_1.ImageSource) {
      this.imageSource = value;
      this.isLoading = false;
    } else if (value instanceof image_asset_1.ImageAsset) {
      image_source_1.fromAsset(value).then(function (result) {
        _this.imageSource = result;
        _this.isLoading = false;
      });
    } else {
      this.imageSource = image_source_1.fromNativeSource(value);
      this.isLoading = false;
    }
  };

  ImageBase = __decorate([view_1.CSSType("Image")], ImageBase);
  return ImageBase;
}(view_1.View);

exports.ImageBase = ImageBase;
ImageBase.prototype.recycleNativeView = "auto";
exports.imageSourceProperty = new view_1.Property({
  name: "imageSource"
});
exports.imageSourceProperty.register(ImageBase);
exports.srcProperty = new view_1.Property({
  name: "src"
});
exports.srcProperty.register(ImageBase);
exports.loadModeProperty = new view_1.Property({
  name: "loadMode",
  defaultValue: "sync"
});
exports.loadModeProperty.register(ImageBase);
exports.isLoadingProperty = new view_1.Property({
  name: "isLoading",
  defaultValue: false,
  valueConverter: view_1.booleanConverter
});
exports.isLoadingProperty.register(ImageBase);
exports.stretchProperty = new view_1.Property({
  name: "stretch",
  defaultValue: "aspectFit",
  affectsLayout: view_1.isIOS
});
exports.stretchProperty.register(ImageBase);
exports.tintColorProperty = new view_1.InheritedCssProperty({
  name: "tintColor",
  cssName: "tint-color",
  equalityComparer: view_1.Color.equals,
  valueConverter: function valueConverter(value) {
    return new view_1.Color(value);
  }
});
exports.tintColorProperty.register(view_1.Style);
exports.decodeHeightProperty = new view_1.Property({
  name: "decodeHeight",
  defaultValue: {
    value: 0,
    unit: "dip"
  },
  valueConverter: view_1.Length.parse
});
exports.decodeHeightProperty.register(ImageBase);
exports.decodeWidthProperty = new view_1.Property({
  name: "decodeWidth",
  defaultValue: {
    value: 0,
    unit: "dip"
  },
  valueConverter: view_1.Length.parse
});
exports.decodeWidthProperty.register(ImageBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/image/image.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var image_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/image/image-common.js");

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var platform = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/image/image-common.js"));

var FILE_PREFIX = "file:///";
var ASYNC = "async";
var AndroidImageView;
var ImageLoadedListener;

function initializeImageLoadedListener() {
  if (ImageLoadedListener) {
    return;
  }

  var ImageLoadedListenerImpl = function (_super) {
    __extends(ImageLoadedListenerImpl, _super);

    function ImageLoadedListenerImpl(owner) {
      var _this = _super.call(this) || this;

      _this.owner = owner;
      return global.__native(_this);
    }

    ImageLoadedListenerImpl.prototype.onImageLoaded = function (success) {
      var owner = this.owner;

      if (owner) {
        owner.isLoading = false;
      }
    };

    ImageLoadedListenerImpl = __decorate([Interfaces([org.nativescript.widgets.image.Worker.OnImageLoadedListener])], ImageLoadedListenerImpl);
    return ImageLoadedListenerImpl;
  }(java.lang.Object);

  ImageLoadedListener = ImageLoadedListenerImpl;
}

var Image = function (_super) {
  __extends(Image, _super);

  function Image() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.useCache = true;
    return _this;
  }

  Image.prototype.createNativeView = function () {
    if (!AndroidImageView) {
      AndroidImageView = org.nativescript.widgets.ImageView;
    }

    return new AndroidImageView(this._context);
  };

  Image.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    initializeImageLoadedListener();
    var nativeView = this.nativeViewProtected;
    var listener = new ImageLoadedListener(this);
    nativeView.setImageLoadedListener(listener);
    nativeView.listener = listener;
  };

  Image.prototype.disposeNativeView = function () {
    this.nativeViewProtected.listener.owner = null;

    _super.prototype.disposeNativeView.call(this);
  };

  Image.prototype.resetNativeView = function () {
    _super.prototype.resetNativeView.call(this);

    this.nativeViewProtected.setImageMatrix(new android.graphics.Matrix());
  };

  Image.prototype._createImageSourceFromSrc = function (value) {
    var imageView = this.nativeViewProtected;

    if (!imageView) {
      return;
    }

    if (!value) {
      imageView.setUri(null, 0, 0, false, false, true);
      return;
    }

    var screen = platform.screen.mainScreen;
    var decodeWidth = Math.min(image_common_1.Length.toDevicePixels(this.decodeWidth, 0), screen.widthPixels);
    var decodeHeight = Math.min(image_common_1.Length.toDevicePixels(this.decodeHeight, 0), screen.heightPixels);

    var keepAspectRatio = this._calculateKeepAspectRatio();

    if (value instanceof image_common_1.ImageAsset) {
      if (value.options) {
        decodeWidth = value.options.width || decodeWidth;
        decodeHeight = value.options.height || decodeHeight;
        keepAspectRatio = !!value.options.keepAspectRatio;
      }

      value = value.android;
    }

    var async = this.loadMode === ASYNC;

    if (typeof value === "string" || value instanceof String) {
      value = value.trim();
      this.isLoading = true;

      if (image_common_1.isDataURI(value)) {
        _super.prototype._createImageSourceFromSrc.call(this, value);
      } else if (image_common_1.isFileOrResourcePath(value)) {
        if (value.indexOf(image_common_1.RESOURCE_PREFIX) === 0) {
          imageView.setUri(value, decodeWidth, decodeHeight, keepAspectRatio, this.useCache, async);
        } else {
          var fileName = value;

          if (fileName.indexOf("~/") === 0) {
            fileName = file_system_1.knownFolders.currentApp().path + "/" + fileName.replace("~/", "");
          }

          imageView.setUri(FILE_PREFIX + fileName, decodeWidth, decodeHeight, keepAspectRatio, this.useCache, async);
        }
      } else {
        imageView.setUri(value, decodeWidth, decodeHeight, keepAspectRatio, this.useCache, true);
      }
    } else {
      _super.prototype._createImageSourceFromSrc.call(this, value);
    }
  };

  Image.prototype._calculateKeepAspectRatio = function () {
    return this.stretch === "fill" ? false : true;
  };

  Image.prototype[image_common_1.stretchProperty.getDefault] = function () {
    return "aspectFit";
  };

  Image.prototype[image_common_1.stretchProperty.setNative] = function (value) {
    switch (value) {
      case "aspectFit":
        this.nativeViewProtected.setScaleType(android.widget.ImageView.ScaleType.FIT_CENTER);
        break;

      case "aspectFill":
        this.nativeViewProtected.setScaleType(android.widget.ImageView.ScaleType.CENTER_CROP);
        break;

      case "fill":
        this.nativeViewProtected.setScaleType(android.widget.ImageView.ScaleType.FIT_XY);
        break;

      case "none":
      default:
        this.nativeViewProtected.setScaleType(android.widget.ImageView.ScaleType.MATRIX);
        break;
    }
  };

  Image.prototype[image_common_1.tintColorProperty.getDefault] = function () {
    return undefined;
  };

  Image.prototype[image_common_1.tintColorProperty.setNative] = function (value) {
    if (value === undefined) {
      this.nativeViewProtected.clearColorFilter();
    } else {
      this.nativeViewProtected.setColorFilter(value.android);
    }
  };

  Image.prototype[image_common_1.imageSourceProperty.getDefault] = function () {
    return undefined;
  };

  Image.prototype[image_common_1.imageSourceProperty.setNative] = function (value) {
    var nativeView = this.nativeViewProtected;

    if (value && value.android) {
      var rotation = value.rotationAngle ? value.rotationAngle : 0;
      nativeView.setRotationAngle(rotation);
      nativeView.setImageBitmap(value.android);
    } else {
      nativeView.setRotationAngle(0);
      nativeView.setImageBitmap(null);
    }
  };

  Image.prototype[image_common_1.srcProperty.getDefault] = function () {
    return undefined;
  };

  Image.prototype[image_common_1.srcProperty.setNative] = function (value) {
    this._createImageSourceFromSrc(value);
  };

  return Image;
}(image_common_1.ImageBase);

exports.Image = Image;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/label/label.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var text_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base.js"));

var TextView;

var Label = function (_super) {
  __extends(Label, _super);

  function Label() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(Label.prototype, "textWrap", {
    get: function get() {
      return this.style.whiteSpace === "normal";
    },
    set: function set(value) {
      if (typeof value === "string") {
        value = text_base_1.booleanConverter(value);
      }

      this.style.whiteSpace = value ? "normal" : "nowrap";
    },
    enumerable: true,
    configurable: true
  });

  Label.prototype.createNativeView = function () {
    if (!TextView) {
      TextView = android.widget.TextView;
    }

    return new TextView(this._context);
  };

  Label.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    var textView = this.nativeTextViewProtected;
    textView.setSingleLine(true);
    textView.setEllipsize(android.text.TextUtils.TruncateAt.END);
  };

  Label.prototype[text_base_1.whiteSpaceProperty.setNative] = function (value) {
    var newValue = value === "initial" ? "nowrap" : value;

    _super.prototype[text_base_1.whiteSpaceProperty.setNative].call(this, newValue);
  };

  __decorate([profiling_1.profile], Label.prototype, "createNativeView", null);

  Label = __decorate([text_base_1.CSSType("Label")], Label);
  return Label;
}(text_base_1.TextBase);

exports.Label = Label;
Label.prototype._isSingleLine = true;
Label.prototype.recycleNativeView = "auto";

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/absolute-layout/absolute-layout-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var layout_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js"));

layout_base_1.View.prototype.effectiveLeft = 0;
layout_base_1.View.prototype.effectiveTop = 0;

function validateArgs(element) {
  if (!element) {
    throw new Error("element cannot be null or undefinied.");
  }

  return element;
}

var AbsoluteLayoutBase = function (_super) {
  __extends(AbsoluteLayoutBase, _super);

  function AbsoluteLayoutBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  AbsoluteLayoutBase.getLeft = function (element) {
    return validateArgs(element).left;
  };

  AbsoluteLayoutBase.setLeft = function (element, value) {
    validateArgs(element).left = value;
  };

  AbsoluteLayoutBase.getTop = function (element) {
    return validateArgs(element).top;
  };

  AbsoluteLayoutBase.setTop = function (element, value) {
    validateArgs(element).top = value;
  };

  AbsoluteLayoutBase.prototype.onLeftChanged = function (view, oldValue, newValue) {};

  AbsoluteLayoutBase.prototype.onTopChanged = function (view, oldValue, newValue) {};

  AbsoluteLayoutBase = __decorate([layout_base_1.CSSType("AbsoluteLayout")], AbsoluteLayoutBase);
  return AbsoluteLayoutBase;
}(layout_base_1.LayoutBase);

exports.AbsoluteLayoutBase = AbsoluteLayoutBase;
AbsoluteLayoutBase.prototype.recycleNativeView = "auto";
exports.leftProperty = new layout_base_1.Property({
  name: "left",
  defaultValue: layout_base_1.zeroLength,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    target.effectiveLeft = layout_base_1.Length.toDevicePixels(newValue, 0);
    var layout = target.parent;

    if (layout instanceof AbsoluteLayoutBase) {
      layout.onLeftChanged(target, oldValue, newValue);
    }
  },
  valueConverter: function valueConverter(v) {
    return layout_base_1.Length.parse(v);
  }
});
exports.leftProperty.register(layout_base_1.View);
exports.topProperty = new layout_base_1.Property({
  name: "top",
  defaultValue: layout_base_1.zeroLength,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    target.effectiveTop = layout_base_1.Length.toDevicePixels(newValue, 0);
    var layout = target.parent;

    if (layout instanceof AbsoluteLayoutBase) {
      layout.onTopChanged(target, oldValue, newValue);
    }
  },
  valueConverter: function valueConverter(v) {
    return layout_base_1.Length.parse(v);
  }
});
exports.topProperty.register(layout_base_1.View);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/absolute-layout/absolute-layout.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var absolute_layout_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/absolute-layout/absolute-layout-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/absolute-layout/absolute-layout-common.js"));

function makeNativeSetter(setter) {
  return function (value) {
    var nativeView = this.nativeViewProtected;
    var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.CommonLayoutParams();

    if (lp instanceof org.nativescript.widgets.CommonLayoutParams) {
      setter.call(this, lp, value);
      nativeView.setLayoutParams(lp);
    }
  };
}

absolute_layout_common_1.View.prototype[absolute_layout_common_1.topProperty.setNative] = makeNativeSetter(function (lp, value) {
  lp.top = absolute_layout_common_1.Length.toDevicePixels(value, 0);
});
absolute_layout_common_1.View.prototype[absolute_layout_common_1.leftProperty.setNative] = makeNativeSetter(function (lp, value) {
  lp.left = absolute_layout_common_1.Length.toDevicePixels(value, 0);
});

var AbsoluteLayout = function (_super) {
  __extends(AbsoluteLayout, _super);

  function AbsoluteLayout() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  AbsoluteLayout.prototype.createNativeView = function () {
    return new org.nativescript.widgets.AbsoluteLayout(this._context);
  };

  return AbsoluteLayout;
}(absolute_layout_common_1.AbsoluteLayoutBase);

exports.AbsoluteLayout = AbsoluteLayout;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/dock-layout/dock-layout-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var layout_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js");

function validateArgs(element) {
  if (!element) {
    throw new Error("element cannot be null or undefinied.");
  }

  return element;
}

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js"));

var DockLayoutBase = function (_super) {
  __extends(DockLayoutBase, _super);

  function DockLayoutBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  DockLayoutBase.getDock = function (element) {
    return validateArgs(element).dock;
  };

  DockLayoutBase.setDock = function (element, value) {
    validateArgs(element).dock = value;
  };

  DockLayoutBase.prototype.onDockChanged = function (view, oldValue, newValue) {};

  DockLayoutBase = __decorate([layout_base_1.CSSType("DockLayout")], DockLayoutBase);
  return DockLayoutBase;
}(layout_base_1.LayoutBase);

exports.DockLayoutBase = DockLayoutBase;
DockLayoutBase.prototype.recycleNativeView = "auto";
var dockConverter = layout_base_1.makeParser(layout_base_1.makeValidator("left", "top", "right", "bottom"));
exports.dockProperty = new layout_base_1.Property({
  name: "dock",
  defaultValue: "left",
  valueChanged: function valueChanged(target, oldValue, newValue) {
    if (target instanceof layout_base_1.View) {
      var layout = target.parent;

      if (layout instanceof DockLayoutBase) {
        layout.onDockChanged(target, oldValue, newValue);
      }
    }
  },
  valueConverter: dockConverter
});
exports.dockProperty.register(layout_base_1.View);
exports.stretchLastChildProperty = new layout_base_1.Property({
  name: "stretchLastChild",
  defaultValue: true,
  affectsLayout: layout_base_1.isIOS,
  valueConverter: layout_base_1.booleanConverter
});
exports.stretchLastChildProperty.register(DockLayoutBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/dock-layout/dock-layout.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var dock_layout_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/dock-layout/dock-layout-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/dock-layout/dock-layout-common.js"));

dock_layout_common_1.View.prototype[dock_layout_common_1.dockProperty.setNative] = function (value) {
  var nativeView = this.nativeViewProtected;
  var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.CommonLayoutParams();

  if (lp instanceof org.nativescript.widgets.CommonLayoutParams) {
    switch (value) {
      case "left":
        lp.dock = org.nativescript.widgets.Dock.left;
        break;

      case "top":
        lp.dock = org.nativescript.widgets.Dock.top;
        break;

      case "right":
        lp.dock = org.nativescript.widgets.Dock.right;
        break;

      case "bottom":
        lp.dock = org.nativescript.widgets.Dock.bottom;
        break;

      default:
        throw new Error("Invalid value for dock property: " + value);
    }

    nativeView.setLayoutParams(lp);
  }
};

var DockLayout = function (_super) {
  __extends(DockLayout, _super);

  function DockLayout() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  DockLayout.prototype.createNativeView = function () {
    return new org.nativescript.widgets.DockLayout(this._context);
  };

  DockLayout.prototype[dock_layout_common_1.stretchLastChildProperty.getDefault] = function () {
    return true;
  };

  DockLayout.prototype[dock_layout_common_1.stretchLastChildProperty.setNative] = function (value) {
    this.nativeViewProtected.setStretchLastChild(value);
  };

  return DockLayout;
}(dock_layout_common_1.DockLayoutBase);

exports.DockLayout = DockLayout;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var layout_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js"));

exports.ORDER_DEFAULT = 1;
exports.FLEX_GROW_DEFAULT = 0.0;
exports.FLEX_SHRINK_DEFAULT = 1.0;
var FlexDirection;

(function (FlexDirection) {
  FlexDirection.ROW = "row";
  FlexDirection.ROW_REVERSE = "row-reverse";
  FlexDirection.COLUMN = "column";
  FlexDirection.COLUMN_REVERSE = "column-reverse";
  FlexDirection.isValid = layout_base_1.makeValidator(FlexDirection.ROW, FlexDirection.ROW_REVERSE, FlexDirection.COLUMN, FlexDirection.COLUMN_REVERSE);
  FlexDirection.parse = layout_base_1.makeParser(FlexDirection.isValid);
})(FlexDirection = exports.FlexDirection || (exports.FlexDirection = {}));

var FlexWrap;

(function (FlexWrap) {
  FlexWrap.NOWRAP = "nowrap";
  FlexWrap.WRAP = "wrap";
  FlexWrap.WRAP_REVERSE = "wrap-reverse";
  FlexWrap.isValid = layout_base_1.makeValidator(FlexWrap.NOWRAP, FlexWrap.WRAP, FlexWrap.WRAP_REVERSE);
  FlexWrap.parse = layout_base_1.makeParser(FlexWrap.isValid);
})(FlexWrap = exports.FlexWrap || (exports.FlexWrap = {}));

var JustifyContent;

(function (JustifyContent) {
  JustifyContent.FLEX_START = "flex-start";
  JustifyContent.FLEX_END = "flex-end";
  JustifyContent.CENTER = "center";
  JustifyContent.SPACE_BETWEEN = "space-between";
  JustifyContent.SPACE_AROUND = "space-around";
  JustifyContent.isValid = layout_base_1.makeValidator(JustifyContent.FLEX_START, JustifyContent.FLEX_END, JustifyContent.CENTER, JustifyContent.SPACE_BETWEEN, JustifyContent.SPACE_AROUND);
  JustifyContent.parse = layout_base_1.makeParser(JustifyContent.isValid);
})(JustifyContent = exports.JustifyContent || (exports.JustifyContent = {}));

var FlexBasisPercent;

(function (FlexBasisPercent) {
  FlexBasisPercent.DEFAULT = -1;
})(FlexBasisPercent = exports.FlexBasisPercent || (exports.FlexBasisPercent = {}));

var AlignItems;

(function (AlignItems) {
  AlignItems.FLEX_START = "flex-start";
  AlignItems.FLEX_END = "flex-end";
  AlignItems.CENTER = "center";
  AlignItems.BASELINE = "baseline";
  AlignItems.STRETCH = "stretch";
  AlignItems.isValid = layout_base_1.makeValidator(AlignItems.FLEX_START, AlignItems.FLEX_END, AlignItems.CENTER, AlignItems.BASELINE, AlignItems.STRETCH);
  AlignItems.parse = layout_base_1.makeParser(AlignItems.isValid);
})(AlignItems = exports.AlignItems || (exports.AlignItems = {}));

var AlignContent;

(function (AlignContent) {
  AlignContent.FLEX_START = "flex-start";
  AlignContent.FLEX_END = "flex-end";
  AlignContent.CENTER = "center";
  AlignContent.SPACE_BETWEEN = "space-between";
  AlignContent.SPACE_AROUND = "space-around";
  AlignContent.STRETCH = "stretch";
  AlignContent.isValid = layout_base_1.makeValidator(AlignContent.FLEX_START, AlignContent.FLEX_END, AlignContent.CENTER, AlignContent.SPACE_BETWEEN, AlignContent.SPACE_AROUND, AlignContent.STRETCH);
  AlignContent.parse = layout_base_1.makeParser(AlignContent.isValid);
})(AlignContent = exports.AlignContent || (exports.AlignContent = {}));

var Order;

(function (Order) {
  function isValid(value) {
    return isFinite(parseInt(value));
  }

  Order.isValid = isValid;
  Order.parse = parseInt;
})(Order = exports.Order || (exports.Order = {}));

var FlexGrow;

(function (FlexGrow) {
  function isValid(value) {
    var parsed = parseInt(value);
    return isFinite(parsed) && value >= 0;
  }

  FlexGrow.isValid = isValid;
  FlexGrow.parse = parseFloat;
})(FlexGrow = exports.FlexGrow || (exports.FlexGrow = {}));

var FlexShrink;

(function (FlexShrink) {
  function isValid(value) {
    var parsed = parseInt(value);
    return isFinite(parsed) && value >= 0;
  }

  FlexShrink.isValid = isValid;
  FlexShrink.parse = parseFloat;
})(FlexShrink = exports.FlexShrink || (exports.FlexShrink = {}));

var FlexWrapBefore;

(function (FlexWrapBefore) {
  function isValid(value) {
    if (typeof value === "boolean") {
      return true;
    }

    if (typeof value === "string") {
      var str = value.trim().toLowerCase();
      return str === "true" || str === "false";
    }

    return false;
  }

  FlexWrapBefore.isValid = isValid;

  function parse(value) {
    return value && value.toString().trim().toLowerCase() === "true";
  }

  FlexWrapBefore.parse = parse;
})(FlexWrapBefore = exports.FlexWrapBefore || (exports.FlexWrapBefore = {}));

var AlignSelf;

(function (AlignSelf) {
  AlignSelf.AUTO = "auto";
  AlignSelf.FLEX_START = "flex-start";
  AlignSelf.FLEX_END = "flex-end";
  AlignSelf.CENTER = "center";
  AlignSelf.BASELINE = "baseline";
  AlignSelf.STRETCH = "stretch";
  AlignSelf.isValid = layout_base_1.makeValidator(AlignSelf.AUTO, AlignSelf.FLEX_START, AlignSelf.FLEX_END, AlignSelf.CENTER, AlignSelf.BASELINE, AlignSelf.STRETCH);
  AlignSelf.parse = layout_base_1.makeParser(AlignSelf.isValid);
})(AlignSelf = exports.AlignSelf || (exports.AlignSelf = {}));

function validateArgs(element) {
  if (!element) {
    throw new Error("element cannot be null or undefinied.");
  }

  return element;
}

var FlexboxLayoutBase = function (_super) {
  __extends(FlexboxLayoutBase, _super);

  function FlexboxLayoutBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(FlexboxLayoutBase.prototype, "flexDirection", {
    get: function get() {
      return this.style.flexDirection;
    },
    set: function set(value) {
      this.style.flexDirection = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FlexboxLayoutBase.prototype, "flexWrap", {
    get: function get() {
      return this.style.flexWrap;
    },
    set: function set(value) {
      this.style.flexWrap = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FlexboxLayoutBase.prototype, "justifyContent", {
    get: function get() {
      return this.style.justifyContent;
    },
    set: function set(value) {
      this.style.justifyContent = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FlexboxLayoutBase.prototype, "alignItems", {
    get: function get() {
      return this.style.alignItems;
    },
    set: function set(value) {
      this.style.alignItems = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FlexboxLayoutBase.prototype, "alignContent", {
    get: function get() {
      return this.style.alignContent;
    },
    set: function set(value) {
      this.style.alignContent = value;
    },
    enumerable: true,
    configurable: true
  });

  FlexboxLayoutBase.setOrder = function (view, order) {
    validateArgs(view).style.order = order;
  };

  FlexboxLayoutBase.getOrder = function (view) {
    return validateArgs(view).style.order;
  };

  FlexboxLayoutBase.setFlexGrow = function (view, grow) {
    validateArgs(view).style.flexGrow = grow;
  };

  FlexboxLayoutBase.getFlexGrow = function (view) {
    return validateArgs(view).style.flexGrow;
  };

  FlexboxLayoutBase.setFlexShrink = function (view, shrink) {
    validateArgs(view).style.flexShrink = shrink;
  };

  FlexboxLayoutBase.getFlexShrink = function (view) {
    return validateArgs(view).style.flexShrink;
  };

  FlexboxLayoutBase.setAlignSelf = function (view, align) {
    validateArgs(view).style.alignSelf = align;
  };

  FlexboxLayoutBase.getAlignSelf = function (view) {
    return validateArgs(view).style.alignSelf;
  };

  FlexboxLayoutBase.setFlexWrapBefore = function (view, wrap) {
    validateArgs(view).style.flexWrapBefore = wrap;
  };

  FlexboxLayoutBase.getFlexWrapBefore = function (view) {
    return validateArgs(view).style.flexWrapBefore;
  };

  FlexboxLayoutBase = __decorate([layout_base_1.CSSType("FlexboxLayout")], FlexboxLayoutBase);
  return FlexboxLayoutBase;
}(layout_base_1.LayoutBase);

exports.FlexboxLayoutBase = FlexboxLayoutBase;
FlexboxLayoutBase.prototype.recycleNativeView = "auto";
exports.flexDirectionProperty = new layout_base_1.CssProperty({
  name: "flexDirection",
  cssName: "flex-direction",
  defaultValue: FlexDirection.ROW,
  affectsLayout: layout_base_1.isIOS,
  valueConverter: FlexDirection.parse
});
exports.flexDirectionProperty.register(layout_base_1.Style);
exports.flexWrapProperty = new layout_base_1.CssProperty({
  name: "flexWrap",
  cssName: "flex-wrap",
  defaultValue: "nowrap",
  affectsLayout: layout_base_1.isIOS,
  valueConverter: FlexWrap.parse
});
exports.flexWrapProperty.register(layout_base_1.Style);
exports.justifyContentProperty = new layout_base_1.CssProperty({
  name: "justifyContent",
  cssName: "justify-content",
  defaultValue: JustifyContent.FLEX_START,
  affectsLayout: layout_base_1.isIOS,
  valueConverter: JustifyContent.parse
});
exports.justifyContentProperty.register(layout_base_1.Style);
exports.alignItemsProperty = new layout_base_1.CssProperty({
  name: "alignItems",
  cssName: "align-items",
  defaultValue: AlignItems.STRETCH,
  affectsLayout: layout_base_1.isIOS,
  valueConverter: AlignItems.parse
});
exports.alignItemsProperty.register(layout_base_1.Style);
exports.alignContentProperty = new layout_base_1.CssProperty({
  name: "alignContent",
  cssName: "align-content",
  defaultValue: AlignContent.STRETCH,
  affectsLayout: layout_base_1.isIOS,
  valueConverter: AlignContent.parse
});
exports.alignContentProperty.register(layout_base_1.Style);
exports.orderProperty = new layout_base_1.CssProperty({
  name: "order",
  cssName: "order",
  defaultValue: exports.ORDER_DEFAULT,
  valueConverter: Order.parse
});
exports.orderProperty.register(layout_base_1.Style);
Object.defineProperty(layout_base_1.View.prototype, "order", {
  get: function get() {
    return this.style.order;
  },
  set: function set(value) {
    this.style.order = value;
  },
  enumerable: true,
  configurable: true
});
exports.flexGrowProperty = new layout_base_1.CssProperty({
  name: "flexGrow",
  cssName: "flex-grow",
  defaultValue: exports.FLEX_GROW_DEFAULT,
  valueConverter: FlexGrow.parse
});
exports.flexGrowProperty.register(layout_base_1.Style);
Object.defineProperty(layout_base_1.View.prototype, "flexGrow", {
  get: function get() {
    return this.style.flexGrow;
  },
  set: function set(value) {
    this.style.flexGrow = value;
  },
  enumerable: true,
  configurable: true
});
exports.flexShrinkProperty = new layout_base_1.CssProperty({
  name: "flexShrink",
  cssName: "flex-shrink",
  defaultValue: exports.FLEX_SHRINK_DEFAULT,
  valueConverter: FlexShrink.parse
});
exports.flexShrinkProperty.register(layout_base_1.Style);
Object.defineProperty(layout_base_1.View.prototype, "flexShrink", {
  get: function get() {
    return this.style.flexShrink;
  },
  set: function set(value) {
    this.style.flexShrink = value;
  },
  enumerable: true,
  configurable: true
});
exports.flexWrapBeforeProperty = new layout_base_1.CssProperty({
  name: "flexWrapBefore",
  cssName: "flex-wrap-before",
  defaultValue: false,
  valueConverter: FlexWrapBefore.parse
});
exports.flexWrapBeforeProperty.register(layout_base_1.Style);
Object.defineProperty(layout_base_1.View.prototype, "flexWrapBefore", {
  get: function get() {
    return this.style.flexWrapBefore;
  },
  set: function set(value) {
    this.style.flexWrapBefore = value;
  },
  enumerable: true,
  configurable: true
});
exports.alignSelfProperty = new layout_base_1.CssProperty({
  name: "alignSelf",
  cssName: "align-self",
  defaultValue: AlignSelf.AUTO,
  valueConverter: AlignSelf.parse
});
exports.alignSelfProperty.register(layout_base_1.Style);
Object.defineProperty(layout_base_1.View.prototype, "alignSelf", {
  get: function get() {
    return this.style.alignSelf;
  },
  set: function set(value) {
    this.style.alignSelf = value;
  },
  enumerable: true,
  configurable: true
});
var flexFlowProperty = new layout_base_1.ShorthandProperty({
  name: "flexFlow",
  cssName: "flex-flow",
  getter: function getter() {
    return this.flexDirection + " " + this.flexWrap;
  },
  converter: function converter(value) {
    var properties = [];

    if (value === layout_base_1.unsetValue) {
      properties.push([exports.flexDirectionProperty, value]);
      properties.push([exports.flexWrapProperty, value]);
    } else {
      var trimmed = value && value.trim();

      if (trimmed) {
        var values = trimmed.split(/\s+/);

        if (values.length >= 1 && FlexDirection.isValid(values[0])) {
          properties.push([exports.flexDirectionProperty, FlexDirection.parse(values[0])]);
        }

        if (value.length >= 2 && FlexWrap.isValid(values[1])) {
          properties.push([exports.flexWrapProperty, FlexWrap.parse(values[1])]);
        }
      }
    }

    return properties;
  }
});
flexFlowProperty.register(layout_base_1.Style);
var flexProperty = new layout_base_1.ShorthandProperty({
  name: "flex",
  cssName: "flex",
  getter: function getter() {
    return this.flexGrow + " " + this.flexShrink;
  },
  converter: function converter(value) {
    var properties = [];

    if (value === layout_base_1.unsetValue) {
      properties.push([exports.flexGrowProperty, value]);
      properties.push([exports.flexShrinkProperty, value]);
    } else {
      var trimmed = value && value.trim();

      if (trimmed) {
        var values = trimmed.split(/\s+/);

        if (values.length === 1) {
          switch (values[0]) {
            case "inital":
              properties.push([exports.flexGrowProperty, 0]);
              properties.push([exports.flexShrinkProperty, 1]);
              break;

            case "auto":
              properties.push([exports.flexGrowProperty, 1]);
              properties.push([exports.flexShrinkProperty, 1]);
              break;

            case "none":
              properties.push([exports.flexGrowProperty, 0]);
              properties.push([exports.flexShrinkProperty, 0]);
              break;

            default:
              if (FlexGrow.isValid(values[0])) {
                properties.push([exports.flexGrowProperty, FlexGrow.parse(values[0])]);
                properties.push([exports.flexShrinkProperty, 1]);
              }

          }
        }

        if (values.length >= 2) {
          if (FlexGrow.isValid(values[0]) && FlexShrink.isValid(values[1])) {
            properties.push([exports.flexGrowProperty, FlexGrow.parse(values[0])]);
            properties.push([exports.flexShrinkProperty, FlexShrink.parse(values[1])]);
          }
        }
      }
    }

    return properties;
  }
});
flexProperty.register(layout_base_1.Style);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _a, _b, _c, _d, _e, _f;

var flexbox_layout_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout-common.js"));

var widgetFlexboxLayout;
var widgetLayoutParams;

function makeNativeSetter(setter) {
  return function (value) {
    var nativeView = this.nativeViewProtected;
    var lp = nativeView.getLayoutParams() || new widgetLayoutParams();

    if (lp instanceof widgetLayoutParams) {
      setter(lp, value);
      nativeView.setLayoutParams(lp);
    }
  };
}

flexbox_layout_common_1.View.prototype[flexbox_layout_common_1.orderProperty.setNative] = makeNativeSetter(function (lp, value) {
  return lp.order = value;
});
flexbox_layout_common_1.View.prototype[flexbox_layout_common_1.flexGrowProperty.setNative] = makeNativeSetter(function (lp, value) {
  return lp.flexGrow = value;
});
flexbox_layout_common_1.View.prototype[flexbox_layout_common_1.flexShrinkProperty.setNative] = makeNativeSetter(function (lp, value) {
  return lp.flexShrink = value;
});
flexbox_layout_common_1.View.prototype[flexbox_layout_common_1.flexWrapBeforeProperty.setNative] = makeNativeSetter(function (lp, value) {
  return lp.wrapBefore = value;
});
flexbox_layout_common_1.View.prototype[flexbox_layout_common_1.alignSelfProperty.setNative] = makeNativeSetter(function (lp, value) {
  return lp.alignSelf = alignSelfMap[value];
});
var flexDirectionMap = (_a = {}, _a[flexbox_layout_common_1.FlexDirection.ROW] = 0, _a[flexbox_layout_common_1.FlexDirection.ROW_REVERSE] = 1, _a[flexbox_layout_common_1.FlexDirection.COLUMN] = 2, _a[flexbox_layout_common_1.FlexDirection.COLUMN_REVERSE] = 3, _a);
var flexWrapMap = (_b = {}, _b[flexbox_layout_common_1.FlexWrap.NOWRAP] = 0, _b[flexbox_layout_common_1.FlexWrap.WRAP] = 1, _b[flexbox_layout_common_1.FlexWrap.WRAP_REVERSE] = 2, _b);
var justifyContentMap = (_c = {}, _c[flexbox_layout_common_1.JustifyContent.FLEX_START] = 0, _c[flexbox_layout_common_1.JustifyContent.FLEX_END] = 1, _c[flexbox_layout_common_1.JustifyContent.CENTER] = 2, _c[flexbox_layout_common_1.JustifyContent.SPACE_BETWEEN] = 3, _c[flexbox_layout_common_1.JustifyContent.SPACE_AROUND] = 4, _c);
var alignItemsMap = (_d = {}, _d[flexbox_layout_common_1.AlignItems.FLEX_START] = 0, _d[flexbox_layout_common_1.AlignItems.FLEX_END] = 1, _d[flexbox_layout_common_1.AlignItems.CENTER] = 2, _d[flexbox_layout_common_1.AlignItems.BASELINE] = 3, _d[flexbox_layout_common_1.AlignItems.STRETCH] = 4, _d);
var alignContentMap = (_e = {}, _e[flexbox_layout_common_1.AlignContent.FLEX_START] = 0, _e[flexbox_layout_common_1.AlignContent.FLEX_END] = 1, _e[flexbox_layout_common_1.AlignContent.CENTER] = 2, _e[flexbox_layout_common_1.AlignContent.SPACE_BETWEEN] = 3, _e[flexbox_layout_common_1.AlignContent.SPACE_AROUND] = 4, _e[flexbox_layout_common_1.AlignContent.STRETCH] = 5, _e);
var alignSelfMap = (_f = {}, _f[flexbox_layout_common_1.AlignSelf.AUTO] = -1, _f[flexbox_layout_common_1.AlignSelf.FLEX_START] = 0, _f[flexbox_layout_common_1.AlignSelf.FLEX_END] = 1, _f[flexbox_layout_common_1.AlignSelf.CENTER] = 2, _f[flexbox_layout_common_1.AlignSelf.BASELINE] = 3, _f[flexbox_layout_common_1.AlignSelf.STRETCH] = 4, _f);

var FlexboxLayout = function (_super) {
  __extends(FlexboxLayout, _super);

  function FlexboxLayout() {
    var _this = _super.call(this) || this;

    if (!widgetFlexboxLayout) {
      widgetFlexboxLayout = org.nativescript.widgets.FlexboxLayout;
      widgetLayoutParams = widgetFlexboxLayout.LayoutParams;
    }

    return _this;
  }

  FlexboxLayout.prototype.createNativeView = function () {
    return new widgetFlexboxLayout(this._context);
  };

  FlexboxLayout.prototype.resetNativeView = function () {
    _super.prototype.resetNativeView.call(this);

    this.nativeViewProtected.invalidateOrdersCache();
  };

  FlexboxLayout.prototype[flexbox_layout_common_1.flexDirectionProperty.getDefault] = function () {
    return flexbox_layout_common_1.flexDirectionProperty.defaultValue;
  };

  FlexboxLayout.prototype[flexbox_layout_common_1.flexDirectionProperty.setNative] = function (flexDirection) {
    this.nativeViewProtected.setFlexDirection(flexDirectionMap[flexDirection]);
  };

  FlexboxLayout.prototype[flexbox_layout_common_1.flexWrapProperty.getDefault] = function () {
    return flexbox_layout_common_1.flexWrapProperty.defaultValue;
  };

  FlexboxLayout.prototype[flexbox_layout_common_1.flexWrapProperty.setNative] = function (flexWrap) {
    this.nativeViewProtected.setFlexWrap(flexWrapMap[flexWrap]);
  };

  FlexboxLayout.prototype[flexbox_layout_common_1.justifyContentProperty.getDefault] = function () {
    return flexbox_layout_common_1.justifyContentProperty.defaultValue;
  };

  FlexboxLayout.prototype[flexbox_layout_common_1.justifyContentProperty.setNative] = function (justifyContent) {
    this.nativeViewProtected.setJustifyContent(justifyContentMap[justifyContent]);
  };

  FlexboxLayout.prototype[flexbox_layout_common_1.alignItemsProperty.getDefault] = function () {
    return flexbox_layout_common_1.alignItemsProperty.defaultValue;
  };

  FlexboxLayout.prototype[flexbox_layout_common_1.alignItemsProperty.setNative] = function (alignItems) {
    this.nativeViewProtected.setAlignItems(alignItemsMap[alignItems]);
  };

  FlexboxLayout.prototype[flexbox_layout_common_1.alignContentProperty.getDefault] = function () {
    return flexbox_layout_common_1.alignContentProperty.defaultValue;
  };

  FlexboxLayout.prototype[flexbox_layout_common_1.alignContentProperty.setNative] = function (alignContent) {
    this.nativeViewProtected.setAlignContent(alignContentMap[alignContent]);
  };

  FlexboxLayout.prototype._updateNativeLayoutParams = function (child) {
    _super.prototype._updateNativeLayoutParams.call(this, child);

    var lp = child.nativeViewProtected.getLayoutParams();
    var style = child.style;
    lp.order = style.order;
    lp.flexGrow = style.flexGrow;
    lp.flexShrink = style.flexShrink;
    lp.wrapBefore = style.flexWrapBefore;
    lp.alignSelf = alignSelfMap[style.alignSelf];
    child.nativeViewProtected.setLayoutParams(lp);
  };

  FlexboxLayout.prototype._setChildMinWidthNative = function (child) {
    child._setMinWidthNative(0);

    var nativeView = child.nativeViewProtected;
    var lp = nativeView.getLayoutParams();

    if (lp instanceof widgetLayoutParams) {
      lp.minWidth = flexbox_layout_common_1.Length.toDevicePixels(child.style.minWidth, 0);
      nativeView.setLayoutParams(lp);
    }
  };

  FlexboxLayout.prototype._setChildMinHeightNative = function (child) {
    child._setMinHeightNative(0);

    var nativeView = child.nativeViewProtected;
    var lp = nativeView.getLayoutParams();

    if (lp instanceof widgetLayoutParams) {
      lp.minHeight = flexbox_layout_common_1.Length.toDevicePixels(child.style.minHeight, 0);
      nativeView.setLayoutParams(lp);
    }
  };

  return FlexboxLayout;
}(flexbox_layout_common_1.FlexboxLayoutBase);

exports.FlexboxLayout = FlexboxLayout;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/grid-layout/grid-layout-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var layout_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js"));

function validateArgs(element) {
  if (!element) {
    throw new Error("element cannot be null or undefinied.");
  }

  return element;
}

layout_base_1.View.prototype.row = 0;
layout_base_1.View.prototype.col = 0;
layout_base_1.View.prototype.rowSpan = 1;
layout_base_1.View.prototype.colSpan = 1;

function validateItemSpec(itemSpec) {
  if (!itemSpec) {
    throw new Error("Value cannot be undefined.");
  }

  if (itemSpec.owner) {
    throw new Error("itemSpec is already added to GridLayout.");
  }
}

function convertGridLength(value) {
  if (value === GridUnitType.AUTO) {
    return ItemSpec.create(1, GridUnitType.AUTO);
  } else if (value.indexOf("*") !== -1) {
    var starCount = parseInt(value.replace("*", "") || "1");
    return ItemSpec.create(starCount, GridUnitType.STAR);
  } else if (!isNaN(parseInt(value))) {
    return ItemSpec.create(parseInt(value), GridUnitType.PIXEL);
  } else {
    throw new Error("Cannot parse item spec from string: " + value);
  }
}

function parseAndAddItemSpecs(value, func) {
  var arr = value.split(/[\s,]+/);

  for (var i = 0, length_1 = arr.length; i < length_1; i++) {
    var str = arr[i].trim();

    if (str.length > 0) {
      func(convertGridLength(arr[i].trim()));
    }
  }
}

var ItemSpec = function (_super) {
  __extends(ItemSpec, _super);

  function ItemSpec() {
    var _this = _super.call(this) || this;

    _this._actualLength = 0;

    if (arguments.length === 0) {
      _this._value = 1;
      _this._unitType = GridUnitType.STAR;
    } else if (arguments.length === 2) {
      var value = arguments[0];
      var type = arguments[1];

      if (typeof value === "number" && typeof type === "string") {
        if (value < 0 || isNaN(value) || !isFinite(value)) {
          throw new Error("Value should not be negative, NaN or Infinity: " + value);
        }

        _this._value = value;
        _this._unitType = GridUnitType.parse(type);
      } else {
        throw new Error("First argument should be number, second argument should be string.");
      }
    } else {
      throw new Error("ItemSpec expects 0 or 2 arguments");
    }

    _this.index = -1;
    return _this;
  }

  ItemSpec.create = function (value, type) {
    var spec = new ItemSpec();
    spec._value = value;
    spec._unitType = type;
    return spec;
  };

  Object.defineProperty(ItemSpec.prototype, "actualLength", {
    get: function get() {
      return this._actualLength;
    },
    enumerable: true,
    configurable: true
  });

  ItemSpec.equals = function (value1, value2) {
    return value1.gridUnitType === value2.gridUnitType && value1.value === value2.value && value1.owner === value2.owner && value1.index === value2.index;
  };

  Object.defineProperty(ItemSpec.prototype, "gridUnitType", {
    get: function get() {
      return this._unitType;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ItemSpec.prototype, "isAbsolute", {
    get: function get() {
      return this._unitType === GridUnitType.PIXEL;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ItemSpec.prototype, "isAuto", {
    get: function get() {
      return this._unitType === GridUnitType.AUTO;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ItemSpec.prototype, "isStar", {
    get: function get() {
      return this._unitType === GridUnitType.STAR;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ItemSpec.prototype, "value", {
    get: function get() {
      return this._value;
    },
    enumerable: true,
    configurable: true
  });
  return ItemSpec;
}(layout_base_1.Observable);

exports.ItemSpec = ItemSpec;

var GridLayoutBase = function (_super) {
  __extends(GridLayoutBase, _super);

  function GridLayoutBase() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._rows = new Array();
    _this._cols = new Array();
    return _this;
  }

  GridLayoutBase_1 = GridLayoutBase;

  GridLayoutBase.getColumn = function (element) {
    return validateArgs(element).col;
  };

  GridLayoutBase.setColumn = function (element, value) {
    validateArgs(element).col = value;
  };

  GridLayoutBase.getColumnSpan = function (element) {
    return validateArgs(element).colSpan;
  };

  GridLayoutBase.setColumnSpan = function (element, value) {
    validateArgs(element).colSpan = value;
  };

  GridLayoutBase.getRow = function (element) {
    return validateArgs(element).row;
  };

  GridLayoutBase.setRow = function (element, value) {
    validateArgs(element).row = value;
  };

  GridLayoutBase.getRowSpan = function (element) {
    return validateArgs(element).rowSpan;
  };

  GridLayoutBase.setRowSpan = function (element, value) {
    validateArgs(element).rowSpan = value;
  };

  GridLayoutBase.prototype.addRow = function (itemSpec) {
    validateItemSpec(itemSpec);
    itemSpec.owner = this;

    this._rows.push(itemSpec);

    this._onRowAdded(itemSpec);

    this.invalidate();
  };

  GridLayoutBase.prototype.addColumn = function (itemSpec) {
    validateItemSpec(itemSpec);
    itemSpec.owner = this;

    this._cols.push(itemSpec);

    this._onColumnAdded(itemSpec);

    this.invalidate();
  };

  GridLayoutBase.prototype.addChildAtCell = function (view, row, column, rowSpan, columnSpan) {
    this.addChild(view);
    GridLayoutBase_1.setRow(view, row);
    GridLayoutBase_1.setColumn(view, column);

    if (rowSpan) {
      GridLayoutBase_1.setRowSpan(view, rowSpan);
    }

    if (columnSpan) {
      GridLayoutBase_1.setColumnSpan(view, columnSpan);
    }
  };

  GridLayoutBase.prototype.removeRow = function (itemSpec) {
    if (!itemSpec) {
      throw new Error("Value is null.");
    }

    var index = this._rows.indexOf(itemSpec);

    if (itemSpec.owner !== this || index < 0) {
      throw new Error("Row is not child of this GridLayout");
    }

    itemSpec.index = -1;

    this._rows.splice(index, 1);

    this._onRowRemoved(itemSpec, index);

    this.invalidate();
  };

  GridLayoutBase.prototype.removeColumn = function (itemSpec) {
    if (!itemSpec) {
      throw new Error("Value is null.");
    }

    var index = this._cols.indexOf(itemSpec);

    if (itemSpec.owner !== this || index < 0) {
      throw new Error("Column is not child of this GridLayout");
    }

    itemSpec.index = -1;

    this._cols.splice(index, 1);

    this._onColumnRemoved(itemSpec, index);

    this.invalidate();
  };

  GridLayoutBase.prototype.removeColumns = function () {
    for (var i = this._cols.length - 1; i >= 0; i--) {
      var colSpec = this._cols[i];

      this._onColumnRemoved(colSpec, i);

      colSpec.index = -1;
    }

    this._cols.length = 0;
    this.invalidate();
  };

  GridLayoutBase.prototype.removeRows = function () {
    for (var i = this._rows.length - 1; i >= 0; i--) {
      var rowSpec = this._rows[i];

      this._onRowRemoved(rowSpec, i);

      rowSpec.index = -1;
    }

    this._rows.length = 0;
    this.invalidate();
  };

  GridLayoutBase.prototype.onRowChanged = function (element, oldValue, newValue) {
    this.invalidate();
  };

  GridLayoutBase.prototype.onRowSpanChanged = function (element, oldValue, newValue) {
    this.invalidate();
  };

  GridLayoutBase.prototype.onColumnChanged = function (element, oldValue, newValue) {
    this.invalidate();
  };

  GridLayoutBase.prototype.onColumnSpanChanged = function (element, oldValue, newValue) {
    this.invalidate();
  };

  GridLayoutBase.prototype._onRowAdded = function (itemSpec) {};

  GridLayoutBase.prototype._onColumnAdded = function (itemSpec) {};

  GridLayoutBase.prototype._onRowRemoved = function (itemSpec, index) {};

  GridLayoutBase.prototype._onColumnRemoved = function (itemSpec, index) {};

  GridLayoutBase.prototype.getColumns = function () {
    return this._cols.slice();
  };

  GridLayoutBase.prototype.getRows = function () {
    return this._rows.slice();
  };

  Object.defineProperty(GridLayoutBase.prototype, "columnsInternal", {
    get: function get() {
      return this._cols;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(GridLayoutBase.prototype, "rowsInternal", {
    get: function get() {
      return this._rows;
    },
    enumerable: true,
    configurable: true
  });

  GridLayoutBase.prototype.invalidate = function () {};

  Object.defineProperty(GridLayoutBase.prototype, "rows", {
    set: function set(value) {
      var _this = this;

      this.removeRows();
      parseAndAddItemSpecs(value, function (spec) {
        return _this.addRow(spec);
      });
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(GridLayoutBase.prototype, "columns", {
    set: function set(value) {
      var _this = this;

      this.removeColumns();
      parseAndAddItemSpecs(value, function (spec) {
        return _this.addColumn(spec);
      });
    },
    enumerable: true,
    configurable: true
  });
  var GridLayoutBase_1;
  GridLayoutBase = GridLayoutBase_1 = __decorate([layout_base_1.CSSType("GridLayout")], GridLayoutBase);
  return GridLayoutBase;
}(layout_base_1.LayoutBase);

exports.GridLayoutBase = GridLayoutBase;
GridLayoutBase.prototype.recycleNativeView = "auto";
exports.columnProperty = new layout_base_1.Property({
  name: "col",
  defaultValue: 0,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var grid = target.parent;

    if (grid instanceof GridLayoutBase) {
      grid.onColumnChanged(target, oldValue, newValue);
    }
  },
  valueConverter: function valueConverter(v) {
    return Math.max(0, parseInt(v));
  }
});
exports.columnProperty.register(layout_base_1.View);
exports.columnSpanProperty = new layout_base_1.Property({
  name: "colSpan",
  defaultValue: 1,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var grid = target.parent;

    if (grid instanceof GridLayoutBase) {
      grid.onColumnSpanChanged(target, oldValue, newValue);
    }
  },
  valueConverter: function valueConverter(v) {
    return Math.max(1, parseInt(v));
  }
});
exports.columnSpanProperty.register(layout_base_1.View);
exports.rowProperty = new layout_base_1.Property({
  name: "row",
  defaultValue: 0,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var grid = target.parent;

    if (grid instanceof GridLayoutBase) {
      grid.onRowChanged(target, oldValue, newValue);
    }
  },
  valueConverter: function valueConverter(v) {
    return Math.max(0, parseInt(v));
  }
});
exports.rowProperty.register(layout_base_1.View);
exports.rowSpanProperty = new layout_base_1.Property({
  name: "rowSpan",
  defaultValue: 1,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var grid = target.parent;

    if (grid instanceof GridLayoutBase) {
      grid.onRowSpanChanged(target, oldValue, newValue);
    }
  },
  valueConverter: function valueConverter(v) {
    return Math.max(1, parseInt(v));
  }
});
exports.rowSpanProperty.register(layout_base_1.View);
var GridUnitType;

(function (GridUnitType) {
  GridUnitType.PIXEL = "pixel";
  GridUnitType.STAR = "star";
  GridUnitType.AUTO = "auto";
  GridUnitType.isValid = layout_base_1.makeValidator(GridUnitType.PIXEL, GridUnitType.STAR, GridUnitType.AUTO);
  GridUnitType.parse = layout_base_1.makeParser(GridUnitType.isValid);
})(GridUnitType = exports.GridUnitType || (exports.GridUnitType = {}));

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/grid-layout/grid-layout.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var grid_layout_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/grid-layout/grid-layout-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/grid-layout/grid-layout-common.js"));

function makeNativeSetter(setter) {
  return function (value) {
    var nativeView = this.nativeViewProtected;
    var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.CommonLayoutParams();

    if (lp instanceof org.nativescript.widgets.CommonLayoutParams) {
      setter(lp, value);
      nativeView.setLayoutParams(lp);
    }
  };
}

grid_layout_common_1.View.prototype[grid_layout_common_1.rowProperty.setNative] = makeNativeSetter(function (lp, value) {
  return lp.row = value;
});
grid_layout_common_1.View.prototype[grid_layout_common_1.columnProperty.setNative] = makeNativeSetter(function (lp, value) {
  return lp.column = value;
});
grid_layout_common_1.View.prototype[grid_layout_common_1.rowSpanProperty.setNative] = makeNativeSetter(function (lp, value) {
  return lp.rowSpan = value;
});
grid_layout_common_1.View.prototype[grid_layout_common_1.columnSpanProperty.setNative] = makeNativeSetter(function (lp, value) {
  return lp.columnSpan = value;
});

function createNativeSpec(itemSpec) {
  switch (itemSpec.gridUnitType) {
    case grid_layout_common_1.GridUnitType.AUTO:
      return new org.nativescript.widgets.ItemSpec(itemSpec.value, org.nativescript.widgets.GridUnitType.auto);

    case grid_layout_common_1.GridUnitType.STAR:
      return new org.nativescript.widgets.ItemSpec(itemSpec.value, org.nativescript.widgets.GridUnitType.star);

    case grid_layout_common_1.GridUnitType.PIXEL:
      return new org.nativescript.widgets.ItemSpec(itemSpec.value * grid_layout_common_1.layout.getDisplayDensity(), org.nativescript.widgets.GridUnitType.pixel);

    default:
      throw new Error("Invalid gridUnitType: " + itemSpec.gridUnitType);
  }
}

var ItemSpec = function (_super) {
  __extends(ItemSpec, _super);

  function ItemSpec() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(ItemSpec.prototype, "actualLength", {
    get: function get() {
      if (this.nativeSpec) {
        return Math.round(this.nativeSpec.getActualLength() / grid_layout_common_1.layout.getDisplayDensity());
      }

      return 0;
    },
    enumerable: true,
    configurable: true
  });
  return ItemSpec;
}(grid_layout_common_1.ItemSpec);

exports.ItemSpec = ItemSpec;

var GridLayout = function (_super) {
  __extends(GridLayout, _super);

  function GridLayout() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  GridLayout.prototype.createNativeView = function () {
    return new org.nativescript.widgets.GridLayout(this._context);
  };

  GridLayout.prototype.initNativeView = function () {
    var _this = this;

    _super.prototype.initNativeView.call(this);

    this.rowsInternal.forEach(function (itemSpec, index, rows) {
      _this._onRowAdded(itemSpec);
    }, this);
    this.columnsInternal.forEach(function (itemSpec, index, rows) {
      _this._onColumnAdded(itemSpec);
    }, this);
  };

  GridLayout.prototype.resetNativeView = function () {
    for (var i = this.rowsInternal.length; i--; i >= 0) {
      var itemSpec = this.rowsInternal[i];

      this._onRowRemoved(itemSpec, i);
    }

    for (var i = this.columnsInternal.length; i--; i >= 0) {
      var itemSpec = this.columnsInternal[i];

      this._onColumnRemoved(itemSpec, i);
    }

    _super.prototype.resetNativeView.call(this);
  };

  GridLayout.prototype._onRowAdded = function (itemSpec) {
    if (this.nativeViewProtected) {
      var nativeSpec = createNativeSpec(itemSpec);
      itemSpec.nativeSpec = nativeSpec;
      this.nativeViewProtected.addRow(nativeSpec);
    }
  };

  GridLayout.prototype._onColumnAdded = function (itemSpec) {
    if (this.nativeViewProtected) {
      var nativeSpec = createNativeSpec(itemSpec);
      itemSpec.nativeSpec = nativeSpec;
      this.nativeViewProtected.addColumn(nativeSpec);
    }
  };

  GridLayout.prototype._onRowRemoved = function (itemSpec, index) {
    itemSpec.nativeSpec = null;

    if (this.nativeViewProtected) {
      this.nativeViewProtected.removeRowAt(index);
    }
  };

  GridLayout.prototype._onColumnRemoved = function (itemSpec, index) {
    itemSpec.nativeSpec = null;

    if (this.nativeViewProtected) {
      this.nativeViewProtected.removeColumnAt(index);
    }
  };

  GridLayout.prototype.invalidate = function () {};

  return GridLayout;
}(grid_layout_common_1.GridLayoutBase);

exports.GridLayout = GridLayout;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/layout-base-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var LayoutBaseCommon = function (_super) {
  __extends(LayoutBaseCommon, _super);

  function LayoutBaseCommon() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._subViews = new Array();
    return _this;
  }

  LayoutBaseCommon.prototype._addChildFromBuilder = function (name, value) {
    if (value instanceof view_1.View) {
      this.addChild(value);
    }
  };

  LayoutBaseCommon.prototype.getChildrenCount = function () {
    return this._subViews.length;
  };

  Object.defineProperty(LayoutBaseCommon.prototype, "_childrenCount", {
    get: function get() {
      return this._subViews.length;
    },
    enumerable: true,
    configurable: true
  });

  LayoutBaseCommon.prototype.getChildAt = function (index) {
    return this._subViews[index];
  };

  LayoutBaseCommon.prototype.getChildIndex = function (child) {
    return this._subViews.indexOf(child);
  };

  LayoutBaseCommon.prototype.getChildById = function (id) {
    return view_1.getViewById(this, id);
  };

  LayoutBaseCommon.prototype._registerLayoutChild = function (child) {};

  LayoutBaseCommon.prototype._unregisterLayoutChild = function (child) {};

  LayoutBaseCommon.prototype.addChild = function (child) {
    this._subViews.push(child);

    this._addView(child);

    this._registerLayoutChild(child);
  };

  LayoutBaseCommon.prototype.insertChild = function (child, atIndex) {
    this._subViews.splice(atIndex, 0, child);

    this._addView(child, atIndex);

    this._registerLayoutChild(child);
  };

  LayoutBaseCommon.prototype.removeChild = function (child) {
    this._removeView(child);

    var index = this._subViews.indexOf(child);

    this._subViews.splice(index, 1);

    this._unregisterLayoutChild(child);
  };

  LayoutBaseCommon.prototype.removeChildren = function () {
    while (this.getChildrenCount() !== 0) {
      this.removeChild(this._subViews[this.getChildrenCount() - 1]);
    }
  };

  Object.defineProperty(LayoutBaseCommon.prototype, "padding", {
    get: function get() {
      return this.style.padding;
    },
    set: function set(value) {
      this.style.padding = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LayoutBaseCommon.prototype, "paddingTop", {
    get: function get() {
      return this.style.paddingTop;
    },
    set: function set(value) {
      this.style.paddingTop = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LayoutBaseCommon.prototype, "paddingRight", {
    get: function get() {
      return this.style.paddingRight;
    },
    set: function set(value) {
      this.style.paddingRight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LayoutBaseCommon.prototype, "paddingBottom", {
    get: function get() {
      return this.style.paddingBottom;
    },
    set: function set(value) {
      this.style.paddingBottom = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LayoutBaseCommon.prototype, "paddingLeft", {
    get: function get() {
      return this.style.paddingLeft;
    },
    set: function set(value) {
      this.style.paddingLeft = value;
    },
    enumerable: true,
    configurable: true
  });

  LayoutBaseCommon.prototype._childIndexToNativeChildIndex = function (index) {
    if (index === undefined) {
      return undefined;
    }

    var result = 0;

    for (var i = 0; i < index && i < this._subViews.length; i++) {
      result += this._subViews[i]._getNativeViewsCount();
    }

    return result;
  };

  LayoutBaseCommon.prototype.eachChildView = function (callback) {
    for (var i = 0, length_1 = this._subViews.length; i < length_1; i++) {
      var retVal = callback(this._subViews[i]);

      if (retVal === false) {
        break;
      }
    }
  };

  LayoutBaseCommon.prototype.eachLayoutChild = function (callback) {
    var lastChild = null;
    this.eachChildView(function (cv) {
      cv._eachLayoutView(function (lv) {
        if (lastChild && !lastChild.isCollapsed) {
          callback(lastChild, false);
        }

        lastChild = lv;
      });

      return true;
    });

    if (lastChild && !lastChild.isCollapsed) {
      callback(lastChild, true);
    }
  };

  return LayoutBaseCommon;
}(view_1.CustomLayoutView);

exports.LayoutBaseCommon = LayoutBaseCommon;
exports.clipToBoundsProperty = new view_1.Property({
  name: "clipToBounds",
  defaultValue: true,
  valueConverter: view_1.booleanConverter
});
exports.clipToBoundsProperty.register(LayoutBaseCommon);
exports.isPassThroughParentEnabledProperty = new view_1.Property({
  name: "isPassThroughParentEnabled",
  defaultValue: false,
  valueConverter: view_1.booleanConverter
});
exports.isPassThroughParentEnabledProperty.register(LayoutBaseCommon);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/layout-base.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var layout_base_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base-common.js"));

var LayoutBase = function (_super) {
  __extends(LayoutBase, _super);

  function LayoutBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  LayoutBase.prototype[layout_base_common_1.clipToBoundsProperty.getDefault] = function () {
    return true;
  };

  LayoutBase.prototype[layout_base_common_1.clipToBoundsProperty.setNative] = function (value) {
    console.warn("clipToBounds with value false is not supported on Android. You can use this.android.getParent().setClipChildren(false) as an alternative");
  };

  LayoutBase.prototype[layout_base_common_1.isPassThroughParentEnabledProperty.setNative] = function (value) {
    this.nativeViewProtected.setPassThroughParent(value);
  };

  LayoutBase.prototype[layout_base_common_1.paddingTopProperty.getDefault] = function () {
    return {
      value: this._defaultPaddingTop,
      unit: "px"
    };
  };

  LayoutBase.prototype[layout_base_common_1.paddingTopProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setPaddingTop(this.nativeViewProtected, layout_base_common_1.Length.toDevicePixels(value, 0) + layout_base_common_1.Length.toDevicePixels(this.style.borderTopWidth, 0));
  };

  LayoutBase.prototype[layout_base_common_1.paddingRightProperty.getDefault] = function () {
    return {
      value: this._defaultPaddingRight,
      unit: "px"
    };
  };

  LayoutBase.prototype[layout_base_common_1.paddingRightProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setPaddingRight(this.nativeViewProtected, layout_base_common_1.Length.toDevicePixels(value, 0) + layout_base_common_1.Length.toDevicePixels(this.style.borderRightWidth, 0));
  };

  LayoutBase.prototype[layout_base_common_1.paddingBottomProperty.getDefault] = function () {
    return {
      value: this._defaultPaddingBottom,
      unit: "px"
    };
  };

  LayoutBase.prototype[layout_base_common_1.paddingBottomProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setPaddingBottom(this.nativeViewProtected, layout_base_common_1.Length.toDevicePixels(value, 0) + layout_base_common_1.Length.toDevicePixels(this.style.borderBottomWidth, 0));
  };

  LayoutBase.prototype[layout_base_common_1.paddingLeftProperty.getDefault] = function () {
    return {
      value: this._defaultPaddingLeft,
      unit: "px"
    };
  };

  LayoutBase.prototype[layout_base_common_1.paddingLeftProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setPaddingLeft(this.nativeViewProtected, layout_base_common_1.Length.toDevicePixels(value, 0) + layout_base_common_1.Length.toDevicePixels(this.style.borderLeftWidth, 0));
  };

  return LayoutBase;
}(layout_base_common_1.LayoutBaseCommon);

exports.LayoutBase = LayoutBase;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var layout_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js"));

var StackLayoutBase = function (_super) {
  __extends(StackLayoutBase, _super);

  function StackLayoutBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  StackLayoutBase = __decorate([layout_base_1.CSSType("StackLayout")], StackLayoutBase);
  return StackLayoutBase;
}(layout_base_1.LayoutBase);

exports.StackLayoutBase = StackLayoutBase;
StackLayoutBase.prototype.recycleNativeView = "auto";
var converter = layout_base_1.makeParser(layout_base_1.makeValidator("horizontal", "vertical"));
exports.orientationProperty = new layout_base_1.Property({
  name: "orientation",
  defaultValue: "vertical",
  affectsLayout: layout_base_1.isIOS,
  valueConverter: converter
});
exports.orientationProperty.register(StackLayoutBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var stack_layout_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout-common.js"));

var StackLayout = function (_super) {
  __extends(StackLayout, _super);

  function StackLayout() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  StackLayout.prototype.createNativeView = function () {
    return new org.nativescript.widgets.StackLayout(this._context);
  };

  StackLayout.prototype[stack_layout_common_1.orientationProperty.setNative] = function (value) {
    this.nativeViewProtected.setOrientation(value === "vertical" ? org.nativescript.widgets.Orientation.vertical : org.nativescript.widgets.Orientation.horizontal);
  };

  return StackLayout;
}(stack_layout_common_1.StackLayoutBase);

exports.StackLayout = StackLayout;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/wrap-layout/wrap-layout-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var layout_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js"));

var WrapLayoutBase = function (_super) {
  __extends(WrapLayoutBase, _super);

  function WrapLayoutBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  WrapLayoutBase = __decorate([layout_base_1.CSSType("WrapLayout")], WrapLayoutBase);
  return WrapLayoutBase;
}(layout_base_1.LayoutBase);

exports.WrapLayoutBase = WrapLayoutBase;
WrapLayoutBase.prototype.recycleNativeView = "auto";
exports.itemWidthProperty = new layout_base_1.Property({
  name: "itemWidth",
  defaultValue: "auto",
  affectsLayout: layout_base_1.isIOS,
  valueConverter: function valueConverter(v) {
    return layout_base_1.Length.parse(v);
  },
  valueChanged: function valueChanged(target, oldValue, newValue) {
    return target.effectiveItemWidth = layout_base_1.Length.toDevicePixels(newValue, -1);
  }
});
exports.itemWidthProperty.register(WrapLayoutBase);
exports.itemHeightProperty = new layout_base_1.Property({
  name: "itemHeight",
  defaultValue: "auto",
  affectsLayout: layout_base_1.isIOS,
  valueConverter: function valueConverter(v) {
    return layout_base_1.Length.parse(v);
  },
  valueChanged: function valueChanged(target, oldValue, newValue) {
    return target.effectiveItemHeight = layout_base_1.Length.toDevicePixels(newValue, -1);
  }
});
exports.itemHeightProperty.register(WrapLayoutBase);
var converter = layout_base_1.makeParser(layout_base_1.makeValidator("horizontal", "vertical"));
exports.orientationProperty = new layout_base_1.Property({
  name: "orientation",
  defaultValue: "horizontal",
  affectsLayout: layout_base_1.isIOS,
  valueConverter: converter
});
exports.orientationProperty.register(WrapLayoutBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/wrap-layout/wrap-layout.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var wrap_layout_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/wrap-layout/wrap-layout-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/wrap-layout/wrap-layout-common.js"));

var WrapLayout = function (_super) {
  __extends(WrapLayout, _super);

  function WrapLayout() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  WrapLayout.prototype.createNativeView = function () {
    return new org.nativescript.widgets.WrapLayout(this._context);
  };

  WrapLayout.prototype[wrap_layout_common_1.orientationProperty.setNative] = function (value) {
    this.nativeViewProtected.setOrientation(value === "vertical" ? org.nativescript.widgets.Orientation.vertical : org.nativescript.widgets.Orientation.horizontal);
  };

  WrapLayout.prototype[wrap_layout_common_1.itemWidthProperty.setNative] = function (value) {
    this.nativeViewProtected.setItemWidth(wrap_layout_common_1.Length.toDevicePixels(value, -1));
  };

  WrapLayout.prototype[wrap_layout_common_1.itemHeightProperty.setNative] = function (value) {
    this.nativeViewProtected.setItemHeight(wrap_layout_common_1.Length.toDevicePixels(value, -1));
  };

  return WrapLayout;
}(wrap_layout_common_1.WrapLayoutBase);

exports.WrapLayout = WrapLayout;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/list-picker/list-picker-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var ListPickerBase = function (_super) {
  __extends(ListPickerBase, _super);

  function ListPickerBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ListPickerBase.prototype._getItemAsString = function (index) {
    var items = this.items;

    if (!items) {
      return " ";
    }

    var item = this.isItemsSource ? this.items.getItem(index) : this.items[index];
    return item === undefined || item === null ? index + "" : this.parseItem(item);
  };

  ListPickerBase.prototype.parseItem = function (item) {
    return this.textField ? item[this.textField] + "" : item + "";
  };

  ListPickerBase.prototype.updateSelectedValue = function (index) {
    var newVal = null;

    if (index >= 0) {
      var item = this.items[index];
      newVal = this.valueField ? item[this.valueField] : item;
    }

    if (this.selectedValue !== newVal) {
      this.set("selectedValue", newVal);
    }
  };

  ListPickerBase = __decorate([view_1.CSSType("ListPicker")], ListPickerBase);
  return ListPickerBase;
}(view_1.View);

exports.ListPickerBase = ListPickerBase;
ListPickerBase.prototype.recycleNativeView = "auto";
exports.selectedIndexProperty = new view_1.CoercibleProperty({
  name: "selectedIndex",
  defaultValue: -1,
  valueConverter: function valueConverter(v) {
    return parseInt(v);
  },
  coerceValue: function coerceValue(target, value) {
    var items = target.items;

    if (items) {
      var max = items.length - 1;

      if (value < 0) {
        value = 0;
      }

      if (value > max) {
        value = max;
      }
    } else {
      value = -1;
    }

    target.updateSelectedValue(value);
    return value;
  }
});
exports.selectedIndexProperty.register(ListPickerBase);
exports.itemsProperty = new view_1.Property({
  name: "items",
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var getItem = newValue && newValue.getItem;
    target.isItemsSource = typeof getItem === "function";
  }
});
exports.itemsProperty.register(ListPickerBase);
exports.textFieldProperty = new view_1.Property({
  name: "textField",
  defaultValue: ""
});
exports.textFieldProperty.register(ListPickerBase);
exports.valueFieldProperty = new view_1.Property({
  name: "valueField",
  defaultValue: ""
});
exports.valueFieldProperty.register(ListPickerBase);
exports.selectedValueProperty = new view_1.Property({
  name: "selectedValue",
  defaultValue: null
});
exports.selectedValueProperty.register(ListPickerBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/list-picker/list-picker.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var list_picker_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/list-picker/list-picker-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/list-picker/list-picker-common.js"));

var Formatter;
var ValueChangeListener;

function initializeNativeClasses() {
  if (Formatter) {
    return;
  }

  var FormatterImpl = function (_super) {
    __extends(FormatterImpl, _super);

    function FormatterImpl(owner) {
      var _this = _super.call(this) || this;

      _this.owner = owner;
      return global.__native(_this);
    }

    FormatterImpl.prototype.format = function (index) {
      return this.owner._getItemAsString(index);
    };

    FormatterImpl = __decorate([Interfaces([android.widget.NumberPicker.Formatter])], FormatterImpl);
    return FormatterImpl;
  }(java.lang.Object);

  var ValueChangeListenerImpl = function (_super) {
    __extends(ValueChangeListenerImpl, _super);

    function ValueChangeListenerImpl(owner) {
      var _this = _super.call(this) || this;

      _this.owner = owner;
      return global.__native(_this);
    }

    ValueChangeListenerImpl.prototype.onValueChange = function (picker, oldValue, newValue) {
      list_picker_common_1.selectedIndexProperty.nativeValueChange(this.owner, newValue);
      this.owner.updateSelectedValue(newValue);
    };

    ValueChangeListenerImpl = __decorate([Interfaces([android.widget.NumberPicker.OnValueChangeListener])], ValueChangeListenerImpl);
    return ValueChangeListenerImpl;
  }(java.lang.Object);

  Formatter = FormatterImpl;
  ValueChangeListener = ValueChangeListenerImpl;
}

function getEditText(picker) {
  for (var i = 0, count = picker.getChildCount(); i < count; i++) {
    var child = picker.getChildAt(i);

    if (child instanceof android.widget.EditText) {
      return child;
    }
  }

  return null;
}

var selectorWheelPaintField;

function getSelectorWheelPaint(picker) {
  if (!selectorWheelPaintField) {
    selectorWheelPaintField = picker.getClass().getDeclaredField("mSelectorWheelPaint");
    selectorWheelPaintField.setAccessible(true);
  }

  return selectorWheelPaintField.get(picker);
}

var ListPicker = function (_super) {
  __extends(ListPicker, _super);

  function ListPicker() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ListPicker.prototype.createNativeView = function () {
    var picker = new android.widget.NumberPicker(this._context);
    picker.setDescendantFocusability(android.widget.NumberPicker.FOCUS_BLOCK_DESCENDANTS);
    picker.setMinValue(0);
    picker.setMaxValue(0);
    picker.setValue(0);
    picker.setWrapSelectorWheel(false);
    return picker;
  };

  ListPicker.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    initializeNativeClasses();
    var nativeView = this.nativeViewProtected;
    this._selectorWheelPaint = getSelectorWheelPaint(nativeView);
    var formatter = new Formatter(this);
    nativeView.setFormatter(formatter);
    nativeView.formatter = formatter;
    var valueChangedListener = new ValueChangeListener(this);
    nativeView.setOnValueChangedListener(valueChangedListener);
    nativeView.valueChangedListener = valueChangedListener;
    var editText = getEditText(nativeView);

    if (editText) {
      nativeView.editText = editText;
      editText.setFilters([]);
      editText.setText(" ", android.widget.TextView.BufferType.NORMAL);
    }
  };

  ListPicker.prototype.disposeNativeView = function () {
    var nativeView = this.nativeViewProtected;
    nativeView.formatter.owner = null;
    nativeView.valueChangedListener.owner = null;

    _super.prototype.disposeNativeView.call(this);
  };

  ListPicker.prototype._fixNumberPickerRendering = function () {
    var nativeView = this.nativeViewProtected;
    nativeView.setFormatter(null);
    nativeView.setFormatter(nativeView.formatter);
    var editText = nativeView.editText;

    if (editText) {
      editText.setFilters([]);
      editText.invalidate();
    }

    nativeView.invalidate();
  };

  ListPicker.prototype[list_picker_common_1.selectedIndexProperty.getDefault] = function () {
    return -1;
  };

  ListPicker.prototype[list_picker_common_1.selectedIndexProperty.setNative] = function (value) {
    if (value >= 0) {
      this.nativeViewProtected.setValue(value);
    }
  };

  ListPicker.prototype[list_picker_common_1.itemsProperty.getDefault] = function () {
    return null;
  };

  ListPicker.prototype[list_picker_common_1.itemsProperty.setNative] = function (value) {
    var maxValue = value && value.length > 0 ? value.length - 1 : 0;
    this.nativeViewProtected.setMaxValue(maxValue);

    this._fixNumberPickerRendering();

    list_picker_common_1.selectedIndexProperty.coerce(this);
  };

  ListPicker.prototype[list_picker_common_1.colorProperty.getDefault] = function () {
    var editText = this.nativeViewProtected.editText;
    return {
      wheelColor: this._selectorWheelPaint.getColor(),
      textColor: editText ? editText.getTextColors().getDefaultColor() : -1
    };
  };

  ListPicker.prototype[list_picker_common_1.colorProperty.setNative] = function (value) {
    var color;
    var wheelColor;

    if (value instanceof list_picker_common_1.Color) {
      color = wheelColor = value.android;
    } else {
      color = value.textColor;
      wheelColor = value.wheelColor;
    }

    this._selectorWheelPaint.setColor(wheelColor);

    var editText = this.nativeViewProtected.editText;

    if (editText) {
      editText.setTextColor(color);
    }
  };

  return ListPicker;
}(list_picker_common_1.ListPickerBase);

exports.ListPicker = ListPicker;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/list-view/list-view-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var builder_1 = __webpack_require__("../node_modules/tns-core-modules/ui/builder/builder.js");

var label_1 = __webpack_require__("../node_modules/tns-core-modules/ui/label/label.js");

var observable_array_1 = __webpack_require__("../node_modules/tns-core-modules/data/observable-array/observable-array.js");

var weak_event_listener_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/weak-event-listener/weak-event-listener.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var knownTemplates;

(function (knownTemplates) {
  knownTemplates.itemTemplate = "itemTemplate";
})(knownTemplates = exports.knownTemplates || (exports.knownTemplates = {}));

var knownMultiTemplates;

(function (knownMultiTemplates) {
  knownMultiTemplates.itemTemplates = "itemTemplates";
})(knownMultiTemplates = exports.knownMultiTemplates || (exports.knownMultiTemplates = {}));

var autoEffectiveRowHeight = -1;

var ListViewBase = function (_super) {
  __extends(ListViewBase, _super);

  function ListViewBase() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._itemIdGenerator = function (_item, index) {
      return index;
    };

    _this._itemTemplateSelectorBindable = new label_1.Label();
    _this._defaultTemplate = {
      key: "default",
      createView: function createView() {
        if (_this.itemTemplate) {
          return builder_1.parse(_this.itemTemplate, _this);
        }

        return undefined;
      }
    };
    _this._itemTemplatesInternal = new Array(_this._defaultTemplate);
    _this._effectiveRowHeight = autoEffectiveRowHeight;
    return _this;
  }

  Object.defineProperty(ListViewBase.prototype, "separatorColor", {
    get: function get() {
      return this.style.separatorColor;
    },
    set: function set(value) {
      this.style.separatorColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ListViewBase.prototype, "itemTemplateSelector", {
    get: function get() {
      return this._itemTemplateSelector;
    },
    set: function set(value) {
      var _this = this;

      if (typeof value === "string") {
        this._itemTemplateSelectorBindable.bind({
          sourceProperty: null,
          targetProperty: "templateKey",
          expression: value
        });

        this._itemTemplateSelector = function (item, index, items) {
          item["$index"] = index;

          if (_this._itemTemplateSelectorBindable.bindingContext === item) {
            _this._itemTemplateSelectorBindable.bindingContext = null;
          }

          _this._itemTemplateSelectorBindable.bindingContext = item;
          return _this._itemTemplateSelectorBindable.get("templateKey");
        };
      } else if (typeof value === "function") {
        this._itemTemplateSelector = value;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ListViewBase.prototype, "itemIdGenerator", {
    get: function get() {
      return this._itemIdGenerator;
    },
    set: function set(generatorFn) {
      this._itemIdGenerator = generatorFn;
    },
    enumerable: true,
    configurable: true
  });

  ListViewBase.prototype.refresh = function () {};

  ListViewBase.prototype.scrollToIndex = function (index) {};

  ListViewBase.prototype.scrollToIndexAnimated = function (index) {};

  ListViewBase.prototype._getItemTemplate = function (index) {
    var templateKey = "default";

    if (this.itemTemplateSelector) {
      var dataItem = this._getDataItem(index);

      templateKey = this._itemTemplateSelector(dataItem, index, this.items);
    }

    for (var i = 0, length_1 = this._itemTemplatesInternal.length; i < length_1; i++) {
      if (this._itemTemplatesInternal[i].key === templateKey) {
        return this._itemTemplatesInternal[i];
      }
    }

    return this._itemTemplatesInternal[0];
  };

  ListViewBase.prototype._prepareItem = function (item, index) {
    if (item) {
      item.bindingContext = this._getDataItem(index);
    }
  };

  ListViewBase.prototype._getDataItem = function (index) {
    var thisItems = this.items;
    return thisItems.getItem ? thisItems.getItem(index) : thisItems[index];
  };

  ListViewBase.prototype._getDefaultItemContent = function (index) {
    var lbl = new label_1.Label();
    lbl.bind({
      targetProperty: "text",
      sourceProperty: "$value"
    });
    return lbl;
  };

  ListViewBase.prototype._onItemsChanged = function (args) {
    this.refresh();
  };

  ListViewBase.prototype._onRowHeightPropertyChanged = function (oldValue, newValue) {
    this.refresh();
  };

  ListViewBase.prototype.isItemAtIndexVisible = function (index) {
    return false;
  };

  ListViewBase.prototype.updateEffectiveRowHeight = function () {
    exports.rowHeightProperty.coerce(this);
  };

  ListViewBase.itemLoadingEvent = "itemLoading";
  ListViewBase.itemTapEvent = "itemTap";
  ListViewBase.loadMoreItemsEvent = "loadMoreItems";
  ListViewBase.knownFunctions = ["itemTemplateSelector", "itemIdGenerator"];
  ListViewBase = __decorate([view_1.CSSType("ListView")], ListViewBase);
  return ListViewBase;
}(view_1.ContainerView);

exports.ListViewBase = ListViewBase;
ListViewBase.prototype.recycleNativeView = "auto";
exports.itemsProperty = new view_1.Property({
  name: "items",
  valueChanged: function valueChanged(target, oldValue, newValue) {
    if (oldValue instanceof view_1.Observable) {
      weak_event_listener_1.removeWeakEventListener(oldValue, observable_array_1.ObservableArray.changeEvent, target._onItemsChanged, target);
    }

    if (newValue instanceof view_1.Observable) {
      weak_event_listener_1.addWeakEventListener(newValue, observable_array_1.ObservableArray.changeEvent, target._onItemsChanged, target);
    }

    target.refresh();
  }
});
exports.itemsProperty.register(ListViewBase);
exports.itemTemplateProperty = new view_1.Property({
  name: "itemTemplate",
  valueChanged: function valueChanged(target) {
    target.refresh();
  }
});
exports.itemTemplateProperty.register(ListViewBase);
exports.itemTemplatesProperty = new view_1.Property({
  name: "itemTemplates",
  valueConverter: function valueConverter(value) {
    if (typeof value === "string") {
      return builder_1.parseMultipleTemplates(value);
    }

    return value;
  }
});
exports.itemTemplatesProperty.register(ListViewBase);
var defaultRowHeight = "auto";
exports.rowHeightProperty = new view_1.CoercibleProperty({
  name: "rowHeight",
  defaultValue: defaultRowHeight,
  equalityComparer: view_1.Length.equals,
  coerceValue: function coerceValue(target, value) {
    return target.nativeViewProtected ? value : defaultRowHeight;
  },
  valueChanged: function valueChanged(target, oldValue, newValue) {
    target._effectiveRowHeight = view_1.Length.toDevicePixels(newValue, autoEffectiveRowHeight);

    target._onRowHeightPropertyChanged(oldValue, newValue);
  },
  valueConverter: view_1.Length.parse
});
exports.rowHeightProperty.register(ListViewBase);
exports.iosEstimatedRowHeightProperty = new view_1.Property({
  name: "iosEstimatedRowHeight",
  valueConverter: function valueConverter(v) {
    return view_1.Length.parse(v);
  }
});
exports.iosEstimatedRowHeightProperty.register(ListViewBase);
exports.separatorColorProperty = new view_1.CssProperty({
  name: "separatorColor",
  cssName: "separator-color",
  equalityComparer: view_1.Color.equals,
  valueConverter: function valueConverter(v) {
    return new view_1.Color(v);
  }
});
exports.separatorColorProperty.register(view_1.Style);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/list-view/list-view.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var list_view_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/list-view/list-view-common.js");

var stack_layout_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout.js");

var proxy_view_container_1 = __webpack_require__("../node_modules/tns-core-modules/ui/proxy-view-container/proxy-view-container.js");

var layout_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/list-view/list-view-common.js"));

var ITEMLOADING = list_view_common_1.ListViewBase.itemLoadingEvent;
var LOADMOREITEMS = list_view_common_1.ListViewBase.loadMoreItemsEvent;
var ITEMTAP = list_view_common_1.ListViewBase.itemTapEvent;
var ItemClickListener;

function initializeItemClickListener() {
  if (ItemClickListener) {
    return;
  }

  var ItemClickListenerImpl = function (_super) {
    __extends(ItemClickListenerImpl, _super);

    function ItemClickListenerImpl(owner) {
      var _this = _super.call(this) || this;

      _this.owner = owner;
      return global.__native(_this);
    }

    ItemClickListenerImpl.prototype.onItemClick = function (parent, convertView, index, id) {
      var owner = this.owner;

      var view = owner._realizedTemplates.get(owner._getItemTemplate(index).key).get(convertView);

      owner.notify({
        eventName: ITEMTAP,
        object: owner,
        index: index,
        view: view
      });
    };

    ItemClickListenerImpl = __decorate([Interfaces([android.widget.AdapterView.OnItemClickListener])], ItemClickListenerImpl);
    return ItemClickListenerImpl;
  }(java.lang.Object);

  ItemClickListener = ItemClickListenerImpl;
}

var ListView = function (_super) {
  __extends(ListView, _super);

  function ListView() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._androidViewId = -1;
    _this._realizedItems = new Map();
    _this._realizedTemplates = new Map();
    return _this;
  }

  ListView.prototype.createNativeView = function () {
    var listView = new android.widget.ListView(this._context);
    listView.setDescendantFocusability(android.view.ViewGroup.FOCUS_AFTER_DESCENDANTS);
    listView.setCacheColorHint(android.graphics.Color.TRANSPARENT);
    return listView;
  };

  ListView.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    this.updateEffectiveRowHeight();
    var nativeView = this.nativeViewProtected;
    initializeItemClickListener();
    ensureListViewAdapterClass();
    var adapter = new ListViewAdapterClass(this);
    nativeView.setAdapter(adapter);
    nativeView.adapter = adapter;
    var itemClickListener = new ItemClickListener(this);
    nativeView.setOnItemClickListener(itemClickListener);
    nativeView.itemClickListener = itemClickListener;

    if (this._androidViewId < 0) {
      this._androidViewId = android.view.View.generateViewId();
    }

    nativeView.setId(this._androidViewId);
  };

  ListView.prototype.disposeNativeView = function () {
    var nativeView = this.nativeViewProtected;
    nativeView.setAdapter(null);
    nativeView.itemClickListener.owner = null;
    nativeView.adapter.owner = null;
    this.clearRealizedCells();

    _super.prototype.disposeNativeView.call(this);
  };

  ListView.prototype.onLoaded = function () {
    _super.prototype.onLoaded.call(this);

    this.requestLayout();
  };

  ListView.prototype.refresh = function () {
    var nativeView = this.nativeViewProtected;

    if (!nativeView || !nativeView.getAdapter()) {
      return;
    }

    this._realizedItems.forEach(function (view, nativeView) {
      if (!(view.bindingContext instanceof list_view_common_1.Observable)) {
        view.bindingContext = null;
      }
    });

    nativeView.getAdapter().notifyDataSetChanged();
  };

  ListView.prototype.scrollToIndex = function (index) {
    var nativeView = this.nativeViewProtected;

    if (nativeView) {
      nativeView.setSelection(index);
    }
  };

  ListView.prototype.scrollToIndexAnimated = function (index) {
    var nativeView = this.nativeViewProtected;

    if (nativeView) {
      nativeView.smoothScrollToPosition(index);
    }
  };

  Object.defineProperty(ListView.prototype, "_childrenCount", {
    get: function get() {
      return this._realizedItems.size;
    },
    enumerable: true,
    configurable: true
  });

  ListView.prototype.eachChildView = function (callback) {
    this._realizedItems.forEach(function (view, nativeView) {
      if (view.parent instanceof ListView) {
        callback(view);
      } else {
        if (view.parent) {
          callback(view.parent);
        }
      }
    });
  };

  ListView.prototype._dumpRealizedTemplates = function () {
    console.log("Realized Templates:");

    this._realizedTemplates.forEach(function (value, index) {
      console.log("\t" + index + ":");
      value.forEach(function (value, index) {
        console.log("\t\t" + index.hashCode() + ": " + value);
      });
    });

    console.log("Realized Items Size: " + this._realizedItems.size);
  };

  ListView.prototype.clearRealizedCells = function () {
    var _this = this;

    this._realizedItems.forEach(function (view, nativeView) {
      if (view.parent) {
        if (!(view.parent instanceof ListView)) {
          _this._removeView(view.parent);
        }

        view.parent._removeView(view);
      }
    });

    this._realizedItems.clear();

    this._realizedTemplates.clear();
  };

  ListView.prototype.isItemAtIndexVisible = function (index) {
    var nativeView = this.nativeViewProtected;
    var start = nativeView.getFirstVisiblePosition();
    var end = nativeView.getLastVisiblePosition();
    return index >= start && index <= end;
  };

  ListView.prototype[list_view_common_1.separatorColorProperty.getDefault] = function () {
    var nativeView = this.nativeViewProtected;
    return {
      dividerHeight: nativeView.getDividerHeight(),
      divider: nativeView.getDivider()
    };
  };

  ListView.prototype[list_view_common_1.separatorColorProperty.setNative] = function (value) {
    var nativeView = this.nativeViewProtected;

    if (value instanceof list_view_common_1.Color) {
      nativeView.setDivider(new android.graphics.drawable.ColorDrawable(value.android));
      nativeView.setDividerHeight(1);
    } else {
      nativeView.setDivider(value.divider);
      nativeView.setDividerHeight(value.dividerHeight);
    }
  };

  ListView.prototype[list_view_common_1.itemTemplatesProperty.getDefault] = function () {
    return null;
  };

  ListView.prototype[list_view_common_1.itemTemplatesProperty.setNative] = function (value) {
    this._itemTemplatesInternal = new Array(this._defaultTemplate);

    if (value) {
      this._itemTemplatesInternal = this._itemTemplatesInternal.concat(value);
    }

    this.nativeViewProtected.setAdapter(new ListViewAdapterClass(this));
    this.refresh();
  };

  __decorate([profiling_1.profile], ListView.prototype, "createNativeView", null);

  return ListView;
}(list_view_common_1.ListViewBase);

exports.ListView = ListView;
var ListViewAdapterClass;

function ensureListViewAdapterClass() {
  if (ListViewAdapterClass) {
    return;
  }

  var ListViewAdapter = function (_super) {
    __extends(ListViewAdapter, _super);

    function ListViewAdapter(owner) {
      var _this = _super.call(this) || this;

      _this.owner = owner;
      return global.__native(_this);
    }

    ListViewAdapter.prototype.getCount = function () {
      return this.owner && this.owner.items && this.owner.items.length ? this.owner.items.length : 0;
    };

    ListViewAdapter.prototype.getItem = function (i) {
      if (this.owner && this.owner.items && i < this.owner.items.length) {
        var getItem = this.owner.items.getItem;
        return getItem ? getItem.call(this.owner.items, i) : this.owner.items[i];
      }

      return null;
    };

    ListViewAdapter.prototype.getItemId = function (i) {
      var item = this.getItem(i);
      var id = i;

      if (this.owner && item && this.owner.items) {
        id = this.owner.itemIdGenerator(item, i, this.owner.items);
      }

      return long(id);
    };

    ListViewAdapter.prototype.hasStableIds = function () {
      return true;
    };

    ListViewAdapter.prototype.getViewTypeCount = function () {
      return this.owner._itemTemplatesInternal.length;
    };

    ListViewAdapter.prototype.getItemViewType = function (index) {
      var template = this.owner._getItemTemplate(index);

      var itemViewType = this.owner._itemTemplatesInternal.indexOf(template);

      return itemViewType;
    };

    ListViewAdapter.prototype.getView = function (index, convertView, parent) {
      if (!this.owner) {
        return null;
      }

      var totalItemCount = this.owner.items ? this.owner.items.length : 0;

      if (index === totalItemCount - 1) {
        this.owner.notify({
          eventName: LOADMOREITEMS,
          object: this.owner
        });
      }

      var template = this.owner._getItemTemplate(index);

      var view;

      if (convertView) {
        view = this.owner._realizedTemplates.get(template.key).get(convertView);

        if (!view) {
          throw new Error("There is no entry with key '" + convertView + "' in the realized views cache for template with key'" + template.key + "'.");
        }
      } else {
        view = template.createView();
      }

      var args = {
        eventName: ITEMLOADING,
        object: this.owner,
        index: index,
        view: view,
        android: parent,
        ios: undefined
      };
      this.owner.notify(args);

      if (!args.view) {
        args.view = this.owner._getDefaultItemContent(index);
      }

      if (args.view) {
        if (this.owner._effectiveRowHeight > -1) {
          args.view.height = this.owner.rowHeight;
        } else {
          args.view.height = list_view_common_1.unsetValue;
        }

        this.owner._prepareItem(args.view, index);

        if (!args.view.parent) {
          if (args.view instanceof layout_base_1.LayoutBase && !(args.view instanceof proxy_view_container_1.ProxyViewContainer)) {
            this.owner._addView(args.view);

            convertView = args.view.nativeViewProtected;
          } else {
            var sp = new stack_layout_1.StackLayout();
            sp.addChild(args.view);

            this.owner._addView(sp);

            convertView = sp.nativeViewProtected;
          }
        }

        var realizedItemsForTemplateKey = this.owner._realizedTemplates.get(template.key);

        if (!realizedItemsForTemplateKey) {
          realizedItemsForTemplateKey = new Map();

          this.owner._realizedTemplates.set(template.key, realizedItemsForTemplateKey);
        }

        realizedItemsForTemplateKey.set(convertView, args.view);

        this.owner._realizedItems.set(convertView, args.view);
      }

      return convertView;
    };

    __decorate([profiling_1.profile], ListViewAdapter.prototype, "getView", null);

    return ListViewAdapter;
  }(android.widget.BaseAdapter);

  ListViewAdapterClass = ListViewAdapter;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/page/page-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var content_view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/content-view/content-view.js");

var frame_1 = __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame.js");

var action_bar_1 = __webpack_require__("../node_modules/tns-core-modules/ui/action-bar/action-bar.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/content-view/content-view.js"));

var PageBase = function (_super) {
  __extends(PageBase, _super);

  function PageBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  PageBase_1 = PageBase;
  Object.defineProperty(PageBase.prototype, "navigationContext", {
    get: function get() {
      return this._navigationContext;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(PageBase.prototype, "actionBar", {
    get: function get() {
      if (!this._actionBar) {
        this.hasActionBar = true;
        this._actionBar = new action_bar_1.ActionBar();

        this._addView(this._actionBar);
      }

      return this._actionBar;
    },
    set: function set(value) {
      if (!value) {
        throw new Error("ActionBar cannot be null or undefined.");
      }

      if (this._actionBar !== value) {
        if (this._actionBar) {
          this._removeView(this._actionBar);
        }

        this.hasActionBar = true;
        this._actionBar = value;

        this._addView(this._actionBar);
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(PageBase.prototype, "statusBarStyle", {
    get: function get() {
      return this.style.statusBarStyle;
    },
    set: function set(value) {
      this.style.statusBarStyle = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(PageBase.prototype, "androidStatusBarBackground", {
    get: function get() {
      return this.style.androidStatusBarBackground;
    },
    set: function set(value) {
      this.style.androidStatusBarBackground = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(PageBase.prototype, "page", {
    get: function get() {
      return this;
    },
    enumerable: true,
    configurable: true
  });

  PageBase.prototype._addChildFromBuilder = function (name, value) {
    if (value instanceof action_bar_1.ActionBar) {
      this.actionBar = value;
    } else {
      _super.prototype._addChildFromBuilder.call(this, name, value);
    }
  };

  PageBase.prototype.getKeyframeAnimationWithName = function (animationName) {
    return this._styleScope.getKeyframeAnimationWithName(animationName);
  };

  Object.defineProperty(PageBase.prototype, "frame", {
    get: function get() {
      var frame = this.parent;
      return frame instanceof frame_1.Frame ? frame : undefined;
    },
    enumerable: true,
    configurable: true
  });

  PageBase.prototype.createNavigatedData = function (eventName, isBackNavigation) {
    return {
      eventName: eventName,
      object: this,
      context: this.navigationContext,
      isBackNavigation: isBackNavigation
    };
  };

  PageBase.prototype.onNavigatingTo = function (context, isBackNavigation, bindingContext) {
    this._navigationContext = context;

    if (!isBackNavigation && bindingContext !== undefined && bindingContext !== null) {
      this.bindingContext = bindingContext;
    }

    this.notify(this.createNavigatedData(PageBase_1.navigatingToEvent, isBackNavigation));
  };

  PageBase.prototype.onNavigatedTo = function (isBackNavigation) {
    this.notify(this.createNavigatedData(PageBase_1.navigatedToEvent, isBackNavigation));
  };

  PageBase.prototype.onNavigatingFrom = function (isBackNavigation) {
    this.notify(this.createNavigatedData(PageBase_1.navigatingFromEvent, isBackNavigation));
  };

  PageBase.prototype.onNavigatedFrom = function (isBackNavigation) {
    this.notify(this.createNavigatedData(PageBase_1.navigatedFromEvent, isBackNavigation));
    this._navigationContext = undefined;
  };

  PageBase.prototype.eachChildView = function (callback) {
    _super.prototype.eachChildView.call(this, callback);

    if (this.actionBar) {
      callback(this.actionBar);
    }
  };

  Object.defineProperty(PageBase.prototype, "_childrenCount", {
    get: function get() {
      return (this.content ? 1 : 0) + (this._actionBar ? 1 : 0);
    },
    enumerable: true,
    configurable: true
  });
  var PageBase_1;
  PageBase.navigatingToEvent = "navigatingTo";
  PageBase.navigatedToEvent = "navigatedTo";
  PageBase.navigatingFromEvent = "navigatingFrom";
  PageBase.navigatedFromEvent = "navigatedFrom";

  __decorate([profiling_1.profile], PageBase.prototype, "onNavigatingTo", null);

  __decorate([profiling_1.profile], PageBase.prototype, "onNavigatedTo", null);

  __decorate([profiling_1.profile], PageBase.prototype, "onNavigatingFrom", null);

  __decorate([profiling_1.profile], PageBase.prototype, "onNavigatedFrom", null);

  PageBase = PageBase_1 = __decorate([content_view_1.CSSType("Page")], PageBase);
  return PageBase;
}(content_view_1.ContentView);

exports.PageBase = PageBase;
PageBase.prototype.recycleNativeView = "never";
exports.actionBarHiddenProperty = new content_view_1.Property({
  name: "actionBarHidden",
  affectsLayout: content_view_1.isIOS,
  valueConverter: content_view_1.booleanConverter
});
exports.actionBarHiddenProperty.register(PageBase);
exports.backgroundSpanUnderStatusBarProperty = new content_view_1.Property({
  name: "backgroundSpanUnderStatusBar",
  defaultValue: false,
  affectsLayout: content_view_1.isIOS,
  valueConverter: content_view_1.booleanConverter
});
exports.backgroundSpanUnderStatusBarProperty.register(PageBase);
exports.enableSwipeBackNavigationProperty = new content_view_1.Property({
  name: "enableSwipeBackNavigation",
  defaultValue: true,
  valueConverter: content_view_1.booleanConverter
});
exports.enableSwipeBackNavigationProperty.register(PageBase);
exports.statusBarStyleProperty = new content_view_1.CssProperty({
  name: "statusBarStyle",
  cssName: "status-bar-style"
});
exports.statusBarStyleProperty.register(content_view_1.Style);
exports.androidStatusBarBackgroundProperty = new content_view_1.CssProperty({
  name: "androidStatusBarBackground",
  cssName: "android-status-bar-background",
  equalityComparer: content_view_1.Color.equals,
  valueConverter: function valueConverter(v) {
    return new content_view_1.Color(v);
  }
});
exports.androidStatusBarBackgroundProperty.register(content_view_1.Style);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/page/page.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var page_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/page/page-common.js");

var action_bar_1 = __webpack_require__("../node_modules/tns-core-modules/ui/action-bar/action-bar.js");

var grid_layout_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/grid-layout/grid-layout.js");

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/page/page-common.js"));

var SYSTEM_UI_FLAG_LIGHT_STATUS_BAR = 0x00002000;
var STATUS_BAR_LIGHT_BCKG = -657931;
var STATUS_BAR_DARK_BCKG = 1711276032;

var Page = function (_super) {
  __extends(Page, _super);

  function Page() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Page.prototype.createNativeView = function () {
    var layout = new org.nativescript.widgets.GridLayout(this._context);
    layout.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.auto));
    layout.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.star));
    return layout;
  };

  Page.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    this.nativeViewProtected.setBackgroundColor(-1);
  };

  Page.prototype._addViewToNativeVisualTree = function (child, atIndex) {
    if (this.nativeViewProtected && child.nativeViewProtected) {
      if (child instanceof action_bar_1.ActionBar) {
        grid_layout_1.GridLayout.setRow(child, 0);
        child.horizontalAlignment = "stretch";
        child.verticalAlignment = "top";
      } else {
        grid_layout_1.GridLayout.setRow(child, 1);
      }
    }

    return _super.prototype._addViewToNativeVisualTree.call(this, child, atIndex);
  };

  Page.prototype.onLoaded = function () {
    _super.prototype.onLoaded.call(this);

    if (this.actionBarHidden !== undefined) {
      this.updateActionBar();
    }
  };

  Page.prototype.updateActionBar = function () {
    this.actionBar.update();
  };

  Page.prototype[page_common_1.actionBarHiddenProperty.setNative] = function (value) {
    this.updateActionBar();
  };

  Page.prototype[page_common_1.statusBarStyleProperty.getDefault] = function () {
    if (platform_1.device.sdkVersion >= "21") {
      var window_1 = this._context.getWindow();

      var decorView = window_1.getDecorView();
      return {
        color: window_1.getStatusBarColor(),
        systemUiVisibility: decorView.getSystemUiVisibility()
      };
    }

    return null;
  };

  Page.prototype[page_common_1.statusBarStyleProperty.setNative] = function (value) {
    if (platform_1.device.sdkVersion >= "21") {
      var window_2 = this._context.getWindow();

      var decorView = window_2.getDecorView();

      if (value === "light") {
        window_2.setStatusBarColor(STATUS_BAR_LIGHT_BCKG);
        decorView.setSystemUiVisibility(SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);
      } else if (value === "dark") {
        window_2.setStatusBarColor(STATUS_BAR_DARK_BCKG);
        decorView.setSystemUiVisibility(0);
      } else {
        window_2.setStatusBarColor(value.color);
        decorView.setSystemUiVisibility(value.systemUiVisibility);
      }
    }
  };

  Page.prototype[page_common_1.androidStatusBarBackgroundProperty.getDefault] = function () {
    if (platform_1.device.sdkVersion >= "21") {
      var window_3 = this._context.getWindow();

      return window_3.getStatusBarColor();
    }

    return null;
  };

  Page.prototype[page_common_1.androidStatusBarBackgroundProperty.setNative] = function (value) {
    if (platform_1.device.sdkVersion >= "21") {
      var window_4 = this._context.getWindow();

      var color = value instanceof page_common_1.Color ? value.android : value;
      window_4.setStatusBarColor(color);
    }
  };

  __decorate([profiling_1.profile], Page.prototype, "onLoaded", null);

  return Page;
}(page_common_1.PageBase);

exports.Page = Page;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/placeholder/placeholder.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var Placeholder = function (_super) {
  __extends(Placeholder, _super);

  function Placeholder() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Placeholder_1 = Placeholder;

  Placeholder.prototype.createNativeView = function () {
    var args = {
      eventName: Placeholder_1.creatingViewEvent,
      object: this,
      view: undefined,
      context: this._context
    };
    this.notify(args);
    return args.view;
  };

  var Placeholder_1;
  Placeholder.creatingViewEvent = "creatingView";
  Placeholder = Placeholder_1 = __decorate([view_1.CSSType("Placeholder")], Placeholder);
  return Placeholder;
}(view_1.View);

exports.Placeholder = Placeholder;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/progress/progress-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var ProgressBase = function (_super) {
  __extends(ProgressBase, _super);

  function ProgressBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ProgressBase = __decorate([view_1.CSSType("Progress")], ProgressBase);
  return ProgressBase;
}(view_1.View);

exports.ProgressBase = ProgressBase;
ProgressBase.prototype.recycleNativeView = "auto";
exports.valueProperty = new view_1.CoercibleProperty({
  name: "value",
  defaultValue: 0,
  coerceValue: function coerceValue(t, v) {
    return v < 0 ? 0 : Math.min(v, t.maxValue);
  },
  valueConverter: function valueConverter(v) {
    return parseInt(v);
  }
});
exports.valueProperty.register(ProgressBase);
exports.maxValueProperty = new view_1.Property({
  name: "maxValue",
  defaultValue: 100,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    exports.valueProperty.coerce(target);
  },
  valueConverter: function valueConverter(v) {
    return parseInt(v);
  }
});
exports.maxValueProperty.register(ProgressBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/progress/progress.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var progress_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/progress/progress-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/progress/progress-common.js"));

var R_ATTR_PROGRESS_BAR_STYLE_HORIZONTAL = 0x01010078;

var Progress = function (_super) {
  __extends(Progress, _super);

  function Progress() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Progress.prototype.createNativeView = function () {
    return new android.widget.ProgressBar(this._context, null, R_ATTR_PROGRESS_BAR_STYLE_HORIZONTAL);
  };

  Progress.prototype[progress_common_1.valueProperty.getDefault] = function () {
    return 0;
  };

  Progress.prototype[progress_common_1.valueProperty.setNative] = function (value) {
    this.nativeViewProtected.setProgress(value);
  };

  Progress.prototype[progress_common_1.maxValueProperty.getDefault] = function () {
    return 100;
  };

  Progress.prototype[progress_common_1.maxValueProperty.setNative] = function (value) {
    this.nativeViewProtected.setMax(value);
  };

  Progress.prototype[progress_common_1.colorProperty.getDefault] = function () {
    return null;
  };

  Progress.prototype[progress_common_1.colorProperty.setNative] = function (value) {
    var progressDrawable = this.nativeViewProtected.getProgressDrawable();

    if (!progressDrawable) {
      return;
    }

    if (value instanceof progress_common_1.Color) {
      progressDrawable.setColorFilter(value.android, android.graphics.PorterDuff.Mode.SRC_IN);
    } else {
      progressDrawable.clearColorFilter();
    }
  };

  Progress.prototype[progress_common_1.backgroundColorProperty.getDefault] = function () {
    return null;
  };

  Progress.prototype[progress_common_1.backgroundColorProperty.setNative] = function (value) {
    var progressDrawable = this.nativeViewProtected.getProgressDrawable();

    if (!progressDrawable) {
      return;
    }

    if (progressDrawable instanceof android.graphics.drawable.LayerDrawable && progressDrawable.getNumberOfLayers() > 0) {
      var backgroundDrawable = progressDrawable.getDrawable(0);

      if (backgroundDrawable) {
        if (value instanceof progress_common_1.Color) {
          backgroundDrawable.setColorFilter(value.android, android.graphics.PorterDuff.Mode.SRC_IN);
        } else {
          backgroundDrawable.clearColorFilter();
        }
      }
    }
  };

  Progress.prototype[progress_common_1.backgroundInternalProperty.getDefault] = function () {
    return null;
  };

  Progress.prototype[progress_common_1.backgroundInternalProperty.setNative] = function (value) {};

  return Progress;
}(progress_common_1.ProgressBase);

exports.Progress = Progress;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/proxy-view-container/proxy-view-container.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var layout_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js");

var ProxyViewContainer = function (_super) {
  __extends(ProxyViewContainer, _super);

  function ProxyViewContainer() {
    var _this = _super.call(this) || this;

    _this.nativeViewProtected = undefined;
    return _this;
  }

  Object.defineProperty(ProxyViewContainer.prototype, "ios", {
    get: function get() {
      return null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ProxyViewContainer.prototype, "android", {
    get: function get() {
      return null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ProxyViewContainer.prototype, "isLayoutRequested", {
    get: function get() {
      return false;
    },
    enumerable: true,
    configurable: true
  });

  ProxyViewContainer.prototype.createNativeView = function () {
    return undefined;
  };

  ProxyViewContainer.prototype._getNativeViewsCount = function () {
    var result = 0;
    this.eachChildView(function (cv) {
      result += cv._getNativeViewsCount();
      return true;
    });
    return result;
  };

  ProxyViewContainer.prototype._eachLayoutView = function (callback) {
    this.eachChildView(function (cv) {
      if (!cv.isCollapsed) {
        cv._eachLayoutView(callback);
      }

      return true;
    });
  };

  ProxyViewContainer.prototype._addViewToNativeVisualTree = function (child, atIndex) {
    if (layout_base_1.traceEnabled()) {
      layout_base_1.traceWrite("ViewContainer._addViewToNativeVisualTree for a child " + child + " ViewContainer.parent: " + this.parent, layout_base_1.traceCategories.ViewHierarchy);
    }

    _super.prototype._addViewToNativeVisualTree.call(this, child);

    var parent = this.parent;

    if (parent instanceof layout_base_1.View) {
      var baseIndex = 0;
      var insideIndex = 0;

      if (parent instanceof layout_base_1.LayoutBase) {
        baseIndex = parent._childIndexToNativeChildIndex(parent.getChildIndex(this));
      }

      if (atIndex !== undefined) {
        insideIndex = this._childIndexToNativeChildIndex(atIndex);
      } else {
        insideIndex = this._getNativeViewsCount();
      }

      if (layout_base_1.traceEnabled()) {
        layout_base_1.traceWrite("ProxyViewContainer._addViewToNativeVisualTree at: " + atIndex + " base: " + baseIndex + " additional: " + insideIndex, layout_base_1.traceCategories.ViewHierarchy);
      }

      return parent._addViewToNativeVisualTree(child, baseIndex + insideIndex);
    }

    return false;
  };

  ProxyViewContainer.prototype._removeViewFromNativeVisualTree = function (child) {
    if (layout_base_1.traceEnabled()) {
      layout_base_1.traceWrite("ProxyViewContainer._removeViewFromNativeVisualTree for a child " + child + " ViewContainer.parent: " + this.parent, layout_base_1.traceCategories.ViewHierarchy);
    }

    _super.prototype._removeViewFromNativeVisualTree.call(this, child);

    var parent = this.parent;

    if (parent instanceof layout_base_1.View) {
      return parent._removeViewFromNativeVisualTree(child);
    }
  };

  ProxyViewContainer.prototype._registerLayoutChild = function (child) {
    var parent = this.parent;

    if (parent instanceof layout_base_1.LayoutBase) {
      parent._registerLayoutChild(child);
    }
  };

  ProxyViewContainer.prototype._unregisterLayoutChild = function (child) {
    var parent = this.parent;

    if (parent instanceof layout_base_1.LayoutBase) {
      parent._unregisterLayoutChild(child);
    }
  };

  ProxyViewContainer.prototype._parentChanged = function (oldParent) {
    _super.prototype._parentChanged.call(this, oldParent);

    var addingToParent = this.parent && !oldParent;
    var newLayout = this.parent;
    var oldLayout = oldParent;

    if (addingToParent && newLayout instanceof layout_base_1.LayoutBase) {
      this.eachChildView(function (child) {
        newLayout._registerLayoutChild(child);

        return true;
      });
    } else if (oldLayout instanceof layout_base_1.LayoutBase) {
      this.eachChildView(function (child) {
        oldLayout._unregisterLayoutChild(child);

        return true;
      });
    }
  };

  ProxyViewContainer = __decorate([layout_base_1.CSSType("ProxyViewContainer")], ProxyViewContainer);
  return ProxyViewContainer;
}(layout_base_1.LayoutBase);

exports.ProxyViewContainer = ProxyViewContainer;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/repeater/repeater.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var label_1 = __webpack_require__("../node_modules/tns-core-modules/ui/label/label.js");

var layout_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js");

var stack_layout_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout.js");

var observable_array_1 = __webpack_require__("../node_modules/tns-core-modules/data/observable-array/observable-array.js");

var weak_event_listener_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/weak-event-listener/weak-event-listener.js");

var builder_1 = __webpack_require__("../node_modules/tns-core-modules/ui/builder/builder.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js"));

var knownTemplates;

(function (knownTemplates) {
  knownTemplates.itemTemplate = "itemTemplate";
})(knownTemplates = exports.knownTemplates || (exports.knownTemplates = {}));

var Repeater = function (_super) {
  __extends(Repeater, _super);

  function Repeater() {
    var _this = _super.call(this) || this;

    _this._isDirty = false;
    _this.itemsLayout = new stack_layout_1.StackLayout();
    return _this;
  }

  Repeater.prototype.onLoaded = function () {
    if (this._isDirty) {
      this.refresh();
    }

    _super.prototype.onLoaded.call(this);
  };

  Repeater.prototype._requestRefresh = function () {
    this._isDirty = true;

    if (this.isLoaded) {
      this.refresh();
    }
  };

  Repeater.prototype.refresh = function () {
    if (this.itemsLayout) {
      this.itemsLayout.removeChildren();
    }

    if (!this.items) {
      return;
    }

    var length = this.items.length;

    for (var i = 0; i < length; i++) {
      var viewToAdd = this.itemTemplate ? builder_1.parse(this.itemTemplate, this) : this._getDefaultItemContent(i);

      var dataItem = this._getDataItem(i);

      viewToAdd.bindingContext = dataItem;
      this.itemsLayout.addChild(viewToAdd);
    }

    this._isDirty = false;
  };

  Repeater.prototype._onItemsChanged = function (data) {
    this._requestRefresh();
  };

  Repeater.prototype._getDefaultItemContent = function (index) {
    var lbl = new label_1.Label();
    lbl.bind({
      targetProperty: "text",
      sourceProperty: "$value"
    });
    return lbl;
  };

  Repeater.prototype._getDataItem = function (index) {
    var items = this.items;
    return items.getItem ? items.getItem(index) : this.items[index];
  };

  Object.defineProperty(Repeater.prototype, "_childrenCount", {
    get: function get() {
      var count = 0;

      if (this.itemsLayout) {
        count++;
      }

      return count;
    },
    enumerable: true,
    configurable: true
  });

  Repeater.prototype.eachChildView = function (callback) {
    if (this.itemsLayout) {
      callback(this.itemsLayout);
    }
  };

  Repeater.prototype.onLayout = function (left, top, right, bottom) {
    var insets = this.getSafeAreaInsets();
    var paddingLeft = this.effectiveBorderLeftWidth + this.effectivePaddingLeft + insets.left;
    var paddingTop = this.effectiveBorderTopWidth + this.effectivePaddingTop + insets.top;
    var paddingRight = this.effectiveBorderRightWidth + this.effectivePaddingRight + insets.right;
    var paddingBottom = this.effectiveBorderBottomWidth + this.effectivePaddingBottom + insets.bottom;
    var childLeft = paddingLeft;
    var childTop = paddingTop;
    var childRight = right - left - paddingRight;
    var childBottom = bottom - top - paddingBottom;
    layout_base_1.View.layoutChild(this, this.itemsLayout, childLeft, childTop, childRight, childBottom);
  };

  Repeater.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var result = layout_base_1.View.measureChild(this, this.itemsLayout, widthMeasureSpec, heightMeasureSpec);
    var width = layout_base_1.layout.getMeasureSpecSize(widthMeasureSpec);
    var widthMode = layout_base_1.layout.getMeasureSpecMode(widthMeasureSpec);
    var height = layout_base_1.layout.getMeasureSpecSize(heightMeasureSpec);
    var heightMode = layout_base_1.layout.getMeasureSpecMode(heightMeasureSpec);
    var widthAndState = layout_base_1.View.resolveSizeAndState(result.measuredWidth, width, widthMode, 0);
    var heightAndState = layout_base_1.View.resolveSizeAndState(result.measuredHeight, height, heightMode, 0);
    this.setMeasuredDimension(widthAndState, heightAndState);
  };

  __decorate([profiling_1.profile], Repeater.prototype, "onLoaded", null);

  Repeater = __decorate([layout_base_1.CSSType("Repeater")], Repeater);
  return Repeater;
}(layout_base_1.CustomLayoutView);

exports.Repeater = Repeater;
Repeater.prototype.recycleNativeView = "auto";
exports.itemTemplateProperty = new layout_base_1.Property({
  name: "itemTemplate",
  affectsLayout: true,
  valueChanged: function valueChanged(target) {
    target._requestRefresh();
  }
});
exports.itemTemplateProperty.register(Repeater);
exports.itemsProperty = new layout_base_1.Property({
  name: "items",
  affectsLayout: true,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    if (oldValue instanceof observable_array_1.ObservableArray) {
      weak_event_listener_1.removeWeakEventListener(oldValue, observable_array_1.ObservableArray.changeEvent, target._onItemsChanged, target);
    }

    if (newValue instanceof observable_array_1.ObservableArray) {
      weak_event_listener_1.addWeakEventListener(newValue, observable_array_1.ObservableArray.changeEvent, target._onItemsChanged, target);
    }

    target._requestRefresh();
  }
});
exports.itemsProperty.register(Repeater);
exports.itemsLayoutProperty = new layout_base_1.Property({
  name: "itemsLayout",
  affectsLayout: true,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    if (oldValue) {
      target._removeView(oldValue);

      oldValue.removeChildren();
    }

    if (newValue) {
      target._addView(newValue);
    }

    target._requestRefresh();
  }
});
exports.itemsLayoutProperty.register(Repeater);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/scroll-view/scroll-view-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var content_view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/content-view/content-view.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/content-view/content-view.js"));

var ScrollViewBase = function (_super) {
  __extends(ScrollViewBase, _super);

  function ScrollViewBase() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._scrollChangeCount = 0;
    return _this;
  }

  ScrollViewBase_1 = ScrollViewBase;

  ScrollViewBase.prototype.addEventListener = function (arg, callback, thisArg) {
    _super.prototype.addEventListener.call(this, arg, callback, thisArg);

    if (arg === ScrollViewBase_1.scrollEvent) {
      this._scrollChangeCount++;
      this.attach();
    }
  };

  ScrollViewBase.prototype.removeEventListener = function (arg, callback, thisArg) {
    _super.prototype.removeEventListener.call(this, arg, callback, thisArg);

    if (arg === ScrollViewBase_1.scrollEvent) {
      this._scrollChangeCount--;
      this.dettach();
    }
  };

  ScrollViewBase.prototype.onLoaded = function () {
    _super.prototype.onLoaded.call(this);

    this.attach();
  };

  ScrollViewBase.prototype.onUnloaded = function () {
    _super.prototype.onUnloaded.call(this);

    this.dettach();
  };

  ScrollViewBase.prototype.attach = function () {
    if (this._scrollChangeCount > 0 && this.isLoaded) {
      this.attachNative();
    }
  };

  ScrollViewBase.prototype.dettach = function () {
    if (this._scrollChangeCount === 0 && this.isLoaded) {
      this.dettachNative();
    }
  };

  ScrollViewBase.prototype.attachNative = function () {};

  ScrollViewBase.prototype.dettachNative = function () {};

  Object.defineProperty(ScrollViewBase.prototype, "horizontalOffset", {
    get: function get() {
      return 0;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ScrollViewBase.prototype, "verticalOffset", {
    get: function get() {
      return 0;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ScrollViewBase.prototype, "scrollableWidth", {
    get: function get() {
      return 0;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ScrollViewBase.prototype, "scrollableHeight", {
    get: function get() {
      return 0;
    },
    enumerable: true,
    configurable: true
  });
  var ScrollViewBase_1;
  ScrollViewBase.scrollEvent = "scroll";

  __decorate([profiling_1.profile], ScrollViewBase.prototype, "onLoaded", null);

  ScrollViewBase = ScrollViewBase_1 = __decorate([content_view_1.CSSType("ScrollView")], ScrollViewBase);
  return ScrollViewBase;
}(content_view_1.ContentView);

exports.ScrollViewBase = ScrollViewBase;
var converter = content_view_1.makeParser(content_view_1.makeValidator("horizontal", "vertical"));
exports.orientationProperty = new content_view_1.Property({
  name: "orientation",
  defaultValue: "vertical",
  affectsLayout: true,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    target._onOrientationChanged();
  },
  valueConverter: converter
});
exports.orientationProperty.register(ScrollViewBase);
exports.scrollBarIndicatorVisibleProperty = new content_view_1.Property({
  name: "scrollBarIndicatorVisible",
  defaultValue: true,
  valueConverter: content_view_1.booleanConverter
});
exports.scrollBarIndicatorVisibleProperty.register(ScrollViewBase);
exports.isScrollEnabledProperty = new content_view_1.Property({
  name: "isScrollEnabled",
  defaultValue: true,
  valueConverter: content_view_1.booleanConverter
});
exports.isScrollEnabledProperty.register(ScrollViewBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/scroll-view/scroll-view.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var scroll_view_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/scroll-view/scroll-view-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/scroll-view/scroll-view-common.js"));

var ScrollView = function (_super) {
  __extends(ScrollView, _super);

  function ScrollView() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._androidViewId = -1;
    _this._lastScrollX = -1;
    _this._lastScrollY = -1;
    return _this;
  }

  Object.defineProperty(ScrollView.prototype, "horizontalOffset", {
    get: function get() {
      var nativeView = this.nativeViewProtected;

      if (!nativeView) {
        return 0;
      }

      return nativeView.getScrollX() / scroll_view_common_1.layout.getDisplayDensity();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ScrollView.prototype, "verticalOffset", {
    get: function get() {
      var nativeView = this.nativeViewProtected;

      if (!nativeView) {
        return 0;
      }

      return nativeView.getScrollY() / scroll_view_common_1.layout.getDisplayDensity();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ScrollView.prototype, "scrollableWidth", {
    get: function get() {
      var nativeView = this.nativeViewProtected;

      if (!nativeView || this.orientation !== "horizontal") {
        return 0;
      }

      return nativeView.getScrollableLength() / scroll_view_common_1.layout.getDisplayDensity();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ScrollView.prototype, "scrollableHeight", {
    get: function get() {
      var nativeView = this.nativeViewProtected;

      if (!nativeView || this.orientation !== "vertical") {
        return 0;
      }

      return nativeView.getScrollableLength() / scroll_view_common_1.layout.getDisplayDensity();
    },
    enumerable: true,
    configurable: true
  });

  ScrollView.prototype[scroll_view_common_1.isUserInteractionEnabledProperty.setNative] = function (value) {
    this.nativeViewProtected.setClickable(value);
    this.nativeViewProtected.setFocusable(value);
    this.nativeViewProtected.setScrollEnabled(value);
  };

  ScrollView.prototype[scroll_view_common_1.isScrollEnabledProperty.getDefault] = function () {
    return this.nativeViewProtected.getScrollEnabled();
  };

  ScrollView.prototype[scroll_view_common_1.isScrollEnabledProperty.setNative] = function (value) {
    this.nativeViewProtected.setScrollEnabled(value);
  };

  ScrollView.prototype[scroll_view_common_1.scrollBarIndicatorVisibleProperty.getDefault] = function () {
    return true;
  };

  ScrollView.prototype[scroll_view_common_1.scrollBarIndicatorVisibleProperty.setNative] = function (value) {
    if (this.orientation === "horizontal") {
      this.nativeViewProtected.setHorizontalScrollBarEnabled(value);
    } else {
      this.nativeViewProtected.setVerticalScrollBarEnabled(value);
    }
  };

  ScrollView.prototype.scrollToVerticalOffset = function (value, animated) {
    var nativeView = this.nativeViewProtected;

    if (nativeView && this.orientation === "vertical" && this.isScrollEnabled) {
      value *= scroll_view_common_1.layout.getDisplayDensity();

      if (animated) {
        nativeView.smoothScrollTo(0, value);
      } else {
        nativeView.scrollTo(0, value);
      }
    }
  };

  ScrollView.prototype.scrollToHorizontalOffset = function (value, animated) {
    var nativeView = this.nativeViewProtected;

    if (nativeView && this.orientation === "horizontal" && this.isScrollEnabled) {
      value *= scroll_view_common_1.layout.getDisplayDensity();

      if (animated) {
        nativeView.smoothScrollTo(value, 0);
      } else {
        nativeView.scrollTo(value, 0);
      }
    }
  };

  ScrollView.prototype.createNativeView = function () {
    return this.orientation === "horizontal" ? new org.nativescript.widgets.HorizontalScrollView(this._context) : new org.nativescript.widgets.VerticalScrollView(this._context);
  };

  ScrollView.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    if (this._androidViewId < 0) {
      this._androidViewId = android.view.View.generateViewId();
    }

    this.nativeViewProtected.setId(this._androidViewId);
  };

  ScrollView.prototype._onOrientationChanged = function () {
    if (this.nativeViewProtected) {
      var parent_1 = this.parent;

      if (parent_1) {
        parent_1._removeView(this);

        parent_1._addView(this);
      }
    }
  };

  ScrollView.prototype.attachNative = function () {
    var that = new WeakRef(this);
    this.handler = new android.view.ViewTreeObserver.OnScrollChangedListener({
      onScrollChanged: function onScrollChanged() {
        var owner = that.get();

        if (owner) {
          owner._onScrollChanged();
        }
      }
    });
    this.nativeViewProtected.getViewTreeObserver().addOnScrollChangedListener(this.handler);
  };

  ScrollView.prototype._onScrollChanged = function () {
    var nativeView = this.nativeViewProtected;

    if (nativeView) {
      var newScrollX = nativeView.getScrollX();
      var newScrollY = nativeView.getScrollY();

      if (newScrollX !== this._lastScrollX || newScrollY !== this._lastScrollY) {
        this.notify({
          object: this,
          eventName: ScrollView.scrollEvent,
          scrollX: newScrollX / scroll_view_common_1.layout.getDisplayDensity(),
          scrollY: newScrollY / scroll_view_common_1.layout.getDisplayDensity()
        });
        this._lastScrollX = newScrollX;
        this._lastScrollY = newScrollY;
      }
    }
  };

  ScrollView.prototype.dettachNative = function () {
    this.nativeViewProtected.getViewTreeObserver().removeOnScrollChangedListener(this.handler);
    this.handler = null;
  };

  return ScrollView;
}(scroll_view_common_1.ScrollViewBase);

exports.ScrollView = ScrollView;
ScrollView.prototype.recycleNativeView = "never";

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/search-bar/search-bar-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var SearchBarBase = function (_super) {
  __extends(SearchBarBase, _super);

  function SearchBarBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  SearchBarBase.submitEvent = "submit";
  SearchBarBase.clearEvent = "clear";
  SearchBarBase = __decorate([view_1.CSSType("SearchBar")], SearchBarBase);
  return SearchBarBase;
}(view_1.View);

exports.SearchBarBase = SearchBarBase;
SearchBarBase.prototype.recycleNativeView = "auto";
exports.textProperty = new view_1.Property({
  name: "text",
  defaultValue: "",
  affectsLayout: view_1.isIOS
});
exports.textProperty.register(SearchBarBase);
exports.hintProperty = new view_1.Property({
  name: "hint",
  defaultValue: ""
});
exports.hintProperty.register(SearchBarBase);
exports.textFieldHintColorProperty = new view_1.Property({
  name: "textFieldHintColor",
  equalityComparer: view_1.Color.equals,
  valueConverter: function valueConverter(v) {
    return new view_1.Color(v);
  }
});
exports.textFieldHintColorProperty.register(SearchBarBase);
exports.textFieldBackgroundColorProperty = new view_1.Property({
  name: "textFieldBackgroundColor",
  equalityComparer: view_1.Color.equals,
  valueConverter: function valueConverter(v) {
    return new view_1.Color(v);
  }
});
exports.textFieldBackgroundColorProperty.register(SearchBarBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/search-bar/search-bar.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var font_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/font.js");

var search_bar_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/search-bar/search-bar-common.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/search-bar/search-bar-common.js"));

var SEARCHTEXT = Symbol("searchText");
var QUERY = Symbol("query");
var QueryTextListener;
var CloseListener;

function initializeNativeClasses() {
  if (QueryTextListener) {
    return;
  }

  var CompatQueryTextListenerImpl = function (_super) {
    __extends(CompatQueryTextListenerImpl, _super);

    function CompatQueryTextListenerImpl(owner) {
      var _this = _super.call(this) || this;

      _this.owner = owner;
      return global.__native(_this);
    }

    CompatQueryTextListenerImpl.prototype.onQueryTextChange = function (newText) {
      var owner = this.owner;
      search_bar_common_1.textProperty.nativeValueChange(owner, newText);

      if (newText === "" && this[SEARCHTEXT] !== newText) {
        owner._emit(search_bar_common_1.SearchBarBase.clearEvent);
      }

      this[SEARCHTEXT] = newText;
      this[QUERY] = undefined;
      return true;
    };

    CompatQueryTextListenerImpl.prototype.onQueryTextSubmit = function (query) {
      var owner = this.owner;

      if (query !== "" && this[QUERY] !== query) {
        owner._emit(search_bar_common_1.SearchBarBase.submitEvent);
      }

      this[QUERY] = query;
      return true;
    };

    CompatQueryTextListenerImpl = __decorate([Interfaces([android.support.v7.widget.SearchView.OnQueryTextListener])], CompatQueryTextListenerImpl);
    return CompatQueryTextListenerImpl;
  }(java.lang.Object);

  var CompatCloseListenerImpl = function (_super) {
    __extends(CompatCloseListenerImpl, _super);

    function CompatCloseListenerImpl(owner) {
      var _this = _super.call(this) || this;

      _this.owner = owner;
      return global.__native(_this);
    }

    CompatCloseListenerImpl.prototype.onClose = function () {
      this.owner._emit(search_bar_common_1.SearchBarBase.clearEvent);

      return true;
    };

    CompatCloseListenerImpl = __decorate([Interfaces([android.support.v7.widget.SearchView.OnCloseListener])], CompatCloseListenerImpl);
    return CompatCloseListenerImpl;
  }(java.lang.Object);

  QueryTextListener = CompatQueryTextListenerImpl;
  CloseListener = CompatCloseListenerImpl;
}

function enableSearchView(nativeView, value) {
  nativeView.setEnabled(value);

  if (!(nativeView instanceof android.view.ViewGroup)) {
    return;
  }

  for (var i = 0; i < nativeView.getChildCount(); i++) {
    var child = nativeView.getChildAt(i);
    enableSearchView(child, value);
  }
}

function enableUserInteractionSearchView(nativeView, value) {
  nativeView.setClickable(value);
  nativeView.setFocusable(value);

  if (!(nativeView instanceof android.view.ViewGroup)) {
    return;
  }

  for (var i = 0; i < nativeView.getChildCount(); i++) {
    var child = nativeView.getChildAt(i);
    enableUserInteractionSearchView(child, value);
  }
}

var SearchBar = function (_super) {
  __extends(SearchBar, _super);

  function SearchBar() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  SearchBar.prototype.dismissSoftInput = function () {
    utils_1.ad.dismissSoftInput(this.nativeViewProtected);
  };

  SearchBar.prototype.focus = function () {
    var result = _super.prototype.focus.call(this);

    if (result) {
      utils_1.ad.showSoftInput(this.nativeViewProtected);
    }

    return result;
  };

  SearchBar.prototype.createNativeView = function () {
    var nativeView = new android.support.v7.widget.SearchView(this._context);
    nativeView.setIconified(false);
    return nativeView;
  };

  SearchBar.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    var nativeView = this.nativeViewProtected;
    initializeNativeClasses();
    var queryTextListener = new QueryTextListener(this);
    nativeView.setOnQueryTextListener(queryTextListener);
    nativeView.queryTextListener = queryTextListener;
    var closeListener = new CloseListener(this);
    nativeView.setOnCloseListener(closeListener);
    nativeView.closeListener = closeListener;
  };

  SearchBar.prototype.disposeNativeView = function () {
    var nativeView = this.nativeViewProtected;
    nativeView.closeListener.owner = null;
    nativeView.queryTextListener.owner = null;
    this._searchPlate = null;
    this._searchTextView = null;

    _super.prototype.disposeNativeView.call(this);
  };

  SearchBar.prototype[search_bar_common_1.isEnabledProperty.setNative] = function (value) {
    enableSearchView(this.nativeViewProtected, value);
  };

  SearchBar.prototype[search_bar_common_1.isUserInteractionEnabledProperty.setNative] = function (value) {
    enableUserInteractionSearchView(this.nativeViewProtected, value);
  };

  SearchBar.prototype[search_bar_common_1.backgroundColorProperty.getDefault] = function () {
    var result = this.nativeViewProtected.getDrawingCacheBackgroundColor();
    return result;
  };

  SearchBar.prototype[search_bar_common_1.backgroundColorProperty.setNative] = function (value) {
    var color;

    if (typeof value === "number") {
      color = value;
    } else {
      color = value.android;
    }

    this.nativeViewProtected.setBackgroundColor(color);

    var searchPlate = this._getSearchPlate();

    searchPlate.setBackgroundColor(color);
  };

  SearchBar.prototype[search_bar_common_1.colorProperty.getDefault] = function () {
    var textView = this._getTextView();

    return textView.getCurrentTextColor();
  };

  SearchBar.prototype[search_bar_common_1.colorProperty.setNative] = function (value) {
    var color = typeof value === "number" ? value : value.android;

    var textView = this._getTextView();

    textView.setTextColor(color);
  };

  SearchBar.prototype[search_bar_common_1.fontSizeProperty.getDefault] = function () {
    return {
      nativeSize: this._getTextView().getTextSize()
    };
  };

  SearchBar.prototype[search_bar_common_1.fontSizeProperty.setNative] = function (value) {
    if (typeof value === "number") {
      this._getTextView().setTextSize(value);
    } else {
      this._getTextView().setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, value.nativeSize);
    }
  };

  SearchBar.prototype[search_bar_common_1.fontInternalProperty.getDefault] = function () {
    return this._getTextView().getTypeface();
  };

  SearchBar.prototype[search_bar_common_1.fontInternalProperty.setNative] = function (value) {
    this._getTextView().setTypeface(value instanceof font_1.Font ? value.getAndroidTypeface() : value);
  };

  SearchBar.prototype[search_bar_common_1.backgroundInternalProperty.getDefault] = function () {
    return null;
  };

  SearchBar.prototype[search_bar_common_1.backgroundInternalProperty.setNative] = function (value) {};

  SearchBar.prototype[search_bar_common_1.textProperty.getDefault] = function () {
    return "";
  };

  SearchBar.prototype[search_bar_common_1.textProperty.setNative] = function (value) {
    var text = value === null || value === undefined ? "" : value.toString();
    this.nativeViewProtected.setQuery(text, false);
  };

  SearchBar.prototype[search_bar_common_1.hintProperty.getDefault] = function () {
    return null;
  };

  SearchBar.prototype[search_bar_common_1.hintProperty.setNative] = function (value) {
    if (value === null || value === undefined) {
      this.nativeViewProtected.setQueryHint(null);
    } else {
      this.nativeViewProtected.setQueryHint(value.toString());
    }
  };

  SearchBar.prototype[search_bar_common_1.textFieldBackgroundColorProperty.getDefault] = function () {
    var textView = this._getTextView();

    return textView.getBackground();
  };

  SearchBar.prototype[search_bar_common_1.textFieldBackgroundColorProperty.setNative] = function (value) {
    var textView = this._getTextView();

    if (value instanceof search_bar_common_1.Color) {
      textView.setBackgroundColor(value.android);
    } else {
      textView.setBackground(value);
    }
  };

  SearchBar.prototype[search_bar_common_1.textFieldHintColorProperty.getDefault] = function () {
    var textView = this._getTextView();

    return textView.getCurrentTextColor();
  };

  SearchBar.prototype[search_bar_common_1.textFieldHintColorProperty.setNative] = function (value) {
    var textView = this._getTextView();

    var color = value instanceof search_bar_common_1.Color ? value.android : value;
    textView.setHintTextColor(color);
  };

  SearchBar.prototype._getTextView = function () {
    if (!this._searchTextView) {
      var pkgName = this.nativeViewProtected.getContext().getPackageName();
      var id = this.nativeViewProtected.getContext().getResources().getIdentifier("search_src_text", "id", pkgName);
      this._searchTextView = this.nativeViewProtected.findViewById(id);
    }

    return this._searchTextView;
  };

  SearchBar.prototype._getSearchPlate = function () {
    if (!this._searchPlate) {
      var pkgName = this.nativeViewProtected.getContext().getPackageName();
      var id = this.nativeViewProtected.getContext().getResources().getIdentifier("search_plate", "id", pkgName);
      this._searchPlate = this.nativeViewProtected.findViewById(id);
    }

    return this._searchPlate;
  };

  return SearchBar;
}(search_bar_common_1.SearchBarBase);

exports.SearchBar = SearchBar;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/segmented-bar/segmented-bar-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var knownCollections;

(function (knownCollections) {
  knownCollections.items = "items";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));

var SegmentedBarItemBase = function (_super) {
  __extends(SegmentedBarItemBase, _super);

  function SegmentedBarItemBase() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._title = "";
    return _this;
  }

  Object.defineProperty(SegmentedBarItemBase.prototype, "title", {
    get: function get() {
      return this._title;
    },
    set: function set(value) {
      var strValue = value !== null && value !== undefined ? value.toString() : "";

      if (this._title !== strValue) {
        this._title = strValue;

        this._update();
      }
    },
    enumerable: true,
    configurable: true
  });
  SegmentedBarItemBase = __decorate([view_1.CSSType("SegmentedBarItem")], SegmentedBarItemBase);
  return SegmentedBarItemBase;
}(view_1.ViewBase);

exports.SegmentedBarItemBase = SegmentedBarItemBase;

var SegmentedBarBase = function (_super) {
  __extends(SegmentedBarBase, _super);

  function SegmentedBarBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(SegmentedBarBase.prototype, "selectedBackgroundColor", {
    get: function get() {
      return this.style.selectedBackgroundColor;
    },
    set: function set(value) {
      this.style.selectedBackgroundColor = value;
    },
    enumerable: true,
    configurable: true
  });

  SegmentedBarBase.prototype._addArrayFromBuilder = function (name, value) {
    if (name === "items") {
      this.items = value;
    }
  };

  SegmentedBarBase.prototype._addChildFromBuilder = function (name, value) {
    if (name === "SegmentedBarItem") {
      var item = value;
      var items = this.items;

      if (!items) {
        items = new Array();
        items.push(item);
        this.items = items;
      } else {
        items.push(item);

        this._addView(item);
      }

      if (this.nativeViewProtected) {
        this[exports.itemsProperty.setNative](items);
      }
    }
  };

  SegmentedBarBase.prototype.onItemsChanged = function (oldItems, newItems) {
    if (oldItems) {
      for (var i = 0, count = oldItems.length; i < count; i++) {
        this._removeView(oldItems[i]);
      }
    }

    if (newItems) {
      for (var i = 0, count = newItems.length; i < count; i++) {
        this._addView(newItems[i]);
      }
    }
  };

  SegmentedBarBase.prototype.eachChild = function (callback) {
    var items = this.items;

    if (items) {
      items.forEach(function (item, i) {
        callback(item);
      });
    }
  };

  SegmentedBarBase.selectedIndexChangedEvent = "selectedIndexChanged";
  SegmentedBarBase = __decorate([view_1.CSSType("SegmentedBar")], SegmentedBarBase);
  return SegmentedBarBase;
}(view_1.View);

exports.SegmentedBarBase = SegmentedBarBase;
SegmentedBarBase.prototype.recycleNativeView = "auto";
exports.selectedIndexProperty = new view_1.CoercibleProperty({
  name: "selectedIndex",
  defaultValue: -1,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    target.notify({
      eventName: SegmentedBarBase.selectedIndexChangedEvent,
      object: target,
      oldIndex: oldValue,
      newIndex: newValue
    });
  },
  coerceValue: function coerceValue(target, value) {
    var items = target.items;

    if (items) {
      var max = items.length - 1;

      if (value < 0) {
        value = 0;
      }

      if (value > max) {
        value = max;
      }
    } else {
      value = -1;
    }

    return value;
  },
  valueConverter: function valueConverter(v) {
    return parseInt(v);
  }
});
exports.selectedIndexProperty.register(SegmentedBarBase);
exports.itemsProperty = new view_1.Property({
  name: "items",
  valueChanged: function valueChanged(target, oldValue, newValue) {
    target.onItemsChanged(oldValue, newValue);
  }
});
exports.itemsProperty.register(SegmentedBarBase);
exports.selectedBackgroundColorProperty = new view_1.InheritedCssProperty({
  name: "selectedBackgroundColor",
  cssName: "selected-background-color",
  equalityComparer: view_1.Color.equals,
  valueConverter: function valueConverter(v) {
    return new view_1.Color(v);
  }
});
exports.selectedBackgroundColorProperty.register(view_1.Style);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/segmented-bar/segmented-bar.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var font_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/font.js");

var segmented_bar_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/segmented-bar/segmented-bar-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/segmented-bar/segmented-bar-common.js"));

var R_ID_TABS = 0x01020013;
var R_ID_TABCONTENT = 0x01020011;
var R_ATTR_STATE_SELECTED = 0x010100a1;
var TITLE_TEXT_VIEW_ID = 16908310;
var apiLevel;
var selectedIndicatorThickness;
var TabHost;
var TabChangeListener;
var TabContentFactory;

function initializeNativeClasses() {
  if (TabChangeListener) {
    return;
  }

  apiLevel = android.os.Build.VERSION.SDK_INT;
  selectedIndicatorThickness = segmented_bar_common_1.layout.toDevicePixels(apiLevel >= 21 ? 2 : 5);

  var TabChangeListenerImpl = function (_super) {
    __extends(TabChangeListenerImpl, _super);

    function TabChangeListenerImpl(owner) {
      var _this = _super.call(this) || this;

      _this.owner = owner;
      return global.__native(_this);
    }

    TabChangeListenerImpl.prototype.onTabChanged = function (id) {
      var owner = this.owner;

      if (owner.shouldChangeSelectedIndex()) {
        owner.selectedIndex = parseInt(id);
      }
    };

    TabChangeListenerImpl = __decorate([Interfaces([android.widget.TabHost.OnTabChangeListener])], TabChangeListenerImpl);
    return TabChangeListenerImpl;
  }(java.lang.Object);

  var TabContentFactoryImpl = function (_super) {
    __extends(TabContentFactoryImpl, _super);

    function TabContentFactoryImpl(owner) {
      var _this = _super.call(this) || this;

      _this.owner = owner;
      return global.__native(_this);
    }

    TabContentFactoryImpl.prototype.createTabContent = function (tag) {
      var tv = new android.widget.TextView(this.owner._context);
      tv.setVisibility(android.view.View.GONE);
      tv.setMaxLines(1);
      tv.setEllipsize(android.text.TextUtils.TruncateAt.END);
      return tv;
    };

    TabContentFactoryImpl = __decorate([Interfaces([android.widget.TabHost.TabContentFactory])], TabContentFactoryImpl);
    return TabContentFactoryImpl;
  }(java.lang.Object);

  var TabHostImpl = function (_super) {
    __extends(TabHostImpl, _super);

    function TabHostImpl(context, attrs) {
      var _this = _super.call(this, context, attrs) || this;

      return global.__native(_this);
    }

    TabHostImpl.prototype.onAttachedToWindow = function () {};

    return TabHostImpl;
  }(android.widget.TabHost);

  TabHost = TabHostImpl;
  TabChangeListener = TabChangeListenerImpl;
  TabContentFactory = TabContentFactoryImpl;
}

var SegmentedBarItem = function (_super) {
  __extends(SegmentedBarItem, _super);

  function SegmentedBarItem() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  SegmentedBarItem.prototype.setupNativeView = function (tabIndex) {
    var titleTextView = this.parent.nativeViewProtected.getTabWidget().getChildAt(tabIndex).findViewById(TITLE_TEXT_VIEW_ID);
    this.setNativeView(titleTextView);

    if (titleTextView) {
      if (this.titleDirty) {
        this._update();
      }
    }
  };

  SegmentedBarItem.prototype._update = function () {
    var tv = this.nativeViewProtected;

    if (tv) {
      var title = this.title;
      title = title === null || title === undefined ? "" : title;
      tv.setText(title);
      this.titleDirty = false;
    } else {
      this.titleDirty = true;
    }
  };

  SegmentedBarItem.prototype[segmented_bar_common_1.colorProperty.getDefault] = function () {
    return this.nativeViewProtected.getCurrentTextColor();
  };

  SegmentedBarItem.prototype[segmented_bar_common_1.colorProperty.setNative] = function (value) {
    var color = value instanceof segmented_bar_common_1.Color ? value.android : value;
    this.nativeViewProtected.setTextColor(color);
  };

  SegmentedBarItem.prototype[segmented_bar_common_1.fontSizeProperty.getDefault] = function () {
    return {
      nativeSize: this.nativeViewProtected.getTextSize()
    };
  };

  SegmentedBarItem.prototype[segmented_bar_common_1.fontSizeProperty.setNative] = function (value) {
    if (typeof value === "number") {
      this.nativeViewProtected.setTextSize(value);
    } else {
      this.nativeViewProtected.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, value.nativeSize);
    }
  };

  SegmentedBarItem.prototype[segmented_bar_common_1.fontInternalProperty.getDefault] = function () {
    return this.nativeViewProtected.getTypeface();
  };

  SegmentedBarItem.prototype[segmented_bar_common_1.fontInternalProperty.setNative] = function (value) {
    this.nativeViewProtected.setTypeface(value instanceof font_1.Font ? value.getAndroidTypeface() : value);
  };

  SegmentedBarItem.prototype[segmented_bar_common_1.selectedBackgroundColorProperty.getDefault] = function () {
    var viewGroup = this.nativeViewProtected.getParent();
    return viewGroup.getBackground();
  };

  SegmentedBarItem.prototype[segmented_bar_common_1.selectedBackgroundColorProperty.setNative] = function (value) {
    var nativeView = this.nativeViewProtected;
    var viewGroup = nativeView.getParent();

    if (value instanceof segmented_bar_common_1.Color) {
      var color = value.android;
      var backgroundDrawable = viewGroup.getBackground();

      if (apiLevel > 21 && backgroundDrawable) {
        var newDrawable = tryCloneDrawable(backgroundDrawable, nativeView.getResources());
        newDrawable.setColorFilter(color, android.graphics.PorterDuff.Mode.SRC_IN);
        viewGroup.setBackground(newDrawable);
      } else {
        var stateDrawable = new android.graphics.drawable.StateListDrawable();
        var colorDrawable = new org.nativescript.widgets.SegmentedBarColorDrawable(color, selectedIndicatorThickness);
        var arr = Array.create("int", 1);
        arr[0] = R_ATTR_STATE_SELECTED;
        stateDrawable.addState(arr, colorDrawable);
        stateDrawable.setBounds(0, 15, viewGroup.getRight(), viewGroup.getBottom());
        viewGroup.setBackground(stateDrawable);
      }
    } else {
      var backgroundDrawable = tryCloneDrawable(value, nativeView.getResources());
      viewGroup.setBackground(backgroundDrawable);
    }
  };

  return SegmentedBarItem;
}(segmented_bar_common_1.SegmentedBarItemBase);

exports.SegmentedBarItem = SegmentedBarItem;

function tryCloneDrawable(value, resources) {
  if (value) {
    var constantState = value.getConstantState();

    if (constantState) {
      return constantState.newDrawable(resources);
    }
  }

  return value;
}

var SegmentedBar = function (_super) {
  __extends(SegmentedBar, _super);

  function SegmentedBar() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  SegmentedBar.prototype.shouldChangeSelectedIndex = function () {
    return !this._addingTab;
  };

  SegmentedBar.prototype.createNativeView = function () {
    initializeNativeClasses();
    var context = this._context;
    var nativeView = new TabHost(context, null);
    var tabHostLayout = new android.widget.LinearLayout(context);
    tabHostLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
    var tabWidget = new android.widget.TabWidget(context);
    tabWidget.setId(R_ID_TABS);
    tabHostLayout.addView(tabWidget);
    var frame = new android.widget.FrameLayout(context);
    frame.setId(R_ID_TABCONTENT);
    frame.setVisibility(android.view.View.GONE);
    tabHostLayout.addView(frame);
    nativeView.addView(tabHostLayout);
    return nativeView;
  };

  SegmentedBar.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    var nativeView = this.nativeViewProtected;
    var listener = new TabChangeListener(this);
    nativeView.setOnTabChangedListener(listener);
    nativeView.listener = listener;
    nativeView.setup();
    this._tabContentFactory = this._tabContentFactory || new TabContentFactory(this);
  };

  SegmentedBar.prototype.disposeNativeView = function () {
    var nativeView = this.nativeViewProtected;
    nativeView.listener.owner = null;

    _super.prototype.disposeNativeView.call(this);
  };

  SegmentedBar.prototype.insertTab = function (tabItem, index) {
    var tabHost = this.nativeViewProtected;
    var tab = tabHost.newTabSpec(index + "");
    tab.setIndicator(tabItem.title + "");
    tab.setContent(this._tabContentFactory);
    this._addingTab = true;
    tabHost.addTab(tab);
    tabItem.setupNativeView(index);
    this._addingTab = false;
  };

  SegmentedBar.prototype[segmented_bar_common_1.selectedIndexProperty.getDefault] = function () {
    return -1;
  };

  SegmentedBar.prototype[segmented_bar_common_1.selectedIndexProperty.setNative] = function (value) {
    this.nativeViewProtected.setCurrentTab(value);
  };

  SegmentedBar.prototype[segmented_bar_common_1.itemsProperty.getDefault] = function () {
    return null;
  };

  SegmentedBar.prototype[segmented_bar_common_1.itemsProperty.setNative] = function (value) {
    var _this = this;

    this.nativeViewProtected.clearAllTabs();
    var newItems = value;

    if (newItems) {
      newItems.forEach(function (item, i, arr) {
        return _this.insertTab(item, i);
      });
    }

    segmented_bar_common_1.selectedIndexProperty.coerce(this);
  };

  return SegmentedBar;
}(segmented_bar_common_1.SegmentedBarBase);

exports.SegmentedBar = SegmentedBar;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/slider/slider-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var SliderBase = function (_super) {
  __extends(SliderBase, _super);

  function SliderBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  SliderBase = __decorate([view_1.CSSType("Slider")], SliderBase);
  return SliderBase;
}(view_1.View);

exports.SliderBase = SliderBase;
SliderBase.prototype.recycleNativeView = "auto";
exports.valueProperty = new view_1.CoercibleProperty({
  name: "value",
  defaultValue: 0,
  coerceValue: function coerceValue(target, value) {
    value = Math.max(value, target.minValue);
    value = Math.min(value, target.maxValue);
    return value;
  },
  valueConverter: function valueConverter(v) {
    return view_1.isIOS ? parseFloat(v) : parseInt(v);
  }
});
exports.valueProperty.register(SliderBase);
exports.minValueProperty = new view_1.Property({
  name: "minValue",
  defaultValue: 0,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    exports.maxValueProperty.coerce(target);
    exports.valueProperty.coerce(target);
  },
  valueConverter: function valueConverter(v) {
    return view_1.isIOS ? parseFloat(v) : parseInt(v);
  }
});
exports.minValueProperty.register(SliderBase);
exports.maxValueProperty = new view_1.CoercibleProperty({
  name: "maxValue",
  defaultValue: 100,
  coerceValue: function coerceValue(target, value) {
    var minValue = target.minValue;

    if (value < minValue) {
      value = minValue;
    }

    return value;
  },
  valueChanged: function valueChanged(target, oldValue, newValue) {
    return exports.valueProperty.coerce(target);
  },
  valueConverter: function valueConverter(v) {
    return view_1.isIOS ? parseFloat(v) : parseInt(v);
  }
});
exports.maxValueProperty.register(SliderBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/slider/slider.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var slider_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/slider/slider-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/slider/slider-common.js"));

var SeekBar;
var SeekBarChangeListener;

function initializeListenerClass() {
  if (!SeekBarChangeListener) {
    var SeekBarChangeListenerImpl = function (_super) {
      __extends(SeekBarChangeListenerImpl, _super);

      function SeekBarChangeListenerImpl() {
        var _this = _super.call(this) || this;

        return global.__native(_this);
      }

      SeekBarChangeListenerImpl.prototype.onProgressChanged = function (seekBar, progress, fromUser) {
        var owner = seekBar.owner;

        if (owner && !owner._supressNativeValue) {
          var newValue = progress + owner.minValue;
          slider_common_1.valueProperty.nativeValueChange(owner, newValue);
        }
      };

      SeekBarChangeListenerImpl.prototype.onStartTrackingTouch = function (seekBar) {};

      SeekBarChangeListenerImpl.prototype.onStopTrackingTouch = function (seekBar) {};

      SeekBarChangeListenerImpl = __decorate([Interfaces([android.widget.SeekBar.OnSeekBarChangeListener])], SeekBarChangeListenerImpl);
      return SeekBarChangeListenerImpl;
    }(java.lang.Object);

    SeekBarChangeListener = new SeekBarChangeListenerImpl();
  }
}

function getListener() {
  return SeekBarChangeListener;
}

var Slider = function (_super) {
  __extends(Slider, _super);

  function Slider() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Slider.prototype.createNativeView = function () {
    if (!SeekBar) {
      SeekBar = android.widget.SeekBar;
    }

    return new SeekBar(this._context);
  };

  Slider.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    var nativeView = this.nativeViewProtected;
    nativeView.owner = this;
    initializeListenerClass();
    var listener = getListener();
    nativeView.setOnSeekBarChangeListener(listener);
  };

  Slider.prototype.disposeNativeView = function () {
    this.nativeViewProtected.owner = null;

    _super.prototype.disposeNativeView.call(this);
  };

  Slider.prototype.resetNativeView = function () {
    _super.prototype.resetNativeView.call(this);

    var nativeView = this.nativeViewProtected;
    nativeView.setMax(100);
    nativeView.setProgress(0);
    nativeView.setKeyProgressIncrement(1);
  };

  Slider.prototype.setNativeValuesSilently = function () {
    this._supressNativeValue = true;
    var nativeView = this.nativeViewProtected;

    try {
      nativeView.setMax(this.maxValue - this.minValue);
      nativeView.setProgress(this.value - this.minValue);
    } finally {
      this._supressNativeValue = false;
    }
  };

  Slider.prototype[slider_common_1.valueProperty.setNative] = function (value) {
    this.setNativeValuesSilently();
  };

  Slider.prototype[slider_common_1.minValueProperty.setNative] = function (value) {
    this.setNativeValuesSilently();
  };

  Slider.prototype[slider_common_1.maxValueProperty.getDefault] = function () {
    return 100;
  };

  Slider.prototype[slider_common_1.maxValueProperty.setNative] = function (value) {
    this.setNativeValuesSilently();
  };

  Slider.prototype[slider_common_1.colorProperty.getDefault] = function () {
    return -1;
  };

  Slider.prototype[slider_common_1.colorProperty.setNative] = function (value) {
    if (value instanceof slider_common_1.Color) {
      this.nativeViewProtected.getThumb().setColorFilter(value.android, android.graphics.PorterDuff.Mode.SRC_IN);
    } else {
      this.nativeViewProtected.getThumb().clearColorFilter();
    }
  };

  Slider.prototype[slider_common_1.backgroundColorProperty.getDefault] = function () {
    return -1;
  };

  Slider.prototype[slider_common_1.backgroundColorProperty.setNative] = function (value) {
    if (value instanceof slider_common_1.Color) {
      this.nativeViewProtected.getProgressDrawable().setColorFilter(value.android, android.graphics.PorterDuff.Mode.SRC_IN);
    } else {
      this.nativeViewProtected.getProgressDrawable().clearColorFilter();
    }
  };

  Slider.prototype[slider_common_1.backgroundInternalProperty.getDefault] = function () {
    return null;
  };

  Slider.prototype[slider_common_1.backgroundInternalProperty.setNative] = function (value) {};

  return Slider;
}(slider_common_1.SliderBase);

exports.Slider = Slider;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/background-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var linear_gradient_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/linear-gradient.js");

var color_1 = __webpack_require__("../node_modules/tns-core-modules/color/color.js");

var Background = function () {
  function Background() {
    this.borderTopWidth = 0;
    this.borderRightWidth = 0;
    this.borderBottomWidth = 0;
    this.borderLeftWidth = 0;
    this.borderTopLeftRadius = 0;
    this.borderTopRightRadius = 0;
    this.borderBottomLeftRadius = 0;
    this.borderBottomRightRadius = 0;
  }

  Background.prototype.clone = function () {
    var clone = new Background();
    clone.color = this.color;
    clone.image = this.image;
    clone.repeat = this.repeat;
    clone.position = this.position;
    clone.size = this.size;
    clone.borderTopColor = this.borderTopColor;
    clone.borderRightColor = this.borderRightColor;
    clone.borderBottomColor = this.borderBottomColor;
    clone.borderLeftColor = this.borderLeftColor;
    clone.borderTopWidth = this.borderTopWidth;
    clone.borderRightWidth = this.borderRightWidth;
    clone.borderBottomWidth = this.borderBottomWidth;
    clone.borderLeftWidth = this.borderLeftWidth;
    clone.borderTopLeftRadius = this.borderTopLeftRadius;
    clone.borderTopRightRadius = this.borderTopRightRadius;
    clone.borderBottomRightRadius = this.borderBottomRightRadius;
    clone.borderBottomLeftRadius = this.borderBottomLeftRadius;
    clone.clipPath = this.clipPath;
    return clone;
  };

  Background.prototype.withColor = function (value) {
    var clone = this.clone();
    clone.color = value;
    return clone;
  };

  Background.prototype.withImage = function (value) {
    var clone = this.clone();
    clone.image = value;
    return clone;
  };

  Background.prototype.withRepeat = function (value) {
    var clone = this.clone();
    clone.repeat = value;
    return clone;
  };

  Background.prototype.withPosition = function (value) {
    var clone = this.clone();
    clone.position = value;
    return clone;
  };

  Background.prototype.withSize = function (value) {
    var clone = this.clone();
    clone.size = value;
    return clone;
  };

  Background.prototype.withBorderTopColor = function (value) {
    var clone = this.clone();
    clone.borderTopColor = value;
    return clone;
  };

  Background.prototype.withBorderRightColor = function (value) {
    var clone = this.clone();
    clone.borderRightColor = value;
    return clone;
  };

  Background.prototype.withBorderBottomColor = function (value) {
    var clone = this.clone();
    clone.borderBottomColor = value;
    return clone;
  };

  Background.prototype.withBorderLeftColor = function (value) {
    var clone = this.clone();
    clone.borderLeftColor = value;
    return clone;
  };

  Background.prototype.withBorderTopWidth = function (value) {
    var clone = this.clone();
    clone.borderTopWidth = value;
    return clone;
  };

  Background.prototype.withBorderRightWidth = function (value) {
    var clone = this.clone();
    clone.borderRightWidth = value;
    return clone;
  };

  Background.prototype.withBorderBottomWidth = function (value) {
    var clone = this.clone();
    clone.borderBottomWidth = value;
    return clone;
  };

  Background.prototype.withBorderLeftWidth = function (value) {
    var clone = this.clone();
    clone.borderLeftWidth = value;
    return clone;
  };

  Background.prototype.withBorderTopLeftRadius = function (value) {
    var clone = this.clone();
    clone.borderTopLeftRadius = value;
    return clone;
  };

  Background.prototype.withBorderTopRightRadius = function (value) {
    var clone = this.clone();
    clone.borderTopRightRadius = value;
    return clone;
  };

  Background.prototype.withBorderBottomRightRadius = function (value) {
    var clone = this.clone();
    clone.borderBottomRightRadius = value;
    return clone;
  };

  Background.prototype.withBorderBottomLeftRadius = function (value) {
    var clone = this.clone();
    clone.borderBottomLeftRadius = value;
    return clone;
  };

  Background.prototype.withClipPath = function (value) {
    var clone = this.clone();
    clone.clipPath = value;
    return clone;
  };

  Background.prototype.isEmpty = function () {
    return !this.color && !this.image && !this.hasBorderWidth() && !this.hasBorderRadius() && !this.clipPath;
  };

  Background.equals = function (value1, value2) {
    if (!value1 && !value2) {
      return true;
    }

    if (!value1 || !value2) {
      return false;
    }

    var imagesEqual = false;

    if (value1 instanceof linear_gradient_1.LinearGradient && value2 instanceof linear_gradient_1.LinearGradient) {
      imagesEqual = linear_gradient_1.LinearGradient.equals(value1, value2);
    } else {
      imagesEqual = value1.image === value2.image;
    }

    return color_1.Color.equals(value1.color, value2.color) && imagesEqual && value1.position === value2.position && value1.repeat === value2.repeat && value1.size === value2.size && color_1.Color.equals(value1.borderTopColor, value2.borderTopColor) && color_1.Color.equals(value1.borderRightColor, value2.borderRightColor) && color_1.Color.equals(value1.borderBottomColor, value2.borderBottomColor) && color_1.Color.equals(value1.borderLeftColor, value2.borderLeftColor) && value1.borderTopWidth === value2.borderTopWidth && value1.borderRightWidth === value2.borderRightWidth && value1.borderBottomWidth === value2.borderBottomWidth && value1.borderLeftWidth === value2.borderLeftWidth && value1.borderTopLeftRadius === value2.borderTopLeftRadius && value1.borderTopRightRadius === value2.borderTopRightRadius && value1.borderBottomRightRadius === value2.borderBottomRightRadius && value1.borderBottomLeftRadius === value2.borderBottomLeftRadius && value1.clipPath === value2.clipPath;
  };

  Background.prototype.hasBorderColor = function () {
    return !!this.borderTopColor || !!this.borderRightColor || !!this.borderBottomColor || !!this.borderLeftColor;
  };

  Background.prototype.hasBorderWidth = function () {
    return this.borderTopWidth > 0 || this.borderRightWidth > 0 || this.borderBottomWidth > 0 || this.borderLeftWidth > 0;
  };

  Background.prototype.hasBorderRadius = function () {
    return this.borderTopLeftRadius > 0 || this.borderTopRightRadius > 0 || this.borderBottomRightRadius > 0 || this.borderBottomLeftRadius > 0;
  };

  Background.prototype.hasUniformBorderColor = function () {
    return color_1.Color.equals(this.borderTopColor, this.borderRightColor) && color_1.Color.equals(this.borderTopColor, this.borderBottomColor) && color_1.Color.equals(this.borderTopColor, this.borderLeftColor);
  };

  Background.prototype.hasUniformBorderWidth = function () {
    return this.borderTopWidth === this.borderRightWidth && this.borderTopWidth === this.borderBottomWidth && this.borderTopWidth === this.borderLeftWidth;
  };

  Background.prototype.hasUniformBorderRadius = function () {
    return this.borderTopLeftRadius === this.borderTopRightRadius && this.borderTopLeftRadius === this.borderBottomRightRadius && this.borderTopLeftRadius === this.borderBottomLeftRadius;
  };

  Background.prototype.hasUniformBorder = function () {
    return this.hasUniformBorderColor() && this.hasUniformBorderWidth() && this.hasUniformBorderRadius();
  };

  Background.prototype.getUniformBorderColor = function () {
    if (this.hasUniformBorderColor()) {
      return this.borderTopColor;
    }

    return undefined;
  };

  ;

  Background.prototype.getUniformBorderWidth = function () {
    if (this.hasUniformBorderWidth()) {
      return this.borderTopWidth;
    }

    return 0;
  };

  ;

  Background.prototype.getUniformBorderRadius = function () {
    if (this.hasUniformBorderRadius()) {
      return this.borderTopLeftRadius;
    }

    return 0;
  };

  ;

  Background.prototype.toString = function () {
    return "isEmpty: " + this.isEmpty() + "; color: " + this.color + "; image: " + this.image + "; repeat: " + this.repeat + "; position: " + this.position + "; size: " + this.size + "; borderTopColor: " + this.borderTopColor + "; borderRightColor: " + this.borderRightColor + "; borderBottomColor: " + this.borderBottomColor + "; borderLeftColor: " + this.borderLeftColor + "; borderTopWidth: " + this.borderTopWidth + "; borderRightWidth: " + this.borderRightWidth + "; borderBottomWidth: " + this.borderBottomWidth + "; borderLeftWidth: " + this.borderLeftWidth + "; borderTopLeftRadius: " + this.borderTopLeftRadius + "; borderTopRightRadius: " + this.borderTopRightRadius + "; borderBottomRightRadius: " + this.borderBottomRightRadius + "; borderBottomLeftRadius: " + this.borderBottomLeftRadius + "; clipPath: " + this.clipPath + ";";
  };

  Background.default = new Background();
  return Background;
}();

exports.Background = Background;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/background.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var linear_gradient_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/linear-gradient.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var css_value_1 = __webpack_require__("../node_modules/tns-core-modules/css-value/index.js");

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var application = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/styling/background-common.js"));

var ad;

(function (ad) {
  var SDK;

  function getSDK() {
    if (!SDK) {
      SDK = android.os.Build.VERSION.SDK_INT;
    }

    return SDK;
  }

  function isSetColorFilterOnlyWidget(nativeView) {
    return nativeView instanceof android.widget.Button || nativeView instanceof android.support.v7.widget.Toolbar && getSDK() >= 21;
  }

  function onBackgroundOrBorderPropertyChanged(view) {
    var nativeView = view.nativeViewProtected;

    if (!nativeView) {
      return;
    }

    var background = view.style.backgroundInternal;
    var drawable = nativeView.getBackground();
    var androidView = view;

    if (androidView._cachedDrawable === undefined && drawable) {
      var constantState = drawable.getConstantState();
      androidView._cachedDrawable = constantState || drawable;
    }

    if (isSetColorFilterOnlyWidget(nativeView) && drawable && !(drawable instanceof org.nativescript.widgets.BorderDrawable) && !background.hasBorderWidth() && !background.hasBorderRadius() && !background.clipPath && !background.image && background.color) {
      var backgroundColor = drawable.backgroundColor = background.color.android;
      drawable.mutate();
      drawable.setColorFilter(backgroundColor, android.graphics.PorterDuff.Mode.SRC_IN);
      drawable.invalidateSelf();
      drawable.backgroundColor = backgroundColor;
    } else if (!background.isEmpty()) {
      var backgroundDrawable = drawable;

      if (!(drawable instanceof org.nativescript.widgets.BorderDrawable)) {
        backgroundDrawable = new org.nativescript.widgets.BorderDrawable(utils_1.layout.getDisplayDensity(), view.toString());
        refreshBorderDrawable(view, backgroundDrawable);
        nativeView.setBackground(backgroundDrawable);
      } else {
        refreshBorderDrawable(view, backgroundDrawable);
      }
    } else {
      var cachedDrawable = androidView._cachedDrawable;
      var defaultDrawable = void 0;

      if (cachedDrawable instanceof android.graphics.drawable.Drawable.ConstantState) {
        defaultDrawable = cachedDrawable.newDrawable(nativeView.getResources());
      } else if (cachedDrawable instanceof android.graphics.drawable.Drawable) {
        defaultDrawable = cachedDrawable;
      } else {
        defaultDrawable = null;
      }

      nativeView.setBackground(defaultDrawable);
      androidView._cachedDrawable = undefined;
    }

    var leftPadding = Math.ceil(view.effectiveBorderLeftWidth + view.effectivePaddingLeft);
    var topPadding = Math.ceil(view.effectiveBorderTopWidth + view.effectivePaddingTop);
    var rightPadding = Math.ceil(view.effectiveBorderRightWidth + view.effectivePaddingRight);
    var bottomPadding = Math.ceil(view.effectiveBorderBottomWidth + view.effectivePaddingBottom);
    nativeView.setPadding(leftPadding, topPadding, rightPadding, bottomPadding);
  }

  ad.onBackgroundOrBorderPropertyChanged = onBackgroundOrBorderPropertyChanged;
})(ad = exports.ad || (exports.ad = {}));

function fromBase64(source) {
  var bytes = android.util.Base64.decode(source, android.util.Base64.DEFAULT);
  return android.graphics.BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
}

function fromGradient(gradient) {
  var colors = Array.create("int", gradient.colorStops.length);
  var stops = Array.create("float", gradient.colorStops.length);
  var hasStops = false;
  gradient.colorStops.forEach(function (stop, index) {
    colors[index] = stop.color.android;

    if (stop.offset) {
      stops[index] = stop.offset.value;
      hasStops = true;
    }
  });
  var alpha = gradient.angle / (Math.PI * 2);
  var startX = Math.pow(Math.sin(Math.PI * (alpha + 0.75)), 2);
  var startY = Math.pow(Math.sin(Math.PI * (alpha + 0.5)), 2);
  var endX = Math.pow(Math.sin(Math.PI * (alpha + 0.25)), 2);
  var endY = Math.pow(Math.sin(Math.PI * alpha), 2);
  return new org.nativescript.widgets.LinearGradientDefinition(startX, startY, endX, endY, colors, hasStops ? stops : null);
}

var pattern = /url\(('|")(.*?)\1\)/;

function refreshBorderDrawable(view, borderDrawable) {
  var nativeView = view.nativeViewProtected;
  var context = nativeView.getContext();
  var background = view.style.backgroundInternal;

  if (background) {
    var backgroundPositionParsedCSSValues = createNativeCSSValueArray(background.position);
    var backgroundSizeParsedCSSValues = createNativeCSSValueArray(background.size);
    var blackColor = -16777216;
    var imageUri = void 0;

    if (background.image && typeof background.image === "string") {
      imageUri = background.image;
      var match = imageUri.match(pattern);

      if (match && match[2]) {
        imageUri = match[2];
      }
    }

    var bitmap = null;

    if (utils_1.isDataURI(imageUri)) {
      var base64Data = imageUri.split(",")[1];

      if (base64Data !== undefined) {
        bitmap = fromBase64(base64Data);
        imageUri = null;
      }
    } else if (utils_1.isFileOrResourcePath(imageUri)) {
      if (imageUri.indexOf(utils_1.RESOURCE_PREFIX) !== 0) {
        var fileName = imageUri;

        if (fileName.indexOf("~/") === 0) {
          fileName = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, fileName.replace("~/", ""));
        }

        imageUri = utils_1.FILE_PREFIX + fileName;
      }
    }

    var gradient = null;

    if (background.image && background.image instanceof linear_gradient_1.LinearGradient) {
      gradient = fromGradient(background.image);
    }

    borderDrawable.refresh(background.borderTopColor ? background.borderTopColor.android : blackColor, background.borderRightColor ? background.borderRightColor.android : blackColor, background.borderBottomColor ? background.borderBottomColor.android : blackColor, background.borderLeftColor ? background.borderLeftColor.android : blackColor, background.borderTopWidth, background.borderRightWidth, background.borderBottomWidth, background.borderLeftWidth, background.borderTopLeftRadius, background.borderTopRightRadius, background.borderBottomRightRadius, background.borderBottomLeftRadius, background.clipPath, background.color ? background.color.android : 0, imageUri, bitmap, gradient, context, background.repeat, background.position, backgroundPositionParsedCSSValues, background.size, backgroundSizeParsedCSSValues);
  }
}

function createNativeCSSValueArray(css) {
  if (!css) {
    return null;
  }

  var cssValues = css_value_1.parse(css);
  var nativeArray = Array.create(org.nativescript.widgets.CSSValue, cssValues.length);

  for (var i = 0, length_1 = cssValues.length; i < length_1; i++) {
    nativeArray[i] = new org.nativescript.widgets.CSSValue(cssValues[i].type, cssValues[i].string, cssValues[i].unit, cssValues[i].value);
  }

  return nativeArray;
}

var CacheMode;

(function (CacheMode) {
  CacheMode[CacheMode["none"] = 0] = "none";
  CacheMode[CacheMode["memory"] = 1] = "memory";
  CacheMode[CacheMode["diskAndMemory"] = 2] = "diskAndMemory";
})(CacheMode = exports.CacheMode || (exports.CacheMode = {}));

var currentCacheMode;
var imageFetcher;

function initImageCache(context, mode, memoryCacheSize, diskCacheSize) {
  if (mode === void 0) {
    mode = CacheMode.diskAndMemory;
  }

  if (memoryCacheSize === void 0) {
    memoryCacheSize = 0.25;
  }

  if (diskCacheSize === void 0) {
    diskCacheSize = 10 * 1024 * 1024;
  }

  if (currentCacheMode === mode) {
    return;
  }

  currentCacheMode = mode;

  if (!imageFetcher) {
    imageFetcher = org.nativescript.widgets.image.Fetcher.getInstance(context);
  } else {
    imageFetcher.clearCache();
  }

  var params = new org.nativescript.widgets.image.Cache.CacheParams();
  params.memoryCacheEnabled = mode !== CacheMode.none;
  params.setMemCacheSizePercent(memoryCacheSize);
  params.diskCacheEnabled = mode === CacheMode.diskAndMemory;
  params.diskCacheSize = diskCacheSize;
  var imageCache = org.nativescript.widgets.image.Cache.getInstance(params);
  imageFetcher.addImageCache(imageCache);
  imageFetcher.initCache();
}

exports.initImageCache = initImageCache;

function onLivesync(args) {
  if (imageFetcher) {
    imageFetcher.clearCache();
  }
}

application.on("livesync", onLivesync);
application.android.on("activityStarted", profiling_1.profile("initImageCache", function (args) {
  if (!imageFetcher) {
    initImageCache(args.activity);
  } else {
    imageFetcher.initCache();
  }
}));
application.android.on("activityStopped", profiling_1.profile("closeImageCache", function (args) {
  if (imageFetcher) {
    imageFetcher.closeCache();
  }
}));

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/converters.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var enums_1 = __webpack_require__("../node_modules/tns-core-modules/ui/enums/enums.js");

var STYLE_CURVE_MAP = Object.freeze({
  "ease": enums_1.AnimationCurve.ease,
  "linear": enums_1.AnimationCurve.linear,
  "ease-in": enums_1.AnimationCurve.easeIn,
  "ease-out": enums_1.AnimationCurve.easeOut,
  "ease-in-out": enums_1.AnimationCurve.easeInOut,
  "spring": enums_1.AnimationCurve.spring
});

function timeConverter(value) {
  var result = parseFloat(value);

  if (value.indexOf("ms") === -1) {
    result = result * 1000;
  }

  return Math.max(0.0, result);
}

exports.timeConverter = timeConverter;

function animationTimingFunctionConverter(value) {
  return value ? STYLE_CURVE_MAP[value] || parseCubicBezierCurve(value) : enums_1.AnimationCurve.ease;
}

exports.animationTimingFunctionConverter = animationTimingFunctionConverter;

function parseCubicBezierCurve(value) {
  var coordsString = /\((.*?)\)/.exec(value);
  var coords = coordsString && coordsString[1].split(",").map(stringToBezieCoords);

  if (value.startsWith("cubic-bezier") && coordsString && coords.length === 4) {
    var _a = coords.slice(),
        x1 = _a[0],
        x2 = _a[1],
        y1_1 = _a[2],
        y2 = _a[3];

    return enums_1.AnimationCurve.cubicBezier(x1, x2, y1_1, y2);
  } else {
    throw new Error("Invalid value for animation: " + value);
  }
}

function stringToBezieCoords(value) {
  var result = parseFloat(value);

  if (result < 0) {
    return 0;
  } else if (result > 1) {
    return 1;
  }

  return result;
}

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/css-animation-parser.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var keyframe_animation_1 = __webpack_require__("../node_modules/tns-core-modules/ui/animation/keyframe-animation.js");

var converters_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/converters.js");

var style_properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js");

var ANIMATION_PROPERTY_HANDLERS = Object.freeze({
  "animation-name": function animationName(info, value) {
    return info.name = value;
  },
  "animation-duration": function animationDuration(info, value) {
    return info.duration = converters_1.timeConverter(value);
  },
  "animation-delay": function animationDelay(info, value) {
    return info.delay = converters_1.timeConverter(value);
  },
  "animation-timing-function": function animationTimingFunction(info, value) {
    return info.curve = converters_1.animationTimingFunctionConverter(value);
  },
  "animation-iteration-count": function animationIterationCount(info, value) {
    return info.iterations = value === "infinite" ? Number.MAX_VALUE : parseFloat(value);
  },
  "animation-direction": function animationDirection(info, value) {
    return info.isReverse = value === "reverse";
  },
  "animation-fill-mode": function animationFillMode(info, value) {
    return info.isForwards = value === "forwards";
  }
});

var CssAnimationParser = function () {
  function CssAnimationParser() {}

  CssAnimationParser.keyframeAnimationsFromCSSDeclarations = function (declarations) {
    if (declarations === null || declarations === undefined) {
      return undefined;
    }

    var animations = new Array();
    var animationInfo = undefined;
    declarations.forEach(function (_a) {
      var property = _a.property,
          value = _a.value;

      if (property === "animation") {
        keyframeAnimationsFromCSSProperty(value, animations);
      } else {
        var propertyHandler = ANIMATION_PROPERTY_HANDLERS[property];

        if (propertyHandler) {
          if (animationInfo === undefined) {
            animationInfo = new keyframe_animation_1.KeyframeAnimationInfo();
            animations.push(animationInfo);
          }

          propertyHandler(animationInfo, value);
        }
      }
    });
    return animations.length === 0 ? undefined : animations;
  };

  CssAnimationParser.keyframesArrayFromCSS = function (keyframes) {
    var parsedKeyframes = new Array();

    for (var _i = 0, keyframes_1 = keyframes; _i < keyframes_1.length; _i++) {
      var keyframe = keyframes_1[_i];
      var declarations = parseKeyframeDeclarations(keyframe.declarations);

      for (var _a = 0, _b = keyframe.values; _a < _b.length; _a++) {
        var time_1 = _b[_a];

        if (time_1 === "from") {
          time_1 = 0;
        } else if (time_1 === "to") {
          time_1 = 1;
        } else {
          time_1 = parseFloat(time_1) / 100;

          if (time_1 < 0) {
            time_1 = 0;
          }

          if (time_1 > 100) {
            time_1 = 100;
          }
        }

        var current = parsedKeyframes[time_1];

        if (current === undefined) {
          current = {};
          current.duration = time_1;
          parsedKeyframes[time_1] = current;
        }

        for (var _c = 0, _d = keyframe.declarations; _c < _d.length; _c++) {
          var declaration = _d[_c];

          if (declaration.property === "animation-timing-function") {
            current.curve = converters_1.animationTimingFunctionConverter(declaration.value);
          }
        }

        current.declarations = declarations;
      }
    }

    var array = new Array();

    for (var parsedKeyframe in parsedKeyframes) {
      array.push(parsedKeyframes[parsedKeyframe]);
    }

    array.sort(function (a, b) {
      return a.duration - b.duration;
    });
    return array;
  };

  return CssAnimationParser;
}();

exports.CssAnimationParser = CssAnimationParser;

function keyframeAnimationsFromCSSProperty(value, animations) {
  if (typeof value === "string") {
    var values = value.split(/[,]+/);

    for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
      var parsedValue = values_1[_i];
      var animationInfo = new keyframe_animation_1.KeyframeAnimationInfo();
      var arr = parsedValue.trim().split(/[ ]+/);

      if (arr.length > 0) {
        animationInfo.name = arr[0];
      }

      if (arr.length > 1) {
        animationInfo.duration = converters_1.timeConverter(arr[1]);
      }

      if (arr.length > 2) {
        animationInfo.curve = converters_1.animationTimingFunctionConverter(arr[2]);
      }

      if (arr.length > 3) {
        animationInfo.delay = converters_1.timeConverter(arr[3]);
      }

      if (arr.length > 4) {
        animationInfo.iterations = parseInt(arr[4]);
      }

      if (arr.length > 5) {
        animationInfo.isReverse = arr[4] === "reverse";
      }

      if (arr.length > 6) {
        animationInfo.isForwards = arr[5] === "forwards";
      }

      if (arr.length > 7) {
        throw new Error("Invalid value for animation: " + value);
      }

      animations.push(animationInfo);
    }
  }
}

function parseKeyframeDeclarations(unparsedKeyframeDeclarations) {
  var declarations = unparsedKeyframeDeclarations.reduce(function (declarations, _a) {
    var unparsedProperty = _a.property,
        unparsedValue = _a.value;

    var property = properties_1.CssAnimationProperty._getByCssName(unparsedProperty);

    if (typeof unparsedProperty === "string" && property && property._valueConverter) {
      declarations[property.name] = property._valueConverter(unparsedValue);
    } else if (typeof unparsedValue === "string" && unparsedProperty === "transform") {
      var transformations = style_properties_1.transformConverter(unparsedValue);
      Object.assign(declarations, transformations);
    }

    return declarations;
  }, {});
  return Object.keys(declarations).map(function (property) {
    return {
      property: property,
      value: declarations[property]
    };
  });
}

exports.parseKeyframeDeclarations = parseKeyframeDeclarations;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/css-selector/css-selector.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var types_1 = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var utils_common_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils-common.js");

var parser = __webpack_require__("../node_modules/tns-core-modules/css/parser.js");

var Match;

(function (Match) {
  Match.Dynamic = true;
  Match.Static = false;
})(Match || (Match = {}));

function getNodeDirectSibling(node) {
  if (!node.parent || !node.parent.getChildIndex || !node.parent.getChildAt) {
    return null;
  }

  var nodeIndex = node.parent.getChildIndex(node);

  if (nodeIndex === 0) {
    return null;
  }

  return node.parent.getChildAt(nodeIndex - 1);
}

function SelectorProperties(specificity, rarity, dynamic) {
  if (dynamic === void 0) {
    dynamic = false;
  }

  return function (cls) {
    cls.prototype.specificity = specificity;
    cls.prototype.rarity = rarity;
    cls.prototype.combinator = undefined;
    cls.prototype.dynamic = dynamic;
    return cls;
  };
}

var SelectorCore = function () {
  function SelectorCore() {}

  SelectorCore.prototype.lookupSort = function (sorter, base) {
    sorter.sortAsUniversal(base || this);
  };

  SelectorCore = __decorate([SelectorProperties(0, 0, Match.Static)], SelectorCore);
  return SelectorCore;
}();

exports.SelectorCore = SelectorCore;

var SimpleSelector = function (_super) {
  __extends(SimpleSelector, _super);

  function SimpleSelector() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  SimpleSelector.prototype.accumulateChanges = function (node, map) {
    if (!this.dynamic) {
      return this.match(node);
    } else if (this.mayMatch(node)) {
      this.trackChanges(node, map);
      return true;
    }

    return false;
  };

  SimpleSelector.prototype.mayMatch = function (node) {
    return this.match(node);
  };

  SimpleSelector.prototype.trackChanges = function (node, map) {};

  return SimpleSelector;
}(SelectorCore);

exports.SimpleSelector = SimpleSelector;

function wrap(text) {
  return text ? " " + text + " " : "";
}

var InvalidSelector = function (_super) {
  __extends(InvalidSelector, _super);

  function InvalidSelector(e) {
    var _this = _super.call(this) || this;

    _this.e = e;
    return _this;
  }

  InvalidSelector.prototype.toString = function () {
    return "<error: " + this.e + ">";
  };

  InvalidSelector.prototype.match = function (node) {
    return false;
  };

  InvalidSelector.prototype.lookupSort = function (sorter, base) {};

  InvalidSelector = __decorate([SelectorProperties(0, 4, Match.Static)], InvalidSelector);
  return InvalidSelector;
}(SimpleSelector);

exports.InvalidSelector = InvalidSelector;

var UniversalSelector = function (_super) {
  __extends(UniversalSelector, _super);

  function UniversalSelector() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UniversalSelector.prototype.toString = function () {
    return "*" + wrap(this.combinator);
  };

  UniversalSelector.prototype.match = function (node) {
    return true;
  };

  UniversalSelector = __decorate([SelectorProperties(0, 0, Match.Static)], UniversalSelector);
  return UniversalSelector;
}(SimpleSelector);

exports.UniversalSelector = UniversalSelector;

var IdSelector = function (_super) {
  __extends(IdSelector, _super);

  function IdSelector(id) {
    var _this = _super.call(this) || this;

    _this.id = id;
    return _this;
  }

  IdSelector.prototype.toString = function () {
    return "#" + this.id + wrap(this.combinator);
  };

  IdSelector.prototype.match = function (node) {
    return node.id === this.id;
  };

  IdSelector.prototype.lookupSort = function (sorter, base) {
    sorter.sortById(this.id, base || this);
  };

  IdSelector = __decorate([SelectorProperties(65536, 3, Match.Static)], IdSelector);
  return IdSelector;
}(SimpleSelector);

exports.IdSelector = IdSelector;

var TypeSelector = function (_super) {
  __extends(TypeSelector, _super);

  function TypeSelector(cssType) {
    var _this = _super.call(this) || this;

    _this.cssType = cssType;
    return _this;
  }

  TypeSelector.prototype.toString = function () {
    return "" + this.cssType + wrap(this.combinator);
  };

  TypeSelector.prototype.match = function (node) {
    return node.cssType === this.cssType;
  };

  TypeSelector.prototype.lookupSort = function (sorter, base) {
    sorter.sortByType(this.cssType, base || this);
  };

  TypeSelector = __decorate([SelectorProperties(1, 1, Match.Static)], TypeSelector);
  return TypeSelector;
}(SimpleSelector);

exports.TypeSelector = TypeSelector;

var ClassSelector = function (_super) {
  __extends(ClassSelector, _super);

  function ClassSelector(cssClass) {
    var _this = _super.call(this) || this;

    _this.cssClass = cssClass;
    return _this;
  }

  ClassSelector.prototype.toString = function () {
    return "." + this.cssClass + wrap(this.combinator);
  };

  ClassSelector.prototype.match = function (node) {
    return node.cssClasses && node.cssClasses.has(this.cssClass);
  };

  ClassSelector.prototype.lookupSort = function (sorter, base) {
    sorter.sortByClass(this.cssClass, base || this);
  };

  ClassSelector = __decorate([SelectorProperties(256, 2, Match.Static)], ClassSelector);
  return ClassSelector;
}(SimpleSelector);

exports.ClassSelector = ClassSelector;

var AttributeSelector = function (_super) {
  __extends(AttributeSelector, _super);

  function AttributeSelector(attribute, test, value) {
    var _this = _super.call(this) || this;

    _this.attribute = attribute;
    _this.test = test;
    _this.value = value;

    if (!test) {
      _this.match = function (node) {
        return !types_1.isNullOrUndefined(node[attribute]);
      };

      return _this;
    }

    if (!value) {
      _this.match = function (node) {
        return false;
      };
    }

    var escapedValue = utils_common_1.escapeRegexSymbols(value);
    var regexp = null;

    switch (test) {
      case "^=":
        regexp = new RegExp("^" + escapedValue);
        break;

      case "$=":
        regexp = new RegExp(escapedValue + "$");
        break;

      case "*=":
        regexp = new RegExp(escapedValue);
        break;

      case "=":
        regexp = new RegExp("^" + escapedValue + "$");
        break;

      case "~=":
        if (/\s/.test(value)) {
          _this.match = function (node) {
            return false;
          };

          return _this;
        }

        regexp = new RegExp("(^|\\s)" + escapedValue + "(\\s|$)");
        break;

      case "|=":
        regexp = new RegExp("^" + escapedValue + "(-|$)");
        break;
    }

    if (regexp) {
      _this.match = function (node) {
        return regexp.test(node[attribute] + "");
      };

      return _this;
    } else {
      _this.match = function (node) {
        return false;
      };

      return _this;
    }
  }

  AttributeSelector.prototype.toString = function () {
    return "[" + this.attribute + wrap(this.test) + (this.test && this.value || "") + "]" + wrap(this.combinator);
  };

  AttributeSelector.prototype.match = function (node) {
    return false;
  };

  AttributeSelector.prototype.mayMatch = function (node) {
    return true;
  };

  AttributeSelector.prototype.trackChanges = function (node, map) {
    map.addAttribute(node, this.attribute);
  };

  AttributeSelector = __decorate([SelectorProperties(256, 0, Match.Dynamic)], AttributeSelector);
  return AttributeSelector;
}(SimpleSelector);

exports.AttributeSelector = AttributeSelector;

var PseudoClassSelector = function (_super) {
  __extends(PseudoClassSelector, _super);

  function PseudoClassSelector(cssPseudoClass) {
    var _this = _super.call(this) || this;

    _this.cssPseudoClass = cssPseudoClass;
    return _this;
  }

  PseudoClassSelector.prototype.toString = function () {
    return ":" + this.cssPseudoClass + wrap(this.combinator);
  };

  PseudoClassSelector.prototype.match = function (node) {
    return node.cssPseudoClasses && node.cssPseudoClasses.has(this.cssPseudoClass);
  };

  PseudoClassSelector.prototype.mayMatch = function (node) {
    return true;
  };

  PseudoClassSelector.prototype.trackChanges = function (node, map) {
    map.addPseudoClass(node, this.cssPseudoClass);
  };

  PseudoClassSelector = __decorate([SelectorProperties(256, 0, Match.Dynamic)], PseudoClassSelector);
  return PseudoClassSelector;
}(SimpleSelector);

exports.PseudoClassSelector = PseudoClassSelector;

var SimpleSelectorSequence = function (_super) {
  __extends(SimpleSelectorSequence, _super);

  function SimpleSelectorSequence(selectors) {
    var _this = _super.call(this) || this;

    _this.selectors = selectors;
    _this.specificity = selectors.reduce(function (sum, sel) {
      return sel.specificity + sum;
    }, 0);
    _this.head = _this.selectors.reduce(function (prev, curr) {
      return !prev || curr.rarity > prev.rarity ? curr : prev;
    }, null);
    _this.dynamic = selectors.some(function (sel) {
      return sel.dynamic;
    });
    return _this;
  }

  SimpleSelectorSequence.prototype.toString = function () {
    return "" + this.selectors.join("") + wrap(this.combinator);
  };

  SimpleSelectorSequence.prototype.match = function (node) {
    return this.selectors.every(function (sel) {
      return sel.match(node);
    });
  };

  SimpleSelectorSequence.prototype.mayMatch = function (node) {
    return this.selectors.every(function (sel) {
      return sel.mayMatch(node);
    });
  };

  SimpleSelectorSequence.prototype.trackChanges = function (node, map) {
    this.selectors.forEach(function (sel) {
      return sel.trackChanges(node, map);
    });
  };

  SimpleSelectorSequence.prototype.lookupSort = function (sorter, base) {
    this.head.lookupSort(sorter, base || this);
  };

  return SimpleSelectorSequence;
}(SimpleSelector);

exports.SimpleSelectorSequence = SimpleSelectorSequence;

var Selector = function (_super) {
  __extends(Selector, _super);

  function Selector(selectors) {
    var _this = _super.call(this) || this;

    _this.selectors = selectors;
    var supportedCombinator = [undefined, " ", ">", "+"];
    var siblingGroup;
    var lastGroup;
    var groups = [];
    selectors.reverse().forEach(function (sel) {
      if (supportedCombinator.indexOf(sel.combinator) === -1) {
        throw new Error("Unsupported combinator \"" + sel.combinator + "\".");
      }

      if (sel.combinator === undefined || sel.combinator === " ") {
        groups.push(lastGroup = [siblingGroup = []]);
      }

      if (sel.combinator === ">") {
        lastGroup.push(siblingGroup = []);
      }

      siblingGroup.push(sel);
    });
    _this.groups = groups.map(function (g) {
      return new Selector.ChildGroup(g.map(function (sg) {
        return new Selector.SiblingGroup(sg);
      }));
    });
    _this.last = selectors[0];
    _this.specificity = selectors.reduce(function (sum, sel) {
      return sel.specificity + sum;
    }, 0);
    _this.dynamic = selectors.some(function (sel) {
      return sel.dynamic;
    });
    return _this;
  }

  Selector.prototype.toString = function () {
    return this.selectors.join("");
  };

  Selector.prototype.match = function (node) {
    return this.groups.every(function (group, i) {
      if (i === 0) {
        node = group.match(node);
        return !!node;
      } else {
        var ancestor = node;

        while (ancestor = ancestor.parent) {
          if (node = group.match(ancestor)) {
            return true;
          }
        }

        return false;
      }
    });
  };

  Selector.prototype.lookupSort = function (sorter, base) {
    this.last.lookupSort(sorter, this);
  };

  Selector.prototype.accumulateChanges = function (node, map) {
    if (!this.dynamic) {
      return this.match(node);
    }

    var bounds = [];
    var mayMatch = this.groups.every(function (group, i) {
      if (i === 0) {
        var nextNode = group.mayMatch(node);
        bounds.push({
          left: node,
          right: node
        });
        node = nextNode;
        return !!node;
      } else {
        var ancestor = node;

        while (ancestor = ancestor.parent) {
          var nextNode = group.mayMatch(ancestor);

          if (nextNode) {
            bounds.push({
              left: ancestor,
              right: null
            });
            node = nextNode;
            return true;
          }
        }

        return false;
      }
    });

    if (!mayMatch) {
      return false;
    }

    if (!map) {
      return mayMatch;
    }

    for (var i = 0; i < this.groups.length; i++) {
      var group_1 = this.groups[i];

      if (!group_1.dynamic) {
        continue;
      }

      var bound = bounds[i];
      var node_1 = bound.left;

      do {
        if (group_1.mayMatch(node_1)) {
          group_1.trackChanges(node_1, map);
        }
      } while (node_1 !== bound.right && (node_1 = node_1.parent));
    }

    return mayMatch;
  };

  return Selector;
}(SelectorCore);

exports.Selector = Selector;

(function (Selector) {
  var ChildGroup = function () {
    function ChildGroup(selectors) {
      this.selectors = selectors;
      this.dynamic = selectors.some(function (sel) {
        return sel.dynamic;
      });
    }

    ChildGroup.prototype.match = function (node) {
      return this.selectors.every(function (sel, i) {
        return (i === 0 ? node : node = node.parent) && !!sel.match(node);
      }) ? node : null;
    };

    ChildGroup.prototype.mayMatch = function (node) {
      return this.selectors.every(function (sel, i) {
        return (i === 0 ? node : node = node.parent) && !!sel.mayMatch(node);
      }) ? node : null;
    };

    ChildGroup.prototype.trackChanges = function (node, map) {
      this.selectors.forEach(function (sel, i) {
        return (i === 0 ? node : node = node.parent) && sel.trackChanges(node, map);
      });
    };

    return ChildGroup;
  }();

  Selector.ChildGroup = ChildGroup;

  var SiblingGroup = function () {
    function SiblingGroup(selectors) {
      this.selectors = selectors;
      this.dynamic = selectors.some(function (sel) {
        return sel.dynamic;
      });
    }

    SiblingGroup.prototype.match = function (node) {
      return this.selectors.every(function (sel, i) {
        return (i === 0 ? node : node = getNodeDirectSibling(node)) && sel.match(node);
      }) ? node : null;
    };

    SiblingGroup.prototype.mayMatch = function (node) {
      return this.selectors.every(function (sel, i) {
        return (i === 0 ? node : node = getNodeDirectSibling(node)) && sel.mayMatch(node);
      }) ? node : null;
    };

    SiblingGroup.prototype.trackChanges = function (node, map) {
      this.selectors.forEach(function (sel, i) {
        return (i === 0 ? node : node = getNodeDirectSibling(node)) && sel.trackChanges(node, map);
      });
    };

    return SiblingGroup;
  }();

  Selector.SiblingGroup = SiblingGroup;
})(Selector = exports.Selector || (exports.Selector = {}));

exports.Selector = Selector;

var RuleSet = function () {
  function RuleSet(selectors, declarations) {
    var _this = this;

    this.selectors = selectors;
    this.declarations = declarations;
    this.selectors.forEach(function (sel) {
      return sel.ruleset = _this;
    });
  }

  RuleSet.prototype.toString = function () {
    return this.selectors.join(", ") + " {" + this.declarations.map(function (d, i) {
      return "" + (i === 0 ? " " : "") + d.property + ": " + d.value;
    }).join("; ") + " }";
  };

  RuleSet.prototype.lookupSort = function (sorter) {
    this.selectors.forEach(function (sel) {
      return sel.lookupSort(sorter);
    });
  };

  return RuleSet;
}();

exports.RuleSet = RuleSet;

function fromAstNodes(astRules) {
  return astRules.filter(isRule).map(function (rule) {
    var declarations = rule.declarations.filter(isDeclaration).map(createDeclaration);
    var selectors = rule.selectors.map(createSelector);
    var ruleset = new RuleSet(selectors, declarations);
    return ruleset;
  });
}

exports.fromAstNodes = fromAstNodes;

function createDeclaration(decl) {
  return {
    property: decl.property.toLowerCase(),
    value: decl.value
  };
}

function createSimpleSelectorFromAst(ast) {
  switch (ast.type) {
    case "*":
      return new UniversalSelector();

    case "#":
      return new IdSelector(ast.identifier);

    case "":
      return new TypeSelector(ast.identifier.replace(/-/, "").toLowerCase());

    case ".":
      return new ClassSelector(ast.identifier);

    case ":":
      return new PseudoClassSelector(ast.identifier);

    case "[]":
      return ast.test ? new AttributeSelector(ast.property, ast.test, ast.value) : new AttributeSelector(ast.property);
  }
}

function createSimpleSelectorSequenceFromAst(ast) {
  if (ast.length === 0) {
    return new InvalidSelector(new Error("Empty simple selector sequence."));
  } else if (ast.length === 1) {
    return createSimpleSelectorFromAst(ast[0]);
  } else {
    return new SimpleSelectorSequence(ast.map(createSimpleSelectorFromAst));
  }
}

function createSelectorFromAst(ast) {
  if (ast.length === 0) {
    return new InvalidSelector(new Error("Empty selector."));
  } else if (ast.length === 1) {
    return createSimpleSelectorSequenceFromAst(ast[0][0]);
  } else {
    var simpleSelectorSequences = [];

    for (var i = 0; i < ast.length; i++) {
      var simpleSelectorSequence = createSimpleSelectorSequenceFromAst(ast[i][0]);
      var combinator = ast[i][1];

      if (combinator) {
        simpleSelectorSequence.combinator = combinator;
      }

      simpleSelectorSequences.push(simpleSelectorSequence);
    }

    return new Selector(simpleSelectorSequences);
  }
}

function createSelector(sel) {
  try {
    var parsedSelector = parser.parseSelector(sel);

    if (!parsedSelector) {
      return new InvalidSelector(new Error("Empty selector"));
    }

    return createSelectorFromAst(parsedSelector.value);
  } catch (e) {
    return new InvalidSelector(e);
  }
}

exports.createSelector = createSelector;

function isRule(node) {
  return node.type === "rule";
}

function isDeclaration(node) {
  return node.type === "declaration";
}

var SelectorsMap = function () {
  function SelectorsMap(rulesets) {
    var _this = this;

    this.id = {};
    this.class = {};
    this.type = {};
    this.universal = [];
    this.position = 0;
    rulesets.forEach(function (rule) {
      return rule.lookupSort(_this);
    });
  }

  SelectorsMap.prototype.query = function (node) {
    var _this = this;

    var selectorClasses = [this.universal, this.id[node.id], this.type[node.cssType]];

    if (node.cssClasses) {
      node.cssClasses.forEach(function (c) {
        return selectorClasses.push(_this.class[c]);
      });
    }

    var selectors = selectorClasses.filter(function (arr) {
      return !!arr;
    }).reduce(function (cur, next) {
      return cur.concat(next);
    }, []);
    var selectorsMatch = new SelectorsMatch();
    selectorsMatch.selectors = selectors.filter(function (sel) {
      return sel.sel.accumulateChanges(node, selectorsMatch);
    }).sort(function (a, b) {
      return a.sel.specificity - b.sel.specificity || a.pos - b.pos;
    }).map(function (docSel) {
      return docSel.sel;
    });
    return selectorsMatch;
  };

  SelectorsMap.prototype.sortById = function (id, sel) {
    this.addToMap(this.id, id, sel);
  };

  SelectorsMap.prototype.sortByClass = function (cssClass, sel) {
    this.addToMap(this.class, cssClass, sel);
  };

  SelectorsMap.prototype.sortByType = function (cssType, sel) {
    this.addToMap(this.type, cssType, sel);
  };

  SelectorsMap.prototype.sortAsUniversal = function (sel) {
    this.universal.push(this.makeDocSelector(sel));
  };

  SelectorsMap.prototype.addToMap = function (map, head, sel) {
    this.position++;
    var list = map[head];

    if (list) {
      list.push(this.makeDocSelector(sel));
    } else {
      map[head] = [this.makeDocSelector(sel)];
    }
  };

  SelectorsMap.prototype.makeDocSelector = function (sel) {
    return {
      sel: sel,
      pos: this.position++
    };
  };

  return SelectorsMap;
}();

exports.SelectorsMap = SelectorsMap;

var SelectorsMatch = function () {
  function SelectorsMatch() {
    this.changeMap = new Map();
  }

  SelectorsMatch.prototype.addAttribute = function (node, attribute) {
    var deps = this.properties(node);

    if (!deps.attributes) {
      deps.attributes = new Set();
    }

    deps.attributes.add(attribute);
  };

  SelectorsMatch.prototype.addPseudoClass = function (node, pseudoClass) {
    var deps = this.properties(node);

    if (!deps.pseudoClasses) {
      deps.pseudoClasses = new Set();
    }

    deps.pseudoClasses.add(pseudoClass);
  };

  SelectorsMatch.prototype.properties = function (node) {
    var set = this.changeMap.get(node);

    if (!set) {
      this.changeMap.set(node, set = {});
    }

    return set;
  };

  return SelectorsMatch;
}();

exports.SelectorsMatch = SelectorsMatch;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/font-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var Font = function () {
  function Font(fontFamily, fontSize, fontStyle, fontWeight) {
    this.fontFamily = fontFamily;
    this.fontSize = fontSize;
    this.fontStyle = fontStyle;
    this.fontWeight = fontWeight;
  }

  Object.defineProperty(Font.prototype, "isItalic", {
    get: function get() {
      return this.fontStyle === FontStyle.ITALIC;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Font.prototype, "isBold", {
    get: function get() {
      return this.fontWeight === FontWeight.SEMI_BOLD || this.fontWeight === FontWeight.BOLD || this.fontWeight === "700" || this.fontWeight === FontWeight.EXTRA_BOLD || this.fontWeight === FontWeight.BLACK;
    },
    enumerable: true,
    configurable: true
  });

  Font.equals = function (value1, value2) {
    if (!value1 && !value2) {
      return true;
    }

    if (!value1 || !value2) {
      return false;
    }

    return value1.fontFamily === value2.fontFamily && value1.fontSize === value2.fontSize && value1.fontStyle === value2.fontStyle && value1.fontWeight === value2.fontWeight;
  };

  Font.default = undefined;
  return Font;
}();

exports.Font = Font;
var FontStyle;

(function (FontStyle) {
  FontStyle.NORMAL = "normal";
  FontStyle.ITALIC = "italic";
  FontStyle.isValid = properties_1.makeValidator(FontStyle.NORMAL, FontStyle.ITALIC);
  FontStyle.parse = properties_1.makeParser(FontStyle.isValid);
})(FontStyle = exports.FontStyle || (exports.FontStyle = {}));

var FontWeight;

(function (FontWeight) {
  FontWeight.THIN = "100";
  FontWeight.EXTRA_LIGHT = "200";
  FontWeight.LIGHT = "300";
  FontWeight.NORMAL = "normal";
  FontWeight.MEDIUM = "500";
  FontWeight.SEMI_BOLD = "600";
  FontWeight.BOLD = "bold";
  FontWeight.EXTRA_BOLD = "800";
  FontWeight.BLACK = "900";
  FontWeight.isValid = properties_1.makeValidator(FontWeight.THIN, FontWeight.EXTRA_LIGHT, FontWeight.LIGHT, FontWeight.NORMAL, "400", FontWeight.MEDIUM, FontWeight.SEMI_BOLD, FontWeight.BOLD, "700", FontWeight.EXTRA_BOLD, FontWeight.BLACK);
  FontWeight.parse = properties_1.makeParser(FontWeight.isValid);
})(FontWeight = exports.FontWeight || (exports.FontWeight = {}));

function parseFontFamily(value) {
  var result = new Array();

  if (!value) {
    return result;
  }

  var split = value.split(",");

  for (var i = 0; i < split.length; i++) {
    var str = split[i].trim().replace(/['"]+/g, "");

    if (str) {
      result.push(str);
    }
  }

  return result;
}

exports.parseFontFamily = parseFontFamily;
var genericFontFamilies;

(function (genericFontFamilies) {
  genericFontFamilies.serif = "serif";
  genericFontFamilies.sansSerif = "sans-serif";
  genericFontFamilies.monospace = "monospace";
  genericFontFamilies.system = "system";
})(genericFontFamilies = exports.genericFontFamilies || (exports.genericFontFamilies = {}));

var styles = new Set();
[FontStyle.NORMAL, FontStyle.ITALIC].forEach(function (val, i, a) {
  return styles.add(val);
});
var weights = new Set();
[FontWeight.THIN, FontWeight.EXTRA_LIGHT, FontWeight.LIGHT, FontWeight.NORMAL, "400", FontWeight.MEDIUM, FontWeight.SEMI_BOLD, FontWeight.BOLD, "700", FontWeight.EXTRA_BOLD, FontWeight.BLACK].forEach(function (val, i, a) {
  return weights.add(val);
});

function parseFont(fontValue) {
  var result = {
    fontStyle: "normal",
    fontVariant: "normal",
    fontWeight: "normal"
  };
  var parts = fontValue.split(/\s+/);
  var part;

  while (part = parts.shift()) {
    if (part === "normal") {} else if (part === "small-caps") {
      result.fontVariant = part;
    } else if (styles.has(part)) {
      result.fontStyle = part;
    } else if (weights.has(part)) {
      result.fontWeight = part;
    } else if (!result.fontSize) {
      var sizes = part.split("/");
      result.fontSize = sizes[0];
      result.lineHeight = sizes.length > 1 ? sizes[1] : undefined;
    } else {
      result.fontFamily = part;

      if (parts.length) {
        result.fontFamily += " " + parts.join(" ");
      }

      break;
    }
  }

  return result;
}

exports.parseFont = parseFont;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/font.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var font_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/font-common.js");

var trace_1 = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

var application = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

var fs = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/styling/font-common.js"));

var FONTS_BASE_PATH = "/fonts/";
var typefaceCache = new Map();
var appAssets;

var Font = function (_super) {
  __extends(Font, _super);

  function Font(family, size, style, weight) {
    return _super.call(this, family, size, style, weight) || this;
  }

  Font.prototype.withFontFamily = function (family) {
    return new Font(family, this.fontSize, this.fontStyle, this.fontWeight);
  };

  Font.prototype.withFontStyle = function (style) {
    return new Font(this.fontFamily, this.fontSize, style, this.fontWeight);
  };

  Font.prototype.withFontWeight = function (weight) {
    return new Font(this.fontFamily, this.fontSize, this.fontStyle, weight);
  };

  Font.prototype.withFontSize = function (size) {
    return new Font(this.fontFamily, size, this.fontStyle, this.fontWeight);
  };

  Font.prototype.getAndroidTypeface = function () {
    if (!this._typeface) {
      this._typeface = createTypeface(this);
    }

    return this._typeface;
  };

  Font.prototype.getUIFont = function (defaultFont) {
    return undefined;
  };

  Font.default = new Font(undefined, undefined, "normal", "normal");
  return Font;
}(font_common_1.Font);

exports.Font = Font;

function loadFontFromFile(fontFamily) {
  appAssets = appAssets || application.android.context.getAssets();

  if (!appAssets) {
    return null;
  }

  var result = typefaceCache.get(fontFamily);

  if (result === undefined) {
    result = null;
    var fontAssetPath = void 0;
    var basePath = fs.path.join(fs.knownFolders.currentApp().path, "fonts", fontFamily);

    if (fs.File.exists(basePath + ".ttf")) {
      fontAssetPath = FONTS_BASE_PATH + fontFamily + ".ttf";
    } else if (fs.File.exists(basePath + ".otf")) {
      fontAssetPath = FONTS_BASE_PATH + fontFamily + ".otf";
    } else {
      if (trace_1.isEnabled()) {
        trace_1.write("Could not find font file for " + fontFamily, trace_1.categories.Error, trace_1.messageType.error);
      }
    }

    if (fontAssetPath) {
      try {
        fontAssetPath = fs.path.join(fs.knownFolders.currentApp().path, fontAssetPath);
        result = android.graphics.Typeface.createFromFile(fontAssetPath);
      } catch (e) {
        if (trace_1.isEnabled()) {
          trace_1.write("Error loading font asset: " + fontAssetPath, trace_1.categories.Error, trace_1.messageType.error);
        }
      }
    }

    typefaceCache.set(fontFamily, result);
  }

  return result;
}

function createTypeface(font) {
  var fontStyle = 0;

  if (font.isBold) {
    fontStyle |= android.graphics.Typeface.BOLD;
  }

  if (font.isItalic) {
    fontStyle |= android.graphics.Typeface.ITALIC;
  }

  var fonts = font_common_1.parseFontFamily(font.fontFamily);
  var result = null;

  for (var i = 0; i < fonts.length; i++) {
    switch (fonts[i].toLowerCase()) {
      case font_common_1.genericFontFamilies.serif:
        result = android.graphics.Typeface.create("serif" + getFontWeightSuffix(font.fontWeight), fontStyle);
        break;

      case font_common_1.genericFontFamilies.sansSerif:
      case font_common_1.genericFontFamilies.system:
        result = android.graphics.Typeface.create("sans-serif" + getFontWeightSuffix(font.fontWeight), fontStyle);
        break;

      case font_common_1.genericFontFamilies.monospace:
        result = android.graphics.Typeface.create("monospace" + getFontWeightSuffix(font.fontWeight), fontStyle);
        break;

      default:
        result = loadFontFromFile(fonts[i]);

        if (result && fontStyle) {
          result = android.graphics.Typeface.create(result, fontStyle);
        }

        break;
    }

    if (result) {
      break;
    }
  }

  if (!result) {
    result = android.graphics.Typeface.create("sans-serif" + getFontWeightSuffix(font.fontWeight), fontStyle);
  }

  return result;
}

function getFontWeightSuffix(fontWeight) {
  switch (fontWeight) {
    case font_common_1.FontWeight.THIN:
      return android.os.Build.VERSION.SDK_INT >= 16 ? "-thin" : "";

    case font_common_1.FontWeight.EXTRA_LIGHT:
    case font_common_1.FontWeight.LIGHT:
      return android.os.Build.VERSION.SDK_INT >= 16 ? "-light" : "";

    case font_common_1.FontWeight.NORMAL:
    case "400":
    case undefined:
    case null:
      return "";

    case font_common_1.FontWeight.MEDIUM:
    case font_common_1.FontWeight.SEMI_BOLD:
      return android.os.Build.VERSION.SDK_INT >= 21 ? "-medium" : "";

    case font_common_1.FontWeight.BOLD:
    case "700":
    case font_common_1.FontWeight.EXTRA_BOLD:
      return "";

    case font_common_1.FontWeight.BLACK:
      return android.os.Build.VERSION.SDK_INT >= 21 ? "-black" : "";

    default:
      throw new Error("Invalid font weight: \"" + fontWeight + "\"");
  }
}

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/linear-gradient.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var color_1 = __webpack_require__("../node_modules/tns-core-modules/color/color.js");

var LinearGradient = function () {
  function LinearGradient() {}

  LinearGradient.parse = function (value) {
    var result = new LinearGradient();
    result.angle = value.angle;
    result.colorStops = value.colors.map(function (color) {
      var offset = color.offset || null;
      var offsetUnit;

      if (offset && offset.unit === "%") {
        offsetUnit = {
          unit: "%",
          value: offset.value
        };
      }

      return {
        color: new color_1.Color(color.argb),
        offset: offsetUnit
      };
    });
    return result;
  };

  LinearGradient.equals = function (first, second) {
    if (!first && !second) {
      return true;
    } else if (!first || !second) {
      return false;
    }

    if (first.angle !== second.angle) {
      return false;
    }

    if (first.colorStops.length !== second.colorStops.length) {
      return false;
    }

    for (var i = 0; i < first.colorStops.length; i++) {
      var firstStop = first.colorStops[i];
      var secondStop = second.colorStops[i];

      if (firstStop.offset !== secondStop.offset) {
        return false;
      }

      if (!color_1.Color.equals(firstStop.color, secondStop.color)) {
        return false;
      }
    }

    return true;
  };

  return LinearGradient;
}();

exports.LinearGradient = LinearGradient;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/style-properties.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var color_1 = __webpack_require__("../node_modules/tns-core-modules/color/color.js");

var font_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/font.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var background_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/background.js");

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var number_utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/number-utils.js");

var matrix_1 = __webpack_require__("../node_modules/tns-core-modules/matrix/matrix.js");

var parser = __webpack_require__("../node_modules/tns-core-modules/css/parser.js");

var linear_gradient_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/linear-gradient.js");

function equalsCommon(a, b) {
  if (a == "auto") {
    return b == "auto";
  }

  if (typeof a === "number") {
    if (b == "auto") {
      return false;
    }

    if (typeof b === "number") {
      return a == b;
    }

    return b.unit == "dip" && a == b.value;
  }

  if (b == "auto") {
    return false;
  }

  if (typeof b === "number") {
    return a.unit == "dip" && a.value == b;
  }

  return a.value == b.value && a.unit == b.unit;
}

function convertToStringCommon(length) {
  if (length == "auto") {
    return "auto";
  }

  if (typeof length === "number") {
    return length.toString();
  }

  var val = length.value;

  if (length.unit === "%") {
    val *= 100;
  }

  return val + length.unit;
}

function toDevicePixelsCommon(length, auto, parentAvailableWidth) {
  if (auto === void 0) {
    auto = Number.NaN;
  }

  if (parentAvailableWidth === void 0) {
    parentAvailableWidth = Number.NaN;
  }

  if (length == "auto") {
    return auto;
  }

  if (typeof length === "number") {
    return utils_1.layout.round(utils_1.layout.toDevicePixels(length));
  }

  switch (length.unit) {
    case "px":
      return utils_1.layout.round(length.value);

    case "%":
      return utils_1.layout.round(parentAvailableWidth * length.value);

    case "dip":
    default:
      return utils_1.layout.round(utils_1.layout.toDevicePixels(length.value));
  }
}

var PercentLength;

(function (PercentLength) {
  function parse(fromValue) {
    if (fromValue == "auto") {
      return "auto";
    }

    if (typeof fromValue === "string") {
      var stringValue = fromValue.trim();
      var percentIndex = stringValue.indexOf("%");

      if (percentIndex !== -1) {
        var value = void 0;

        if (percentIndex !== stringValue.length - 1 || percentIndex === 0) {
          value = Number.NaN;
        } else {
          value = parseFloat(stringValue.substring(0, stringValue.length - 1).trim()) / 100;
        }

        if (isNaN(value) || !isFinite(value)) {
          throw new Error("Invalid value: " + fromValue);
        }

        return {
          unit: "%",
          value: value
        };
      } else if (stringValue.indexOf("px") !== -1) {
        stringValue = stringValue.replace("px", "").trim();
        var value = parseFloat(stringValue);

        if (isNaN(value) || !isFinite(value)) {
          throw new Error("Invalid value: " + fromValue);
        }

        return {
          unit: "px",
          value: value
        };
      } else {
        var value = parseFloat(stringValue);

        if (isNaN(value) || !isFinite(value)) {
          throw new Error("Invalid value: " + fromValue);
        }

        return value;
      }
    } else {
      return fromValue;
    }
  }

  PercentLength.parse = parse;
  PercentLength.equals = equalsCommon;
  PercentLength.toDevicePixels = toDevicePixelsCommon;
  PercentLength.convertToString = convertToStringCommon;
})(PercentLength = exports.PercentLength || (exports.PercentLength = {}));

var Length;

(function (Length) {
  function parse(fromValue) {
    if (fromValue == "auto") {
      return "auto";
    }

    if (typeof fromValue === "string") {
      var stringValue = fromValue.trim();

      if (stringValue.indexOf("px") !== -1) {
        stringValue = stringValue.replace("px", "").trim();
        var value = parseFloat(stringValue);

        if (isNaN(value) || !isFinite(value)) {
          throw new Error("Invalid value: " + stringValue);
        }

        return {
          unit: "px",
          value: value
        };
      } else {
        var value = parseFloat(stringValue);

        if (isNaN(value) || !isFinite(value)) {
          throw new Error("Invalid value: " + stringValue);
        }

        return value;
      }
    } else {
      return fromValue;
    }
  }

  Length.parse = parse;
  Length.equals = equalsCommon;
  Length.toDevicePixels = toDevicePixelsCommon;
  Length.convertToString = convertToStringCommon;
})(Length = exports.Length || (exports.Length = {}));

exports.zeroLength = {
  value: 0,
  unit: "px"
};
exports.minWidthProperty = new properties_1.CssProperty({
  name: "minWidth",
  cssName: "min-width",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    target.view.effectiveMinWidth = Length.toDevicePixels(newValue, 0);
  },
  valueConverter: Length.parse
});
exports.minWidthProperty.register(properties_1.Style);
exports.minHeightProperty = new properties_1.CssProperty({
  name: "minHeight",
  cssName: "min-height",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    target.view.effectiveMinHeight = Length.toDevicePixels(newValue, 0);
  },
  valueConverter: Length.parse
});
exports.minHeightProperty.register(properties_1.Style);
exports.widthProperty = new properties_1.CssProperty({
  name: "width",
  cssName: "width",
  defaultValue: "auto",
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueConverter: PercentLength.parse
});
exports.widthProperty.register(properties_1.Style);
exports.heightProperty = new properties_1.CssProperty({
  name: "height",
  cssName: "height",
  defaultValue: "auto",
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueConverter: PercentLength.parse
});
exports.heightProperty.register(properties_1.Style);
var marginProperty = new properties_1.ShorthandProperty({
  name: "margin",
  cssName: "margin",
  getter: function getter() {
    if (PercentLength.equals(this.marginTop, this.marginRight) && PercentLength.equals(this.marginTop, this.marginBottom) && PercentLength.equals(this.marginTop, this.marginLeft)) {
      return this.marginTop;
    }

    return PercentLength.convertToString(this.marginTop) + " " + PercentLength.convertToString(this.marginRight) + " " + PercentLength.convertToString(this.marginBottom) + " " + PercentLength.convertToString(this.marginLeft);
  },
  converter: convertToMargins
});
marginProperty.register(properties_1.Style);
exports.marginLeftProperty = new properties_1.CssProperty({
  name: "marginLeft",
  cssName: "margin-left",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueConverter: PercentLength.parse
});
exports.marginLeftProperty.register(properties_1.Style);
exports.marginRightProperty = new properties_1.CssProperty({
  name: "marginRight",
  cssName: "margin-right",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueConverter: PercentLength.parse
});
exports.marginRightProperty.register(properties_1.Style);
exports.marginTopProperty = new properties_1.CssProperty({
  name: "marginTop",
  cssName: "margin-top",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueConverter: PercentLength.parse
});
exports.marginTopProperty.register(properties_1.Style);
exports.marginBottomProperty = new properties_1.CssProperty({
  name: "marginBottom",
  cssName: "margin-bottom",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueConverter: PercentLength.parse
});
exports.marginBottomProperty.register(properties_1.Style);
var paddingProperty = new properties_1.ShorthandProperty({
  name: "padding",
  cssName: "padding",
  getter: function getter() {
    if (Length.equals(this.paddingTop, this.paddingRight) && Length.equals(this.paddingTop, this.paddingBottom) && Length.equals(this.paddingTop, this.paddingLeft)) {
      return this.paddingTop;
    }

    return Length.convertToString(this.paddingTop) + " " + Length.convertToString(this.paddingRight) + " " + Length.convertToString(this.paddingBottom) + " " + Length.convertToString(this.paddingLeft);
  },
  converter: convertToPaddings
});
paddingProperty.register(properties_1.Style);
exports.paddingLeftProperty = new properties_1.CssProperty({
  name: "paddingLeft",
  cssName: "padding-left",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    target.view.effectivePaddingLeft = Length.toDevicePixels(newValue, 0);
  },
  valueConverter: Length.parse
});
exports.paddingLeftProperty.register(properties_1.Style);
exports.paddingRightProperty = new properties_1.CssProperty({
  name: "paddingRight",
  cssName: "padding-right",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    target.view.effectivePaddingRight = Length.toDevicePixels(newValue, 0);
  },
  valueConverter: Length.parse
});
exports.paddingRightProperty.register(properties_1.Style);
exports.paddingTopProperty = new properties_1.CssProperty({
  name: "paddingTop",
  cssName: "padding-top",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    target.view.effectivePaddingTop = Length.toDevicePixels(newValue, 0);
  },
  valueConverter: Length.parse
});
exports.paddingTopProperty.register(properties_1.Style);
exports.paddingBottomProperty = new properties_1.CssProperty({
  name: "paddingBottom",
  cssName: "padding-bottom",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    target.view.effectivePaddingBottom = Length.toDevicePixels(newValue, 0);
  },
  valueConverter: Length.parse
});
exports.paddingBottomProperty.register(properties_1.Style);
var HorizontalAlignment;

(function (HorizontalAlignment) {
  HorizontalAlignment.LEFT = "left";
  HorizontalAlignment.CENTER = "center";
  HorizontalAlignment.RIGHT = "right";
  HorizontalAlignment.STRETCH = "stretch";
  HorizontalAlignment.isValid = properties_1.makeValidator(HorizontalAlignment.LEFT, HorizontalAlignment.CENTER, HorizontalAlignment.RIGHT, HorizontalAlignment.STRETCH);
  HorizontalAlignment.parse = properties_1.makeParser(HorizontalAlignment.isValid);
})(HorizontalAlignment = exports.HorizontalAlignment || (exports.HorizontalAlignment = {}));

exports.horizontalAlignmentProperty = new properties_1.CssProperty({
  name: "horizontalAlignment",
  cssName: "horizontal-align",
  defaultValue: HorizontalAlignment.STRETCH,
  affectsLayout: platform_1.isIOS,
  valueConverter: HorizontalAlignment.parse
});
exports.horizontalAlignmentProperty.register(properties_1.Style);
var VerticalAlignment;

(function (VerticalAlignment) {
  VerticalAlignment.TOP = "top";
  VerticalAlignment.MIDDLE = "middle";
  VerticalAlignment.BOTTOM = "bottom";
  VerticalAlignment.STRETCH = "stretch";
  VerticalAlignment.isValid = properties_1.makeValidator(VerticalAlignment.TOP, VerticalAlignment.MIDDLE, VerticalAlignment.BOTTOM, VerticalAlignment.STRETCH);

  VerticalAlignment.parse = function (value) {
    return value.toLowerCase() === "center" ? VerticalAlignment.MIDDLE : parseStrict(value);
  };

  var parseStrict = properties_1.makeParser(VerticalAlignment.isValid);
})(VerticalAlignment = exports.VerticalAlignment || (exports.VerticalAlignment = {}));

exports.verticalAlignmentProperty = new properties_1.CssProperty({
  name: "verticalAlignment",
  cssName: "vertical-align",
  defaultValue: VerticalAlignment.STRETCH,
  affectsLayout: platform_1.isIOS,
  valueConverter: VerticalAlignment.parse
});
exports.verticalAlignmentProperty.register(properties_1.Style);

function parseThickness(value) {
  if (typeof value === "string") {
    var arr = value.split(/[ ,]+/);
    var top_1;
    var right = void 0;
    var bottom = void 0;
    var left = void 0;

    if (arr.length === 1) {
      top_1 = arr[0];
      right = arr[0];
      bottom = arr[0];
      left = arr[0];
    } else if (arr.length === 2) {
      top_1 = arr[0];
      bottom = arr[0];
      right = arr[1];
      left = arr[1];
    } else if (arr.length === 3) {
      top_1 = arr[0];
      right = arr[1];
      left = arr[1];
      bottom = arr[2];
    } else if (arr.length === 4) {
      top_1 = arr[0];
      right = arr[1];
      bottom = arr[2];
      left = arr[3];
    } else {
      throw new Error("Expected 1, 2, 3 or 4 parameters. Actual: " + value);
    }

    return {
      top: top_1,
      right: right,
      bottom: bottom,
      left: left
    };
  } else {
    return value;
  }
}

function convertToMargins(value) {
  if (typeof value === "string" && value !== "auto") {
    var thickness = parseThickness(value);
    return [[exports.marginTopProperty, PercentLength.parse(thickness.top)], [exports.marginRightProperty, PercentLength.parse(thickness.right)], [exports.marginBottomProperty, PercentLength.parse(thickness.bottom)], [exports.marginLeftProperty, PercentLength.parse(thickness.left)]];
  } else {
    return [[exports.marginTopProperty, value], [exports.marginRightProperty, value], [exports.marginBottomProperty, value], [exports.marginLeftProperty, value]];
  }
}

function convertToPaddings(value) {
  if (typeof value === "string" && value !== "auto") {
    var thickness = parseThickness(value);
    return [[exports.paddingTopProperty, Length.parse(thickness.top)], [exports.paddingRightProperty, Length.parse(thickness.right)], [exports.paddingBottomProperty, Length.parse(thickness.bottom)], [exports.paddingLeftProperty, Length.parse(thickness.left)]];
  } else {
    return [[exports.paddingTopProperty, value], [exports.paddingRightProperty, value], [exports.paddingBottomProperty, value], [exports.paddingLeftProperty, value]];
  }
}

exports.rotateProperty = new properties_1.CssAnimationProperty({
  name: "rotate",
  cssName: "rotate",
  defaultValue: 0,
  valueConverter: parseFloat
});
exports.rotateProperty.register(properties_1.Style);
exports.scaleXProperty = new properties_1.CssAnimationProperty({
  name: "scaleX",
  cssName: "scaleX",
  defaultValue: 1,
  valueConverter: parseFloat
});
exports.scaleXProperty.register(properties_1.Style);
exports.scaleYProperty = new properties_1.CssAnimationProperty({
  name: "scaleY",
  cssName: "scaleY",
  defaultValue: 1,
  valueConverter: parseFloat
});
exports.scaleYProperty.register(properties_1.Style);

function parseDIPs(value) {
  if (value.indexOf("px") !== -1) {
    return utils_1.layout.toDeviceIndependentPixels(parseFloat(value.replace("px", "").trim()));
  } else {
    return parseFloat(value.replace("dip", "").trim());
  }
}

exports.translateXProperty = new properties_1.CssAnimationProperty({
  name: "translateX",
  cssName: "translateX",
  defaultValue: 0,
  valueConverter: parseDIPs
});
exports.translateXProperty.register(properties_1.Style);
exports.translateYProperty = new properties_1.CssAnimationProperty({
  name: "translateY",
  cssName: "translateY",
  defaultValue: 0,
  valueConverter: parseDIPs
});
exports.translateYProperty.register(properties_1.Style);
var transformProperty = new properties_1.ShorthandProperty({
  name: "transform",
  cssName: "transform",
  getter: function getter() {
    var scaleX = this.scaleX;
    var scaleY = this.scaleY;
    var translateX = this.translateX;
    var translateY = this.translateY;
    var rotate = this.rotate;
    var result = "";

    if (translateX !== 0 || translateY !== 0) {
      result += "translate(" + translateX + ", " + translateY + ") ";
    }

    if (scaleX !== 1 || scaleY !== 1) {
      result += "scale(" + scaleX + ", " + scaleY + ") ";
    }

    if (rotate !== 0) {
      result += "rotate (" + rotate + ")";
    }

    return result.trim();
  },
  converter: convertToTransform
});
transformProperty.register(properties_1.Style);
var IDENTITY_TRANSFORMATION = {
  translate: {
    x: 0,
    y: 0
  },
  rotate: 0,
  scale: {
    x: 1,
    y: 1
  }
};
var TRANSFORM_SPLITTER = new RegExp(/\s*(.+?)\((.*?)\)/g);
var TRANSFORMATIONS = Object.freeze(["rotate", "translate", "translate3d", "translateX", "translateY", "scale", "scale3d", "scaleX", "scaleY"]);
var STYLE_TRANSFORMATION_MAP = Object.freeze({
  "scale": function scale(value) {
    return {
      property: "scale",
      value: value
    };
  },
  "scale3d": function scale3d(value) {
    return {
      property: "scale",
      value: value
    };
  },
  "scaleX": function scaleX(_a) {
    var x = _a.x;
    return {
      property: "scale",
      value: {
        x: x,
        y: IDENTITY_TRANSFORMATION.scale.y
      }
    };
  },
  "scaleY": function scaleY(_a) {
    var y = _a.y;
    return {
      property: "scale",
      value: {
        y: y,
        x: IDENTITY_TRANSFORMATION.scale.x
      }
    };
  },
  "translate": function translate(value) {
    return {
      property: "translate",
      value: value
    };
  },
  "translate3d": function translate3d(value) {
    return {
      property: "translate",
      value: value
    };
  },
  "translateX": function translateX(_a) {
    var x = _a.x;
    return {
      property: "translate",
      value: {
        x: x,
        y: IDENTITY_TRANSFORMATION.translate.y
      }
    };
  },
  "translateY": function translateY(_a) {
    var y = _a.y;
    return {
      property: "translate",
      value: {
        y: y,
        x: IDENTITY_TRANSFORMATION.translate.x
      }
    };
  },
  "rotate": function rotate(value) {
    return {
      property: "rotate",
      value: value
    };
  }
});

function convertToTransform(value) {
  if (value === properties_1.unsetValue) {
    value = "none";
  }

  var _a = transformConverter(value),
      translate = _a.translate,
      rotate = _a.rotate,
      scale = _a.scale;

  return [[exports.translateXProperty, translate.x], [exports.translateYProperty, translate.y], [exports.scaleXProperty, scale.x], [exports.scaleYProperty, scale.y], [exports.rotateProperty, rotate]];
}

function transformConverter(text) {
  var transformations = parseTransformString(text);

  if (text === "none" || text === "" || !transformations.length) {
    return IDENTITY_TRANSFORMATION;
  }

  var usedTransforms = transformations.map(function (t) {
    return t.property;
  });

  if (!utils_1.hasDuplicates(usedTransforms)) {
    var fullTransformations_1 = __assign({}, IDENTITY_TRANSFORMATION);

    transformations.forEach(function (transform) {
      fullTransformations_1[transform.property] = transform.value;
    });
    return fullTransformations_1;
  }

  var affineMatrix = transformations.map(matrix_1.getTransformMatrix).reduce(matrix_1.multiplyAffine2d);
  var cssMatrix = matrix_1.matrixArrayToCssMatrix(affineMatrix);
  return matrix_1.decompose2DTransformMatrix(cssMatrix);
}

exports.transformConverter = transformConverter;

function parseTransformString(text) {
  var matches = [];
  var match;

  while ((match = TRANSFORM_SPLITTER.exec(text)) !== null) {
    var property = match[1];
    var value = convertTransformValue(property, match[2]);

    if (TRANSFORMATIONS.indexOf(property) !== -1) {
      matches.push(normalizeTransformation({
        property: property,
        value: value
      }));
    }
  }

  return matches;
}

function normalizeTransformation(_a) {
  var property = _a.property,
      value = _a.value;
  return STYLE_TRANSFORMATION_MAP[property](value);
}

function convertTransformValue(property, stringValue) {
  var _a = stringValue.split(",").map(parseFloat),
      x = _a[0],
      _b = _a[1],
      y = _b === void 0 ? x : _b;

  if (property === "rotate") {
    return stringValue.slice(-3) === "rad" ? number_utils_1.radiansToDegrees(x) : x;
  }

  return {
    x: x,
    y: y
  };
}

var backgroundProperty = new properties_1.ShorthandProperty({
  name: "background",
  cssName: "background",
  getter: function getter() {
    return this.backgroundColor + " " + this.backgroundImage + " " + this.backgroundRepeat + " " + this.backgroundPosition;
  },
  converter: convertToBackgrounds
});
backgroundProperty.register(properties_1.Style);
exports.backgroundInternalProperty = new properties_1.CssProperty({
  name: "backgroundInternal",
  cssName: "_backgroundInternal",
  defaultValue: background_1.Background.default
});
exports.backgroundInternalProperty.register(properties_1.Style);
exports.backgroundImageProperty = new properties_1.CssProperty({
  name: "backgroundImage",
  cssName: "background-image",
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var background = target.backgroundInternal.withImage(newValue);
    target.backgroundInternal = background;
  },
  equalityComparer: function equalityComparer(value1, value2) {
    if (value1 instanceof linear_gradient_1.LinearGradient && value2 instanceof linear_gradient_1.LinearGradient) {
      return linear_gradient_1.LinearGradient.equals(value1, value2);
    } else {
      return value1 === value2;
    }
  },
  valueConverter: function valueConverter(value) {
    if (typeof value === "string") {
      var parsed = parser.parseBackground(value);

      if (parsed) {
        var background = parsed.value;
        value = typeof background.image === "object" ? linear_gradient_1.LinearGradient.parse(background.image) : value;
      }
    }

    return value;
  }
});
exports.backgroundImageProperty.register(properties_1.Style);
exports.backgroundColorProperty = new properties_1.CssAnimationProperty({
  name: "backgroundColor",
  cssName: "background-color",
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var background = target.backgroundInternal.withColor(newValue);
    target.backgroundInternal = background;
  },
  equalityComparer: color_1.Color.equals,
  valueConverter: function valueConverter(value) {
    return new color_1.Color(value);
  }
});
exports.backgroundColorProperty.register(properties_1.Style);
var BackgroundRepeat;

(function (BackgroundRepeat) {
  BackgroundRepeat.REPEAT = "repeat";
  BackgroundRepeat.REPEAT_X = "repeat-x";
  BackgroundRepeat.REPEAT_Y = "repeat-y";
  BackgroundRepeat.NO_REPEAT = "no-repeat";
  BackgroundRepeat.isValid = properties_1.makeValidator(BackgroundRepeat.REPEAT, BackgroundRepeat.REPEAT_X, BackgroundRepeat.REPEAT_Y, BackgroundRepeat.NO_REPEAT);
  BackgroundRepeat.parse = properties_1.makeParser(BackgroundRepeat.isValid);
})(BackgroundRepeat = exports.BackgroundRepeat || (exports.BackgroundRepeat = {}));

exports.backgroundRepeatProperty = new properties_1.CssProperty({
  name: "backgroundRepeat",
  cssName: "background-repeat",
  valueConverter: BackgroundRepeat.parse,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var background = target.backgroundInternal.withRepeat(newValue);
    target.backgroundInternal = background;
  }
});
exports.backgroundRepeatProperty.register(properties_1.Style);
exports.backgroundSizeProperty = new properties_1.CssProperty({
  name: "backgroundSize",
  cssName: "background-size",
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var background = target.backgroundInternal.withSize(newValue);
    target.backgroundInternal = background;
  }
});
exports.backgroundSizeProperty.register(properties_1.Style);
exports.backgroundPositionProperty = new properties_1.CssProperty({
  name: "backgroundPosition",
  cssName: "background-position",
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var background = target.backgroundInternal.withPosition(newValue);
    target.backgroundInternal = background;
  }
});
exports.backgroundPositionProperty.register(properties_1.Style);

function convertToBackgrounds(value) {
  if (typeof value === "string") {
    var backgrounds = parser.parseBackground(value).value;
    var backgroundColor = backgrounds.color ? new color_1.Color(backgrounds.color) : properties_1.unsetValue;
    var backgroundImage = void 0;

    if (typeof backgrounds.image === "object" && backgrounds.image) {
      backgroundImage = linear_gradient_1.LinearGradient.parse(backgrounds.image);
    } else {
      backgroundImage = backgrounds.image || properties_1.unsetValue;
    }

    var backgroundRepeat = backgrounds.repeat || properties_1.unsetValue;
    var backgroundPosition = backgrounds.position ? backgrounds.position.text : properties_1.unsetValue;
    return [[exports.backgroundColorProperty, backgroundColor], [exports.backgroundImageProperty, backgroundImage], [exports.backgroundRepeatProperty, backgroundRepeat], [exports.backgroundPositionProperty, backgroundPosition]];
  } else {
    return [[exports.backgroundColorProperty, properties_1.unsetValue], [exports.backgroundImageProperty, properties_1.unsetValue], [exports.backgroundRepeatProperty, properties_1.unsetValue], [exports.backgroundPositionProperty, properties_1.unsetValue]];
  }
}

function parseBorderColor(value) {
  var result = {
    top: undefined,
    right: undefined,
    bottom: undefined,
    left: undefined
  };

  if (value.indexOf("rgb") === 0) {
    result.top = result.right = result.bottom = result.left = new color_1.Color(value);
    return result;
  }

  var arr = value.split(/[ ,]+/);

  if (arr.length === 1) {
    var arr0 = new color_1.Color(arr[0]);
    result.top = arr0;
    result.right = arr0;
    result.bottom = arr0;
    result.left = arr0;
  } else if (arr.length === 2) {
    var arr0 = new color_1.Color(arr[0]);
    var arr1 = new color_1.Color(arr[1]);
    result.top = arr0;
    result.right = arr1;
    result.bottom = arr0;
    result.left = arr1;
  } else if (arr.length === 3) {
    var arr0 = new color_1.Color(arr[0]);
    var arr1 = new color_1.Color(arr[1]);
    var arr2 = new color_1.Color(arr[2]);
    result.top = arr0;
    result.right = arr1;
    result.bottom = arr2;
    result.left = arr1;
  } else if (arr.length === 4) {
    var arr0 = new color_1.Color(arr[0]);
    var arr1 = new color_1.Color(arr[1]);
    var arr2 = new color_1.Color(arr[2]);
    var arr3 = new color_1.Color(arr[3]);
    result.top = arr0;
    result.right = arr1;
    result.bottom = arr2;
    result.left = arr3;
  } else {
    throw new Error("Expected 1, 2, 3 or 4 parameters. Actual: " + value);
  }

  return result;
}

var borderColorProperty = new properties_1.ShorthandProperty({
  name: "borderColor",
  cssName: "border-color",
  getter: function getter() {
    if (color_1.Color.equals(this.borderTopColor, this.borderRightColor) && color_1.Color.equals(this.borderTopColor, this.borderBottomColor) && color_1.Color.equals(this.borderTopColor, this.borderLeftColor)) {
      return this.borderTopColor;
    } else {
      return this.borderTopColor + " " + this.borderRightColor + " " + this.borderBottomColor + " " + this.borderLeftColor;
    }
  },
  converter: function converter(value) {
    if (typeof value === "string") {
      var fourColors = parseBorderColor(value);
      return [[exports.borderTopColorProperty, fourColors.top], [exports.borderRightColorProperty, fourColors.right], [exports.borderBottomColorProperty, fourColors.bottom], [exports.borderLeftColorProperty, fourColors.left]];
    } else {
      return [[exports.borderTopColorProperty, value], [exports.borderRightColorProperty, value], [exports.borderBottomColorProperty, value], [exports.borderLeftColorProperty, value]];
    }
  }
});
borderColorProperty.register(properties_1.Style);
exports.borderTopColorProperty = new properties_1.CssProperty({
  name: "borderTopColor",
  cssName: "border-top-color",
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var background = target.backgroundInternal.withBorderTopColor(newValue);
    target.backgroundInternal = background;
  },
  equalityComparer: color_1.Color.equals,
  valueConverter: function valueConverter(value) {
    return new color_1.Color(value);
  }
});
exports.borderTopColorProperty.register(properties_1.Style);
exports.borderRightColorProperty = new properties_1.CssProperty({
  name: "borderRightColor",
  cssName: "border-right-color",
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var background = target.backgroundInternal.withBorderRightColor(newValue);
    target.backgroundInternal = background;
  },
  equalityComparer: color_1.Color.equals,
  valueConverter: function valueConverter(value) {
    return new color_1.Color(value);
  }
});
exports.borderRightColorProperty.register(properties_1.Style);
exports.borderBottomColorProperty = new properties_1.CssProperty({
  name: "borderBottomColor",
  cssName: "border-bottom-color",
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var background = target.backgroundInternal.withBorderBottomColor(newValue);
    target.backgroundInternal = background;
  },
  equalityComparer: color_1.Color.equals,
  valueConverter: function valueConverter(value) {
    return new color_1.Color(value);
  }
});
exports.borderBottomColorProperty.register(properties_1.Style);
exports.borderLeftColorProperty = new properties_1.CssProperty({
  name: "borderLeftColor",
  cssName: "border-left-color",
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var background = target.backgroundInternal.withBorderLeftColor(newValue);
    target.backgroundInternal = background;
  },
  equalityComparer: color_1.Color.equals,
  valueConverter: function valueConverter(value) {
    return new color_1.Color(value);
  }
});
exports.borderLeftColorProperty.register(properties_1.Style);
var borderWidthProperty = new properties_1.ShorthandProperty({
  name: "borderWidth",
  cssName: "border-width",
  getter: function getter() {
    if (Length.equals(this.borderTopWidth, this.borderRightWidth) && Length.equals(this.borderTopWidth, this.borderBottomWidth) && Length.equals(this.borderTopWidth, this.borderLeftWidth)) {
      return this.borderTopWidth;
    } else {
      return Length.convertToString(this.borderTopWidth) + " " + Length.convertToString(this.borderRightWidth) + " " + Length.convertToString(this.borderBottomWidth) + " " + Length.convertToString(this.borderLeftWidth);
    }
  },
  converter: function converter(value) {
    if (typeof value === "string" && value !== "auto") {
      var borderWidths = parseThickness(value);
      return [[exports.borderTopWidthProperty, borderWidths.top], [exports.borderRightWidthProperty, borderWidths.right], [exports.borderBottomWidthProperty, borderWidths.bottom], [exports.borderLeftWidthProperty, borderWidths.left]];
    } else {
      return [[exports.borderTopWidthProperty, value], [exports.borderRightWidthProperty, value], [exports.borderBottomWidthProperty, value], [exports.borderLeftWidthProperty, value]];
    }
  }
});
borderWidthProperty.register(properties_1.Style);
exports.borderTopWidthProperty = new properties_1.CssProperty({
  name: "borderTopWidth",
  cssName: "border-top-width",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-top-width should be Non-Negative Finite number. Value: " + value);
    }

    target.view.effectiveBorderTopWidth = value;
    var background = target.backgroundInternal.withBorderTopWidth(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderTopWidthProperty.register(properties_1.Style);
exports.borderRightWidthProperty = new properties_1.CssProperty({
  name: "borderRightWidth",
  cssName: "border-right-width",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-right-width should be Non-Negative Finite number. Value: " + value);
    }

    target.view.effectiveBorderRightWidth = value;
    var background = target.backgroundInternal.withBorderRightWidth(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderRightWidthProperty.register(properties_1.Style);
exports.borderBottomWidthProperty = new properties_1.CssProperty({
  name: "borderBottomWidth",
  cssName: "border-bottom-width",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-bottom-width should be Non-Negative Finite number. Value: " + value);
    }

    target.view.effectiveBorderBottomWidth = value;
    var background = target.backgroundInternal.withBorderBottomWidth(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderBottomWidthProperty.register(properties_1.Style);
exports.borderLeftWidthProperty = new properties_1.CssProperty({
  name: "borderLeftWidth",
  cssName: "border-left-width",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-left-width should be Non-Negative Finite number. Value: " + value);
    }

    target.view.effectiveBorderLeftWidth = value;
    var background = target.backgroundInternal.withBorderLeftWidth(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderLeftWidthProperty.register(properties_1.Style);
var borderRadiusProperty = new properties_1.ShorthandProperty({
  name: "borderRadius",
  cssName: "border-radius",
  getter: function getter() {
    if (Length.equals(this.borderTopLeftRadius, this.borderTopRightRadius) && Length.equals(this.borderTopLeftRadius, this.borderBottomRightRadius) && Length.equals(this.borderTopLeftRadius, this.borderBottomLeftRadius)) {
      return this.borderTopLeftRadius;
    }

    return Length.convertToString(this.borderTopLeftRadius) + " " + Length.convertToString(this.borderTopRightRadius) + " " + Length.convertToString(this.borderBottomRightRadius) + " " + Length.convertToString(this.borderBottomLeftRadius);
  },
  converter: function converter(value) {
    if (typeof value === "string") {
      var borderRadius = parseThickness(value);
      return [[exports.borderTopLeftRadiusProperty, borderRadius.top], [exports.borderTopRightRadiusProperty, borderRadius.right], [exports.borderBottomRightRadiusProperty, borderRadius.bottom], [exports.borderBottomLeftRadiusProperty, borderRadius.left]];
    } else {
      return [[exports.borderTopLeftRadiusProperty, value], [exports.borderTopRightRadiusProperty, value], [exports.borderBottomRightRadiusProperty, value], [exports.borderBottomLeftRadiusProperty, value]];
    }
  }
});
borderRadiusProperty.register(properties_1.Style);
exports.borderTopLeftRadiusProperty = new properties_1.CssProperty({
  name: "borderTopLeftRadius",
  cssName: "border-top-left-radius",
  defaultValue: 0,
  affectsLayout: platform_1.isIOS,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-top-left-radius should be Non-Negative Finite number. Value: " + value);
    }

    var background = target.backgroundInternal.withBorderTopLeftRadius(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderTopLeftRadiusProperty.register(properties_1.Style);
exports.borderTopRightRadiusProperty = new properties_1.CssProperty({
  name: "borderTopRightRadius",
  cssName: "border-top-right-radius",
  defaultValue: 0,
  affectsLayout: platform_1.isIOS,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-top-right-radius should be Non-Negative Finite number. Value: " + value);
    }

    var background = target.backgroundInternal.withBorderTopRightRadius(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderTopRightRadiusProperty.register(properties_1.Style);
exports.borderBottomRightRadiusProperty = new properties_1.CssProperty({
  name: "borderBottomRightRadius",
  cssName: "border-bottom-right-radius",
  defaultValue: 0,
  affectsLayout: platform_1.isIOS,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-bottom-right-radius should be Non-Negative Finite number. Value: " + value);
    }

    var background = target.backgroundInternal.withBorderBottomRightRadius(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderBottomRightRadiusProperty.register(properties_1.Style);
exports.borderBottomLeftRadiusProperty = new properties_1.CssProperty({
  name: "borderBottomLeftRadius",
  cssName: "border-bottom-left-radius",
  defaultValue: 0,
  affectsLayout: platform_1.isIOS,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-bottom-left-radius should be Non-Negative Finite number. Value: " + value);
    }

    var background = target.backgroundInternal.withBorderBottomLeftRadius(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderBottomLeftRadiusProperty.register(properties_1.Style);

function isNonNegativeFiniteNumber(value) {
  return isFinite(value) && !isNaN(value) && value >= 0;
}

var supportedPaths = ["rect", "circle", "ellipse", "polygon", "inset"];

function isClipPathValid(value) {
  if (!value) {
    return true;
  }

  var functionName = value.substring(0, value.indexOf("(")).trim();
  return supportedPaths.indexOf(functionName) !== -1;
}

exports.clipPathProperty = new properties_1.CssProperty({
  name: "clipPath",
  cssName: "clip-path",
  valueChanged: function valueChanged(target, oldValue, newValue) {
    if (!isClipPathValid(newValue)) {
      throw new Error("clip-path is not valid.");
    }

    var background = target.backgroundInternal.withClipPath(newValue);
    target.backgroundInternal = background;
  }
});
exports.clipPathProperty.register(properties_1.Style);

function isFloatValueConverter(value) {
  var newValue = parseFloat(value);

  if (isNaN(newValue)) {
    throw new Error("Invalid value: " + newValue);
  }

  return newValue;
}

exports.zIndexProperty = new properties_1.CssProperty({
  name: "zIndex",
  cssName: "z-index",
  valueConverter: isFloatValueConverter
});
exports.zIndexProperty.register(properties_1.Style);

function opacityConverter(value) {
  var newValue = parseFloat(value);

  if (!isNaN(newValue) && 0 <= newValue && newValue <= 1) {
    return newValue;
  }

  throw new Error("Opacity should be between [0, 1]. Value: " + newValue);
}

exports.opacityProperty = new properties_1.CssAnimationProperty({
  name: "opacity",
  cssName: "opacity",
  defaultValue: 1,
  valueConverter: opacityConverter
});
exports.opacityProperty.register(properties_1.Style);
exports.colorProperty = new properties_1.InheritedCssProperty({
  name: "color",
  cssName: "color",
  equalityComparer: color_1.Color.equals,
  valueConverter: function valueConverter(v) {
    return new color_1.Color(v);
  }
});
exports.colorProperty.register(properties_1.Style);
exports.fontInternalProperty = new properties_1.CssProperty({
  name: "fontInternal",
  cssName: "_fontInternal",
  defaultValue: font_1.Font.default
});
exports.fontInternalProperty.register(properties_1.Style);
exports.fontFamilyProperty = new properties_1.InheritedCssProperty({
  name: "fontFamily",
  cssName: "font-family",
  affectsLayout: platform_1.isIOS,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var currentFont = target.fontInternal;

    if (currentFont.fontFamily !== newValue) {
      var newFont = currentFont.withFontFamily(newValue);
      target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
    }
  }
});
exports.fontFamilyProperty.register(properties_1.Style);
exports.fontSizeProperty = new properties_1.InheritedCssProperty({
  name: "fontSize",
  cssName: "font-size",
  affectsLayout: platform_1.isIOS,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var currentFont = target.fontInternal;

    if (currentFont.fontSize !== newValue) {
      var newFont = currentFont.withFontSize(newValue);
      target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
    }
  },
  valueConverter: function valueConverter(v) {
    return parseFloat(v);
  }
});
exports.fontSizeProperty.register(properties_1.Style);
exports.fontStyleProperty = new properties_1.InheritedCssProperty({
  name: "fontStyle",
  cssName: "font-style",
  affectsLayout: platform_1.isIOS,
  defaultValue: font_1.FontStyle.NORMAL,
  valueConverter: font_1.FontStyle.parse,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var currentFont = target.fontInternal;

    if (currentFont.fontStyle !== newValue) {
      var newFont = currentFont.withFontStyle(newValue);
      target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
    }
  }
});
exports.fontStyleProperty.register(properties_1.Style);
exports.fontWeightProperty = new properties_1.InheritedCssProperty({
  name: "fontWeight",
  cssName: "font-weight",
  affectsLayout: platform_1.isIOS,
  defaultValue: font_1.FontWeight.NORMAL,
  valueConverter: font_1.FontWeight.parse,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    var currentFont = target.fontInternal;

    if (currentFont.fontWeight !== newValue) {
      var newFont = currentFont.withFontWeight(newValue);
      target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
    }
  }
});
exports.fontWeightProperty.register(properties_1.Style);
var fontProperty = new properties_1.ShorthandProperty({
  name: "font",
  cssName: "font",
  getter: function getter() {
    return this.fontStyle + " " + this.fontWeight + " " + this.fontSize + " " + this.fontFamily;
  },
  converter: function converter(value) {
    if (value === properties_1.unsetValue) {
      return [[exports.fontStyleProperty, properties_1.unsetValue], [exports.fontWeightProperty, properties_1.unsetValue], [exports.fontSizeProperty, properties_1.unsetValue], [exports.fontFamilyProperty, properties_1.unsetValue]];
    } else {
      var font = font_1.parseFont(value);
      var fontSize = parseFloat(font.fontSize);
      return [[exports.fontStyleProperty, font.fontStyle], [exports.fontWeightProperty, font.fontWeight], [exports.fontSizeProperty, fontSize], [exports.fontFamilyProperty, font.fontFamily]];
    }
  }
});
fontProperty.register(properties_1.Style);
var Visibility;

(function (Visibility) {
  Visibility.VISIBLE = "visible";
  Visibility.HIDDEN = "hidden";
  Visibility.COLLAPSE = "collapse";
  Visibility.isValid = properties_1.makeValidator(Visibility.VISIBLE, Visibility.HIDDEN, Visibility.COLLAPSE);

  Visibility.parse = function (value) {
    return value.toLowerCase() === "collapsed" ? Visibility.COLLAPSE : parseStrict(value);
  };

  var parseStrict = properties_1.makeParser(Visibility.isValid);
})(Visibility = exports.Visibility || (exports.Visibility = {}));

exports.visibilityProperty = new properties_1.CssProperty({
  name: "visibility",
  cssName: "visibility",
  defaultValue: Visibility.VISIBLE,
  affectsLayout: platform_1.isIOS,
  valueConverter: Visibility.parse,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    target.view.isCollapsed = newValue === Visibility.COLLAPSE;
  }
});
exports.visibilityProperty.register(properties_1.Style);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/style-scope.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var css_1 = __webpack_require__("../node_modules/tns-core-modules/css/index.js");

var parser_1 = __webpack_require__("../node_modules/tns-core-modules/css/parser.js");

var css_selector_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/css-selector/css-selector.js");

var trace_1 = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var applicationCommon = __webpack_require__("../node_modules/tns-core-modules/application/application-common.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var keyframeAnimationModule;

function ensureKeyframeAnimationModule() {
  if (!keyframeAnimationModule) {
    keyframeAnimationModule = __webpack_require__("../node_modules/tns-core-modules/ui/animation/keyframe-animation.js");
  }
}

var cssAnimationParserModule;

function ensureCssAnimationParserModule() {
  if (!cssAnimationParserModule) {
    cssAnimationParserModule = __webpack_require__("../node_modules/tns-core-modules/ui/styling/css-animation-parser.js");
  }
}

var parser = "rework";

try {
  var appConfig = __webpack_require__("./package.json");

  if (appConfig && appConfig.cssParser === "nativescript") {
    parser = "nativescript";
  }
} catch (e) {}

function mergeCssSelectors() {
  applicationCssSelectors = applicationSelectors.slice();
  applicationCssSelectors.push.apply(applicationCssSelectors, applicationAdditionalSelectors);
  applicationCssSelectorVersion++;
}

exports.mergeCssSelectors = mergeCssSelectors;
var applicationCssSelectors = [];
var applicationCssSelectorVersion = 0;
var applicationSelectors = [];
var applicationAdditionalSelectors = [];
var applicationKeyframes = {};
var animationsSymbol = Symbol("animations");
var pattern = /('|")(.*?)\1/;

var CSSSource = function () {
  function CSSSource(_ast, _url, _file, _keyframes, _source) {
    this._ast = _ast;
    this._url = _url;
    this._file = _file;
    this._keyframes = _keyframes;
    this._source = _source;
    this._selectors = [];
    this.parse();
  }

  CSSSource.fromURI = function (uri, keyframes) {
    var appRelativeUri = CSSSource.pathRelativeToApp(uri);

    try {
      var cssOrAst = global.loadModule(appRelativeUri);

      if (cssOrAst) {
        if (typeof cssOrAst === "string") {
          return CSSSource.fromSource(cssOrAst, keyframes, appRelativeUri);
        } else if (typeof cssOrAst === "object" && cssOrAst.type === "stylesheet" && cssOrAst.stylesheet && cssOrAst.stylesheet.rules) {
          return CSSSource.fromAST(cssOrAst, keyframes, appRelativeUri);
        } else {
          return CSSSource.fromSource(cssOrAst.toString(), keyframes, appRelativeUri);
        }
      }
    } catch (e) {}

    return CSSSource.fromFile(appRelativeUri, keyframes);
  };

  CSSSource.pathRelativeToApp = function (uri) {
    if (!uri.startsWith("/")) {
      return uri;
    }

    var appPath = file_system_1.knownFolders.currentApp().path;

    if (!uri.startsWith(appPath)) {
      trace_1.write(uri + " does not start with " + appPath, trace_1.categories.Error, trace_1.messageType.error);
      return uri;
    }

    var relativeUri = "." + uri.substr(appPath.length);
    return relativeUri;
  };

  CSSSource.fromFile = function (url, keyframes) {
    var cssFileUrl = url.replace(/\..\w+$/, ".css");

    if (cssFileUrl !== url) {
      var cssFile = CSSSource.resolveCSSPathFromURL(cssFileUrl);

      if (cssFile) {
        return new CSSSource(undefined, url, cssFile, keyframes, undefined);
      }
    }

    var file = CSSSource.resolveCSSPathFromURL(url);
    return new CSSSource(undefined, url, file, keyframes, undefined);
  };

  CSSSource.fromFileImport = function (url, keyframes, importSource) {
    var file = CSSSource.resolveCSSPathFromURL(url, importSource);
    return new CSSSource(undefined, url, file, keyframes, undefined);
  };

  CSSSource.resolveCSSPathFromURL = function (url, importSource) {
    var app = file_system_1.knownFolders.currentApp().path;
    var file = resolveFileNameFromUrl(url, app, file_system_1.File.exists, importSource);
    return file;
  };

  CSSSource.fromSource = function (source, keyframes, url) {
    return new CSSSource(undefined, url, undefined, keyframes, source);
  };

  CSSSource.fromAST = function (ast, keyframes, url) {
    return new CSSSource(ast, url, undefined, keyframes, undefined);
  };

  Object.defineProperty(CSSSource.prototype, "selectors", {
    get: function get() {
      return this._selectors;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(CSSSource.prototype, "source", {
    get: function get() {
      return this._source;
    },
    enumerable: true,
    configurable: true
  });

  CSSSource.prototype.load = function () {
    var file = file_system_1.File.fromPath(this._file);
    this._source = file.readTextSync();
  };

  CSSSource.prototype.parse = function () {
    try {
      if (!this._ast) {
        if (!this._source && this._file) {
          this.load();
        }

        if (this._source) {
          this.parseCSSAst();
        }
      }

      if (this._ast) {
        this.createSelectors();
      } else {
        this._selectors = [];
      }
    } catch (e) {
      trace_1.write("Css styling failed: " + e, trace_1.categories.Error, trace_1.messageType.error);
      this._selectors = [];
    }
  };

  CSSSource.prototype.parseCSSAst = function () {
    if (this._source) {
      switch (parser) {
        case "nativescript":
          var cssparser = new parser_1.CSS3Parser(this._source);
          var stylesheet = cssparser.parseAStylesheet();
          var cssNS = new parser_1.CSSNativeScript();
          this._ast = cssNS.parseStylesheet(stylesheet);
          return;

        case "rework":
          this._ast = css_1.parse(this._source, {
            source: this._file
          });
          return;
      }
    }
  };

  CSSSource.prototype.createSelectors = function () {
    if (this._ast) {
      this._selectors = this.createSelectorsFromImports().concat(this.createSelectorsFromSyntaxTree());
    }
  };

  CSSSource.prototype.createSelectorsFromImports = function () {
    var _this = this;

    var imports = this._ast["stylesheet"]["rules"].filter(function (r) {
      return r.type === "import";
    });

    var urlFromImportObject = function urlFromImportObject(importObject) {
      var importItem = importObject["import"];
      var urlMatch = importItem && importItem.match(pattern);
      return urlMatch && urlMatch[2];
    };

    var sourceFromImportObject = function sourceFromImportObject(importObject) {
      return importObject["position"] && importObject["position"]["source"];
    };

    var toUrlSourcePair = function toUrlSourcePair(importObject) {
      return {
        url: urlFromImportObject(importObject),
        source: sourceFromImportObject(importObject)
      };
    };

    var getCssFile = function getCssFile(_a) {
      var url = _a.url,
          source = _a.source;
      return source ? CSSSource.fromFileImport(url, _this._keyframes, source) : CSSSource.fromURI(url, _this._keyframes);
    };

    var cssFiles = imports.map(toUrlSourcePair).filter(function (_a) {
      var url = _a.url;
      return !!url;
    }).map(getCssFile);
    var selectors = cssFiles.map(function (file) {
      return file && file.selectors || [];
    });
    return selectors.reduce(function (acc, val) {
      return acc.concat(val);
    }, []);
  };

  CSSSource.prototype.createSelectorsFromSyntaxTree = function () {
    var _this = this;

    var nodes = this._ast.stylesheet.rules;
    nodes.filter(isKeyframe).forEach(function (node) {
      return _this._keyframes[node.name] = node;
    });
    var rulesets = css_selector_1.fromAstNodes(nodes);

    if (rulesets && rulesets.length) {
      ensureCssAnimationParserModule();
      rulesets.forEach(function (rule) {
        rule[animationsSymbol] = cssAnimationParserModule.CssAnimationParser.keyframeAnimationsFromCSSDeclarations(rule.declarations);
      });
    }

    return rulesets;
  };

  CSSSource.prototype.toString = function () {
    return this._file || this._url || "(in-memory)";
  };

  __decorate([profiling_1.profile], CSSSource.prototype, "load", null);

  __decorate([profiling_1.profile], CSSSource.prototype, "parse", null);

  __decorate([profiling_1.profile], CSSSource.prototype, "parseCSSAst", null);

  __decorate([profiling_1.profile], CSSSource.prototype, "createSelectors", null);

  __decorate([profiling_1.profile], CSSSource, "resolveCSSPathFromURL", null);

  return CSSSource;
}();

function removeTaggedAdditionalCSS(tag) {
  var changed = false;

  for (var i = 0; i < applicationAdditionalSelectors.length; i++) {
    if (applicationAdditionalSelectors[i].tag === tag) {
      applicationAdditionalSelectors.splice(i, 1);
      i--;
      changed = true;
    }
  }

  if (changed) {
    mergeCssSelectors();
  }

  return changed;
}

exports.removeTaggedAdditionalCSS = removeTaggedAdditionalCSS;

function addTaggedAdditionalCSS(cssText, tag) {
  var parsed = CSSSource.fromSource(cssText, applicationKeyframes, undefined).selectors;
  var changed = false;

  if (parsed && parsed.length) {
    changed = true;

    if (tag != null) {
      for (var i = 0; i < parsed.length; i++) {
        parsed[i].tag = tag;
      }
    }

    applicationAdditionalSelectors.push.apply(applicationAdditionalSelectors, parsed);
    mergeCssSelectors();
  }

  return changed;
}

exports.addTaggedAdditionalCSS = addTaggedAdditionalCSS;
var onCssChanged = profiling_1.profile("\"style-scope\".onCssChanged", function (args) {
  if (args.cssText) {
    var parsed = CSSSource.fromSource(args.cssText, applicationKeyframes, args.cssFile).selectors;

    if (parsed) {
      applicationAdditionalSelectors.push.apply(applicationAdditionalSelectors, parsed);
      mergeCssSelectors();
    }
  } else if (args.cssFile) {
    loadCss(args.cssFile);
  }
});

function onLiveSync(args) {
  loadCss(applicationCommon.getCssFileName());
}

var loadCss = profiling_1.profile("\"style-scope\".loadCss", function (cssFile) {
  if (!cssFile) {
    return undefined;
  }

  var result = CSSSource.fromURI(cssFile, applicationKeyframes).selectors;

  if (result.length > 0) {
    applicationSelectors = result;
    mergeCssSelectors();
  }
});
applicationCommon.on("cssChanged", onCssChanged);
applicationCommon.on("livesync", onLiveSync);
exports.loadAppCSS = profiling_1.profile("\"style-scope\".loadAppCSS", function (args) {
  loadCss(args.cssFile);
  applicationCommon.off("loadAppCss", exports.loadAppCSS);
});

if (applicationCommon.hasLaunched()) {
  exports.loadAppCSS({
    eventName: "loadAppCss",
    object: applicationCommon,
    cssFile: applicationCommon.getCssFileName()
  });
} else {
  applicationCommon.on("loadAppCss", exports.loadAppCSS);
}

var CssState = function () {
  function CssState(view) {
    var _this = this;

    this.view = view;

    this._onDynamicStateChangeHandler = function () {
      return _this.updateDynamicState();
    };
  }

  CssState.prototype.onChange = function () {
    if (this.view && this.view.isLoaded) {
      this.unsubscribeFromDynamicUpdates();
      this.updateMatch();
      this.subscribeForDynamicUpdates();
      this.updateDynamicState();
    } else {
      this._matchInvalid = true;
    }
  };

  CssState.prototype.onLoaded = function () {
    if (this._matchInvalid) {
      this.updateMatch();
    }

    this.subscribeForDynamicUpdates();
    this.updateDynamicState();
  };

  CssState.prototype.onUnloaded = function () {
    this.unsubscribeFromDynamicUpdates();
  };

  CssState.prototype.updateMatch = function () {
    this._match = this.view._styleScope ? this.view._styleScope.matchSelectors(this.view) : CssState.emptyMatch;
    this._matchInvalid = false;
  };

  CssState.prototype.updateDynamicState = function () {
    var _this = this;

    var matchingSelectors = this._match.selectors.filter(function (sel) {
      return sel.dynamic ? sel.match(_this.view) : true;
    });

    this.view._batchUpdate(function () {
      _this.stopKeyframeAnimations();

      _this.setPropertyValues(matchingSelectors);

      _this.playKeyframeAnimations(matchingSelectors);
    });
  };

  CssState.prototype.playKeyframeAnimations = function (matchingSelectors) {
    var _this = this;

    var animations = [];
    matchingSelectors.forEach(function (selector) {
      var ruleAnimations = selector.ruleset[animationsSymbol];

      if (ruleAnimations) {
        ensureKeyframeAnimationModule();

        for (var _i = 0, ruleAnimations_1 = ruleAnimations; _i < ruleAnimations_1.length; _i++) {
          var animationInfo = ruleAnimations_1[_i];
          var animation = keyframeAnimationModule.KeyframeAnimation.keyframeAnimationFromInfo(animationInfo);

          if (animation) {
            animations.push(animation);
          }
        }
      }
    });

    if (this._playsKeyframeAnimations = animations.length > 0) {
      animations.map(function (animation) {
        return animation.play(_this.view);
      });
      Object.freeze(animations);
      this._appliedAnimations = animations;
    }
  };

  CssState.prototype.stopKeyframeAnimations = function () {
    if (!this._playsKeyframeAnimations) {
      return;
    }

    this._appliedAnimations.filter(function (animation) {
      return animation.isPlaying;
    }).forEach(function (animation) {
      return animation.cancel();
    });

    this._appliedAnimations = CssState.emptyAnimationArray;
    this.view.style["keyframe:rotate"] = properties_1.unsetValue;
    this.view.style["keyframe:scaleX"] = properties_1.unsetValue;
    this.view.style["keyframe:scaleY"] = properties_1.unsetValue;
    this.view.style["keyframe:translateX"] = properties_1.unsetValue;
    this.view.style["keyframe:translateY"] = properties_1.unsetValue;
    this.view.style["keyframe:backgroundColor"] = properties_1.unsetValue;
    this.view.style["keyframe:opacity"] = properties_1.unsetValue;
    this._playsKeyframeAnimations = false;
  };

  CssState.prototype.setPropertyValues = function (matchingSelectors) {
    var newPropertyValues = new this.view.style.PropertyBag();
    matchingSelectors.forEach(function (selector) {
      return selector.ruleset.declarations.forEach(function (declaration) {
        return newPropertyValues[declaration.property] = declaration.value;
      });
    });
    Object.freeze(newPropertyValues);
    var oldProperties = this._appliedPropertyValues;

    for (var key in oldProperties) {
      if (!(key in newPropertyValues)) {
        if (key in this.view.style) {
          this.view.style["css:" + key] = properties_1.unsetValue;
        } else {}
      }
    }

    for (var property in newPropertyValues) {
      if (oldProperties && property in oldProperties && oldProperties[property] === newPropertyValues[property]) {
        continue;
      }

      var value = newPropertyValues[property];

      try {
        if (property in this.view.style) {
          this.view.style["css:" + property] = value;
        } else {
          this.view[property] = value;
        }
      } catch (e) {
        trace_1.write("Failed to apply property [" + property + "] with value [" + value + "] to " + this.view + ". " + e, trace_1.categories.Error, trace_1.messageType.error);
      }
    }

    this._appliedPropertyValues = newPropertyValues;
  };

  CssState.prototype.subscribeForDynamicUpdates = function () {
    var _this = this;

    var changeMap = this._match.changeMap;
    changeMap.forEach(function (changes, view) {
      if (changes.attributes) {
        changes.attributes.forEach(function (attribute) {
          view.addEventListener(attribute + "Change", _this._onDynamicStateChangeHandler);
        });
      }

      if (changes.pseudoClasses) {
        changes.pseudoClasses.forEach(function (pseudoClass) {
          var eventName = ":" + pseudoClass;
          view.addEventListener(":" + pseudoClass, _this._onDynamicStateChangeHandler);

          if (view[eventName]) {
            view[eventName](+1);
          }
        });
      }
    });
    this._appliedChangeMap = changeMap;
  };

  CssState.prototype.unsubscribeFromDynamicUpdates = function () {
    var _this = this;

    this._appliedChangeMap.forEach(function (changes, view) {
      if (changes.attributes) {
        changes.attributes.forEach(function (attribute) {
          view.removeEventListener(attribute + "Change", _this._onDynamicStateChangeHandler);
        });
      }

      if (changes.pseudoClasses) {
        changes.pseudoClasses.forEach(function (pseudoClass) {
          var eventName = ":" + pseudoClass;
          view.removeEventListener(eventName, _this._onDynamicStateChangeHandler);

          if (view[eventName]) {
            view[eventName](-1);
          }
        });
      }
    });

    this._appliedChangeMap = CssState.emptyChangeMap;
  };

  CssState.prototype.toString = function () {
    return this.view + "._cssState";
  };

  CssState.emptyChangeMap = Object.freeze(new Map());
  CssState.emptyPropertyBag = Object.freeze({});
  CssState.emptyAnimationArray = Object.freeze([]);
  CssState.emptyMatch = {
    selectors: [],
    changeMap: new Map()
  };

  __decorate([profiling_1.profile], CssState.prototype, "updateMatch", null);

  __decorate([profiling_1.profile], CssState.prototype, "updateDynamicState", null);

  return CssState;
}();

exports.CssState = CssState;
CssState.prototype._appliedChangeMap = CssState.emptyChangeMap;
CssState.prototype._appliedPropertyValues = CssState.emptyPropertyBag;
CssState.prototype._appliedAnimations = CssState.emptyAnimationArray;
CssState.prototype._matchInvalid = true;

var StyleScope = function () {
  function StyleScope() {
    this._css = "";
    this._localCssSelectors = [];
    this._localCssSelectorVersion = 0;
    this._localCssSelectorsAppliedVersion = 0;
    this._applicationCssSelectorsAppliedVersion = 0;
    this._keyframes = new Map();
  }

  Object.defineProperty(StyleScope.prototype, "css", {
    get: function get() {
      return this._css;
    },
    set: function set(value) {
      this.setCss(value);
    },
    enumerable: true,
    configurable: true
  });

  StyleScope.prototype.addCss = function (cssString, cssFileName) {
    this.appendCss(cssString, cssFileName);
  };

  StyleScope.prototype.addCssFile = function (cssFileName) {
    this.appendCss(null, cssFileName);
  };

  StyleScope.prototype.setCss = function (cssString, cssFileName) {
    this._css = cssString;
    var cssFile = CSSSource.fromSource(cssString, this._keyframes, cssFileName);
    this._localCssSelectors = cssFile.selectors;
    this._localCssSelectorVersion++;
    this.ensureSelectors();
  };

  StyleScope.prototype.appendCss = function (cssString, cssFileName) {
    if (!cssString && !cssFileName) {
      return;
    }

    var parsedCssSelectors = cssString ? CSSSource.fromSource(cssString, this._keyframes, cssFileName) : CSSSource.fromURI(cssFileName, this._keyframes);
    this._css = this._css + parsedCssSelectors.source;

    this._localCssSelectors.push.apply(this._localCssSelectors, parsedCssSelectors.selectors);

    this._localCssSelectorVersion++;
    this.ensureSelectors();
  };

  StyleScope.prototype.getKeyframeAnimationWithName = function (animationName) {
    var cssKeyframes = this._keyframes[animationName];

    if (!cssKeyframes) {
      return;
    }

    ensureKeyframeAnimationModule();
    var animation = new keyframeAnimationModule.KeyframeAnimationInfo();
    ensureCssAnimationParserModule();
    animation.keyframes = cssAnimationParserModule.CssAnimationParser.keyframesArrayFromCSS(cssKeyframes.keyframes);
    return animation;
  };

  StyleScope.prototype.ensureSelectors = function () {
    if (this._applicationCssSelectorsAppliedVersion !== applicationCssSelectorVersion || this._localCssSelectorVersion !== this._localCssSelectorsAppliedVersion || !this._mergedCssSelectors) {
      this._createSelectors();
    }

    return this._getSelectorsVersion();
  };

  StyleScope.prototype._createSelectors = function () {
    var toMerge = [];
    toMerge.push(applicationCssSelectors);
    this._applicationCssSelectorsAppliedVersion = applicationCssSelectorVersion;
    toMerge.push(this._localCssSelectors);
    this._localCssSelectorsAppliedVersion = this._localCssSelectorVersion;

    for (var keyframe in applicationKeyframes) {
      this._keyframes[keyframe] = applicationKeyframes[keyframe];
    }

    if (toMerge.length > 0) {
      this._mergedCssSelectors = toMerge.filter(function (m) {
        return !!m;
      }).reduce(function (merged, next) {
        return merged.concat(next);
      }, []);

      this._applyKeyframesOnSelectors();

      this._selectors = new css_selector_1.SelectorsMap(this._mergedCssSelectors);
    }
  };

  StyleScope.prototype.matchSelectors = function (view) {
    this.ensureSelectors();
    return this._selectors.query(view);
  };

  StyleScope.prototype.query = function (node) {
    this.ensureSelectors();
    return this._selectors.query(node).selectors;
  };

  StyleScope.prototype._getSelectorsVersion = function () {
    return 100000 * this._applicationCssSelectorsAppliedVersion + this._localCssSelectorsAppliedVersion;
  };

  StyleScope.prototype._applyKeyframesOnSelectors = function () {
    for (var i = this._mergedCssSelectors.length - 1; i >= 0; i--) {
      var ruleset = this._mergedCssSelectors[i];
      var animations = ruleset[animationsSymbol];

      if (animations !== undefined && animations.length) {
        ensureCssAnimationParserModule();

        for (var _i = 0, animations_1 = animations; _i < animations_1.length; _i++) {
          var animation = animations_1[_i];
          var cssKeyframe = this._keyframes[animation.name];

          if (cssKeyframe !== undefined) {
            animation.keyframes = cssAnimationParserModule.CssAnimationParser.keyframesArrayFromCSS(cssKeyframe.keyframes);
          }
        }
      }
    }
  };

  StyleScope.prototype.getAnimations = function (ruleset) {
    return ruleset[animationsSymbol];
  };

  __decorate([profiling_1.profile], StyleScope.prototype, "setCss", null);

  __decorate([profiling_1.profile], StyleScope.prototype, "appendCss", null);

  __decorate([profiling_1.profile], StyleScope.prototype, "_createSelectors", null);

  __decorate([profiling_1.profile], StyleScope.prototype, "matchSelectors", null);

  return StyleScope;
}();

exports.StyleScope = StyleScope;

function resolveFileNameFromUrl(url, appDirectory, fileExists, importSource) {
  var fileName = typeof url === "string" ? url.trim() : "";

  if (fileName.indexOf("~/") === 0) {
    fileName = fileName.replace("~/", "");
  }

  var isAbsolutePath = fileName.indexOf("/") === 0;
  var absolutePath = isAbsolutePath ? fileName : file_system_1.path.join(appDirectory, fileName);

  if (fileExists(absolutePath)) {
    return absolutePath;
  }

  if (!isAbsolutePath) {
    if (fileName[0] === "~" && fileName[1] !== "/" && fileName[1] !== "\"") {
      fileName = fileName.substr(1);
    }

    if (importSource) {
      var importFile = resolveFilePathFromImport(importSource, fileName);

      if (fileExists(importFile)) {
        return importFile;
      }
    }

    var external_1 = file_system_1.path.join(appDirectory, "tns_modules", fileName);

    if (fileExists(external_1)) {
      return external_1;
    }
  }

  return null;
}

exports.resolveFileNameFromUrl = resolveFileNameFromUrl;

function resolveFilePathFromImport(importSource, fileName) {
  var importSourceParts = importSource.split(file_system_1.path.separator);
  var fileNameParts = fileName.split(file_system_1.path.separator).filter(function (p) {
    return !isCurrentDirectory(p);
  });
  importSourceParts.pop();
  fileNameParts.forEach(function (p) {
    return isParentDirectory(p) ? importSourceParts.pop() : importSourceParts.push(p);
  });
  return importSourceParts.join(file_system_1.path.separator);
}

exports.applyInlineStyle = profiling_1.profile(function applyInlineStyle(view, styleStr) {
  var localStyle = "local { " + styleStr + " }";
  var inlineRuleSet = CSSSource.fromSource(localStyle, new Map()).selectors;
  var style = view.style;
  inlineRuleSet[0].declarations.forEach(function (d) {
    var name = d.property;

    try {
      if (name in style) {
        style[name] = d.value;
      } else {
        view[name] = d.value;
      }
    } catch (e) {
      trace_1.write("Failed to apply property [" + d.property + "] with value [" + d.value + "] to " + view + ". " + e, trace_1.categories.Error, trace_1.messageType.error);
    }
  });
});

function isCurrentDirectory(uriPart) {
  return uriPart === ".";
}

function isParentDirectory(uriPart) {
  return uriPart === "..";
}

function isKeyframe(node) {
  return node.type === "keyframes";
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/style/style.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var observable_1 = __webpack_require__("../node_modules/tns-core-modules/data/observable/observable.js");

var Style = function (_super) {
  __extends(Style, _super);

  function Style(view) {
    var _this = _super.call(this) || this;

    _this.view = view;
    return _this;
  }

  Style.prototype.toString = function () {
    return this.view + ".style";
  };

  return Style;
}(observable_1.Observable);

exports.Style = Style;

Style.prototype.PropertyBag = function () {
  function class_1() {}

  return class_1;
}();

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/switch/switch-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var SwitchBase = function (_super) {
  __extends(SwitchBase, _super);

  function SwitchBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  SwitchBase = __decorate([view_1.CSSType("Switch")], SwitchBase);
  return SwitchBase;
}(view_1.View);

exports.SwitchBase = SwitchBase;
SwitchBase.prototype.recycleNativeView = "auto";
exports.checkedProperty = new view_1.Property({
  name: "checked",
  defaultValue: false,
  valueConverter: view_1.booleanConverter
});
exports.checkedProperty.register(SwitchBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/switch/switch.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var switch_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/switch/switch-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/switch/switch-common.js"));

var CheckedChangeListener;

function initializeCheckedChangeListener() {
  if (CheckedChangeListener) {
    return;
  }

  var CheckedChangeListenerImpl = function (_super) {
    __extends(CheckedChangeListenerImpl, _super);

    function CheckedChangeListenerImpl(owner) {
      var _this = _super.call(this) || this;

      _this.owner = owner;
      return global.__native(_this);
    }

    CheckedChangeListenerImpl.prototype.onCheckedChanged = function (buttonView, isChecked) {
      var owner = this.owner;
      switch_common_1.checkedProperty.nativeValueChange(owner, isChecked);
    };

    CheckedChangeListenerImpl = __decorate([Interfaces([android.widget.CompoundButton.OnCheckedChangeListener])], CheckedChangeListenerImpl);
    return CheckedChangeListenerImpl;
  }(java.lang.Object);

  CheckedChangeListener = CheckedChangeListenerImpl;
}

var Switch = function (_super) {
  __extends(Switch, _super);

  function Switch() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Switch.prototype.createNativeView = function () {
    return new android.widget.Switch(this._context);
  };

  Switch.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    var nativeView = this.nativeViewProtected;
    initializeCheckedChangeListener();
    var listener = new CheckedChangeListener(this);
    nativeView.setOnCheckedChangeListener(listener);
    nativeView.listener = listener;
  };

  Switch.prototype.disposeNativeView = function () {
    var nativeView = this.nativeViewProtected;
    nativeView.listener.owner = null;

    _super.prototype.disposeNativeView.call(this);
  };

  Switch.prototype[switch_common_1.checkedProperty.getDefault] = function () {
    return false;
  };

  Switch.prototype[switch_common_1.checkedProperty.setNative] = function (value) {
    this.nativeViewProtected.setChecked(value);
  };

  Switch.prototype[switch_common_1.colorProperty.getDefault] = function () {
    return -1;
  };

  Switch.prototype[switch_common_1.colorProperty.setNative] = function (value) {
    if (value instanceof switch_common_1.Color) {
      this.nativeViewProtected.getThumbDrawable().setColorFilter(value.android, android.graphics.PorterDuff.Mode.SRC_IN);
    } else {
      this.nativeViewProtected.getThumbDrawable().clearColorFilter();
    }
  };

  Switch.prototype[switch_common_1.backgroundColorProperty.getDefault] = function () {
    return -1;
  };

  Switch.prototype[switch_common_1.backgroundColorProperty.setNative] = function (value) {
    if (value instanceof switch_common_1.Color) {
      this.nativeViewProtected.getTrackDrawable().setColorFilter(value.android, android.graphics.PorterDuff.Mode.SRC_IN);
    } else {
      this.nativeViewProtected.getTrackDrawable().clearColorFilter();
    }
  };

  Switch.prototype[switch_common_1.backgroundInternalProperty.getDefault] = function () {
    return null;
  };

  Switch.prototype[switch_common_1.backgroundInternalProperty.setNative] = function (value) {};

  return Switch;
}(switch_common_1.SwitchBase);

exports.Switch = Switch;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/tab-view/tab-view-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

exports.traceCategory = "TabView";

var TabViewItemBase = function (_super) {
  __extends(TabViewItemBase, _super);

  function TabViewItemBase() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._title = "";
    return _this;
  }

  Object.defineProperty(TabViewItemBase.prototype, "textTransform", {
    get: function get() {
      return this.style.textTransform;
    },
    set: function set(value) {
      this.style.textTransform = value;
    },
    enumerable: true,
    configurable: true
  });

  TabViewItemBase.prototype._addChildFromBuilder = function (name, value) {
    if (value instanceof view_1.View) {
      this.view = value;
    }
  };

  Object.defineProperty(TabViewItemBase.prototype, "title", {
    get: function get() {
      return this._title;
    },
    set: function set(value) {
      if (this._title !== value) {
        this._title = value;

        this._update();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TabViewItemBase.prototype, "view", {
    get: function get() {
      return this._view;
    },
    set: function set(value) {
      if (this._view !== value) {
        if (this._view) {
          throw new Error("Changing the view of an already loaded TabViewItem is not currently supported.");
        }

        this._view = value;

        this._addView(value);
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TabViewItemBase.prototype, "iconSource", {
    get: function get() {
      return this._iconSource;
    },
    set: function set(value) {
      if (this._iconSource !== value) {
        this._iconSource = value;

        this._update();
      }
    },
    enumerable: true,
    configurable: true
  });

  TabViewItemBase.prototype.eachChild = function (callback) {
    var view = this._view;

    if (view) {
      callback(view);
    }
  };

  TabViewItemBase.prototype.loadView = function (view) {
    var tabView = this.parent;

    if (tabView && tabView.items) {
      if (this.canBeLoaded) {
        _super.prototype.loadView.call(this, view);
      }
    }
  };

  TabViewItemBase = __decorate([view_1.CSSType("TabViewItem")], TabViewItemBase);
  return TabViewItemBase;
}(view_1.ViewBase);

exports.TabViewItemBase = TabViewItemBase;
var knownCollections;

(function (knownCollections) {
  knownCollections.items = "items";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));

var TabViewBase = function (_super) {
  __extends(TabViewBase, _super);

  function TabViewBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TabViewBase_1 = TabViewBase;
  Object.defineProperty(TabViewBase.prototype, "androidSelectedTabHighlightColor", {
    get: function get() {
      return this.style.androidSelectedTabHighlightColor;
    },
    set: function set(value) {
      this.style.androidSelectedTabHighlightColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TabViewBase.prototype, "tabTextFontSize", {
    get: function get() {
      return this.style.tabTextFontSize;
    },
    set: function set(value) {
      this.style.tabTextFontSize = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TabViewBase.prototype, "tabTextColor", {
    get: function get() {
      return this.style.tabTextColor;
    },
    set: function set(value) {
      this.style.tabTextColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TabViewBase.prototype, "tabBackgroundColor", {
    get: function get() {
      return this.style.tabBackgroundColor;
    },
    set: function set(value) {
      this.style.tabBackgroundColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TabViewBase.prototype, "selectedTabTextColor", {
    get: function get() {
      return this.style.selectedTabTextColor;
    },
    set: function set(value) {
      this.style.selectedTabTextColor = value;
    },
    enumerable: true,
    configurable: true
  });

  TabViewBase.prototype._addArrayFromBuilder = function (name, value) {
    if (name === "items") {
      this.items = value;
    }
  };

  TabViewBase.prototype._addChildFromBuilder = function (name, value) {
    if (name === "TabViewItem") {
      if (!this.items) {
        this.items = new Array();
      }

      this.items.push(value);

      this._addView(value);

      exports.selectedIndexProperty.coerce(this);
    }
  };

  Object.defineProperty(TabViewBase.prototype, "_selectedView", {
    get: function get() {
      var selectedIndex = this.selectedIndex;
      return selectedIndex > -1 ? this.items[selectedIndex].view : null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TabViewBase.prototype, "_childrenCount", {
    get: function get() {
      var items = this.items;
      return items ? items.length : 0;
    },
    enumerable: true,
    configurable: true
  });

  TabViewBase.prototype.eachChild = function (callback) {
    var items = this.items;

    if (items) {
      items.forEach(function (item, i) {
        callback(item);
      });
    }
  };

  TabViewBase.prototype.eachChildView = function (callback) {
    var items = this.items;

    if (items) {
      items.forEach(function (item, i) {
        callback(item.view);
      });
    }
  };

  TabViewBase.prototype.onItemsChanged = function (oldItems, newItems) {
    var _this = this;

    if (oldItems) {
      oldItems.forEach(function (item) {
        return _this._removeView(item);
      });
    }

    if (newItems) {
      newItems.forEach(function (item) {
        if (!item.view) {
          throw new Error("TabViewItem must have a view.");
        }

        _this._addView(item);
      });
    }
  };

  TabViewBase.prototype.onSelectedIndexChanged = function (oldIndex, newIndex) {
    this.notify({
      eventName: TabViewBase_1.selectedIndexChangedEvent,
      object: this,
      oldIndex: oldIndex,
      newIndex: newIndex
    });
  };

  var TabViewBase_1;
  TabViewBase.selectedIndexChangedEvent = "selectedIndexChanged";
  TabViewBase = TabViewBase_1 = __decorate([view_1.CSSType("TabView")], TabViewBase);
  return TabViewBase;
}(view_1.View);

exports.TabViewBase = TabViewBase;

function traceMissingIcon(icon) {
  view_1.traceWrite("Could not load tab bar icon: " + icon, view_1.traceCategories.Error, view_1.traceMessageType.error);
}

exports.traceMissingIcon = traceMissingIcon;
exports.selectedIndexProperty = new view_1.CoercibleProperty({
  name: "selectedIndex",
  defaultValue: -1,
  affectsLayout: view_1.isIOS,
  valueChanged: function valueChanged(target, oldValue, newValue) {
    target.onSelectedIndexChanged(oldValue, newValue);
  },
  coerceValue: function coerceValue(target, value) {
    var items = target.items;

    if (items) {
      var max = items.length - 1;

      if (value < 0) {
        value = 0;
      }

      if (value > max) {
        value = max;
      }
    } else {
      value = -1;
    }

    return value;
  },
  valueConverter: function valueConverter(v) {
    return parseInt(v);
  }
});
exports.selectedIndexProperty.register(TabViewBase);
exports.itemsProperty = new view_1.Property({
  name: "items",
  valueChanged: function valueChanged(target, oldValue, newValue) {
    target.onItemsChanged(oldValue, newValue);
  }
});
exports.itemsProperty.register(TabViewBase);
exports.iosIconRenderingModeProperty = new view_1.Property({
  name: "iosIconRenderingMode",
  defaultValue: "automatic"
});
exports.iosIconRenderingModeProperty.register(TabViewBase);
exports.androidOffscreenTabLimitProperty = new view_1.Property({
  name: "androidOffscreenTabLimit",
  defaultValue: 1,
  affectsLayout: view_1.isIOS,
  valueConverter: function valueConverter(v) {
    return parseInt(v);
  }
});
exports.androidOffscreenTabLimitProperty.register(TabViewBase);
exports.androidTabsPositionProperty = new view_1.Property({
  name: "androidTabsPosition",
  defaultValue: "top"
});
exports.androidTabsPositionProperty.register(TabViewBase);
exports.androidSwipeEnabledProperty = new view_1.Property({
  name: "androidSwipeEnabled",
  defaultValue: true,
  valueConverter: view_1.booleanConverter
});
exports.androidSwipeEnabledProperty.register(TabViewBase);
exports.tabTextFontSizeProperty = new view_1.CssProperty({
  name: "tabTextFontSize",
  cssName: "tab-text-font-size",
  valueConverter: function valueConverter(v) {
    return parseFloat(v);
  }
});
exports.tabTextFontSizeProperty.register(view_1.Style);
exports.tabTextColorProperty = new view_1.CssProperty({
  name: "tabTextColor",
  cssName: "tab-text-color",
  equalityComparer: view_1.Color.equals,
  valueConverter: function valueConverter(v) {
    return new view_1.Color(v);
  }
});
exports.tabTextColorProperty.register(view_1.Style);
exports.tabBackgroundColorProperty = new view_1.CssProperty({
  name: "tabBackgroundColor",
  cssName: "tab-background-color",
  equalityComparer: view_1.Color.equals,
  valueConverter: function valueConverter(v) {
    return new view_1.Color(v);
  }
});
exports.tabBackgroundColorProperty.register(view_1.Style);
exports.selectedTabTextColorProperty = new view_1.CssProperty({
  name: "selectedTabTextColor",
  cssName: "selected-tab-text-color",
  equalityComparer: view_1.Color.equals,
  valueConverter: function valueConverter(v) {
    return new view_1.Color(v);
  }
});
exports.selectedTabTextColorProperty.register(view_1.Style);
exports.androidSelectedTabHighlightColorProperty = new view_1.CssProperty({
  name: "androidSelectedTabHighlightColor",
  cssName: "android-selected-tab-highlight-color",
  equalityComparer: view_1.Color.equals,
  valueConverter: function valueConverter(v) {
    return new view_1.Color(v);
  }
});
exports.androidSelectedTabHighlightColorProperty.register(view_1.Style);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/tab-view/tab-view.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var font_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/font.js");

var tab_view_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/tab-view/tab-view-common.js");

var text_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base.js");

var image_source_1 = __webpack_require__("../node_modules/tns-core-modules/image-source/image-source.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var frame_1 = __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/tab-view/tab-view-common.js"));

var ACCENT_COLOR = "colorAccent";
var PRIMARY_COLOR = "colorPrimary";
var DEFAULT_ELEVATION = 4;
var TABID = "_tabId";
var INDEX = "_index";
var PagerAdapter;

function makeFragmentName(viewId, id) {
  return "android:viewpager:" + viewId + ":" + id;
}

function getTabById(id) {
  var ref = exports.tabs.find(function (ref) {
    var tab = ref.get();
    return tab && tab._domId === id;
  });
  return ref && ref.get();
}

function initializeNativeClasses() {
  if (PagerAdapter) {
    return;
  }

  var TabFragmentImplementation = function (_super) {
    __extends(TabFragmentImplementation, _super);

    function TabFragmentImplementation() {
      var _this = _super.call(this) || this;

      return global.__native(_this);
    }

    TabFragmentImplementation.newInstance = function (tabId, index) {
      var args = new android.os.Bundle();
      args.putInt(TABID, tabId);
      args.putInt(INDEX, index);
      var fragment = new TabFragmentImplementation();
      fragment.setArguments(args);
      return fragment;
    };

    TabFragmentImplementation.prototype.onCreate = function (savedInstanceState) {
      _super.prototype.onCreate.call(this, savedInstanceState);

      var args = this.getArguments();
      this.tab = getTabById(args.getInt(TABID));
      this.index = args.getInt(INDEX);

      if (!this.tab) {
        throw new Error("Cannot find TabView");
      }
    };

    TabFragmentImplementation.prototype.onCreateView = function (inflater, container, savedInstanceState) {
      var tabItem = this.tab.items[this.index];
      return tabItem.view.nativeViewProtected;
    };

    return TabFragmentImplementation;
  }(org.nativescript.widgets.FragmentBase);

  var POSITION_UNCHANGED = -1;
  var POSITION_NONE = -2;

  var FragmentPagerAdapter = function (_super) {
    __extends(FragmentPagerAdapter, _super);

    function FragmentPagerAdapter(owner) {
      var _this = _super.call(this) || this;

      _this.owner = owner;
      return global.__native(_this);
    }

    FragmentPagerAdapter.prototype.getCount = function () {
      var items = this.items;
      return items ? items.length : 0;
    };

    FragmentPagerAdapter.prototype.getPageTitle = function (index) {
      var items = this.items;

      if (index < 0 || index >= items.length) {
        return "";
      }

      return items[index].title;
    };

    FragmentPagerAdapter.prototype.startUpdate = function (container) {
      if (container.getId() === android.view.View.NO_ID) {
        throw new Error("ViewPager with adapter " + this + " requires a view containerId");
      }
    };

    FragmentPagerAdapter.prototype.instantiateItem = function (container, position) {
      var fragmentManager = this.owner._getFragmentManager();

      if (!this.mCurTransaction) {
        this.mCurTransaction = fragmentManager.beginTransaction();
      }

      var itemId = this.getItemId(position);
      var name = makeFragmentName(container.getId(), itemId);
      var fragment = fragmentManager.findFragmentByTag(name);

      if (fragment != null) {
        this.mCurTransaction.attach(fragment);
      } else {
        fragment = TabFragmentImplementation.newInstance(this.owner._domId, position);
        this.mCurTransaction.add(container.getId(), fragment, name);
      }

      if (fragment !== this.mCurrentPrimaryItem) {
        fragment.setMenuVisibility(false);
        fragment.setUserVisibleHint(false);
      }

      var tabItems = this.owner.items;
      var tabItem = tabItems ? tabItems[position] : null;

      if (tabItem) {
        tabItem.canBeLoaded = true;
      }

      return fragment;
    };

    FragmentPagerAdapter.prototype.getItemPosition = function (object) {
      return this.items ? POSITION_UNCHANGED : POSITION_NONE;
    };

    FragmentPagerAdapter.prototype.destroyItem = function (container, position, object) {
      if (!this.mCurTransaction) {
        var fragmentManager = this.owner._getFragmentManager();

        this.mCurTransaction = fragmentManager.beginTransaction();
      }

      var fragment = object;
      this.mCurTransaction.detach(fragment);

      if (this.mCurrentPrimaryItem === fragment) {
        this.mCurrentPrimaryItem = null;
      }

      var tabItems = this.owner.items;
      var tabItem = tabItems ? tabItems[position] : null;

      if (tabItem) {
        tabItem.canBeLoaded = false;
      }
    };

    FragmentPagerAdapter.prototype.setPrimaryItem = function (container, position, object) {
      var fragment = object;

      if (fragment !== this.mCurrentPrimaryItem) {
        if (this.mCurrentPrimaryItem != null) {
          this.mCurrentPrimaryItem.setMenuVisibility(false);
          this.mCurrentPrimaryItem.setUserVisibleHint(false);
        }

        if (fragment != null) {
          fragment.setMenuVisibility(true);
          fragment.setUserVisibleHint(true);
        }

        this.mCurrentPrimaryItem = fragment;
        this.owner.selectedIndex = position;
        var tab = this.owner;
        var tabItems = tab.items;
        var newTabItem = tabItems ? tabItems[position] : null;

        if (newTabItem) {
          tab._loadUnloadTabItems(tab.selectedIndex);
        }
      }
    };

    FragmentPagerAdapter.prototype.finishUpdate = function (container) {
      this._commitCurrentTransaction();
    };

    FragmentPagerAdapter.prototype.isViewFromObject = function (view, object) {
      return object.getView() === view;
    };

    FragmentPagerAdapter.prototype.saveState = function () {
      this._commitCurrentTransaction();

      return null;
    };

    FragmentPagerAdapter.prototype.restoreState = function (state, loader) {};

    FragmentPagerAdapter.prototype.getItemId = function (position) {
      return position;
    };

    FragmentPagerAdapter.prototype._commitCurrentTransaction = function () {
      if (this.mCurTransaction != null) {
        this.mCurTransaction.commitNowAllowingStateLoss();
        this.mCurTransaction = null;
      }
    };

    return FragmentPagerAdapter;
  }(android.support.v4.view.PagerAdapter);

  PagerAdapter = FragmentPagerAdapter;
}

function createTabItemSpec(item) {
  var result = new org.nativescript.widgets.TabItemSpec();
  result.title = item.title;

  if (item.iconSource) {
    if (item.iconSource.indexOf(utils_1.RESOURCE_PREFIX) === 0) {
      result.iconId = utils_1.ad.resources.getDrawableId(item.iconSource.substr(utils_1.RESOURCE_PREFIX.length));

      if (result.iconId === 0) {
        tab_view_common_1.traceMissingIcon(item.iconSource);
      }
    } else {
      var is = image_source_1.fromFileOrResource(item.iconSource);

      if (is) {
        result.iconDrawable = new android.graphics.drawable.BitmapDrawable(is.android);
      } else {
        tab_view_common_1.traceMissingIcon(item.iconSource);
      }
    }
  }

  return result;
}

var defaultAccentColor = undefined;

function getDefaultAccentColor(context) {
  if (defaultAccentColor === undefined) {
    defaultAccentColor = utils_1.ad.resources.getPaletteColor(ACCENT_COLOR, context) || 0xFF33B5E5;
  }

  return defaultAccentColor;
}

var TabViewItem = function (_super) {
  __extends(TabViewItem, _super);

  function TabViewItem() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(TabViewItem.prototype, "_hasFragments", {
    get: function get() {
      return true;
    },
    enumerable: true,
    configurable: true
  });

  TabViewItem.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    if (this.nativeViewProtected) {
      this._defaultTransformationMethod = this.nativeViewProtected.getTransformationMethod();
    }
  };

  TabViewItem.prototype.onLoaded = function () {
    _super.prototype.onLoaded.call(this);
  };

  TabViewItem.prototype.resetNativeView = function () {
    _super.prototype.resetNativeView.call(this);

    if (this.nativeViewProtected) {
      this.nativeViewProtected.setTransformationMethod(this._defaultTransformationMethod);
    }
  };

  TabViewItem.prototype.disposeNativeView = function () {
    _super.prototype.disposeNativeView.call(this);

    this.canBeLoaded = false;
  };

  TabViewItem.prototype.createNativeView = function () {
    return this.nativeViewProtected;
  };

  TabViewItem.prototype._update = function () {
    var tv = this.nativeViewProtected;
    var tabView = this.parent;

    if (tv && tabView) {
      this.tabItemSpec = createTabItemSpec(this);
      tabView.updateAndroidItemAt(this.index, this.tabItemSpec);
    }
  };

  TabViewItem.prototype._getChildFragmentManager = function () {
    var tabView = this.parent;
    var tabFragment = null;

    var fragmentManager = tabView._getFragmentManager();

    for (var _i = 0, _a = fragmentManager.getFragments().toArray(); _i < _a.length; _i++) {
      var fragment = _a[_i];

      if (fragment.index === this.index) {
        tabFragment = fragment;
        break;
      }
    }

    if (!tabFragment) {
      if (tab_view_common_1.traceEnabled()) {
        tab_view_common_1.traceWrite("Could not get child fragment manager for tab item with index " + this.index, tab_view_common_1.traceCategory);
      }

      return tabView._getRootFragmentManager();
    }

    return tabFragment.getChildFragmentManager();
  };

  TabViewItem.prototype[tab_view_common_1.fontSizeProperty.getDefault] = function () {
    return {
      nativeSize: this.nativeViewProtected.getTextSize()
    };
  };

  TabViewItem.prototype[tab_view_common_1.fontSizeProperty.setNative] = function (value) {
    if (typeof value === "number") {
      this.nativeViewProtected.setTextSize(value);
    } else {
      this.nativeViewProtected.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, value.nativeSize);
    }
  };

  TabViewItem.prototype[tab_view_common_1.fontInternalProperty.getDefault] = function () {
    return this.nativeViewProtected.getTypeface();
  };

  TabViewItem.prototype[tab_view_common_1.fontInternalProperty.setNative] = function (value) {
    this.nativeViewProtected.setTypeface(value instanceof font_1.Font ? value.getAndroidTypeface() : value);
  };

  TabViewItem.prototype[text_base_1.textTransformProperty.getDefault] = function () {
    return "default";
  };

  TabViewItem.prototype[text_base_1.textTransformProperty.setNative] = function (value) {
    var tv = this.nativeViewProtected;

    if (value === "default") {
      tv.setTransformationMethod(this._defaultTransformationMethod);
      tv.setText(this.title);
    } else {
      var result = text_base_1.getTransformedText(this.title, value);
      tv.setText(result);
      tv.setTransformationMethod(null);
    }
  };

  return TabViewItem;
}(tab_view_common_1.TabViewItemBase);

exports.TabViewItem = TabViewItem;

function setElevation(grid, tabLayout) {
  var compat = android.support.v4.view.ViewCompat;

  if (compat.setElevation) {
    var val = DEFAULT_ELEVATION * tab_view_common_1.layout.getDisplayDensity();
    compat.setElevation(grid, val);
    compat.setElevation(tabLayout, val);
  }
}

exports.tabs = new Array();

function iterateIndexRange(index, eps, lastIndex, callback) {
  var rangeStart = Math.max(0, index - eps);
  var rangeEnd = Math.min(index + eps, lastIndex);

  for (var i = rangeStart; i <= rangeEnd; i++) {
    callback(i);
  }
}

var TabView = function (_super) {
  __extends(TabView, _super);

  function TabView() {
    var _this = _super.call(this) || this;

    _this._androidViewId = -1;
    exports.tabs.push(new WeakRef(_this));
    return _this;
  }

  Object.defineProperty(TabView.prototype, "_hasFragments", {
    get: function get() {
      return true;
    },
    enumerable: true,
    configurable: true
  });

  TabView.prototype.onItemsChanged = function (oldItems, newItems) {
    _super.prototype.onItemsChanged.call(this, oldItems, newItems);

    if (oldItems) {
      oldItems.forEach(function (item, i, arr) {
        item.index = 0;
        item.tabItemSpec = null;
        item.setNativeView(null);
      });
    }
  };

  TabView.prototype.createNativeView = function () {
    initializeNativeClasses();

    if (tab_view_common_1.traceEnabled()) {
      tab_view_common_1.traceWrite("TabView._createUI(" + this + ");", tab_view_common_1.traceCategory);
    }

    var context = this._context;
    var nativeView = new org.nativescript.widgets.GridLayout(context);
    var viewPager = new org.nativescript.widgets.TabViewPager(context);
    var tabLayout = new org.nativescript.widgets.TabLayout(context);
    var lp = new org.nativescript.widgets.CommonLayoutParams();
    var primaryColor = utils_1.ad.resources.getPaletteColor(PRIMARY_COLOR, context);
    var accentColor = getDefaultAccentColor(context);
    lp.row = 1;

    if (this.androidTabsPosition === "top") {
      nativeView.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.auto));
      nativeView.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.star));
      viewPager.setLayoutParams(lp);

      if (!this.androidSwipeEnabled) {
        viewPager.setSwipePageEnabled(false);
      }
    } else {
      nativeView.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.star));
      nativeView.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.auto));
      tabLayout.setLayoutParams(lp);
      viewPager.setSwipePageEnabled(false);
      accentColor = 0x00FFFFFF;
    }

    nativeView.addView(viewPager);
    nativeView.viewPager = viewPager;
    var adapter = new PagerAdapter(this);
    viewPager.setAdapter(adapter);
    viewPager.adapter = adapter;
    nativeView.addView(tabLayout);
    nativeView.tabLayout = tabLayout;
    setElevation(nativeView, tabLayout);

    if (accentColor) {
      tabLayout.setSelectedIndicatorColors([accentColor]);
    }

    if (primaryColor) {
      tabLayout.setBackgroundColor(primaryColor);
    }

    return nativeView;
  };

  TabView.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    if (this._androidViewId < 0) {
      this._androidViewId = android.view.View.generateViewId();
    }

    var nativeView = this.nativeViewProtected;
    this._tabLayout = nativeView.tabLayout;
    var viewPager = nativeView.viewPager;
    viewPager.setId(this._androidViewId);
    this._viewPager = viewPager;
    this._pagerAdapter = viewPager.adapter;
    this._pagerAdapter.owner = this;
  };

  TabView.prototype._loadUnloadTabItems = function (newIndex) {
    var _this = this;

    var items = this.items;
    var lastIndex = this.items.length - 1;
    var offsideItems = this.androidTabsPosition === "top" ? this.androidOffscreenTabLimit : 1;
    var toUnload = [];
    var toLoad = [];
    iterateIndexRange(newIndex, offsideItems, lastIndex, function (i) {
      return toLoad.push(i);
    });
    items.forEach(function (item, i) {
      var indexOfI = toLoad.indexOf(i);

      if (indexOfI < 0) {
        toUnload.push(i);
      }
    });
    toUnload.forEach(function (index) {
      var item = items[index];

      if (items[index]) {
        item.unloadView(item.view);
      }
    });
    var newItem = items[newIndex];
    var selectedView = newItem && newItem.view;

    if (selectedView instanceof frame_1.Frame) {
      selectedView._pushInFrameStackRecursive();
    }

    toLoad.forEach(function (index) {
      var item = items[index];

      if (_this.isLoaded && items[index]) {
        item.loadView(item.view);
      }
    });
  };

  TabView.prototype.onLoaded = function () {
    _super.prototype.onLoaded.call(this);

    this.setAdapterItems(this.items);
  };

  TabView.prototype.onUnloaded = function () {
    _super.prototype.onUnloaded.call(this);

    this.setAdapterItems(null);
  };

  TabView.prototype.disposeNativeView = function () {
    this._tabLayout.setItems(null, null);

    this._pagerAdapter.owner = null;
    this._pagerAdapter = null;
    this._tabLayout = null;
    this._viewPager = null;

    _super.prototype.disposeNativeView.call(this);
  };

  TabView.prototype._onRootViewReset = function () {
    _super.prototype._onRootViewReset.call(this);

    this.disposeCurrentFragments();
  };

  TabView.prototype.disposeCurrentFragments = function () {
    var fragmentManager = this._getFragmentManager();

    var transaction = fragmentManager.beginTransaction();

    for (var _i = 0, _a = fragmentManager.getFragments().toArray(); _i < _a.length; _i++) {
      var fragment = _a[_i];
      transaction.remove(fragment);
    }

    transaction.commitNowAllowingStateLoss();
  };

  TabView.prototype.shouldUpdateAdapter = function (items) {
    if (!this._pagerAdapter) {
      return false;
    }

    var currentPagerAdapterItems = this._pagerAdapter.items;

    if (!items && !currentPagerAdapterItems) {
      return false;
    }

    if (!items || !currentPagerAdapterItems) {
      return true;
    }

    if (items.length !== currentPagerAdapterItems.length) {
      return true;
    }

    var matchingItems = currentPagerAdapterItems.filter(function (currentItem) {
      return !!items.filter(function (item) {
        return item._domId === currentItem._domId;
      })[0];
    });

    if (matchingItems.length !== items.length) {
      return true;
    }

    return false;
  };

  TabView.prototype.setAdapterItems = function (items) {
    if (this.shouldUpdateAdapter(items)) {
      this._pagerAdapter.items = items;
      var length_1 = items ? items.length : 0;

      if (length_1 === 0) {
        this._tabLayout.setItems(null, null);

        this._pagerAdapter.notifyDataSetChanged();

        return;
      }

      var tabItems_1 = new Array();
      items.forEach(function (item, i, arr) {
        var tabItemSpec = createTabItemSpec(item);
        item.index = i;
        item.tabItemSpec = tabItemSpec;
        tabItems_1.push(tabItemSpec);
      });
      var tabLayout_1 = this._tabLayout;
      tabLayout_1.setItems(tabItems_1, this._viewPager);
      items.forEach(function (item, i, arr) {
        var tv = tabLayout_1.getTextViewForItemAt(i);
        item.setNativeView(tv);
      });

      this._pagerAdapter.notifyDataSetChanged();
    }
  };

  TabView.prototype.updateAndroidItemAt = function (index, spec) {
    this._tabLayout.updateItemAt(index, spec);
  };

  TabView.prototype[tab_view_common_1.androidOffscreenTabLimitProperty.getDefault] = function () {
    return this._viewPager.getOffscreenPageLimit();
  };

  TabView.prototype[tab_view_common_1.androidOffscreenTabLimitProperty.setNative] = function (value) {
    this._viewPager.setOffscreenPageLimit(value);
  };

  TabView.prototype[tab_view_common_1.selectedIndexProperty.setNative] = function (value) {
    if (tab_view_common_1.traceEnabled()) {
      tab_view_common_1.traceWrite("TabView this._viewPager.setCurrentItem(" + value + ", true);", tab_view_common_1.traceCategory);
    }

    this._viewPager.setCurrentItem(value, true);
  };

  TabView.prototype[tab_view_common_1.itemsProperty.getDefault] = function () {
    return null;
  };

  TabView.prototype[tab_view_common_1.itemsProperty.setNative] = function (value) {
    this.setAdapterItems(value);
    tab_view_common_1.selectedIndexProperty.coerce(this);
  };

  TabView.prototype[tab_view_common_1.tabBackgroundColorProperty.getDefault] = function () {
    return this._tabLayout.getBackground();
  };

  TabView.prototype[tab_view_common_1.tabBackgroundColorProperty.setNative] = function (value) {
    if (value instanceof tab_view_common_1.Color) {
      this._tabLayout.setBackgroundColor(value.android);
    } else {
      this._tabLayout.setBackground(tryCloneDrawable(value, this.nativeViewProtected.getResources));
    }
  };

  TabView.prototype[tab_view_common_1.tabTextFontSizeProperty.getDefault] = function () {
    return this._tabLayout.getTabTextFontSize();
  };

  TabView.prototype[tab_view_common_1.tabTextFontSizeProperty.setNative] = function (value) {
    if (typeof value === "number") {
      this._tabLayout.setTabTextFontSize(value);
    } else {
      this._tabLayout.setTabTextFontSize(value.nativeSize);
    }
  };

  TabView.prototype[tab_view_common_1.tabTextColorProperty.getDefault] = function () {
    return this._tabLayout.getTabTextColor();
  };

  TabView.prototype[tab_view_common_1.tabTextColorProperty.setNative] = function (value) {
    var color = value instanceof tab_view_common_1.Color ? value.android : value;

    this._tabLayout.setTabTextColor(color);
  };

  TabView.prototype[tab_view_common_1.selectedTabTextColorProperty.getDefault] = function () {
    return this._tabLayout.getSelectedTabTextColor();
  };

  TabView.prototype[tab_view_common_1.selectedTabTextColorProperty.setNative] = function (value) {
    var color = value instanceof tab_view_common_1.Color ? value.android : value;

    this._tabLayout.setSelectedTabTextColor(color);
  };

  TabView.prototype[tab_view_common_1.androidSelectedTabHighlightColorProperty.getDefault] = function () {
    return getDefaultAccentColor(this._context);
  };

  TabView.prototype[tab_view_common_1.androidSelectedTabHighlightColorProperty.setNative] = function (value) {
    var tabLayout = this._tabLayout;
    var color = value instanceof tab_view_common_1.Color ? value.android : value;
    tabLayout.setSelectedIndicatorColors([color]);
  };

  return TabView;
}(tab_view_common_1.TabViewBase);

exports.TabView = TabView;

function tryCloneDrawable(value, resources) {
  if (value) {
    var constantState = value.getConstantState();

    if (constantState) {
      return constantState.newDrawable(resources);
    }
  }

  return value;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/text-base/text-base-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var formatted_string_1 = __webpack_require__("../node_modules/tns-core-modules/text/formatted-string.js");

exports.FormattedString = formatted_string_1.FormattedString;
exports.Span = formatted_string_1.Span;

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var CHILD_SPAN = "Span";
var CHILD_FORMATTED_TEXT = "formattedText";
var CHILD_FORMATTED_STRING = "FormattedString";

var TextBaseCommon = function (_super) {
  __extends(TextBaseCommon, _super);

  function TextBaseCommon() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(TextBaseCommon.prototype, "nativeTextViewProtected", {
    get: function get() {
      return this.nativeViewProtected;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "fontFamily", {
    get: function get() {
      return this.style.fontFamily;
    },
    set: function set(value) {
      this.style.fontFamily = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "fontSize", {
    get: function get() {
      return this.style.fontSize;
    },
    set: function set(value) {
      this.style.fontSize = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "fontStyle", {
    get: function get() {
      return this.style.fontStyle;
    },
    set: function set(value) {
      this.style.fontStyle = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "fontWeight", {
    get: function get() {
      return this.style.fontWeight;
    },
    set: function set(value) {
      this.style.fontWeight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "letterSpacing", {
    get: function get() {
      return this.style.letterSpacing;
    },
    set: function set(value) {
      this.style.letterSpacing = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "lineHeight", {
    get: function get() {
      return this.style.lineHeight;
    },
    set: function set(value) {
      this.style.lineHeight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "textAlignment", {
    get: function get() {
      return this.style.textAlignment;
    },
    set: function set(value) {
      this.style.textAlignment = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "textDecoration", {
    get: function get() {
      return this.style.textDecoration;
    },
    set: function set(value) {
      this.style.textDecoration = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "textTransform", {
    get: function get() {
      return this.style.textTransform;
    },
    set: function set(value) {
      this.style.textTransform = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "whiteSpace", {
    get: function get() {
      return this.style.whiteSpace;
    },
    set: function set(value) {
      this.style.whiteSpace = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "padding", {
    get: function get() {
      return this.style.padding;
    },
    set: function set(value) {
      this.style.padding = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "paddingTop", {
    get: function get() {
      return this.style.paddingTop;
    },
    set: function set(value) {
      this.style.paddingTop = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "paddingRight", {
    get: function get() {
      return this.style.paddingRight;
    },
    set: function set(value) {
      this.style.paddingRight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "paddingBottom", {
    get: function get() {
      return this.style.paddingBottom;
    },
    set: function set(value) {
      this.style.paddingBottom = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "paddingLeft", {
    get: function get() {
      return this.style.paddingLeft;
    },
    set: function set(value) {
      this.style.paddingLeft = value;
    },
    enumerable: true,
    configurable: true
  });

  TextBaseCommon.prototype._onFormattedTextContentsChanged = function (data) {
    if (this.nativeViewProtected) {
      this[exports.formattedTextProperty.setNative](data.value);
    }
  };

  TextBaseCommon.prototype._addChildFromBuilder = function (name, value) {
    if (name === CHILD_SPAN) {
      if (!this.formattedText) {
        var formattedText = new formatted_string_1.FormattedString();
        formattedText.spans.push(value);
        this.formattedText = formattedText;
      } else {
        this.formattedText.spans.push(value);
      }
    } else if (name === CHILD_FORMATTED_TEXT || name === CHILD_FORMATTED_STRING) {
      this.formattedText = value;
    }
  };

  TextBaseCommon.prototype._requestLayoutOnTextChanged = function () {
    this.requestLayout();
  };

  TextBaseCommon.prototype.eachChild = function (callback) {
    var text = this.formattedText;

    if (text) {
      callback(text);
    }
  };

  TextBaseCommon.prototype._setNativeText = function (reset) {
    if (reset === void 0) {
      reset = false;
    }
  };

  return TextBaseCommon;
}(view_1.View);

exports.TextBaseCommon = TextBaseCommon;
TextBaseCommon.prototype._isSingleLine = false;

function isBold(fontWeight) {
  return fontWeight === "bold" || fontWeight === "700" || fontWeight === "800" || fontWeight === "900";
}

exports.isBold = isBold;
exports.textProperty = new view_1.Property({
  name: "text",
  defaultValue: "",
  affectsLayout: view_1.isAndroid
});
exports.textProperty.register(TextBaseCommon);
exports.formattedTextProperty = new view_1.Property({
  name: "formattedText",
  affectsLayout: true,
  valueChanged: onFormattedTextPropertyChanged
});
exports.formattedTextProperty.register(TextBaseCommon);

function onFormattedTextPropertyChanged(textBase, oldValue, newValue) {
  if (oldValue) {
    oldValue.off(view_1.Observable.propertyChangeEvent, textBase._onFormattedTextContentsChanged, textBase);

    textBase._removeView(oldValue);
  }

  if (newValue) {
    var oldParent = newValue.parent;

    if (oldParent) {
      oldParent._removeView(newValue);
    }

    textBase._addView(newValue);

    newValue.on(view_1.Observable.propertyChangeEvent, textBase._onFormattedTextContentsChanged, textBase);
  }
}

var textAlignmentConverter = view_1.makeParser(view_1.makeValidator("initial", "left", "center", "right"));
exports.textAlignmentProperty = new view_1.InheritedCssProperty({
  name: "textAlignment",
  cssName: "text-align",
  defaultValue: "initial",
  valueConverter: textAlignmentConverter
});
exports.textAlignmentProperty.register(view_1.Style);
var textTransformConverter = view_1.makeParser(view_1.makeValidator("initial", "none", "capitalize", "uppercase", "lowercase"));
exports.textTransformProperty = new view_1.CssProperty({
  name: "textTransform",
  cssName: "text-transform",
  defaultValue: "initial",
  valueConverter: textTransformConverter
});
exports.textTransformProperty.register(view_1.Style);
var whiteSpaceConverter = view_1.makeParser(view_1.makeValidator("initial", "normal", "nowrap"));
exports.whiteSpaceProperty = new view_1.CssProperty({
  name: "whiteSpace",
  cssName: "white-space",
  defaultValue: "initial",
  affectsLayout: view_1.isIOS,
  valueConverter: whiteSpaceConverter
});
exports.whiteSpaceProperty.register(view_1.Style);
var textDecorationConverter = view_1.makeParser(view_1.makeValidator("none", "underline", "line-through", "underline line-through"));
exports.textDecorationProperty = new view_1.CssProperty({
  name: "textDecoration",
  cssName: "text-decoration",
  defaultValue: "none",
  valueConverter: textDecorationConverter
});
exports.textDecorationProperty.register(view_1.Style);
exports.letterSpacingProperty = new view_1.CssProperty({
  name: "letterSpacing",
  cssName: "letter-spacing",
  defaultValue: 0,
  affectsLayout: view_1.isIOS,
  valueConverter: function valueConverter(v) {
    return parseFloat(v);
  }
});
exports.letterSpacingProperty.register(view_1.Style);
exports.lineHeightProperty = new view_1.CssProperty({
  name: "lineHeight",
  cssName: "line-height",
  affectsLayout: view_1.isIOS,
  valueConverter: function valueConverter(v) {
    return parseFloat(v);
  }
});
exports.lineHeightProperty.register(view_1.Style);
exports.resetSymbol = Symbol("textPropertyDefault");

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/text-base/text-base.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var font_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/font.js");

var style_properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js");

var text_base_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base-common.js"));

var TextTransformation;

function initializeTextTransformation() {
  if (TextTransformation) {
    return;
  }

  var TextTransformationImpl = function (_super) {
    __extends(TextTransformationImpl, _super);

    function TextTransformationImpl(textBase) {
      var _this = _super.call(this) || this;

      _this.textBase = textBase;
      return global.__native(_this);
    }

    TextTransformationImpl.prototype.getTransformation = function (charSeq, view) {
      var formattedText = this.textBase.formattedText;

      if (formattedText) {
        return createSpannableStringBuilder(formattedText);
      } else {
        return getTransformedText(this.textBase.text, this.textBase.textTransform);
      }
    };

    TextTransformationImpl.prototype.onFocusChanged = function (view, sourceText, focused, direction, previouslyFocusedRect) {};

    TextTransformationImpl = __decorate([Interfaces([android.text.method.TransformationMethod])], TextTransformationImpl);
    return TextTransformationImpl;
  }(java.lang.Object);

  TextTransformation = TextTransformationImpl;
}

var TextBase = function (_super) {
  __extends(TextBase, _super);

  function TextBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TextBase.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    initializeTextTransformation();
    var nativeView = this.nativeTextViewProtected;
    this._defaultTransformationMethod = nativeView.getTransformationMethod();
    this._minHeight = nativeView.getMinHeight();
    this._maxHeight = nativeView.getMaxHeight();
    this._minLines = nativeView.getMinLines();
    this._maxLines = nativeView.getMaxLines();
  };

  TextBase.prototype.resetNativeView = function () {
    _super.prototype.resetNativeView.call(this);

    var nativeView = this.nativeTextViewProtected;
    nativeView.setSingleLine(this._isSingleLine);
    nativeView.setTransformationMethod(this._defaultTransformationMethod);
    this._defaultTransformationMethod = null;

    if (this._paintFlags !== undefined) {
      nativeView.setPaintFlags(this._paintFlags);
      this._paintFlags = undefined;
    }

    if (this._minLines !== -1) {
      nativeView.setMinLines(this._minLines);
    } else {
      nativeView.setMinHeight(this._minHeight);
    }

    this._minHeight = this._minLines = undefined;

    if (this._maxLines !== -1) {
      nativeView.setMaxLines(this._maxLines);
    } else {
      nativeView.setMaxHeight(this._maxHeight);
    }

    this._maxHeight = this._maxLines = undefined;
  };

  TextBase.prototype[text_base_common_1.textProperty.getDefault] = function () {
    return text_base_common_1.resetSymbol;
  };

  TextBase.prototype[text_base_common_1.textProperty.setNative] = function (value) {
    var reset = value === text_base_common_1.resetSymbol;

    if (!reset && this.formattedText) {
      return;
    }

    this._setNativeText(reset);
  };

  TextBase.prototype[text_base_common_1.formattedTextProperty.setNative] = function (value) {
    var nativeView = this.nativeTextViewProtected;

    if (!value) {
      if (nativeView instanceof android.widget.Button && nativeView.getTransformationMethod() instanceof TextTransformation) {
        nativeView.setTransformationMethod(this._defaultTransformationMethod);
      }
    }

    if (this.secure) {
      return;
    }

    var spannableStringBuilder = createSpannableStringBuilder(value);
    nativeView.setText(spannableStringBuilder);
    text_base_common_1.textProperty.nativeValueChange(this, value === null || value === undefined ? "" : value.toString());

    if (spannableStringBuilder && nativeView instanceof android.widget.Button && !(nativeView.getTransformationMethod() instanceof TextTransformation)) {
      nativeView.setTransformationMethod(new TextTransformation(this));
    }
  };

  TextBase.prototype[text_base_common_1.textTransformProperty.setNative] = function (value) {
    if (value === "initial") {
      this.nativeTextViewProtected.setTransformationMethod(this._defaultTransformationMethod);
      return;
    }

    if (this.secure) {
      return;
    }

    this.nativeTextViewProtected.setTransformationMethod(new TextTransformation(this));
  };

  TextBase.prototype[text_base_common_1.textAlignmentProperty.getDefault] = function () {
    return "initial";
  };

  TextBase.prototype[text_base_common_1.textAlignmentProperty.setNative] = function (value) {
    var verticalGravity = this.nativeTextViewProtected.getGravity() & android.view.Gravity.VERTICAL_GRAVITY_MASK;

    switch (value) {
      case "initial":
      case "left":
        this.nativeTextViewProtected.setGravity(android.view.Gravity.START | verticalGravity);
        break;

      case "center":
        this.nativeTextViewProtected.setGravity(android.view.Gravity.CENTER_HORIZONTAL | verticalGravity);
        break;

      case "right":
        this.nativeTextViewProtected.setGravity(android.view.Gravity.END | verticalGravity);
        break;
    }
  };

  TextBase.prototype[text_base_common_1.whiteSpaceProperty.setNative] = function (value) {
    var nativeView = this.nativeTextViewProtected;

    switch (value) {
      case "initial":
      case "normal":
        nativeView.setSingleLine(false);
        nativeView.setEllipsize(null);
        break;

      case "nowrap":
        nativeView.setSingleLine(true);
        nativeView.setEllipsize(android.text.TextUtils.TruncateAt.END);
        break;
    }
  };

  TextBase.prototype[text_base_common_1.colorProperty.getDefault] = function () {
    return this.nativeTextViewProtected.getTextColors();
  };

  TextBase.prototype[text_base_common_1.colorProperty.setNative] = function (value) {
    if (!this.formattedText || !(value instanceof text_base_common_1.Color)) {
      if (value instanceof text_base_common_1.Color) {
        this.nativeTextViewProtected.setTextColor(value.android);
      } else {
        this.nativeTextViewProtected.setTextColor(value);
      }
    }
  };

  TextBase.prototype[text_base_common_1.fontSizeProperty.getDefault] = function () {
    return {
      nativeSize: this.nativeTextViewProtected.getTextSize()
    };
  };

  TextBase.prototype[text_base_common_1.fontSizeProperty.setNative] = function (value) {
    if (!this.formattedText || typeof value !== "number") {
      if (typeof value === "number") {
        this.nativeTextViewProtected.setTextSize(value);
      } else {
        this.nativeTextViewProtected.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, value.nativeSize);
      }
    }
  };

  TextBase.prototype[text_base_common_1.lineHeightProperty.getDefault] = function () {
    return this.nativeTextViewProtected.getLineSpacingExtra() / text_base_common_1.layout.getDisplayDensity();
  };

  TextBase.prototype[text_base_common_1.lineHeightProperty.setNative] = function (value) {
    this.nativeTextViewProtected.setLineSpacing(value * text_base_common_1.layout.getDisplayDensity(), 1);
  };

  TextBase.prototype[text_base_common_1.fontInternalProperty.getDefault] = function () {
    return this.nativeTextViewProtected.getTypeface();
  };

  TextBase.prototype[text_base_common_1.fontInternalProperty.setNative] = function (value) {
    if (!this.formattedText || !(value instanceof font_1.Font)) {
      this.nativeTextViewProtected.setTypeface(value instanceof font_1.Font ? value.getAndroidTypeface() : value);
    }
  };

  TextBase.prototype[text_base_common_1.textDecorationProperty.getDefault] = function (value) {
    return this._paintFlags = this.nativeTextViewProtected.getPaintFlags();
  };

  TextBase.prototype[text_base_common_1.textDecorationProperty.setNative] = function (value) {
    switch (value) {
      case "none":
        this.nativeTextViewProtected.setPaintFlags(0);
        break;

      case "underline":
        this.nativeTextViewProtected.setPaintFlags(android.graphics.Paint.UNDERLINE_TEXT_FLAG);
        break;

      case "line-through":
        this.nativeTextViewProtected.setPaintFlags(android.graphics.Paint.STRIKE_THRU_TEXT_FLAG);
        break;

      case "underline line-through":
        this.nativeTextViewProtected.setPaintFlags(android.graphics.Paint.UNDERLINE_TEXT_FLAG | android.graphics.Paint.STRIKE_THRU_TEXT_FLAG);
        break;

      default:
        this.nativeTextViewProtected.setPaintFlags(value);
        break;
    }
  };

  TextBase.prototype[text_base_common_1.letterSpacingProperty.getDefault] = function () {
    return org.nativescript.widgets.ViewHelper.getLetterspacing(this.nativeTextViewProtected);
  };

  TextBase.prototype[text_base_common_1.letterSpacingProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setLetterspacing(this.nativeTextViewProtected, value);
  };

  TextBase.prototype[text_base_common_1.paddingTopProperty.getDefault] = function () {
    return {
      value: this._defaultPaddingTop,
      unit: "px"
    };
  };

  TextBase.prototype[text_base_common_1.paddingTopProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setPaddingTop(this.nativeTextViewProtected, text_base_common_1.Length.toDevicePixels(value, 0) + text_base_common_1.Length.toDevicePixels(this.style.borderTopWidth, 0));
  };

  TextBase.prototype[text_base_common_1.paddingRightProperty.getDefault] = function () {
    return {
      value: this._defaultPaddingRight,
      unit: "px"
    };
  };

  TextBase.prototype[text_base_common_1.paddingRightProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setPaddingRight(this.nativeTextViewProtected, text_base_common_1.Length.toDevicePixels(value, 0) + text_base_common_1.Length.toDevicePixels(this.style.borderRightWidth, 0));
  };

  TextBase.prototype[text_base_common_1.paddingBottomProperty.getDefault] = function () {
    return {
      value: this._defaultPaddingBottom,
      unit: "px"
    };
  };

  TextBase.prototype[text_base_common_1.paddingBottomProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setPaddingBottom(this.nativeTextViewProtected, text_base_common_1.Length.toDevicePixels(value, 0) + text_base_common_1.Length.toDevicePixels(this.style.borderBottomWidth, 0));
  };

  TextBase.prototype[text_base_common_1.paddingLeftProperty.getDefault] = function () {
    return {
      value: this._defaultPaddingLeft,
      unit: "px"
    };
  };

  TextBase.prototype[text_base_common_1.paddingLeftProperty.setNative] = function (value) {
    org.nativescript.widgets.ViewHelper.setPaddingLeft(this.nativeTextViewProtected, text_base_common_1.Length.toDevicePixels(value, 0) + text_base_common_1.Length.toDevicePixels(this.style.borderLeftWidth, 0));
  };

  TextBase.prototype._setNativeText = function (reset) {
    if (reset === void 0) {
      reset = false;
    }

    if (reset) {
      this.nativeTextViewProtected.setText(null);
      return;
    }

    var transformedText;

    if (this.formattedText) {
      transformedText = createSpannableStringBuilder(this.formattedText);
    } else {
      var text = this.text;
      var stringValue = text === null || text === undefined ? "" : text.toString();
      transformedText = getTransformedText(stringValue, this.textTransform);
    }

    this.nativeTextViewProtected.setText(transformedText);
  };

  return TextBase;
}(text_base_common_1.TextBaseCommon);

exports.TextBase = TextBase;

function getCapitalizedString(str) {
  var words = str.split(" ");
  var newWords = [];

  for (var i = 0, length_1 = words.length; i < length_1; i++) {
    var word = words[i].toLowerCase();
    newWords.push(word.substr(0, 1).toUpperCase() + word.substring(1));
  }

  return newWords.join(" ");
}

function getTransformedText(text, textTransform) {
  switch (textTransform) {
    case "uppercase":
      return text.toUpperCase();

    case "lowercase":
      return text.toLowerCase();

    case "capitalize":
      return getCapitalizedString(text);

    case "none":
    default:
      return text;
  }
}

exports.getTransformedText = getTransformedText;

function createSpannableStringBuilder(formattedString) {
  if (!formattedString) {
    return null;
  }

  var ssb = new android.text.SpannableStringBuilder();

  for (var i = 0, spanStart = 0, spanLength = 0, length_2 = formattedString.spans.length; i < length_2; i++) {
    var span = formattedString.spans.getItem(i);
    var text = span.text;
    var textTransform = formattedString.parent.textTransform;
    var spanText = text === null || text === undefined ? "" : text.toString();

    if (textTransform && textTransform !== "none") {
      spanText = getTransformedText(spanText, textTransform);
    }

    spanLength = spanText.length;

    if (spanLength > 0) {
      ssb.insert(spanStart, spanText);
      setSpanModifiers(ssb, span, spanStart, spanStart + spanLength);
      spanStart += spanLength;
    }
  }

  return ssb;
}

function setSpanModifiers(ssb, span, start, end) {
  var spanStyle = span.style;
  var bold = text_base_common_1.isBold(spanStyle.fontWeight);
  var italic = spanStyle.fontStyle === "italic";

  if (bold && italic) {
    ssb.setSpan(new android.text.style.StyleSpan(android.graphics.Typeface.BOLD_ITALIC), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  } else if (bold) {
    ssb.setSpan(new android.text.style.StyleSpan(android.graphics.Typeface.BOLD), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  } else if (italic) {
    ssb.setSpan(new android.text.style.StyleSpan(android.graphics.Typeface.ITALIC), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }

  var fontFamily = span.fontFamily;

  if (fontFamily) {
    var font = new font_1.Font(fontFamily, 0, italic ? "italic" : "normal", bold ? "bold" : "normal");
    var typeface = font.getAndroidTypeface() || android.graphics.Typeface.create(fontFamily, 0);
    var typefaceSpan = new org.nativescript.widgets.CustomTypefaceSpan(fontFamily, typeface);
    ssb.setSpan(typefaceSpan, start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }

  var realFontSize = span.fontSize;

  if (realFontSize) {
    ssb.setSpan(new android.text.style.AbsoluteSizeSpan(realFontSize * text_base_common_1.layout.getDisplayDensity()), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }

  var color = span.color;

  if (color) {
    ssb.setSpan(new android.text.style.ForegroundColorSpan(color.android), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }

  var backgroundColor;

  if (style_properties_1.backgroundColorProperty.isSet(spanStyle)) {
    backgroundColor = spanStyle.backgroundColor;
  } else if (style_properties_1.backgroundColorProperty.isSet(span.parent.style)) {
    backgroundColor = span.parent.style.backgroundColor;
  } else if (style_properties_1.backgroundColorProperty.isSet(span.parent.parent.style)) {
    backgroundColor = span.parent.parent.style.backgroundColor;
  }

  if (backgroundColor) {
    ssb.setSpan(new android.text.style.BackgroundColorSpan(backgroundColor.android), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }

  var valueSource;

  if (text_base_common_1.textDecorationProperty.isSet(spanStyle)) {
    valueSource = spanStyle;
  } else if (text_base_common_1.textDecorationProperty.isSet(span.parent.style)) {
    valueSource = span.parent.style;
  } else if (text_base_common_1.textDecorationProperty.isSet(span.parent.parent.style)) {
    valueSource = span.parent.parent.style;
  }

  if (valueSource) {
    var textDecorations = valueSource.textDecoration;
    var underline_1 = textDecorations.indexOf("underline") !== -1;

    if (underline_1) {
      ssb.setSpan(new android.text.style.UnderlineSpan(), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    }

    var strikethrough = textDecorations.indexOf("line-through") !== -1;

    if (strikethrough) {
      ssb.setSpan(new android.text.style.StrikethroughSpan(), start, end, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
  }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/text-field/text-field-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var editable_text_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base.js"));

var TextFieldBase = function (_super) {
  __extends(TextFieldBase, _super);

  function TextFieldBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TextFieldBase.returnPressEvent = "returnPress";
  TextFieldBase = __decorate([editable_text_base_1.CSSType("TextField")], TextFieldBase);
  return TextFieldBase;
}(editable_text_base_1.EditableTextBase);

exports.TextFieldBase = TextFieldBase;
TextFieldBase.prototype.recycleNativeView = "auto";
exports.secureProperty = new editable_text_base_1.Property({
  name: "secure",
  defaultValue: false,
  valueConverter: editable_text_base_1.booleanConverter
});
exports.secureProperty.register(TextFieldBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/text-field/text-field.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var text_field_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/text-field/text-field-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/text-field/text-field-common.js"));

var TextField = function (_super) {
  __extends(TextField, _super);

  function TextField() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TextField.prototype._configureEditText = function (editText) {
    editText.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
    editText.setLines(1);
    editText.setMaxLines(1);
    editText.setHorizontallyScrolling(true);
  };

  TextField.prototype._onReturnPress = function () {
    this.notify({
      eventName: TextField.returnPressEvent,
      object: this
    });
  };

  TextField.prototype[text_field_common_1.secureProperty.setNative] = function () {
    this.setSecureAndKeyboardType();
  };

  TextField.prototype[text_field_common_1.keyboardTypeProperty.setNative] = function () {
    this.setSecureAndKeyboardType();
  };

  TextField.prototype.setSecureAndKeyboardType = function () {
    var inputType;

    if (this.secure) {
      if (this.keyboardType === "number") {
        inputType = android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_VARIATION_PASSWORD;
      } else {
        inputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD;
      }
    } else {
      inputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL;

      if (this.autocorrect) {
        inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE;
        inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
        inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
      }

      switch (this.autocapitalizationType) {
        case "words":
          inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS;
          break;

        case "sentences":
          inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
          break;

        case "allcharacters":
          inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS;
          break;

        default:
          break;
      }

      switch (this.keyboardType) {
        case "datetime":
          inputType = android.text.InputType.TYPE_CLASS_DATETIME | android.text.InputType.TYPE_DATETIME_VARIATION_NORMAL;
          break;

        case "phone":
          inputType = android.text.InputType.TYPE_CLASS_PHONE;
          break;

        case "number":
          inputType = android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_VARIATION_NORMAL | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED | android.text.InputType.TYPE_NUMBER_FLAG_DECIMAL;
          break;

        case "url":
          inputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_URI;
          break;

        case "email":
          inputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS;
          break;

        default:
          break;
      }
    }

    this._setInputType(inputType);
  };

  TextField.prototype[text_field_common_1.whiteSpaceProperty.getDefault] = function () {
    return "nowrap";
  };

  TextField.prototype[text_field_common_1.whiteSpaceProperty.setNative] = function (value) {};

  return TextField;
}(text_field_common_1.TextFieldBase);

exports.TextField = TextField;
TextField.prototype._isSingleLine = true;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/text-view/text-view.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var editable_text_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base.js"));

var TextView = function (_super) {
  __extends(TextView, _super);

  function TextView() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TextView.prototype._configureEditText = function (editText) {
    editText.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | android.text.InputType.TYPE_TEXT_FLAG_MULTI_LINE | android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
    editText.setGravity(android.view.Gravity.TOP | android.view.Gravity.START);
  };

  TextView.prototype.resetNativeView = function () {
    _super.prototype.resetNativeView.call(this);

    this.nativeTextViewProtected.setGravity(android.view.Gravity.TOP | android.view.Gravity.START);
  };

  TextView = __decorate([editable_text_base_1.CSSType("TextView")], TextView);
  return TextView;
}(editable_text_base_1.EditableTextBase);

exports.TextView = TextView;
TextView.prototype.recycleNativeView = "auto";

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/time-picker/time-picker-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var dateComparer = function dateComparer(x, y) {
  return x <= y && x >= y;
};

function getValidTime(picker, hour, minute) {
  if (picker.minuteInterval > 1) {
    var minuteFloor = minute - minute % picker.minuteInterval;
    minute = minuteFloor + (minute === minuteFloor + 1 ? picker.minuteInterval : 0);

    if (minute === 60) {
      hour++;
      minute = 0;
    }
  }

  var time = {
    hour: hour,
    minute: minute
  };

  if (!isLessThanMaxTime(picker, hour, minute)) {
    time = {
      hour: picker.maxHour,
      minute: picker.maxMinute
    };
  }

  if (!isGreaterThanMinTime(picker, hour, minute)) {
    time = {
      hour: picker.minHour,
      minute: picker.minMinute
    };
  }

  return time;
}

exports.getValidTime = getValidTime;

function isValidTime(picker) {
  return isGreaterThanMinTime(picker) && isLessThanMaxTime(picker);
}

function isHourValid(value) {
  return typeof value === "number" && value >= 0 && value <= 23;
}

function isMinuteValid(value) {
  return typeof value === "number" && value >= 0 && value <= 59;
}

function isMinuteIntervalValid(value) {
  return typeof value === "number" && value >= 1 && value <= 30 && 60 % value === 0;
}

function getMinutes(hour) {
  return hour * 60;
}

function isDefined(value) {
  return value !== undefined;
}

exports.isDefined = isDefined;

function isGreaterThanMinTime(picker, hour, minute) {
  if (picker.minHour === undefined || picker.minMinute === undefined) {
    return true;
  }

  return getMinutes(hour !== undefined ? hour : picker.hour) + (minute !== undefined ? minute : picker.minute) >= getMinutes(picker.minHour) + picker.minMinute;
}

function isLessThanMaxTime(picker, hour, minute) {
  if (!isDefined(picker.maxHour) || !isDefined(picker.maxMinute)) {
    return true;
  }

  return getMinutes(isDefined(hour) ? hour : picker.hour) + (isDefined(minute) ? minute : picker.minute) <= getMinutes(picker.maxHour) + picker.maxMinute;
}

function toString(value) {
  if (value instanceof Date) {
    return value + "";
  }

  return value < 10 ? "0" + value : "" + value;
}

function getMinMaxTimeErrorMessage(picker) {
  return "Min time: (" + toString(picker.minHour) + ":" + toString(picker.minMinute) + "), max time: (" + toString(picker.maxHour) + ":" + toString(picker.maxMinute) + ")";
}

function getErrorMessage(picker, propertyName, newValue) {
  return propertyName + " property value (" + toString(newValue) + ":" + toString(picker.minute) + ") is not valid. " + getMinMaxTimeErrorMessage(picker) + ".";
}

var TimePickerBase = function (_super) {
  __extends(TimePickerBase, _super);

  function TimePickerBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TimePickerBase = __decorate([view_1.CSSType("TimePicker")], TimePickerBase);
  return TimePickerBase;
}(view_1.View);

exports.TimePickerBase = TimePickerBase;
TimePickerBase.prototype.recycleNativeView = "auto";
exports.minHourProperty = new view_1.Property({
  name: "minHour",
  defaultValue: 0,
  valueChanged: function valueChanged(picker, oldValue, newValue) {
    if (!isHourValid(newValue) || !isValidTime(picker)) {
      throw new Error(getErrorMessage(picker, "minHour", newValue));
    }
  },
  valueConverter: function valueConverter(v) {
    return parseInt(v);
  }
});
exports.minHourProperty.register(TimePickerBase);
exports.maxHourProperty = new view_1.Property({
  name: "maxHour",
  defaultValue: 23,
  valueChanged: function valueChanged(picker, oldValue, newValue) {
    if (!isHourValid(newValue) || !isValidTime(picker)) {
      throw new Error(getErrorMessage(picker, "maxHour", newValue));
    }
  },
  valueConverter: function valueConverter(v) {
    return parseInt(v);
  }
});
exports.maxHourProperty.register(TimePickerBase);
exports.minMinuteProperty = new view_1.Property({
  name: "minMinute",
  defaultValue: 0,
  valueChanged: function valueChanged(picker, oldValue, newValue) {
    if (!isMinuteValid(newValue) || !isValidTime(picker)) {
      throw new Error(getErrorMessage(picker, "minMinute", newValue));
    }
  },
  valueConverter: function valueConverter(v) {
    return parseInt(v);
  }
});
exports.minMinuteProperty.register(TimePickerBase);
exports.maxMinuteProperty = new view_1.Property({
  name: "maxMinute",
  defaultValue: 59,
  valueChanged: function valueChanged(picker, oldValue, newValue) {
    if (!isMinuteValid(newValue) || !isValidTime(picker)) {
      throw new Error(getErrorMessage(picker, "maxMinute", newValue));
    }
  },
  valueConverter: function valueConverter(v) {
    return parseInt(v);
  }
});
exports.maxMinuteProperty.register(TimePickerBase);
exports.minuteIntervalProperty = new view_1.Property({
  name: "minuteInterval",
  defaultValue: 1,
  valueChanged: function valueChanged(picker, oldValue, newValue) {
    if (!isMinuteIntervalValid(newValue)) {
      throw new Error(getErrorMessage(picker, "minuteInterval", newValue));
    }
  },
  valueConverter: function valueConverter(v) {
    return parseInt(v);
  }
});
exports.minuteIntervalProperty.register(TimePickerBase);
exports.minuteProperty = new view_1.Property({
  name: "minute",
  defaultValue: 0,
  valueChanged: function valueChanged(picker, oldValue, newValue) {
    if (!isMinuteValid(newValue) || !isValidTime(picker)) {
      throw new Error(getErrorMessage(picker, "minute", newValue));
    }

    picker.time = new Date(0, 0, 0, picker.hour, picker.minute);
  },
  valueConverter: function valueConverter(v) {
    return parseInt(v);
  }
});
exports.minuteProperty.register(TimePickerBase);
exports.hourProperty = new view_1.Property({
  name: "hour",
  defaultValue: 0,
  valueChanged: function valueChanged(picker, oldValue, newValue) {
    if (!isHourValid(newValue) || !isValidTime(picker)) {
      throw new Error(getErrorMessage(picker, "Hour", newValue));
    }

    picker.time = new Date(0, 0, 0, picker.hour, picker.minute);
  },
  valueConverter: function valueConverter(v) {
    return parseInt(v);
  }
});
exports.hourProperty.register(TimePickerBase);
exports.timeProperty = new view_1.Property({
  name: "time",
  defaultValue: new Date(),
  equalityComparer: dateComparer,
  valueChanged: function valueChanged(picker, oldValue, newValue) {
    if (!isValidTime(picker)) {
      throw new Error(getErrorMessage(picker, "time", newValue));
    }

    picker.hour = newValue.getHours();
    picker.minute = newValue.getMinutes();
  }
});
exports.timeProperty.register(TimePickerBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/time-picker/time-picker.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var time_picker_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/time-picker/time-picker-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/time-picker/time-picker-common.js"));

var TimeChangedListener;

function initializeTimeChangedListener() {
  if (TimeChangedListener) {
    return;
  }

  apiLevel = android.os.Build.VERSION.SDK_INT;

  var TimeChangedListenerImpl = function (_super) {
    __extends(TimeChangedListenerImpl, _super);

    function TimeChangedListenerImpl(owner) {
      var _this = _super.call(this) || this;

      _this.owner = owner;
      return global.__native(_this);
    }

    TimeChangedListenerImpl.prototype.onTimeChanged = function (picker, hour, minute) {
      var timePicker = this.owner;

      if (timePicker.updatingNativeValue) {
        return;
      }

      var validTime = time_picker_common_1.getValidTime(timePicker, hour, minute);
      time_picker_common_1.timeProperty.nativeValueChange(timePicker, new Date(0, 0, 0, validTime.hour, validTime.minute));
    };

    TimeChangedListenerImpl = __decorate([Interfaces([android.widget.TimePicker.OnTimeChangedListener])], TimeChangedListenerImpl);
    return TimeChangedListenerImpl;
  }(java.lang.Object);

  TimeChangedListener = TimeChangedListenerImpl;
}

var apiLevel;

var TimePicker = function (_super) {
  __extends(TimePicker, _super);

  function TimePicker() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TimePicker.prototype.createNativeView = function () {
    return new android.widget.TimePicker(this._context);
  };

  TimePicker.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    var nativeView = this.nativeViewProtected;
    initializeTimeChangedListener();
    var listener = new TimeChangedListener(this);
    nativeView.setOnTimeChangedListener(listener);
    nativeView.listener = listener;
    var calendar = nativeView.calendar = java.util.Calendar.getInstance();
    var hour = time_picker_common_1.hourProperty.isSet(this) ? this.hour : calendar.get(java.util.Calendar.HOUR_OF_DAY);
    var minute = time_picker_common_1.minuteProperty.isSet(this) ? this.minute : calendar.get(java.util.Calendar.MINUTE);
    var validTime = time_picker_common_1.getValidTime(this, hour, minute);

    if (!time_picker_common_1.timeProperty.isSet(this)) {
      this.time = new Date(0, 0, 0, validTime.hour, validTime.minute);
    }
  };

  TimePicker.prototype[time_picker_common_1.minuteProperty.setNative] = function (value) {
    this.updatingNativeValue = true;

    try {
      if (apiLevel >= 23) {
        this.nativeViewProtected.setMinute(value);
      } else {
        this.nativeViewProtected.setCurrentMinute(new java.lang.Integer(value));
      }
    } finally {
      this.updatingNativeValue = false;
    }
  };

  TimePicker.prototype[time_picker_common_1.hourProperty.setNative] = function (value) {
    this.updatingNativeValue = true;

    try {
      if (apiLevel >= 23) {
        this.nativeViewProtected.setHour(value);
      } else {
        this.nativeViewProtected.setCurrentHour(new java.lang.Integer(value));
      }
    } finally {
      this.updatingNativeValue = false;
    }
  };

  return TimePicker;
}(time_picker_common_1.TimePickerBase);

exports.TimePicker = TimePicker;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/transition/fade-transition.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var transition_1 = __webpack_require__("../node_modules/tns-core-modules/ui/transition/transition.js");

var FadeTransition = function (_super) {
  __extends(FadeTransition, _super);

  function FadeTransition() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  FadeTransition.prototype.createAndroidAnimator = function (transitionType) {
    var alphaValues = Array.create("float", 2);

    switch (transitionType) {
      case transition_1.AndroidTransitionType.enter:
      case transition_1.AndroidTransitionType.popEnter:
        alphaValues[0] = 0;
        alphaValues[1] = 1;
        break;

      case transition_1.AndroidTransitionType.exit:
      case transition_1.AndroidTransitionType.popExit:
        alphaValues[0] = 1;
        alphaValues[1] = 0;
        break;
    }

    var animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", alphaValues);
    var duration = this.getDuration();

    if (duration !== undefined) {
      animator.setDuration(duration);
    }

    animator.setInterpolator(this.getCurve());
    return animator;
  };

  return FadeTransition;
}(transition_1.Transition);

exports.FadeTransition = FadeTransition;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/transition/flip-transition.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var transition_1 = __webpack_require__("../node_modules/tns-core-modules/ui/transition/transition.js");

var FlipTransition = function (_super) {
  __extends(FlipTransition, _super);

  function FlipTransition(direction, duration, curve) {
    var _this = _super.call(this, duration, curve) || this;

    _this._direction = direction;
    return _this;
  }

  FlipTransition.prototype.createAndroidAnimator = function (transitionType) {
    var objectAnimators;
    var values;
    var animator;
    var animatorSet = new android.animation.AnimatorSet();
    var fullDuration = this.getDuration() || 300;
    var interpolator = this.getCurve();
    var rotationY = this._direction === "right" ? 180 : -180;

    switch (transitionType) {
      case transition_1.AndroidTransitionType.enter:
        objectAnimators = Array.create(android.animation.Animator, 3);
        values = Array.create("float", 2);
        values[0] = 1.0;
        values[1] = 0.0;
        animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
        animator.setDuration(0);
        objectAnimators[0] = animator;
        values = Array.create("float", 2);
        values[0] = rotationY;
        values[1] = 0.0;
        animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
        animator.setInterpolator(interpolator);
        animator.setDuration(fullDuration);
        objectAnimators[1] = animator;
        values = Array.create("float", 2);
        values[0] = 0.0;
        values[1] = 1.0;
        animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
        animator.setStartDelay(fullDuration / 2);
        animator.setDuration(1);
        objectAnimators[2] = animator;
        break;

      case transition_1.AndroidTransitionType.exit:
        objectAnimators = Array.create(android.animation.Animator, 2);
        values = Array.create("float", 2);
        values[0] = 0.0;
        values[1] = -rotationY;
        animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
        animator.setInterpolator(interpolator);
        animator.setDuration(fullDuration);
        objectAnimators[0] = animator;
        values = Array.create("float", 2);
        values[0] = 1.0;
        values[1] = 0.0;
        animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
        animator.setStartDelay(fullDuration / 2);
        animator.setDuration(1);
        objectAnimators[1] = animator;
        break;

      case transition_1.AndroidTransitionType.popEnter:
        objectAnimators = Array.create(android.animation.Animator, 3);
        values = Array.create("float", 2);
        values[0] = 1.0;
        values[1] = 0.0;
        animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
        animator.setDuration(0);
        objectAnimators[0] = animator;
        values = Array.create("float", 2);
        values[0] = -rotationY;
        values[1] = 0.0;
        animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
        animator.setInterpolator(interpolator);
        animator.setDuration(fullDuration);
        objectAnimators[1] = animator;
        values = Array.create("float", 2);
        values[0] = 0.0;
        values[1] = 1.0;
        animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
        animator.setStartDelay(fullDuration / 2);
        animator.setDuration(1);
        objectAnimators[2] = animator;
        break;

      case transition_1.AndroidTransitionType.popExit:
        objectAnimators = Array.create(android.animation.Animator, 2);
        values = Array.create("float", 2);
        values[0] = 0.0;
        values[1] = rotationY;
        animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
        animator.setInterpolator(interpolator);
        animator.setDuration(fullDuration);
        objectAnimators[0] = animator;
        values = Array.create("float", 2);
        values[0] = 1.0;
        values[1] = 0.0;
        animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
        animator.setStartDelay(fullDuration / 2);
        animator.setDuration(1);
        objectAnimators[1] = animator;
        break;
    }

    animatorSet.playTogether(objectAnimators);
    return animatorSet;
  };

  return FlipTransition;
}(transition_1.Transition);

exports.FlipTransition = FlipTransition;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/transition/slide-transition.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var transition = __webpack_require__("../node_modules/tns-core-modules/ui/transition/transition.js");

var platform = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var lazy_1 = __webpack_require__("../node_modules/tns-core-modules/utils/lazy.js");

var screenWidth = lazy_1.default(function () {
  return platform.screen.mainScreen.widthPixels;
});
var screenHeight = lazy_1.default(function () {
  return platform.screen.mainScreen.heightPixels;
});

var SlideTransition = function (_super) {
  __extends(SlideTransition, _super);

  function SlideTransition(direction, duration, curve) {
    var _this = _super.call(this, duration, curve) || this;

    _this._direction = direction;
    return _this;
  }

  SlideTransition.prototype.createAndroidAnimator = function (transitionType) {
    var translationValues = Array.create("float", 2);

    switch (this._direction) {
      case "left":
        switch (transitionType) {
          case transition.AndroidTransitionType.enter:
            translationValues[0] = screenWidth();
            translationValues[1] = 0;
            break;

          case transition.AndroidTransitionType.exit:
            translationValues[0] = 0;
            translationValues[1] = -screenWidth();
            break;

          case transition.AndroidTransitionType.popEnter:
            translationValues[0] = -screenWidth();
            translationValues[1] = 0;
            break;

          case transition.AndroidTransitionType.popExit:
            translationValues[0] = 0;
            translationValues[1] = screenWidth();
            break;
        }

        break;

      case "right":
        switch (transitionType) {
          case transition.AndroidTransitionType.enter:
            translationValues[0] = -screenWidth();
            translationValues[1] = 0;
            break;

          case transition.AndroidTransitionType.exit:
            translationValues[0] = 0;
            translationValues[1] = screenWidth();
            break;

          case transition.AndroidTransitionType.popEnter:
            translationValues[0] = screenWidth();
            translationValues[1] = 0;
            break;

          case transition.AndroidTransitionType.popExit:
            translationValues[0] = 0;
            translationValues[1] = -screenWidth();
            break;
        }

        break;

      case "top":
        switch (transitionType) {
          case transition.AndroidTransitionType.enter:
            translationValues[0] = screenHeight();
            translationValues[1] = 0;
            break;

          case transition.AndroidTransitionType.exit:
            translationValues[0] = 0;
            translationValues[1] = -screenHeight();
            break;

          case transition.AndroidTransitionType.popEnter:
            translationValues[0] = -screenHeight();
            translationValues[1] = 0;
            break;

          case transition.AndroidTransitionType.popExit:
            translationValues[0] = 0;
            translationValues[1] = screenHeight();
            break;
        }

        break;

      case "bottom":
        switch (transitionType) {
          case transition.AndroidTransitionType.enter:
            translationValues[0] = -screenHeight();
            translationValues[1] = 0;
            break;

          case transition.AndroidTransitionType.exit:
            translationValues[0] = 0;
            translationValues[1] = screenHeight();
            break;

          case transition.AndroidTransitionType.popEnter:
            translationValues[0] = screenHeight();
            translationValues[1] = 0;
            break;

          case transition.AndroidTransitionType.popExit:
            translationValues[0] = 0;
            translationValues[1] = -screenHeight();
            break;
        }

        break;
    }

    var prop;

    if (this._direction === "left" || this._direction === "right") {
      prop = "translationX";
    } else {
      prop = "translationY";
    }

    var animator = android.animation.ObjectAnimator.ofFloat(null, prop, translationValues);
    var duration = this.getDuration();

    if (duration !== undefined) {
      animator.setDuration(duration);
    }

    animator.setInterpolator(this.getCurve());
    return animator;
  };

  SlideTransition.prototype.toString = function () {
    return _super.prototype.toString.call(this) + " " + this._direction;
  };

  return SlideTransition;
}(transition.Transition);

exports.SlideTransition = SlideTransition;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/transition/transition.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var animation_1 = __webpack_require__("../node_modules/tns-core-modules/ui/animation/animation.js");

var lazy_1 = __webpack_require__("../node_modules/tns-core-modules/utils/lazy.js");

var _defaultInterpolator = lazy_1.default(function () {
  return new android.view.animation.AccelerateDecelerateInterpolator();
});

var AndroidTransitionType;

(function (AndroidTransitionType) {
  AndroidTransitionType.enter = "enter";
  AndroidTransitionType.exit = "exit";
  AndroidTransitionType.popEnter = "popEnter";
  AndroidTransitionType.popExit = "popExit";
})(AndroidTransitionType = exports.AndroidTransitionType || (exports.AndroidTransitionType = {}));

var transitionId = 0;

var Transition = function () {
  function Transition(duration, curve) {
    this._duration = duration;
    this._interpolator = curve ? animation_1._resolveAnimationCurve(curve) : _defaultInterpolator();
    this._id = transitionId++;
  }

  Transition.prototype.getDuration = function () {
    return this._duration;
  };

  Transition.prototype.getCurve = function () {
    return this._interpolator;
  };

  Transition.prototype.animateIOSTransition = function (containerView, fromView, toView, operation, completion) {
    throw new Error("Abstract method call");
  };

  Transition.prototype.createAndroidAnimator = function (transitionType) {
    throw new Error("Abstract method call");
  };

  Transition.prototype.toString = function () {
    return "Transition@" + this._id;
  };

  return Transition;
}();

exports.Transition = Transition;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/web-view/web-view-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

exports.File = file_system_1.File;
exports.knownFolders = file_system_1.knownFolders;
exports.path = file_system_1.path;

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

exports.srcProperty = new view_1.Property({
  name: "src"
});

var WebViewBase = function (_super) {
  __extends(WebViewBase, _super);

  function WebViewBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  WebViewBase_1 = WebViewBase;

  WebViewBase.prototype._onLoadFinished = function (url, error) {
    var args = {
      eventName: WebViewBase_1.loadFinishedEvent,
      object: this,
      url: url,
      navigationType: undefined,
      error: error
    };
    this.notify(args);
  };

  WebViewBase.prototype._onLoadStarted = function (url, navigationType) {
    var args = {
      eventName: WebViewBase_1.loadStartedEvent,
      object: this,
      url: url,
      navigationType: navigationType,
      error: undefined
    };
    this.notify(args);
  };

  Object.defineProperty(WebViewBase.prototype, "canGoBack", {
    get: function get() {
      throw new Error("This member is abstract.");
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(WebViewBase.prototype, "canGoForward", {
    get: function get() {
      throw new Error("This member is abstract.");
    },
    enumerable: true,
    configurable: true
  });

  WebViewBase.prototype[exports.srcProperty.getDefault] = function () {
    return "";
  };

  WebViewBase.prototype[exports.srcProperty.setNative] = function (src) {
    this.stopLoading();

    if (src.indexOf("~/") === 0) {
      src = "file:///" + file_system_1.knownFolders.currentApp().path + "/" + src.substr(2);
    } else if (src.indexOf("/") === 0) {
      src = "file://" + src;
    }

    if (src.toLowerCase().indexOf("file:///") === 0) {
      src = encodeURI(src);
    }

    if (src.toLowerCase().indexOf("http://") === 0 || src.toLowerCase().indexOf("https://") === 0 || src.toLowerCase().indexOf("file:///") === 0) {
      this._loadUrl(src);
    } else {
      this._loadData(src);
    }
  };

  Object.defineProperty(WebViewBase.prototype, "url", {
    get: function get() {
      throw new Error("Property url of WebView is deprecated. Use src instead");
    },
    set: function set(value) {
      throw new Error("Property url of WebView is deprecated. Use src instead");
    },
    enumerable: true,
    configurable: true
  });
  var WebViewBase_1;
  WebViewBase.loadStartedEvent = "loadStarted";
  WebViewBase.loadFinishedEvent = "loadFinished";
  WebViewBase = WebViewBase_1 = __decorate([view_1.CSSType("WebView")], WebViewBase);
  return WebViewBase;
}(view_1.ContainerView);

exports.WebViewBase = WebViewBase;
exports.srcProperty.register(WebViewBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/web-view/web-view.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var web_view_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/web-view/web-view-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/web-view/web-view-common.js"));

var WebViewClient;

function initializeWebViewClient() {
  if (WebViewClient) {
    return;
  }

  var WebViewClientImpl = function (_super) {
    __extends(WebViewClientImpl, _super);

    function WebViewClientImpl(owner) {
      var _this = _super.call(this) || this;

      _this.owner = owner;
      return global.__native(_this);
    }

    WebViewClientImpl.prototype.shouldOverrideUrlLoading = function (view, url) {
      if (web_view_common_1.traceEnabled()) {
        web_view_common_1.traceWrite("WebViewClientClass.shouldOverrideUrlLoading(" + url + ")", web_view_common_1.traceCategories.Debug);
      }

      return false;
    };

    WebViewClientImpl.prototype.onPageStarted = function (view, url, favicon) {
      _super.prototype.onPageStarted.call(this, view, url, favicon);

      var owner = this.owner;

      if (owner) {
        if (web_view_common_1.traceEnabled()) {
          web_view_common_1.traceWrite("WebViewClientClass.onPageStarted(" + url + ", " + favicon + ")", web_view_common_1.traceCategories.Debug);
        }

        owner._onLoadStarted(url, undefined);
      }
    };

    WebViewClientImpl.prototype.onPageFinished = function (view, url) {
      _super.prototype.onPageFinished.call(this, view, url);

      var owner = this.owner;

      if (owner) {
        if (web_view_common_1.traceEnabled()) {
          web_view_common_1.traceWrite("WebViewClientClass.onPageFinished(" + url + ")", web_view_common_1.traceCategories.Debug);
        }

        owner._onLoadFinished(url, undefined);
      }
    };

    WebViewClientImpl.prototype.onReceivedError = function () {
      var view = arguments[0];

      if (arguments.length === 4) {
        var errorCode = arguments[1];
        var description = arguments[2];
        var failingUrl = arguments[3];

        _super.prototype.onReceivedError.call(this, view, errorCode, description, failingUrl);

        var owner = this.owner;

        if (owner) {
          if (web_view_common_1.traceEnabled()) {
            web_view_common_1.traceWrite("WebViewClientClass.onReceivedError(" + errorCode + ", " + description + ", " + failingUrl + ")", web_view_common_1.traceCategories.Debug);
          }

          owner._onLoadFinished(failingUrl, description + "(" + errorCode + ")");
        }
      } else {
        var request = arguments[1];
        var error = arguments[2];

        _super.prototype.onReceivedError.call(this, view, request, error);

        var owner = this.owner;

        if (owner) {
          if (web_view_common_1.traceEnabled()) {
            web_view_common_1.traceWrite("WebViewClientClass.onReceivedError(" + error.getErrorCode() + ", " + error.getDescription() + ", " + (error.getUrl && error.getUrl()) + ")", web_view_common_1.traceCategories.Debug);
          }

          owner._onLoadFinished(error.getUrl && error.getUrl(), error.getDescription() + "(" + error.getErrorCode() + ")");
        }
      }
    };

    return WebViewClientImpl;
  }(android.webkit.WebViewClient);

  ;
  WebViewClient = WebViewClientImpl;
}

var WebView = function (_super) {
  __extends(WebView, _super);

  function WebView() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  WebView.prototype.createNativeView = function () {
    var nativeView = new android.webkit.WebView(this._context);
    nativeView.getSettings().setJavaScriptEnabled(true);
    nativeView.getSettings().setBuiltInZoomControls(true);
    return nativeView;
  };

  WebView.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    initializeWebViewClient();
    var nativeView = this.nativeViewProtected;
    var client = new WebViewClient(this);
    nativeView.setWebViewClient(client);
    nativeView.client = client;
  };

  WebView.prototype.disposeNativeView = function () {
    var nativeView = this.nativeViewProtected;

    if (nativeView) {
      nativeView.destroy();
    }

    nativeView.client.owner = null;

    _super.prototype.disposeNativeView.call(this);
  };

  WebView.prototype._loadUrl = function (src) {
    var nativeView = this.nativeViewProtected;

    if (!nativeView) {
      return;
    }

    nativeView.loadUrl(src);
  };

  WebView.prototype._loadData = function (src) {
    var nativeView = this.nativeViewProtected;

    if (!nativeView) {
      return;
    }

    var baseUrl = "file:///" + web_view_common_1.knownFolders.currentApp().path + "/";
    nativeView.loadDataWithBaseURL(baseUrl, src, "text/html", "utf-8", null);
  };

  Object.defineProperty(WebView.prototype, "canGoBack", {
    get: function get() {
      return this.nativeViewProtected.canGoBack();
    },
    enumerable: true,
    configurable: true
  });

  WebView.prototype.stopLoading = function () {
    var nativeView = this.nativeViewProtected;

    if (nativeView) {
      nativeView.stopLoading();
    }
  };

  Object.defineProperty(WebView.prototype, "canGoForward", {
    get: function get() {
      var nativeView = this.nativeViewProtected;

      if (nativeView) {
        return nativeView.canGoForward();
      }

      return false;
    },
    enumerable: true,
    configurable: true
  });

  WebView.prototype.goBack = function () {
    var nativeView = this.nativeViewProtected;

    if (nativeView) {
      return nativeView.goBack();
    }
  };

  WebView.prototype.goForward = function () {
    var nativeView = this.nativeViewProtected;

    if (nativeView) {
      return nativeView.goForward();
    }
  };

  WebView.prototype.reload = function () {
    var nativeView = this.nativeViewProtected;

    if (nativeView) {
      return nativeView.reload();
    }
  };

  return WebView;
}(web_view_common_1.WebViewBase);

exports.WebView = WebView;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/utils/debug.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

exports.debug = true;
var applicationRootPath;

function ensureAppRootPath() {
  if (!applicationRootPath) {
    applicationRootPath = file_system_1.knownFolders.currentApp().path;
    applicationRootPath = applicationRootPath.substr(0, applicationRootPath.length - "app/".length);
  }
}

var Source = function () {
  function Source(uri, line, column) {
    ensureAppRootPath();

    if (uri.length > applicationRootPath.length && uri.substr(0, applicationRootPath.length) === applicationRootPath) {
      this._uri = "file://" + uri.substr(applicationRootPath.length);
    } else {
      this._uri = uri;
    }

    this._line = line;
    this._column = column;
  }

  Object.defineProperty(Source.prototype, "uri", {
    get: function get() {
      return this._uri;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Source.prototype, "line", {
    get: function get() {
      return this._line;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Source.prototype, "column", {
    get: function get() {
      return this._column;
    },
    enumerable: true,
    configurable: true
  });

  Source.prototype.toString = function () {
    return this._uri + ":" + this._line + ":" + this._column;
  };

  Source.get = function (object) {
    return object[Source._source];
  };

  Source.set = function (object, src) {
    object[Source._source] = src;
  };

  Source._source = Symbol("source");
  return Source;
}();

exports.Source = Source;

var ScopeError = function (_super) {
  __extends(ScopeError, _super);

  function ScopeError(inner, message) {
    var _this = this;

    var formattedMessage;

    if (message && inner.message) {
      formattedMessage = message + "\n > " + inner.message.replace("\n", "\n  ");
    } else {
      formattedMessage = message || inner.message || undefined;
    }

    _this = _super.call(this, formattedMessage) || this;
    _this.stack = platform_1.isAndroid ? "Error: " + _this.message + "\n" + inner.stack.substr(inner.stack.indexOf("\n") + 1) : inner.stack;
    _this.message = formattedMessage;
    return _this;
  }

  return ScopeError;
}(Error);

exports.ScopeError = ScopeError;

var SourceError = function (_super) {
  __extends(SourceError, _super);

  function SourceError(child, source, message) {
    return _super.call(this, child, message ? message + " @" + source + "" : source + "") || this;
  }

  return SourceError;
}(ScopeError);

exports.SourceError = SourceError;

/***/ }),

/***/ "../node_modules/tns-core-modules/utils/lazy.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

function lazy(action) {
  var _value;

  return function () {
    return _value || (_value = action());
  };
}

exports.default = lazy;

/***/ }),

/***/ "../node_modules/tns-core-modules/utils/number-utils.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var epsilon = 1E-05;

function areClose(value1, value2) {
  return Math.abs(value1 - value2) < epsilon;
}

exports.areClose = areClose;

function greaterThanOrClose(value1, value2) {
  return value1 > value2 || areClose(value1, value2);
}

exports.greaterThanOrClose = greaterThanOrClose;

function greaterThan(value1, value2) {
  return value1 > value2 && !areClose(value1, value2);
}

exports.greaterThan = greaterThan;

function lessThan(value1, value2) {
  return value1 < value2 && !areClose(value1, value2);
}

exports.lessThan = lessThan;

function isZero(value) {
  return Math.abs(value) < epsilon;
}

exports.isZero = isZero;

function greaterThanZero(value) {
  return value > 0;
}

exports.greaterThanZero = greaterThanZero;

function notNegative(value) {
  return value >= 0;
}

exports.notNegative = notNegative;

exports.radiansToDegrees = function (a) {
  return a * (180 / Math.PI);
};

exports.degreesToRadians = function (a) {
  return a * (Math.PI / 180);
};

/***/ }),

/***/ "../node_modules/tns-core-modules/utils/types.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

function isString(value) {
  return typeof value === "string" || value instanceof String;
}

exports.isString = isString;

function isNumber(value) {
  return typeof value === "number" || value instanceof Number;
}

exports.isNumber = isNumber;

function isBoolean(value) {
  return typeof value === "boolean" || value instanceof Boolean;
}

exports.isBoolean = isBoolean;

function isFunction(value) {
  if (!value) {
    return false;
  }

  return typeof value === "function";
}

exports.isFunction = isFunction;

function isObject(value) {
  if (!value) {
    return false;
  }

  return typeof value === "object";
}

exports.isObject = isObject;

function isUndefined(value) {
  return value === undefined;
}

exports.isUndefined = isUndefined;

function isDefined(value) {
  return typeof value !== "undefined";
}

exports.isDefined = isDefined;

function isNullOrUndefined(value) {
  return value === undefined || value === null;
}

exports.isNullOrUndefined = isNullOrUndefined;

function verifyCallback(value) {
  if (value && !isFunction(value)) {
    throw new TypeError("Callback must be a valid function.");
  }
}

exports.verifyCallback = verifyCallback;
var classInfosMap = new Map();
var funcNameRegex = /function ([_a-zA-Z0-9]{1,})\(/;

function getClass(object) {
  return getClassInfo(object).name;
}

exports.getClass = getClass;

function getClassInfo(object) {
  var constructor = object.constructor;
  var result = classInfosMap.get(constructor);

  if (!result) {
    result = new ClassInfo(constructor);
    classInfosMap.set(constructor, result);
  }

  return result;
}

exports.getClassInfo = getClassInfo;

function getBaseClasses(object) {
  var result = [];
  var info = getClassInfo(object);

  while (info) {
    result.push(info.name);
    info = info.baseClassInfo;
  }

  return result;
}

exports.getBaseClasses = getBaseClasses;

var ClassInfo = function () {
  function ClassInfo(typeCosntructor) {
    this._typeCosntructor = typeCosntructor;
  }

  Object.defineProperty(ClassInfo.prototype, "name", {
    get: function get() {
      if (!this._name) {
        var results = funcNameRegex.exec(this._typeCosntructor.toString());
        this._name = results && results.length > 1 ? results[1] : "";
      }

      return this._name;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ClassInfo.prototype, "baseClassInfo", {
    get: function get() {
      if (isUndefined(this._baseClassInfo)) {
        this._baseClassInfo = ClassInfo._getBase(this);

        if (this._baseClassInfo && this._baseClassInfo.name === this.name) {
          this._baseClassInfo = ClassInfo._getBase(this._baseClassInfo);
        }
      }

      return this._baseClassInfo;
    },
    enumerable: true,
    configurable: true
  });

  ClassInfo._getBase = function (info) {
    var result = null;
    var constructorProto = info._typeCosntructor.prototype;

    if (constructorProto.__proto__) {
      result = getClassInfo(constructorProto.__proto__);
    }

    return result;
  };

  return ClassInfo;
}();

exports.ClassInfo = ClassInfo;

function toUIString(obj) {
  return isNullOrUndefined(obj) ? "" : obj + "";
}

exports.toUIString = toUIString;

/***/ }),

/***/ "../node_modules/tns-core-modules/utils/utils-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var types = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

exports.RESOURCE_PREFIX = "res://";
exports.FILE_PREFIX = "file:///";

function escapeRegexSymbols(source) {
  var escapeRegex = /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g;
  return source.replace(escapeRegex, "\\$&");
}

exports.escapeRegexSymbols = escapeRegexSymbols;

function convertString(value) {
  var result;

  if (!types.isString(value)) {
    result = value;
  } else if (value.trim() === "") {
    result = value;
  } else {
    var valueAsNumber = +value;

    if (!isNaN(valueAsNumber)) {
      result = valueAsNumber;
    } else if (value && (value.toLowerCase() === "true" || value.toLowerCase() === "false")) {
      result = value.toLowerCase() === "true" ? true : false;
    } else {
      result = value;
    }
  }

  return result;
}

exports.convertString = convertString;
var layout;

(function (layout) {
  var MODE_SHIFT = 30;
  var MODE_MASK = 0x3 << MODE_SHIFT;
  layout.UNSPECIFIED = 0 << MODE_SHIFT;
  layout.EXACTLY = 1 << MODE_SHIFT;
  layout.AT_MOST = 2 << MODE_SHIFT;
  layout.MEASURED_HEIGHT_STATE_SHIFT = 0x00000010;
  layout.MEASURED_STATE_TOO_SMALL = 0x01000000;
  layout.MEASURED_STATE_MASK = 0xff000000;
  layout.MEASURED_SIZE_MASK = 0x00ffffff;

  function getMode(mode) {
    switch (mode) {
      case layout.EXACTLY:
        return "Exact";

      case layout.AT_MOST:
        return "AtMost";

      default:
        return "Unspecified";
    }
  }

  layout.getMode = getMode;

  function getMeasureSpecMode(spec) {
    return spec & MODE_MASK;
  }

  layout.getMeasureSpecMode = getMeasureSpecMode;

  function getMeasureSpecSize(spec) {
    return spec & ~MODE_MASK;
  }

  layout.getMeasureSpecSize = getMeasureSpecSize;

  function measureSpecToString(measureSpec) {
    var mode = getMeasureSpecMode(measureSpec);
    var size = getMeasureSpecSize(measureSpec);
    var text = "MeasureSpec: ";

    if (mode === layout.UNSPECIFIED) {
      text += "UNSPECIFIED ";
    } else if (mode === layout.EXACTLY) {
      text += "EXACTLY ";
    } else if (mode === layout.AT_MOST) {
      text += "AT_MOST ";
    }

    text += size;
    return text;
  }

  layout.measureSpecToString = measureSpecToString;

  function round(value) {
    var res = Math.floor(value + 0.5);

    if (res !== 0) {
      return res;
    } else if (value === 0) {
      return 0;
    } else if (value > 0) {
      return 1;
    }

    return -1;
  }

  layout.round = round;
})(layout = exports.layout || (exports.layout = {}));

function isFileOrResourcePath(path) {
  if (!types.isString(path)) {
    return false;
  }

  return path.indexOf("~/") === 0 || path.indexOf("/") === 0 || path.indexOf(exports.RESOURCE_PREFIX) === 0;
}

exports.isFileOrResourcePath = isFileOrResourcePath;

function isDataURI(uri) {
  if (!types.isString(uri)) {
    return false;
  }

  var firstSegment = uri.trim().split(",")[0];
  return firstSegment && firstSegment.indexOf("data:") === 0 && firstSegment.indexOf("base64") >= 0;
}

exports.isDataURI = isDataURI;

function mergeSort(arr, compareFunc) {
  if (arr.length < 2) {
    return arr;
  }

  var middle = arr.length / 2;
  var left = arr.slice(0, middle);
  var right = arr.slice(middle, arr.length);
  return merge(mergeSort(left, compareFunc), mergeSort(right, compareFunc), compareFunc);
}

exports.mergeSort = mergeSort;

function merge(left, right, compareFunc) {
  var result = [];

  while (left.length && right.length) {
    if (compareFunc(left[0], right[0]) <= 0) {
      result.push(left.shift());
    } else {
      result.push(right.shift());
    }
  }

  while (left.length) {
    result.push(left.shift());
  }

  while (right.length) {
    result.push(right.shift());
  }

  return result;
}

exports.merge = merge;

function hasDuplicates(arr) {
  return arr.length !== eliminateDuplicates(arr).length;
}

exports.hasDuplicates = hasDuplicates;

function eliminateDuplicates(arr) {
  return Array.from(new Set(arr));
}

exports.eliminateDuplicates = eliminateDuplicates;

/***/ }),

/***/ "../node_modules/tns-core-modules/utils/utils.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var trace_1 = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

__export(__webpack_require__("../node_modules/tns-core-modules/utils/utils-common.js"));

var application_1 = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

var layout;

(function (layout) {
  var density;
  var MODE_SHIFT = 30;
  var MODE_MASK = 0x3 << MODE_SHIFT;
  var sdkVersion;
  var useOldMeasureSpec = false;

  function makeMeasureSpec(size, mode) {
    if (sdkVersion === undefined) {
      sdkVersion = ad.getApplicationContext().getApplicationInfo().targetSdkVersion;
      useOldMeasureSpec = sdkVersion <= android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
    }

    if (useOldMeasureSpec) {
      return size + mode;
    }

    return size & ~MODE_MASK | mode & MODE_MASK;
  }

  layout.makeMeasureSpec = makeMeasureSpec;

  function getDisplayDensity() {
    if (density === undefined) {
      density = ad.getResources().getDisplayMetrics().density;
    }

    return density;
  }

  layout.getDisplayDensity = getDisplayDensity;

  function toDevicePixels(value) {
    return value * getDisplayDensity();
  }

  layout.toDevicePixels = toDevicePixels;

  function toDeviceIndependentPixels(value) {
    return value / getDisplayDensity();
  }

  layout.toDeviceIndependentPixels = toDeviceIndependentPixels;

  function measureNativeView(nativeView, width, widthMode, height, heightMode) {
    var view = nativeView;
    view.measure(makeMeasureSpec(width, widthMode), makeMeasureSpec(height, heightMode));
    return {
      width: view.getMeasuredWidth(),
      height: view.getMeasuredHeight()
    };
  }

  layout.measureNativeView = measureNativeView;
})(layout = exports.layout || (exports.layout = {}));

var ad;

(function (ad) {
  var application;
  var applicationContext;
  var contextResources;
  var packageName;

  function getApplicationContext() {
    if (!applicationContext) {
      applicationContext = getApplication().getApplicationContext();
    }

    return applicationContext;
  }

  ad.getApplicationContext = getApplicationContext;

  function getApplication() {
    if (!application) {
      application = application_1.getNativeApplication();
    }

    return application;
  }

  ad.getApplication = getApplication;

  function getResources() {
    if (!contextResources) {
      contextResources = getApplication().getResources();
    }

    return contextResources;
  }

  ad.getResources = getResources;

  function getPackageName() {
    if (!packageName) {
      packageName = getApplicationContext().getPackageName();
    }

    return packageName;
  }

  var inputMethodManager;

  function getInputMethodManager() {
    if (!inputMethodManager) {
      inputMethodManager = getApplicationContext().getSystemService(android.content.Context.INPUT_METHOD_SERVICE);
    }

    return inputMethodManager;
  }

  ad.getInputMethodManager = getInputMethodManager;

  function showSoftInput(nativeView) {
    var inputManager = getInputMethodManager();

    if (inputManager && nativeView instanceof android.view.View) {
      inputManager.showSoftInput(nativeView, android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT);
    }
  }

  ad.showSoftInput = showSoftInput;

  function dismissSoftInput(nativeView) {
    var inputManager = getInputMethodManager();
    var windowToken;

    if (nativeView instanceof android.view.View) {
      windowToken = nativeView.getWindowToken();
    } else if (application_1.android.foregroundActivity instanceof android.support.v7.app.AppCompatActivity) {
      var decorView = application_1.android.foregroundActivity.getWindow().getDecorView();
      windowToken = decorView ? decorView.getWindowToken() : null;
    }

    if (inputManager && windowToken) {
      inputManager.hideSoftInputFromWindow(windowToken, 0);
    }
  }

  ad.dismissSoftInput = dismissSoftInput;
  var collections;

  (function (collections) {
    function stringArrayToStringSet(str) {
      var hashSet = new java.util.HashSet();

      if (str !== undefined) {
        for (var element in str) {
          hashSet.add("" + str[element]);
        }
      }

      return hashSet;
    }

    collections.stringArrayToStringSet = stringArrayToStringSet;

    function stringSetToStringArray(stringSet) {
      var arr = [];

      if (stringSet !== undefined) {
        var it = stringSet.iterator();

        while (it.hasNext()) {
          var element = "" + it.next();
          arr.push(element);
        }
      }

      return arr;
    }

    collections.stringSetToStringArray = stringSetToStringArray;
  })(collections = ad.collections || (ad.collections = {}));

  var resources;

  (function (resources_1) {
    var attr;
    var attrCache = new Map();

    function getDrawableId(name) {
      return getId(":drawable/" + name);
    }

    resources_1.getDrawableId = getDrawableId;

    function getStringId(name) {
      return getId(":string/" + name);
    }

    resources_1.getStringId = getStringId;

    function getId(name) {
      var resources = getResources();
      var packageName = getPackageName();
      var uri = packageName + name;
      return resources.getIdentifier(uri, null, null);
    }

    resources_1.getId = getId;

    function getPalleteColor(name, context) {
      return getPaletteColor(name, context);
    }

    resources_1.getPalleteColor = getPalleteColor;

    function getPaletteColor(name, context) {
      if (attrCache.has(name)) {
        return attrCache.get(name);
      }

      var result = 0;

      try {
        if (!attr) {
          attr = java.lang.Class.forName("android.support.v7.appcompat.R$attr");
        }

        var colorID = 0;
        var field = attr.getField(name);

        if (field) {
          colorID = field.getInt(null);
        }

        if (colorID) {
          var typedValue = new android.util.TypedValue();
          context.getTheme().resolveAttribute(colorID, typedValue, true);
          result = typedValue.data;
        }
      } catch (ex) {
        trace_1.write("Cannot get pallete color: " + name, trace_1.categories.Error, trace_1.messageType.error);
      }

      attrCache.set(name, result);
      return result;
    }

    resources_1.getPaletteColor = getPaletteColor;
  })(resources = ad.resources || (ad.resources = {}));
})(ad = exports.ad || (exports.ad = {}));

function GC() {
  gc();
}

exports.GC = GC;

function openUrl(location) {
  var context = ad.getApplicationContext();

  try {
    var intent = new android.content.Intent(android.content.Intent.ACTION_VIEW, android.net.Uri.parse(location.trim()));
    intent.addFlags(android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
    context.startActivity(intent);
  } catch (e) {
    trace_1.write("Error in OpenURL", trace_1.categories.Error, trace_1.messageType.error);
    return false;
  }

  return true;
}

exports.openUrl = openUrl;

/***/ }),

/***/ "../node_modules/tns-core-modules/xhr/xhr.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var http = __webpack_require__("../node_modules/tns-core-modules/http/http.js");

var types = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var XMLHttpRequestResponseType;

(function (XMLHttpRequestResponseType) {
  XMLHttpRequestResponseType.empty = "";
  XMLHttpRequestResponseType.text = "text";
  XMLHttpRequestResponseType.json = "json";
})(XMLHttpRequestResponseType || (XMLHttpRequestResponseType = {}));

var XMLHttpRequest = function () {
  function XMLHttpRequest() {
    this.UNSENT = 0;
    this.OPENED = 1;
    this.HEADERS_RECEIVED = 2;
    this.LOADING = 3;
    this.DONE = 4;
    this._responseType = "";
    this.textTypes = ["text/plain", "application/xml", "application/rss+xml", "text/html", "text/xml"];
    this._listeners = new Map();
    this._readyState = this.UNSENT;
  }

  XMLHttpRequest.prototype.open = function (method, url, async, user, password) {
    if (types.isString(method) && types.isString(url)) {
      this._options = {
        url: url,
        method: method
      };
      this._options.headers = {};

      if (types.isString(user)) {
        this._options.headers["user"] = user;
      }

      if (types.isString(password)) {
        this._options.headers["password"] = password;
      }

      this._setReadyState(this.OPENED);
    }
  };

  XMLHttpRequest.prototype.abort = function () {
    this._errorFlag = true;
    this._response = null;
    this._responseTextReader = null;
    this._headers = null;
    this._status = null;

    if (this._readyState === this.UNSENT || this._readyState === this.OPENED || this._readyState === this.DONE) {
      this._readyState = this.UNSENT;
    } else {
      this._setReadyState(this.DONE);
    }
  };

  XMLHttpRequest.prototype.send = function (data) {
    var _this = this;

    this._errorFlag = false;
    this._response = null;
    this._responseTextReader = null;
    this._headers = null;
    this._status = null;

    if (types.isDefined(this._options)) {
      if (types.isString(data) && this._options.method !== "GET") {
        this._options.content = data;
      } else if (data instanceof FormData) {
        this._options.content = data.toString();
      }

      http.request(this._options).then(function (r) {
        if (!_this._errorFlag) {
          _this._loadResponse(r);
        }
      }).catch(function (e) {
        _this._errorFlag = true;

        _this._setReadyState(_this.DONE, e);
      });
    }
  };

  XMLHttpRequest.prototype._loadResponse = function (r) {
    this._status = r.statusCode;
    this._response = r.content.raw + "";
    this._headers = r.headers;

    this._setReadyState(this.HEADERS_RECEIVED);

    this._setReadyState(this.LOADING);

    this._setResponseType();

    this._responseTextReader = function () {
      return r.content.toString();
    };

    this._addToStringOnResponse();

    if (this.responseType === XMLHttpRequestResponseType.json) {
      this._response = JSON.parse(this.responseText);
    } else if (this.responseType === XMLHttpRequestResponseType.text) {
      this._response = this.responseText;
    }

    this._setReadyState(this.DONE);
  };

  XMLHttpRequest.prototype._addToStringOnResponse = function () {
    var _this = this;

    if (types.isObject(this.response)) {
      Object.defineProperty(this._response, "toString", {
        configurable: true,
        enumerable: false,
        writable: true,
        value: function value() {
          return _this.responseText;
        }
      });
    }
  };

  XMLHttpRequest.prototype.isTextContentType = function (contentType) {
    var result = false;

    for (var i = 0; i < this.textTypes.length; i++) {
      if (contentType.toLowerCase().indexOf(this.textTypes[i]) >= 0) {
        result = true;
        break;
      }
    }

    return result;
  };

  XMLHttpRequest.prototype._setResponseType = function () {
    var header = this.getResponseHeader("Content-Type");
    var contentType = header && header.toLowerCase();

    if (contentType) {
      if (contentType.indexOf("application/json") >= 0 || contentType.indexOf("+json") >= 0) {
        this.responseType = XMLHttpRequestResponseType.json;
      } else if (this.isTextContentType(contentType)) {
        this.responseType = XMLHttpRequestResponseType.text;
      }
    } else {
      this.responseType = XMLHttpRequestResponseType.text;
    }
  };

  XMLHttpRequest.prototype.addEventListener = function (eventName, handler) {
    if (eventName !== "load" && eventName !== "error" && eventName !== "progress") {
      throw new Error("Event not supported: " + eventName);
    }

    var handlers = this._listeners.get(eventName) || [];
    handlers.push(handler);

    this._listeners.set(eventName, handlers);
  };

  XMLHttpRequest.prototype.removeEventListener = function (eventName, toDetach) {
    var handlers = this._listeners.get(eventName) || [];
    handlers = handlers.filter(function (handler) {
      return handler !== toDetach;
    });

    this._listeners.set(eventName, handlers);
  };

  XMLHttpRequest.prototype.emitEvent = function (eventName) {
    var args = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }

    var handlers = this._listeners.get(eventName) || [];
    handlers.forEach(function (handler) {
      handler.apply(void 0, args);
    });
  };

  XMLHttpRequest.prototype.setRequestHeader = function (header, value) {
    if (types.isDefined(this._options) && types.isString(header) && types.isString(value)) {
      this._options.headers[header] = value;
    }
  };

  XMLHttpRequest.prototype.getAllResponseHeaders = function () {
    if (this._readyState < 2 || this._errorFlag) {
      return "";
    }

    var result = "";

    for (var i in this._headers) {
      result += i + ": " + this._headers[i] + "\r\n";
    }

    return result.substr(0, result.length - 2);
  };

  XMLHttpRequest.prototype.getResponseHeader = function (header) {
    if (types.isString(header) && this._readyState > 1 && this._headers && !this._errorFlag) {
      header = header.toLowerCase();

      for (var i in this._headers) {
        if (i.toLowerCase() === header) {
          return this._headers[i];
        }
      }
    }

    return null;
  };

  XMLHttpRequest.prototype.overrideMimeType = function (mime) {};

  Object.defineProperty(XMLHttpRequest.prototype, "readyState", {
    get: function get() {
      return this._readyState;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(XMLHttpRequest.prototype, "responseType", {
    get: function get() {
      return this._responseType;
    },
    set: function set(value) {
      if (value === XMLHttpRequestResponseType.empty || value in XMLHttpRequestResponseType) {
        this._responseType = value;
      } else {
        throw new Error("Response type of '" + value + "' not supported.");
      }
    },
    enumerable: true,
    configurable: true
  });

  XMLHttpRequest.prototype._setReadyState = function (value, error) {
    if (this._readyState !== value) {
      this._readyState = value;

      if (types.isFunction(this.onreadystatechange)) {
        this.onreadystatechange();
      }
    }

    if (this._readyState === this.DONE) {
      if (this._errorFlag) {
        if (types.isFunction(this.onerror)) {
          this.onerror(error);
        }

        this.emitEvent("error", error);
      } else {
        if (types.isFunction(this.onload)) {
          this.onload();
        }

        this.emitEvent("load");
      }
    }
  };

  Object.defineProperty(XMLHttpRequest.prototype, "responseText", {
    get: function get() {
      if (types.isFunction(this._responseTextReader)) {
        return this._responseTextReader();
      }

      return "";
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(XMLHttpRequest.prototype, "response", {
    get: function get() {
      return this._response;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(XMLHttpRequest.prototype, "status", {
    get: function get() {
      return this._status;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(XMLHttpRequest.prototype, "statusText", {
    get: function get() {
      if (this._readyState === this.UNSENT || this._readyState === this.OPENED || this._errorFlag) {
        return "";
      }

      return statuses[this._status];
    },
    enumerable: true,
    configurable: true
  });
  return XMLHttpRequest;
}();

exports.XMLHttpRequest = XMLHttpRequest;
var statuses = {
  100: "Continue",
  101: "Switching Protocols",
  200: "OK",
  201: "Created",
  202: "Accepted",
  203: "Non - Authoritative Information",
  204: "No Content",
  205: "Reset Content",
  206: "Partial Content",
  300: "Multiple Choices",
  301: "Moved Permanently",
  302: "Found",
  303: "See Other",
  304: "Not Modified",
  305: "Use Proxy",
  307: "Temporary Redirect",
  400: "Bad Request",
  401: "Unauthorized",
  402: "Payment Required",
  403: "Forbidden",
  404: "Not Found",
  405: "Method Not Allowed",
  406: "Not Acceptable",
  407: "Proxy Authentication Required",
  408: "Request Timeout",
  409: "Conflict",
  410: "Gone",
  411: "Length Required",
  412: "Precondition Failed",
  413: "Request Entity Too Large",
  414: "Request - URI Too Long",
  415: "Unsupported Media Type",
  416: "Requested Range Not Satisfiable",
  417: "Expectation Failed",
  500: "Internal Server Error",
  501: "Not Implemented",
  502: "Bad Gateway",
  503: "Service Unavailable",
  504: "Gateway Timeout",
  505: "HTTP Version Not Supported"
};

var FormData = function () {
  function FormData() {
    this._data = new Map();
  }

  FormData.prototype.append = function (name, value) {
    this._data.set(name, value);
  };

  FormData.prototype.toString = function () {
    var arr = new Array();

    this._data.forEach(function (value, name, map) {
      arr.push(encodeURIComponent(name) + "=" + encodeURIComponent(value));
    });

    return arr.join("&");
  };

  return FormData;
}();

exports.FormData = FormData;

/***/ }),

/***/ "../node_modules/tns-core-modules/xml/xml.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var easysax = __webpack_require__("../node_modules/tns-core-modules/js-libs/easysax/easysax.js");

var ParserEventType = function () {
  function ParserEventType() {}

  ParserEventType.StartElement = "StartElement";
  ParserEventType.EndElement = "EndElement";
  ParserEventType.Text = "Text";
  ParserEventType.CDATA = "CDATA";
  ParserEventType.Comment = "Comment";
  return ParserEventType;
}();

exports.ParserEventType = ParserEventType;

var ParserEvent = function () {
  function ParserEvent(eventType, position, prefix, namespace, elementName, attributes, data) {
    this._eventType = eventType;
    this._position = position;
    this._prefix = prefix;
    this._namespace = namespace;
    this._elementName = elementName;
    this._attributes = attributes;
    this._data = data;
  }

  ParserEvent.prototype.toString = function () {
    return JSON.stringify({
      eventType: this.eventType,
      position: this.position,
      prefix: this.prefix,
      namespace: this.namespace,
      elementName: this.elementName,
      attributes: this.attributes,
      data: this.data
    });
  };

  Object.defineProperty(ParserEvent.prototype, "eventType", {
    get: function get() {
      return this._eventType;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ParserEvent.prototype, "position", {
    get: function get() {
      return this._position;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ParserEvent.prototype, "prefix", {
    get: function get() {
      return this._prefix;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ParserEvent.prototype, "namespace", {
    get: function get() {
      return this._namespace;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ParserEvent.prototype, "elementName", {
    get: function get() {
      return this._elementName;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ParserEvent.prototype, "attributes", {
    get: function get() {
      return this._attributes;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ParserEvent.prototype, "data", {
    get: function get() {
      return this._data;
    },
    enumerable: true,
    configurable: true
  });
  return ParserEvent;
}();

exports.ParserEvent = ParserEvent;

var _ampCodes;

var _entitySearchRegEx = /&#(\d+);|&#x([0123456789abcdef]+);|&(\w+);/ig;

function _generateAmpMap() {
  var objCodes = {
    Tab: 9,
    NewLine: 10,
    excl: 33,
    quot: 34,
    QUOT: 34,
    num: 35,
    dollar: 36,
    percent: 37,
    amp: 38,
    AMP: 38,
    apos: 39,
    lpar: 40,
    rpar: 41,
    ast: 42,
    midast: 42,
    plus: 43,
    comma: 44,
    period: 46,
    sol: 47,
    colon: 58,
    semi: 59,
    lt: 60,
    LT: 60,
    equals: 61,
    gt: 62,
    GT: 62,
    quest: 63,
    commat: 64,
    lsqb: 91,
    lbrack: 91,
    bsol: 92,
    rsqb: 92,
    rbrack: 92,
    Hat: 94,
    lowbar: 95,
    grave: 96,
    DiacriticalGrave: 96,
    lcub: 123,
    lbrace: 123,
    verbar: 124,
    vert: 124,
    VerticalLine: 124,
    rcub: 125,
    rbrace: 125,
    nbsp: 160,
    iexcl: 161,
    cent: 162,
    pound: 163,
    curren: 164,
    yen: 165,
    brvbar: 166,
    brkbar: 166,
    sect: 167,
    uml: 168,
    copy: 169,
    ordf: 170,
    laquo: 171,
    not: 172,
    shy: 173,
    reg: 174,
    macr: 175,
    hibar: 175,
    deg: 176,
    plusmn: 177,
    sup2: 178,
    sup3: 179,
    acute: 180,
    micro: 181,
    para: 182,
    middot: 183,
    cedil: 184,
    sup1: 185,
    ordm: 186,
    raquo: 187,
    frac14: 188,
    frac12: 189,
    frac34: 190,
    iquest: 191,
    Agrave: 192,
    Aacute: 193,
    Acirc: 194,
    Atilde: 195,
    Auml: 196,
    Aring: 197,
    AElig: 198,
    Ccedil: 199,
    Egrave: 200,
    Eacute: 201,
    Ecirc: 202,
    Euml: 203,
    Igrave: 204,
    Iacute: 205,
    Icirc: 206,
    Iuml: 207,
    ETH: 208,
    Dstrok: 208,
    Ntilde: 209,
    Ograve: 210,
    Oacute: 211,
    Ocirc: 212,
    Otilde: 213,
    Ouml: 214,
    times: 215,
    Oslash: 216,
    Ugrave: 217,
    Uacute: 218,
    Ucirc: 219,
    Uuml: 220,
    Yacute: 221,
    THORN: 222,
    szlig: 223,
    agrave: 224,
    aacute: 225,
    acirc: 226,
    atilde: 227,
    auml: 228,
    aring: 229,
    aelig: 230,
    ccedil: 231,
    egrave: 232,
    eacute: 233,
    ecirc: 234,
    euml: 235,
    igrave: 236,
    iacute: 237,
    icirc: 238,
    iuml: 239,
    eth: 240,
    ntilde: 241,
    ograve: 242,
    oacute: 243,
    ocirc: 244,
    otilde: 245,
    ouml: 246,
    divide: 247,
    oslash: 248,
    ugrave: 249,
    uacute: 250,
    ucirc: 251,
    uuml: 252,
    yacute: 253,
    thorn: 254,
    yuml: 255,
    fnof: 402,
    imped: 437,
    gacute: 501,
    jmath: 567,
    circ: 710,
    caron: 711,
    Hacek: 711,
    breve: 728,
    Breve: 728,
    dot: 729,
    DiacriticalDot: 729,
    ring: 730,
    ogon: 731,
    tilde: 732,
    DiacriticalTilde: 732,
    dblac: 733,
    DiacriticalDoubleAcute: 733,
    DownBreve: 785,
    UnderBar: 818,
    Alpha: 913,
    Beta: 914,
    Gamma: 915,
    Delta: 916,
    Epsilon: 917,
    Zeta: 918,
    Eta: 919,
    Theta: 920,
    Iota: 921,
    Kappa: 922,
    Lambda: 923,
    Mu: 924,
    Nu: 925,
    Xi: 926,
    Omicron: 927,
    Pi: 928,
    Rho: 929,
    Sigma: 931,
    Tau: 932,
    Upsilon: 933,
    Phi: 934,
    Chi: 935,
    Psi: 936,
    Omega: 937,
    alpha: 945,
    beta: 946,
    gamma: 947,
    delta: 948,
    epsilon: 949,
    epsiv: 949,
    varepsilon: 949,
    zeta: 950,
    eta: 951,
    theta: 952,
    iota: 953,
    kappa: 954,
    lambda: 955,
    mu: 956,
    nu: 957,
    xi: 958,
    omicron: 959,
    pi: 960,
    rho: 961,
    sigmaf: 962,
    sigmav: 962,
    varsigma: 962,
    sigma: 963,
    tau: 964,
    upsilon: 965,
    phi: 966,
    chi: 967,
    psi: 968,
    omega: 969,
    thetav: 977,
    vartheta: 977,
    thetasym: 977,
    Upsi: 978,
    upsih: 978,
    straightphi: 981,
    piv: 982,
    varpi: 982,
    Gammad: 988,
    gammad: 989,
    digamma: 989,
    kappav: 1008,
    varkappa: 1008,
    rhov: 1009,
    varrho: 1009,
    epsi: 1013,
    straightepsilon: 1013,
    bepsi: 1014,
    backepsilon: 1014,
    euro: 8364,
    trade: 8482,
    TRADE: 8482,
    forall: 8704,
    part: 8706,
    larr: 8592,
    rarr: 8593,
    hyphen: 8208,
    dash: 8208,
    ndash: 8211,
    mdash: 8212,
    horbar: 8213,
    Vert: 8214,
    Verbar: 8214,
    lsquo: 8216,
    OpenCurlyQuote: 8216,
    rsquo: 8217,
    rsquor: 8217,
    CloseCurlyQuote: 8217,
    lsquor: 8218,
    sbquo: 8218,
    ldquo: 8220,
    OpenCurlyDoubleQuote: 8220,
    rdquo: 8221,
    rdquor: 8221,
    CloseCurlyDoubleQuote: 8221,
    ldquor: 8222,
    bdquo: 8222,
    dagger: 8224,
    Dagger: 8225,
    ddagger: 8225,
    bull: 8226,
    bullet: 8226,
    nldr: 8229,
    hellip: 8230,
    mldr: 8230,
    hybull: 8259,
    tdot: 8411,
    TripleDot: 8411,
    DotDot: 8412,
    star: 9734,
    phone: 9742,
    spades: 9824,
    clubs: 9827,
    hearts: 9829,
    diams: 9830,
    female: 9792,
    male: 9794,
    check: 10003,
    checkmark: 10003,
    cross: 10007,
    VerticalSeparator: 10072,
    EmptySmallSquare: 9723,
    FilledSmallSquare: 9724,
    starf: 9733,
    bigstar: 9733,
    square: 9633,
    squ: 9633,
    Square: 9633
  };
  var ampCodes = new Map();

  for (var key in objCodes) {
    if (objCodes.hasOwnProperty(key)) {
      ampCodes.set(key, objCodes[key]);
    }
  }

  return ampCodes;
}

if (global.__snapshot) {
  _ampCodes = _generateAmpMap();
}

function _HandleAmpEntities(found, decimalValue, hexValue, wordValue) {
  if (wordValue) {
    if (!_ampCodes) {
      _ampCodes = _generateAmpMap();
    }

    var res = _ampCodes.get(wordValue);

    if (res) {
      return String.fromCharCode(res);
    }

    return found;
  }

  if (decimalValue) {
    return String.fromCharCode(parseInt(decimalValue, 10));
  }

  return String.fromCharCode(parseInt(hexValue, 16));
}

;

var XmlParser = function () {
  function XmlParser(onEvent, onError, processNamespaces) {
    this._processNamespaces = processNamespaces;
    this._parser = new easysax.EasySAXParser();
    var that = this;

    this._parser.on("startNode", function (elem, attr, uq, tagend, str, pos) {
      var attributes = attr();

      if (attributes === true) {
        attributes = undefined;
      }

      if (attributes) {
        var key;

        for (key in attributes) {
          if (attributes.hasOwnProperty(key)) {
            attributes[key] = XmlParser._dereferenceEntities(attributes[key]);
          }
        }
      }

      var prefix = undefined;
      var namespace = undefined;
      var name = elem;

      if (that._processNamespaces) {
        var stackEntry = XmlParser._getNamespacesStackEntry(attributes);

        that._namespaceStack.push(stackEntry);

        var resolved = that._resolveNamespace(name);

        prefix = resolved.prefix;
        namespace = resolved.namespace;
        name = resolved.name;
      }

      onEvent(new ParserEvent(ParserEventType.StartElement, pos(), prefix, namespace, name, attributes, undefined));
    });

    this._parser.on("textNode", function (text, uq, pos) {
      var data = uq(XmlParser._dereferenceEntities(text));
      onEvent(new ParserEvent(ParserEventType.Text, pos(), undefined, undefined, undefined, undefined, data));
    });

    this._parser.on("endNode", function (elem, uq, tagstart, str, pos) {
      var prefix = undefined;
      var namespace = undefined;
      var name = elem;

      if (that._processNamespaces) {
        var resolved = that._resolveNamespace(name);

        prefix = resolved.prefix;
        namespace = resolved.namespace;
        name = resolved.name;
      }

      onEvent(new ParserEvent(ParserEventType.EndElement, pos(), prefix, namespace, name, undefined, undefined));

      if (that._processNamespaces) {
        that._namespaceStack.pop();
      }
    });

    this._parser.on("cdata", function (data, res, pos) {
      onEvent(new ParserEvent(ParserEventType.CDATA, pos(), undefined, undefined, undefined, undefined, data));
    });

    this._parser.on("comment", function (text, uq, pos) {
      onEvent(new ParserEvent(ParserEventType.Comment, pos(), undefined, undefined, undefined, undefined, text));
    });

    if (onError) {
      this._parser.on("error", function (msg, pos) {
        onError(new Error(msg), pos());
      });
    }
  }

  Object.defineProperty(XmlParser.prototype, "angularSyntax", {
    get: function get() {
      return this._parser.angularSyntax;
    },
    set: function set(value) {
      this._parser.angularSyntax = value;
    },
    enumerable: true,
    configurable: true
  });

  XmlParser.prototype.parse = function (xmlString) {
    if (this._processNamespaces) {
      this._namespaceStack = [];
    }

    this._parser.parse(xmlString);
  };

  XmlParser._getNamespacesStackEntry = function (attributes) {
    var stackEntry = {};

    if (!attributes) {
      return stackEntry;
    }

    for (var key in attributes) {
      if (!attributes.hasOwnProperty(key)) {
        continue;
      }

      var attributeName = key;

      if (attributeName.indexOf("xmlns") !== 0) {
        continue;
      }

      var namespacePrefix = "";

      if (attributeName.indexOf(":") !== -1) {
        namespacePrefix = attributeName.split(":")[1];
      }

      stackEntry[namespacePrefix] = attributes[key];
    }

    return stackEntry;
  };

  XmlParser.prototype._resolveNamespace = function (fullName) {
    var result = {
      prefix: undefined,
      namespace: undefined,
      name: undefined
    };
    result.prefix = "";

    if (fullName.indexOf(":") !== -1) {
      var split = fullName.split(":");
      result.prefix = split[0];
      result.name = split[1];
    } else {
      result.name = fullName;
    }

    var i;
    var stackEntry;

    for (i = this._namespaceStack.length - 1; i >= 0; i--) {
      stackEntry = this._namespaceStack[i];

      for (var key in stackEntry) {
        if (!stackEntry.hasOwnProperty(key)) {
          continue;
        }

        if (result.prefix === key) {
          result.namespace = stackEntry[key];
          return result;
        }
      }
    }

    return result;
  };

  XmlParser._dereferenceEntities = function (s) {
    s = String(s);

    if (s.length > 3 && s.indexOf("&") !== -1) {
      s = s.replace(_entitySearchRegEx, _HandleAmpEntities);
    }

    return s;
  };

  return XmlParser;
}();

exports.XmlParser = XmlParser;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tslib/tslib.es6.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__extends", function() { return __extends; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return _assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__rest", function() { return __rest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__decorate", function() { return __decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__param", function() { return __param; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__metadata", function() { return __metadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__awaiter", function() { return __awaiter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__generator", function() { return __generator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__exportStar", function() { return __exportStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__values", function() { return __values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__read", function() { return __read; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spread", function() { return __spread; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__await", function() { return __await; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncGenerator", function() { return __asyncGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncDelegator", function() { return __asyncDelegator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncValues", function() { return __asyncValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__makeTemplateObject", function() { return __makeTemplateObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importStar", function() { return __importStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importDefault", function() { return __importDefault; });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */
var _extendStatics = function extendStatics(d, b) {
  _extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return _extendStatics(d, b);
};

function __extends(d, b) {
  _extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var _assign = function __assign() {
  _assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return _assign.apply(this, arguments);
};


function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function sent() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}
function __exportStar(m, exports) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
  var m = typeof Symbol === "function" && o[Symbol.iterator],
      i = 0;
  if (m) return m.call(o);
  return {
    next: function next() {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

  return ar;
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
      i,
      q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;

  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }

  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }

  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }

  function fulfill(value) {
    resume("next", value);
  }

  function reject(value) {
    resume("throw", value);
  }

  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;

  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
      i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);

  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }

  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }

  return cooked;
}
;
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result.default = mod;
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}

/***/ }),

/***/ "../node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ })

}]);